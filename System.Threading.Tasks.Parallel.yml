items:
- uid: System.Threading.Tasks.Parallel
  id: Parallel
  parent: System.Threading.Tasks
  children:
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
  - System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.Invoke(System.Action[])
  - System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
  href: System.Threading.Tasks.Parallel.yml
  name: Parallel
  fullName: System.Threading.Tasks.Parallel
  type: Class
  source:
    remote: &o0
      path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 136
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Provides support for parallel loops and regions.
  syntax:
    content: public class Parallel
    content.vb: Public Class Parallel
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  id: For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: For(Int32, Int32, Action<Int32, ParallelLoopState>)
  name.vb: For(Int32, Int32, Action(Of Int32, ParallelLoopState))
  fullName: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Action<System.Int32, System.Threading.Tasks.ParallelLoopState>)
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Action(Of System.Int32, System.Threading.Tasks.ParallelLoopState))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 558
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a for (For in Visual Basic) loop in which iterations may run in parallel and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult For(int fromInclusive, int toExclusive, Action<int, ParallelLoopState> body)
    content.vb: Public Shared Function For(fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: body
      type: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A  structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The *body* argument is null.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})
  id: For(System.Int32,System.Int32,System.Action{System.Int32})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: For(Int32, Int32, Action<Int32>)
  name.vb: For(Int32, Int32, Action(Of Int32))
  fullName: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Action<System.Int32>)
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Action(Of System.Int32))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 391
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a for (For in Visual Basic) loop in which iterations may run in parallel.
  syntax:
    content: public static ParallelLoopResult For(int fromInclusive, int toExclusive, Action<int> body)
    content.vb: Public Shared Function For(fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: body
      type: System.Action{System.Int32}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The *body* argument is null.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  id: For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: For(Int32, Int32, ParallelOptions, Action<Int32, ParallelLoopState>)
  name.vb: For(Int32, Int32, ParallelOptions, Action(Of Int32, ParallelLoopState))
  fullName: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Action<System.Int32, System.Threading.Tasks.ParallelLoopState>)
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Action(Of System.Int32, System.Threading.Tasks.ParallelLoopState))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 629
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a for (For in Visual Basic) loop in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult For(int fromInclusive, int toExclusive, ParallelOptions parallelOptions, Action<int, ParallelLoopState> body)
    content.vb: Public Shared Function For(fromInclusive As Integer, toExclusive As Integer, parallelOptions As ParallelOptions, body As Action(Of Integer, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    description: The @'System.Threading.CancellationToken' in the *parallelOptions* argument is canceled.
  - type: System.ArgumentNullException
    description: The *body* argument is null.-or-The *parallelOptions* argument is null.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.ObjectDisposedException
    description: The @'System.Threading.CancellationTokenSource' associated with the @'System.Threading.CancellationToken' in the *parallelOptions* has been disposed.
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
  id: For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: For(Int32, Int32, ParallelOptions, Action<Int32>)
  name.vb: For(Int32, Int32, ParallelOptions, Action(Of Int32))
  fullName: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Action<System.Int32>)
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Action(Of System.Int32))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 459
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a for (For in Visual Basic) loop in which iterations may run in parallel and loop options can be configured.
  syntax:
    content: public static ParallelLoopResult For(int fromInclusive, int toExclusive, ParallelOptions parallelOptions, Action<int> body)
    content.vb: Public Shared Function For(fromInclusive As Integer, toExclusive As Integer, parallelOptions As ParallelOptions, body As Action(Of Integer)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{System.Int32}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A  structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    description: The @'System.Threading.CancellationToken' in the *parallelOptions* argument is canceled.
  - type: System.ArgumentNullException
    description: The *body* argument is null.-or-The *parallelOptions* argument is null.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.ObjectDisposedException
    description: The @'System.Threading.CancellationTokenSource' associated with the @'System.Threading.CancellationToken' in the *parallelOptions* has been disposed.
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  id: For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: For(Int64, Int64, Action<Int64, ParallelLoopState>)
  name.vb: For(Int64, Int64, Action(Of Int64, ParallelLoopState))
  fullName: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Action<System.Int64, System.Threading.Tasks.ParallelLoopState>)
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Action(Of System.Int64, System.Threading.Tasks.ParallelLoopState))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 588
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a for (For in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult For(long fromInclusive, long toExclusive, Action<long, ParallelLoopState> body)
    content.vb: Public Shared Function For(fromInclusive As Long, toExclusive As Long, body As Action(Of Long, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: body
      type: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A @'System.Threading.Tasks.ParallelLoopResult' structure that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The *body* argument is null.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})
  id: For(System.Int64,System.Int64,System.Action{System.Int64})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: For(Int64, Int64, Action<Int64>)
  name.vb: For(Int64, Int64, Action(Of Int64))
  fullName: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Action<System.Int64>)
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Action(Of System.Int64))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 420
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a for (For in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel.
  syntax:
    content: public static ParallelLoopResult For(long fromInclusive, long toExclusive, Action<long> body)
    content.vb: Public Shared Function For(fromInclusive As Long, toExclusive As Long, body As Action(Of Long)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: body
      type: System.Action{System.Int64}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The *body* argument is null.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  id: For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: For(Int64, Int64, ParallelOptions, Action<Int64, ParallelLoopState>)
  name.vb: For(Int64, Int64, ParallelOptions, Action(Of Int64, ParallelLoopState))
  fullName: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Action<System.Int64, System.Threading.Tasks.ParallelLoopState>)
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Action(Of System.Int64, System.Threading.Tasks.ParallelLoopState))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 674
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a for (For in Visual Basic)  loop with 64-bit indexes in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult For(long fromInclusive, long toExclusive, ParallelOptions parallelOptions, Action<long, ParallelLoopState> body)
    content.vb: Public Shared Function For(fromInclusive As Long, toExclusive As Long, parallelOptions As ParallelOptions, body As Action(Of Long, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    description: The @'System.Threading.CancellationToken' in the *parallelOptions* argument is canceled.
  - type: System.ArgumentNullException
    description: The *body* argument is null.-or-The *parallelOptions* argument is null.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.ObjectDisposedException
    description: The @'System.Threading.CancellationTokenSource' associated with the @'System.Threading.CancellationToken' in the *parallelOptions* has been disposed.
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
  id: For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: For(Int64, Int64, ParallelOptions, Action<Int64>)
  name.vb: For(Int64, Int64, ParallelOptions, Action(Of Int64))
  fullName: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Action<System.Int64>)
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Action(Of System.Int64))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 502
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a for  (For in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and loop options can be configured.
  syntax:
    content: public static ParallelLoopResult For(long fromInclusive, long toExclusive, ParallelOptions parallelOptions, Action<long> body)
    content.vb: Public Shared Function For(fromInclusive As Long, toExclusive As Long, parallelOptions As ParallelOptions, body As Action(Of Long)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{System.Int64}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    description: The @'System.Threading.CancellationToken' in the *parallelOptions* argument is canceled.
  - type: System.ArgumentNullException
    description: The *body* argument is null.-or-The *parallelOptions* argument is null.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.ObjectDisposedException
    description: The @'System.Threading.CancellationTokenSource' associated with the @'System.Threading.CancellationToken' in the *parallelOptions* has been disposed.
- uid: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  id: For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: For<TLocal>(Int32, Int32, Func<TLocal>, Func<Int32, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  name.vb: For(Of TLocal)(Int32, Int32, Func(Of TLocal), Func(Of Int32, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(System.Int32, System.Int32, System.Func<TLocal>, System.Func<System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  fullName.vb: System.Threading.Tasks.Parallel.For(Of TLocal)(System.Int32, System.Int32, System.Func(Of TLocal), System.Func(Of System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 729
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a for (For in Visual Basic) loop with thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult For<TLocal>(int fromInclusive, int toExclusive, Func<TLocal> localInit, Func<int, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function For(Of TLocal)(fromInclusive As Integer, toExclusive As Integer, localInit As Func(Of TLocal), body As Func(Of Integer, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: localInit
      type: System.Func{{TLocal}}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: The delegate that performs a final action on the local state of each task.
    typeParameters:
    - id: TLocal
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A  structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The *body* argument is null.-or-The *localInit* argument is null.-or-The *localFinally* argument is null.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
- uid: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  id: For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: For<TLocal>(Int32, Int32, ParallelOptions, Func<TLocal>, Func<Int32, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  name.vb: For(Of TLocal)(Int32, Int32, ParallelOptions, Func(Of TLocal), Func(Of Int32, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  fullName.vb: System.Threading.Tasks.Parallel.For(Of TLocal)(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 864
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a for (For in Visual Basic)  loop with thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult For<TLocal>(int fromInclusive, int toExclusive, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<int, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function For(Of TLocal)(fromInclusive As Integer, toExclusive As Integer, parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of Integer, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: localInit
      type: System.Func{{TLocal}}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: The delegate that performs a final action on the local state of each task.
    typeParameters:
    - id: TLocal
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The *body* argument is null.-or-The *localInit* argument is null.-or-The *localFinally* argument is null.-or-The *parallelOptions* argument is null.
  - type: System.OperationCanceledException
    description: The @'System.Threading.CancellationToken' in the *parallelOptions* argument is canceled.
  - type: System.ObjectDisposedException
    description: The @'System.Threading.CancellationTokenSource' associated with the @'System.Threading.CancellationToken' in the *parallelOptions* has been disposed.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
- uid: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  id: For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: For<TLocal>(Int64, Int64, Func<TLocal>, Func<Int64, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  name.vb: For(Of TLocal)(Int64, Int64, Func(Of TLocal), Func(Of Int64, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(System.Int64, System.Int64, System.Func<TLocal>, System.Func<System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  fullName.vb: System.Threading.Tasks.Parallel.For(Of TLocal)(System.Int64, System.Int64, System.Func(Of TLocal), System.Func(Of System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 791
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a for (For in Visual Basic)  loop with 64-bit indexes and thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult For<TLocal>(long fromInclusive, long toExclusive, Func<TLocal> localInit, Func<long, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function For(Of TLocal)(fromInclusive As Long, toExclusive As Long, localInit As Func(Of TLocal), body As Func(Of Long, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: localInit
      type: System.Func{{TLocal}}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: The delegate that performs a final action on the local state of each task.
    typeParameters:
    - id: TLocal
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The *body* argument is null.-or-The *localInit* argument is null.-or-The *localFinally* argument is null.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
- uid: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  id: For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: For<TLocal>(Int64, Int64, ParallelOptions, Func<TLocal>, Func<Int64, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  name.vb: For(Of TLocal)(Int64, Int64, ParallelOptions, Func(Of TLocal), Func(Of Int64, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  fullName.vb: System.Threading.Tasks.Parallel.For(Of TLocal)(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 941
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a for (For in Visual Basic) loop with 64-bit indexes and thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult For<TLocal>(long fromInclusive, long toExclusive, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<long, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function For(Of TLocal)(fromInclusive As Long, toExclusive As Long, parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of Long, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: localInit
      type: System.Func{{TLocal}}
      description: The function delegate that returns the initial state of the local data for each thread.
    - id: body
      type: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: The delegate that performs a final action on the local state of each thread.
    typeParameters:
    - id: TLocal
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The *body* argument is null.-or-The *localInit* argument is null.-or-The *localFinally* argument is null.-or-The *parallelOptions* argument is null.
  - type: System.OperationCanceledException
    description: The @'System.Threading.CancellationToken' in the *parallelOptions* argument is canceled.
  - type: System.ObjectDisposedException
    description: The @'System.Threading.CancellationTokenSource' associated with the @'System.Threading.CancellationToken' in the *parallelOptions* has been disposed.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  id: ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(OrderablePartitioner<TSource>, Action<TSource, ParallelLoopState, Int64>)
  name.vb: ForEach(Of TSource)(OrderablePartitioner(Of TSource), Action(Of TSource, ParallelLoopState, Int64))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.OrderablePartitioner(Of TSource), System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 2409
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation on a @'System.Collections.Concurrent.OrderablePartitioner`1' in which iterations may run in parallel and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(OrderablePartitioner<TSource> source, Action<TSource, ParallelLoopState, long> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As OrderablePartitioner(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.OrderablePartitioner{{TSource}}
      description: The orderable partitioner that contains the original data source.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The *source* argument is null.-or-The *body* argument is null.
  - type: System.InvalidOperationException
    description: The @'System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions' property in the *source* orderable partitioner returns false.-or-The @'System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized' property in the source orderable partitioner returns false.-or-Any methods in the source orderable partitioner return null.
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  id: ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(OrderablePartitioner<TSource>, ParallelOptions, Action<TSource, ParallelLoopState, Int64>)
  name.vb: ForEach(Of TSource)(OrderablePartitioner(Of TSource), ParallelOptions, Action(Of TSource, ParallelLoopState, Int64))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.OrderablePartitioner(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 2817
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation on a @'System.Collections.Concurrent.OrderablePartitioner`1' in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(OrderablePartitioner<TSource> source, ParallelOptions parallelOptions, Action<TSource, ParallelLoopState, long> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As OrderablePartitioner(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.OrderablePartitioner{{TSource}}
      description: The orderable partitioner that contains the original data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    description: The @'System.Threading.CancellationToken' in the *parallelOptions* argument is canceled
  - type: System.ArgumentNullException
    description: The *source* argument is  null.-or-The *parallelOptions* argument is null.-or-The *body* argument is null.
  - type: System.ObjectDisposedException
    description: The @'System.Threading.CancellationTokenSource' associated with the @'System.Threading.CancellationToken' in the *parallelOptions* has been disposed.
  - type: System.InvalidOperationException
    description: The @'System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions' property in the *source* orderable partitioner returns false.-or-The @'System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized' property in the *source* orderable partitioner returns false.-or-The exception that is thrown when any methods in the *source* orderable partitioner return null.
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(Partitioner<TSource>, Action<TSource, ParallelLoopState>)
  name.vb: ForEach(Of TSource)(Partitioner(Of TSource), Action(Of TSource, ParallelLoopState))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Action<TSource, System.Threading.Tasks.ParallelLoopState>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.Partitioner(Of TSource), System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 2347
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation on a @'System.Collections.Concurrent.Partitioner' in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(Partitioner<TSource> source, Action<TSource, ParallelLoopState> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As Partitioner(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: The partitioner that contains the original data source.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The *source* argument is null.-or-The *body* argument is null.
  - type: System.InvalidOperationException
    description: The @'System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions' property in the *source* partitioner returns false.-or-A method in the *source* partitioner returns null.-or-The @'System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)' method in the *source* partitioner does not return the correct number of partitions.
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})
  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(Partitioner<TSource>, Action<TSource>)
  name.vb: ForEach(Of TSource)(Partitioner(Of TSource), Action(Of TSource))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Action<TSource>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.Partitioner(Of TSource), System.Action(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 2288
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation on a @'System.Collections.Concurrent.Partitioner' in which iterations may run in parallel.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(Partitioner<TSource> source, Action<TSource> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As Partitioner(Of TSource), body As Action(Of TSource)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: The partitioner that contains the original data source.
    - id: body
      type: System.Action{{TSource}}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The *source* argument is  null.-or-The *body* argument is null.
  - type: System.InvalidOperationException
    description: The @'System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions' property in the *source* partitioner returns false.-or-The exception that is thrown when any methods in the *source* partitioner return null.-or-The @'System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)' method in the *source* partitioner does not return the correct number of partitions.
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource, ParallelLoopState>)
  name.vb: ForEach(Of TSource)(Partitioner(Of TSource), ParallelOptions, Action(Of TSource, ParallelLoopState))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.Partitioner(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 2739
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation on a @'System.Collections.Concurrent.Partitioner' in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(Partitioner<TSource> source, ParallelOptions parallelOptions, Action<TSource, ParallelLoopState> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As Partitioner(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: The partitioner that contains the original data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A  structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    description: The @'System.Threading.CancellationToken' in the *parallelOptions* argument is canceled.
  - type: System.ObjectDisposedException
    description: The @'System.Threading.CancellationTokenSource' associated with the @'System.Threading.CancellationToken' in the *parallelOptions* has been disposed.
  - type: System.ArgumentNullException
    description: The *source* argument is null.-or-The *parallelOptions* argument is null.-or-The *body* argument is null.
  - type: System.InvalidOperationException
    description: The @'System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions' property in the *source* partitioner returns false.-or-The exception that is thrown when any methods in the *source* partitioner return null.
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(Partitioner<TSource>, ParallelOptions, Action<TSource>)
  name.vb: ForEach(Of TSource)(Partitioner(Of TSource), ParallelOptions, Action(Of TSource))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.Partitioner(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 2664
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation on a @'System.Collections.Concurrent.Partitioner' in which iterations may run in parallel and loop options can be configured.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(Partitioner<TSource> source, ParallelOptions parallelOptions, Action<TSource> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As Partitioner(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: The partitioner that contains the original data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{{TSource}}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    description: The @'System.Threading.CancellationToken' in the *parallelOptions* argument is canceled.
  - type: System.ObjectDisposedException
    description: The @'System.Threading.CancellationTokenSource' associated with the @'System.Threading.CancellationToken' in the *parallelOptions* has been disposed.
  - type: System.ArgumentNullException
    description: The *source* argument is null.-or-The *parallelOptions* argument is null.-or-The *body* argument is null.
  - type: System.InvalidOperationException
    description: The @'System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions' property in the *source* partitioner returns false.-or-The exception that is thrown when any methods in the *source* partitioner return null.
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(IEnumerable<TSource>, Action<TSource, ParallelLoopState, Int64>)
  name.vb: ForEach(Of TSource)(IEnumerable(Of TSource), Action(Of TSource, ParallelLoopState, Int64))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 1703
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation with 64-bit indexes on an @'System.Collections.IEnumerable' in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, Action<TSource, ParallelLoopState, long> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The *source* argument is null.-or-The *body* argument is null.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(IEnumerable<TSource>, Action<TSource, ParallelLoopState>)
  name.vb: ForEach(Of TSource)(IEnumerable(Of TSource), Action(Of TSource, ParallelLoopState))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Action<TSource, System.Threading.Tasks.ParallelLoopState>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 1616
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation on an @'System.Collections.IEnumerable' in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, Action<TSource, ParallelLoopState> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The *source* argument is null.-or-The *body* argument is null.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(IEnumerable<TSource>, Action<TSource>)
  name.vb: ForEach(Of TSource)(IEnumerable(Of TSource), Action(Of TSource))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Action<TSource>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Action(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 1531
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation on an @'System.Collections.IEnumerable' in which iterations may run in parallel.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, Action<TSource> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As IEnumerable(Of TSource), body As Action(Of TSource)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: body
      type: System.Action{{TSource}}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The *source* argument is null.-or-The *body* argument is null.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource, ParallelLoopState, Int64>)
  name.vb: ForEach(Of TSource)(IEnumerable(Of TSource), ParallelOptions, Action(Of TSource, ParallelLoopState, Int64))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 1750
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation with 64-bit indexes on an @'System.Collections.IEnumerable' in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Action<TSource, ParallelLoopState, long> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As IEnumerable(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    description: The @'System.Threading.CancellationToken' in the *parallelOptions* argument is canceled
  - type: System.ArgumentNullException
    description: The *source* argument is null.-or-The *parallelOptions* argument is null.-or-The *body* argument is null.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.ObjectDisposedException
    description: The @'System.Threading.CancellationTokenSource' associated with the @'System.Threading.CancellationToken' in the *parallelOptions* has been disposed.
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource, ParallelLoopState>)
  name.vb: ForEach(Of TSource)(IEnumerable(Of TSource), ParallelOptions, Action(Of TSource, ParallelLoopState))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 1663
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation on an @'System.Collections.IEnumerable' in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Action<TSource, ParallelLoopState> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As IEnumerable(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    description: The @'System.Threading.CancellationToken' in the *parallelOptions* argument is canceled
  - type: System.ArgumentNullException
    description: The *source* argument is null.-or-The *parallelOptions* argument is null.-or-The *body* argument is null.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.ObjectDisposedException
    description: The @'System.Threading.CancellationTokenSource' associated with the @'System.Threading.CancellationToken' in the *parallelOptions* has been disposed.
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource>)
  name.vb: ForEach(Of TSource)(IEnumerable(Of TSource), ParallelOptions, Action(Of TSource))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 1576
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation on an @'System.Collections.IEnumerable' in which iterations may run in parallel and loop options can be configured.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Action<TSource> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As IEnumerable(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{{TSource}}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    description: The @'System.Threading.CancellationToken' in the *parallelOptions* argument is canceled
  - type: System.ArgumentNullException
    description: The *source* argument is null.-or-The *parallelOptions* argument is null.-or-The *body* argument is null.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.ObjectDisposedException
    description: The @'System.Threading.CancellationTokenSource' associated with the @'System.Threading.CancellationToken' in the *parallelOptions* has been disposed.
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource, TLocal>(OrderablePartitioner<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)
  name.vb: ForEach(Of TSource, TLocal)(OrderablePartitioner(Of TSource), Func(Of TLocal), Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal), Action(Of TLocal))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal>, System.Action<TLocal>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Concurrent.OrderablePartitioner(Of TSource), System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal), System.Action(Of TLocal))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 2581
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation with thread-local data on a @'System.Collections.Concurrent.OrderablePartitioner`1' in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(OrderablePartitioner<TSource> source, Func<TLocal> localInit, Func<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As OrderablePartitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.OrderablePartitioner{{TSource}}
      description: The orderable partitioner that contains the original data source.
    - id: localInit
      type: System.Func{{TLocal}}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: The delegate that performs a final action on the local state of each task.
    typeParameters:
    - id: TSource
    - id: TLocal
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The *source* argument is null.-or-The *body* argument is null.-or-The *localInit* argument is null.-or-The *localFinally* argument is null.
  - type: System.InvalidOperationException
    description: The @'System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions' property in the *source*@'System.Collections.Concurrent.Partitioner' returns false or the partitioner returns null partitions.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource, TLocal>(OrderablePartitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)
  name.vb: ForEach(Of TSource, TLocal)(OrderablePartitioner(Of TSource), ParallelOptions, Func(Of TLocal), Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal), Action(Of TLocal))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal>, System.Action<TLocal>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Concurrent.OrderablePartitioner(Of TSource), System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal), System.Action(Of TLocal))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 3021
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation with 64-bit indexes and  with thread-local data on a @'System.Collections.Concurrent.OrderablePartitioner`1' in which iterations may run in parallel , loop options can be configured, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(OrderablePartitioner<TSource> source, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As OrderablePartitioner(Of TSource), parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.OrderablePartitioner{{TSource}}
      description: The orderable partitioner that contains the original data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: localInit
      type: System.Func{{TLocal}}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: The delegate that performs a final action on the local state of each task.
    typeParameters:
    - id: TSource
    - id: TLocal
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The *source* argument is null.-or-The *parallelOptions* argument is null.-or-The *body* argument is null.-or-The *localInit* or *localFinally* argument is null.
  - type: System.InvalidOperationException
    description: The @'System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions' property in the *source*@'System.Collections.Concurrent.Partitioner' returns false or the partitioner returns null  partitions.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.OperationCanceledException
    description: The @'System.Threading.CancellationToken' in the *parallelOptions* argument is canceled.
  - type: System.ObjectDisposedException
    description: The @'System.Threading.CancellationTokenSource' associated with the @'System.Threading.CancellationToken' in the *parallelOptions* has been disposed.
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource, TLocal>(Partitioner<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  name.vb: ForEach(Of TSource, TLocal)(Partitioner(Of TSource), Func(Of TLocal), Func(Of TSource, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Concurrent.Partitioner<TSource>, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Concurrent.Partitioner(Of TSource), System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 2491
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation with thread-local data on a @'System.Collections.Concurrent.Partitioner' in which iterations may run in parallel and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(Partitioner<TSource> source, Func<TLocal> localInit, Func<TSource, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As Partitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: The partitioner that contains the original data source.
    - id: localInit
      type: System.Func{{TLocal}}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: The delegate that performs a final action on the local state of each task.
    typeParameters:
    - id: TSource
    - id: TLocal
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The *source* argument is null.-or-The *body* argument is null.-or-The *localInit* argument is null.-or-The *localFinally* argument is null.
  - type: System.InvalidOperationException
    description: The @'System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions' property in the *source*@'System.Collections.Concurrent.Partitioner' returns false or the partitioner returns null partitions.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource, TLocal>(Partitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  name.vb: ForEach(Of TSource, TLocal)(Partitioner(Of TSource), ParallelOptions, Func(Of TLocal), Func(Of TSource, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Concurrent.Partitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Concurrent.Partitioner(Of TSource), System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 2915
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation  with thread-local data on a @'System.Collections.Concurrent.Partitioner' in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(Partitioner<TSource> source, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As Partitioner(Of TSource), parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: The partitioner that contains the original data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: localInit
      type: System.Func{{TLocal}}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: The delegate that performs a final action on the local state of each task.
    typeParameters:
    - id: TSource
    - id: TLocal
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The *source* argument is null.-or-The *parallelOptions* argument is null.-or-The *body* argument is null.-or-The *localInit* argument is null.-or-The *localFinally* argument is null.
  - type: System.InvalidOperationException
    description: The @'System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions' property in the *source*@'System.Collections.Concurrent.Partitioner' returns false or the partitioner returns null partitions.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.OperationCanceledException
    description: The @'System.Threading.CancellationToken' in the *parallelOptions* argument is canceled.
  - type: System.ObjectDisposedException
    description: The @'System.Threading.CancellationTokenSource' associated with the @'System.Threading.CancellationToken' in the *parallelOptions* has been disposed.
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource, TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  name.vb: ForEach(Of TSource, TLocal)(IEnumerable(Of TSource), Func(Of TLocal), Func(Of TSource, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 1810
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation with thread-local data on an @'System.Collections.IEnumerable' in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(IEnumerable<TSource> source, Func<TLocal> localInit, Func<TSource, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: localInit
      type: System.Func{{TLocal}}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: The delegate that performs a final action on the local state of each task.
    typeParameters:
    - id: TSource
    - id: TLocal
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The *source* argument is null.-or-The *body* argument is null.-or-The *localInit* argument is null.-or-The *localFinally* argument is null.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource, TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)
  name.vb: ForEach(Of TSource, TLocal)(IEnumerable(Of TSource), Func(Of TLocal), Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal), Action(Of TLocal))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal>, System.Action<TLocal>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal), System.Action(Of TLocal))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 1956
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation with thread-local data on an @'System.Collections.IEnumerable' in which iterations may run in parallel and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(IEnumerable<TSource> source, Func<TLocal> localInit, Func<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: localInit
      type: System.Func{{TLocal}}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: The delegate that performs a final action on the local state of each task.
    typeParameters:
    - id: TSource
    - id: TLocal
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The *source* argument is null.-or-The *body* argument is null.-or-The *localInit* argument is null.-or-The *localFinally* argument is null.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource, TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  name.vb: ForEach(Of TSource, TLocal)(IEnumerable(Of TSource), ParallelOptions, Func(Of TLocal), Func(Of TSource, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Generic.IEnumerable(Of TSource), System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 1886
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation with thread-local data on an @'System.Collections.IEnumerable' in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated..
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As IEnumerable(Of TSource), parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: localInit
      type: System.Func{{TLocal}}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: The delegate that performs a final action on the local state of each task.
    typeParameters:
    - id: TSource
    - id: TLocal
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The *source* argument is null.-or-The *parallelOptions* argument is null.-or-The *body* argument is null.-or-The *localInit* argument is null.-or-The *localFinally* argument is null.
  - type: System.OperationCanceledException
    description: The @'System.Threading.CancellationToken' in the *parallelOptions* argument is canceled.
  - type: System.ObjectDisposedException
    description: The @'System.Threading.CancellationTokenSource' associated with the @'System.Threading.CancellationToken' in the *parallelOptions* has been disposed.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: ForEach<TSource, TLocal>(IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)
  name.vb: ForEach(Of TSource, TLocal)(IEnumerable(Of TSource), ParallelOptions, Func(Of TLocal), Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal), Action(Of TLocal))
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal>, System.Action<TLocal>)
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Generic.IEnumerable(Of TSource), System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal), System.Action(Of TLocal))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 2032
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation with thread-local data and 64-bit indexes on an @'System.Collections.IEnumerable' in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(IEnumerable<TSource> source, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As IEnumerable(Of TSource), parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: localInit
      type: System.Func{{TLocal}}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: The delegate that performs a final action on the local state of each task.
    typeParameters:
    - id: TSource
    - id: TLocal
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    description: The *source* argument is null.-or-The *parallelOptions* argument is null.-or-The *body* argument is null.-or-The *localInit* argument is null.-or-The *localFinally* argument is null.
  - type: System.OperationCanceledException
    description: The @'System.Threading.CancellationToken' in the *parallelOptions* argument is canceled.
  - type: System.ObjectDisposedException
    description: The @'System.Threading.CancellationTokenSource' associated with the @'System.Threading.CancellationToken' in the *parallelOptions* has been disposed.
  - type: System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
- uid: System.Threading.Tasks.Parallel.Invoke(System.Action[])
  id: Invoke(System.Action[])
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: Invoke(Action[])
  name.vb: Invoke(Action())
  fullName: System.Threading.Tasks.Parallel.Invoke(System.Action[])
  fullName.vb: System.Threading.Tasks.Parallel.Invoke(System.Action())
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 164
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes each of the provided actions, possibly in parallel.
  syntax:
    content: public static void Invoke(params Action[] actions)
    content.vb: Public Shared Sub Invoke(ParamArray actions As Action())
    parameters:
    - id: actions
      type: System.Action[]
      description: An array of @'System.Action' to execute.
  exceptions:
  - type: System.ArgumentNullException
    description: The *actions* argument is null.
  - type: System.AggregateException
    description: The exception that is thrown when any action in the *actions* array throws an exception.
  - type: System.ArgumentException
    description: The *actions* array contains a null element.
- uid: System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
  id: Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
  parent: System.Threading.Tasks.Parallel
  href: System.Threading.Tasks.Parallel.yml
  name: Invoke(ParallelOptions, Action[])
  name.vb: Invoke(ParallelOptions, Action())
  fullName: System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions, System.Action[])
  fullName.vb: System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions, System.Action())
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/Parallel.cs
    startLine: 197
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes each of the provided actions, possibly in parallel, unless the operation is cancelled by the user.
  syntax:
    content: public static void Invoke(ParallelOptions parallelOptions, params Action[] actions)
    content.vb: Public Shared Sub Invoke(parallelOptions As ParallelOptions, ParamArray actions As Action())
    parameters:
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: actions
      type: System.Action[]
      description: An array of actions to execute.
  exceptions:
  - type: System.OperationCanceledException
    description: The @'System.Threading.CancellationToken' in the *parallelOptions* is set.
  - type: System.ArgumentNullException
    description: The *actions* argument is null.-or-The *parallelOptions* argument is null.
  - type: System.AggregateException
    description: The exception that is thrown when any action in the *actions* array throws an exception.
  - type: System.ArgumentException
    description: The *actions* array contains a null element.
  - type: System.ObjectDisposedException
    description: The @'System.Threading.CancellationTokenSource' associated with the @'System.Threading.CancellationToken' in the *parallelOptions* has been disposed.
references:
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
  type: Class
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Int32
  parent: System
  isExternal: false
  href: System.Int32.yml
  name: Int32
  fullName: System.Int32
  type: Struct
- uid: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}
  parent: System
  definition: System.Action`2
  href: System.Threading.Tasks.ParallelLoopState.yml
  name: Action<Int32, ParallelLoopState>
  name.vb: Action(Of Int32, ParallelLoopState)
  fullName: System.Action<System.Int32, System.Threading.Tasks.ParallelLoopState>
  fullName.vb: System.Action(Of System.Int32, System.Threading.Tasks.ParallelLoopState)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: )
    fullName: )
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.ParallelLoopResult.yml
  name: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
  type: Struct
- uid: System.Action`2
  parent: System
  isExternal: false
  href: System.Action`2.yml
  name: Action<T1, T2>
  name.vb: Action(Of T1, T2)
  fullName: System.Action<T1, T2>
  fullName.vb: System.Action(Of T1, T2)
  type: Delegate
  spec.csharp:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    href: System.Action`2.yml
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    href: System.Action`2.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: )
    fullName: )
- uid: System.Action{System.Int32}
  parent: System
  definition: System.Action`1
  name: Action<Int32>
  name.vb: Action(Of Int32)
  fullName: System.Action<System.Int32>
  fullName.vb: System.Action(Of System.Int32)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Action`1
  parent: System
  isExternal: false
  href: System.Action`1.yml
  name: Action<T>
  name.vb: Action(Of T)
  fullName: System.Action<T>
  fullName.vb: System.Action(Of T)
  type: Delegate
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    href: System.Action`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    href: System.Action`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Threading.Tasks.ParallelOptions
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.ParallelOptions.yml
  name: ParallelOptions
  fullName: System.Threading.Tasks.ParallelOptions
  type: Class
- uid: System.Int64
  parent: System
  isExternal: false
  href: System.Int64.yml
  name: Int64
  fullName: System.Int64
  type: Struct
- uid: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}
  parent: System
  definition: System.Action`2
  href: System.Threading.Tasks.ParallelLoopState.yml
  name: Action<Int64, ParallelLoopState>
  name.vb: Action(Of Int64, ParallelLoopState)
  fullName: System.Action<System.Int64, System.Threading.Tasks.ParallelLoopState>
  fullName.vb: System.Action(Of System.Int64, System.Threading.Tasks.ParallelLoopState)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: )
    fullName: )
- uid: System.Action{System.Int64}
  parent: System
  definition: System.Action`1
  name: Action<Int64>
  name.vb: Action(Of Int64)
  fullName: System.Action<System.Int64>
  fullName.vb: System.Action(Of System.Int64)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TLocal}}
  parent: System
  definition: System.Func`1
  name: Func<TLocal>
  name.vb: Func(Of TLocal)
  fullName: System.Func<TLocal>
  fullName.vb: System.Func(Of TLocal)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TLocal
    fullName: TLocal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TLocal
    fullName: TLocal
  - name: )
    fullName: )
- uid: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
  parent: System
  definition: System.Func`4
  href: System.Threading.Tasks.ParallelLoopState.yml
  name: Func<Int32, ParallelLoopState, TLocal, TLocal>
  name.vb: Func(Of Int32, ParallelLoopState, TLocal, TLocal)
  fullName: System.Func<System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>
  fullName.vb: System.Func(Of System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: )
    fullName: )
- uid: System.Action{{TLocal}}
  parent: System
  definition: System.Action`1
  name: Action<TLocal>
  name.vb: Action(Of TLocal)
  fullName: System.Action<TLocal>
  fullName.vb: System.Action(Of TLocal)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - name: TLocal
    fullName: TLocal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TLocal
    fullName: TLocal
  - name: )
    fullName: )
- uid: System.Func`1
  parent: System
  isExternal: false
  href: System.Func`1.yml
  name: Func<TResult>
  name.vb: Func(Of TResult)
  fullName: System.Func<TResult>
  fullName.vb: System.Func(Of TResult)
  type: Delegate
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    href: System.Func`1.yml
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    href: System.Func`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func`4
  parent: System
  isExternal: false
  href: System.Func`4.yml
  name: Func<T1, T2, T3, TResult>
  name.vb: Func(Of T1, T2, T3, TResult)
  fullName: System.Func<T1, T2, T3, TResult>
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  type: Delegate
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    href: System.Func`4.yml
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    href: System.Func`4.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
  parent: System
  definition: System.Func`4
  href: System.Threading.Tasks.ParallelLoopState.yml
  name: Func<Int64, ParallelLoopState, TLocal, TLocal>
  name.vb: Func(Of Int64, ParallelLoopState, TLocal, TLocal)
  fullName: System.Func<System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>
  fullName.vb: System.Func(Of System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.OrderablePartitioner{{TSource}}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.OrderablePartitioner`1
  href: System.Collections.Concurrent.OrderablePartitioner`1.yml
  name: OrderablePartitioner<TSource>
  name.vb: OrderablePartitioner(Of TSource)
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource)
  spec.csharp:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
    href: System.Collections.Concurrent.OrderablePartitioner`1.yml
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
    href: System.Collections.Concurrent.OrderablePartitioner`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64}
  parent: System
  definition: System.Action`3
  href: System.Threading.Tasks.ParallelLoopState.yml
  name: Action<TSource, ParallelLoopState, Int64>
  name.vb: Action(Of TSource, ParallelLoopState, Int64)
  fullName: System.Action<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64>
  fullName.vb: System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.OrderablePartitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  href: System.Collections.Concurrent.OrderablePartitioner`1.yml
  name: OrderablePartitioner<TSource>
  name.vb: OrderablePartitioner(Of TSource)
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource)
  type: Class
  spec.csharp:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
    href: System.Collections.Concurrent.OrderablePartitioner`1.yml
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
    href: System.Collections.Concurrent.OrderablePartitioner`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
  type: Namespace
- uid: System.Action`3
  parent: System
  isExternal: false
  href: System.Action`3.yml
  name: Action<T1, T2, T3>
  name.vb: Action(Of T1, T2, T3)
  fullName: System.Action<T1, T2, T3>
  fullName.vb: System.Action(Of T1, T2, T3)
  type: Delegate
  spec.csharp:
  - uid: System.Action`3
    name: Action
    fullName: System.Action
    href: System.Action`3.yml
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    fullName: System.Action
    href: System.Action`3.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.Partitioner{{TSource}}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.Partitioner`1
  href: System.Collections.Concurrent.Partitioner`1.yml
  name: Partitioner<TSource>
  name.vb: Partitioner(Of TSource)
  fullName: System.Collections.Concurrent.Partitioner<TSource>
  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource)
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Partitioner
    fullName: System.Collections.Concurrent.Partitioner
    href: System.Collections.Concurrent.Partitioner`1.yml
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Partitioner
    fullName: System.Collections.Concurrent.Partitioner
    href: System.Collections.Concurrent.Partitioner`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState}
  parent: System
  definition: System.Action`2
  href: System.Threading.Tasks.ParallelLoopState.yml
  name: Action<TSource, ParallelLoopState>
  name.vb: Action(Of TSource, ParallelLoopState)
  fullName: System.Action<TSource, System.Threading.Tasks.ParallelLoopState>
  fullName.vb: System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.Partitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  href: System.Collections.Concurrent.Partitioner`1.yml
  name: Partitioner<TSource>
  name.vb: Partitioner(Of TSource)
  fullName: System.Collections.Concurrent.Partitioner<TSource>
  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource)
  type: Class
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Partitioner
    fullName: System.Collections.Concurrent.Partitioner
    href: System.Collections.Concurrent.Partitioner`1.yml
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Partitioner
    fullName: System.Collections.Concurrent.Partitioner
    href: System.Collections.Concurrent.Partitioner`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Action{{TSource}}
  parent: System
  definition: System.Action`1
  name: Action<TSource>
  name.vb: Action(Of TSource)
  fullName: System.Action<TSource>
  fullName.vb: System.Action(Of TSource)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TSource>
  name.vb: IEnumerable(Of TSource)
  fullName: System.Collections.Generic.IEnumerable<TSource>
  fullName.vb: System.Collections.Generic.IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.IEnumerable`1.yml
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  type: Interface
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
  type: Namespace
- uid: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64,{TLocal},{TLocal}}
  parent: System
  definition: System.Func`5
  href: System.Threading.Tasks.ParallelLoopState.yml
  name: Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>
  name.vb: Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal)
  fullName: System.Func<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal>
  fullName.vb: System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: )
    fullName: )
- uid: System.Func`5
  parent: System
  isExternal: false
  href: System.Func`5.yml
  name: Func<T1, T2, T3, T4, TResult>
  name.vb: Func(Of T1, T2, T3, T4, TResult)
  fullName: System.Func<T1, T2, T3, T4, TResult>
  fullName.vb: System.Func(Of T1, T2, T3, T4, TResult)
  type: Delegate
  spec.csharp:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    href: System.Func`5.yml
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    href: System.Func`5.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
  parent: System
  definition: System.Func`4
  href: System.Threading.Tasks.ParallelLoopState.yml
  name: Func<TSource, ParallelLoopState, TLocal, TLocal>
  name.vb: Func(Of TSource, ParallelLoopState, TLocal, TLocal)
  fullName: System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>
  fullName.vb: System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
    href: System.Threading.Tasks.ParallelLoopState.yml
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: )
    fullName: )
- uid: System.Action[]
  isExternal: true
  name: Action[]
  name.vb: Action()
  fullName: System.Action[]
  fullName.vb: System.Action()
  spec.csharp:
  - uid: System.Action
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Action
    name: Action
    fullName: System.Action
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.ArgumentNullException
  isExternal: false
  href: System.ArgumentNullException.yml
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  type: Class
  summary: The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
- uid: System.AggregateException
  parent: System
  isExternal: false
  href: System.AggregateException.yml
  name: AggregateException
  fullName: System.AggregateException
  type: Class
  summary: Represents one or more errors that occur during application execution.
- uid: System.OperationCanceledException
  parent: System
  isExternal: false
  href: System.OperationCanceledException.yml
  name: OperationCanceledException
  fullName: System.OperationCanceledException
  type: Class
  summary: The exception that is thrown in a thread upon cancellation of an operation that the thread was executing.
- uid: System.ObjectDisposedException
  isExternal: false
  href: System.ObjectDisposedException.yml
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
  type: Class
  summary: The exception that is thrown when an operation is performed on a disposed object.
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  href: System.InvalidOperationException.yml
  name: InvalidOperationException
  fullName: System.InvalidOperationException
  type: Class
  summary: The exception that is thrown when a method call is invalid for the object's current state.
- uid: System.ArgumentException
  parent: System
  isExternal: false
  href: System.ArgumentException.yml
  name: ArgumentException
  fullName: System.ArgumentException
  type: Class
  summary: The exception that is thrown when one of the arguments provided to a method is not valid.
