items:
- uid: System.Action`6
  commentId: T:System.Action`6
  id: Action`6
  parent: System
  children: []
  langs:
  - csharp
  - vb
  name: Action<T1, T2, T3, T4, T5, T6>
  nameWithType: Action<T1, T2, T3, T4, T5, T6>
  fullName: System.Action<T1, T2, T3, T4, T5, T6>
  type: Delegate
  source:
    remote:
      path: src/mscorlib/src/System/Action.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Action
    path: src/mscorlib/src/System/Action.cs
    startLine: 79
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Encapsulates a method that has six parameters and does not return a value.</p>\n"
  remarks: "\n<p>You can use the <xref href=\"System.Action`6\" data-throw-if-not-resolved=\"false\"></xref> delegate to pass a method as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have six parameters that are all passed to it by value, and it must not return a value. (In C#, the method must return <strong>void</strong>. In Visual Basic, it must be defined by the <strong>Sub</strong>â€¦<strong>End Sub</strong> construct. It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.</p>\n<p>To reference a method that has six parameters and returns a value, use the generic <xref href=\"System.Func`7\" data-throw-if-not-resolved=\"false\"></xref> delegate instead.</p>\n<p>You can also use the <xref href=\"System.Action`6\" data-throw-if-not-resolved=\"false\"></xref> delegate with anonymous methods and lambda expressions.</p>\n"
  syntax:
    content: public delegate void Action<in T1, in T2, in T3, in T4, in T5, in T6>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    content.vb: Public Delegate Sub Action(Of In T1, In T2, In T3, In T4, In T5, In T6)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6)
    parameters:
    - id: arg1
      type: '{T1}'
      description: "\n<p>The first parameter of the method that this delegate encapsulates.</p>\n"
    - id: arg2
      type: '{T2}'
      description: "\n<p>The second parameter of the method that this delegate encapsulates.</p>\n"
    - id: arg3
      type: '{T3}'
      description: "\n<p>The third parameter of the method that this delegate encapsulates.</p>\n"
    - id: arg4
      type: '{T4}'
      description: "\n<p>The fourth parameter of the method that this delegate encapsulates.</p>\n"
    - id: arg5
      type: '{T5}'
      description: "\n<p>The fifth parameter of the method that this delegate encapsulates.</p>\n"
    - id: arg6
      type: '{T6}'
      description: "\n<p>The sixth parameter of the method that this delegate encapsulates.</p>\n"
    typeParameters:
    - id: T1
      description: "\n<p>The type of the first parameter of the method that this delegate encapsulates.</p>\n"
    - id: T2
      description: "\n<p>The type of the second parameter of the method that this delegate encapsulates.</p>\n"
    - id: T3
      description: "\n<p>The type of the third parameter of the method that this delegate encapsulates.</p>\n"
    - id: T4
      description: "\n<p>The type of the fourth parameter of the method that this delegate encapsulates.</p>\n"
    - id: T5
      description: "\n<p>The type of the fifth parameter of the method that this delegate encapsulates.</p>\n"
    - id: T6
      description: "\n<p>The type of the sixth parameter of the method that this delegate encapsulates.</p>\n"
  seealso:
  - type: System.Func`7
    commentId: T:System.Func`7
  extensionMethods:
  - System.Delegate.System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  nameWithType.vb: Action(Of T1, T2, T3, T4, T5, T6)
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
  fullName.vb: System.Action(Of T1, T2, T3, T4, T5, T6)
  name.vb: Action(Of T1, T2, T3, T4, T5, T6)
references:
- uid: System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
  commentId: N:System
- uid: System.Delegate.System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  parent: System.Reflection.RuntimeReflectionExtensions
  definition: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  name: GetMethodInfo()
  nameWithType: RuntimeReflectionExtensions.GetMethodInfo()
  fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo()
  spec.csharp:
  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
    name: GetMethodInfo
    nameWithType: RuntimeReflectionExtensions.GetMethodInfo
    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
    name: GetMethodInfo
    nameWithType: RuntimeReflectionExtensions.GetMethodInfo
    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
- uid: '{T1}'
  definition: T1
  name: T1
  nameWithType: T1
  fullName: T1
  commentId: '!:T1'
- uid: '{T2}'
  definition: T2
  name: T2
  nameWithType: T2
  fullName: T2
  commentId: '!:T2'
- uid: '{T3}'
  definition: T3
  name: T3
  nameWithType: T3
  fullName: T3
  commentId: '!:T3'
- uid: '{T4}'
  definition: T4
  name: T4
  nameWithType: T4
  fullName: T4
  commentId: '!:T4'
- uid: '{T5}'
  definition: T5
  name: T5
  nameWithType: T5
  fullName: T5
  commentId: '!:T5'
- uid: '{T6}'
  definition: T6
  name: T6
  nameWithType: T6
  fullName: T6
  commentId: '!:T6'
- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  isExternal: true
  name: GetMethodInfo(Delegate)
  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  spec.csharp:
  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
    name: GetMethodInfo
    nameWithType: RuntimeReflectionExtensions.GetMethodInfo
    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Delegate
    name: Delegate
    nameWithType: Delegate
    fullName: System.Delegate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
    name: GetMethodInfo
    nameWithType: RuntimeReflectionExtensions.GetMethodInfo
    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Delegate
    name: Delegate
    nameWithType: Delegate
    fullName: System.Delegate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
- uid: System.Reflection.RuntimeReflectionExtensions
  parent: System.Reflection
  isExternal: false
  name: RuntimeReflectionExtensions
  nameWithType: RuntimeReflectionExtensions
  fullName: System.Reflection.RuntimeReflectionExtensions
  commentId: T:System.Reflection.RuntimeReflectionExtensions
- uid: T1
  isExternal: false
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T2
  isExternal: false
  name: T2
  nameWithType: T2
  fullName: T2
- uid: T3
  isExternal: false
  name: T3
  nameWithType: T3
  fullName: T3
- uid: T4
  isExternal: false
  name: T4
  nameWithType: T4
  fullName: T4
- uid: T5
  isExternal: false
  name: T5
  nameWithType: T5
  fullName: T5
- uid: T6
  isExternal: false
  name: T6
  nameWithType: T6
  fullName: T6
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
  commentId: N:System.Reflection
