items:
- uid: System.Func`1
  commentId: T:System.Func`1
  id: Func`1
  parent: System
  children: []
  langs:
  - csharp
  - vb
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  type: Delegate
  source:
    remote:
      path: src/mscorlib/src/System/Action.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Func
    path: src/mscorlib/src/System/Action.cs
    startLine: 43
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Encapsulates a method that has no parameters and returns a value of the type specified by the <em>TResult</em> parameter.</p>\n"
  remarks: "\n<p>You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have no parameters and must return a value.</p>\n<p>To reference a method that has no parameters and returns <strong>void</strong> (or in Visual Basic, that is declared as a <strong>Sub</strong> rather than as a <strong>Function</strong>), use the <xref href=\"System.Action\" data-throw-if-not-resolved=\"false\"></xref> delegate instead. </p>\n<p>When you use the <xref href=\"System.Func`1\" data-throw-if-not-resolved=\"false\"></xref> delegate, you do not have to explicitly define a delegate that encapsulates a parameterless method. For example, the following code explicitly declares a delegate named <code>WriteMethod</code> and assigns a reference to the <code>OutputTarget.SendToFile</code> instance method to its delegate instance. </p>System.Func~1#1<p>The following example simplifies this code by instantiating the <xref href=\"System.Func`1\" data-throw-if-not-resolved=\"false\"></xref> delegate instead of explicitly defining a new delegate and assigning a named method to it. </p>System.Func~1#2<p>You can use the <xref href=\"System.Func`1\" data-throw-if-not-resolved=\"false\"></xref> delegate with anonymous methods in C#, as the following example illustrates. (For an introduction to anonymous methods, see Anonymous Methods (C# Programming Guide).)</p>System.Func~1#3<p>You can also assign a lambda expression to a <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> delegate, as the following example illustrates. (For an introduction to lambda expressions, see Lambda Expressions (Visual Basic) and Lambda Expressions (C# Programming Guide).)</p>System.Func~1#4<p>The underlying type of a lambda expression is one of the generic <strong>Func</strong> delegates. This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate. In particular, because many methods of types in the <xref href=\"System.Linq\" data-throw-if-not-resolved=\"false\"></xref> namespace have <strong>Func</strong> parameters, you can pass these methods a lambda expression without explicitly instantiating a <strong>Func</strong> delegate.</p><p>If you have an expensive computation that you want to execute only if the result is actually needed, you can assign the expensive function to a <xref href=\"System.Func`1\" data-throw-if-not-resolved=\"false\"></xref> delegate. The execution of the function can then be delayed until a property that accesses the value is used in an expression. The example in the next section demonstrates how to do this.</p>"
  syntax:
    content: >-
      [TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")]

      public delegate TResult Func<out TResult>();
    content.vb: >-
      <TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")>

      Public Delegate Function Func(Of Out TResult) As TResult
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the return value of the method that this delegate encapsulates.</p>\n"
    return:
      type: '{TResult}'
      description: "\n<p>The return value of the method that this delegate encapsulates.</p>\n"
  extensionMethods:
  - System.Delegate.System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  nameWithType.vb: Func(Of TResult)
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
references:
- uid: System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
  commentId: N:System
- uid: System.Delegate.System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  parent: System.Reflection.RuntimeReflectionExtensions
  definition: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  name: GetMethodInfo()
  nameWithType: RuntimeReflectionExtensions.GetMethodInfo()
  fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo()
  spec.csharp:
  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
    name: GetMethodInfo
    nameWithType: RuntimeReflectionExtensions.GetMethodInfo
    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
    name: GetMethodInfo
    nameWithType: RuntimeReflectionExtensions.GetMethodInfo
    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
- uid: '{TResult}'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
  commentId: '!:TResult'
- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  isExternal: true
  name: GetMethodInfo(Delegate)
  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  spec.csharp:
  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
    name: GetMethodInfo
    nameWithType: RuntimeReflectionExtensions.GetMethodInfo
    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Delegate
    name: Delegate
    nameWithType: Delegate
    fullName: System.Delegate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
    name: GetMethodInfo
    nameWithType: RuntimeReflectionExtensions.GetMethodInfo
    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Delegate
    name: Delegate
    nameWithType: Delegate
    fullName: System.Delegate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
- uid: System.Reflection.RuntimeReflectionExtensions
  parent: System.Reflection
  isExternal: false
  name: RuntimeReflectionExtensions
  nameWithType: RuntimeReflectionExtensions
  fullName: System.Reflection.RuntimeReflectionExtensions
  commentId: T:System.Reflection.RuntimeReflectionExtensions
- uid: TResult
  isExternal: false
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
  commentId: N:System.Reflection
