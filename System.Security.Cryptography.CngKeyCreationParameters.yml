items:
- uid: System.Security.Cryptography.CngKeyCreationParameters
  commentId: T:System.Security.Cryptography.CngKeyCreationParameters
  id: CngKeyCreationParameters
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.CngKeyCreationParameters.#ctor
  - System.Security.Cryptography.CngKeyCreationParameters.ExportPolicy
  - System.Security.Cryptography.CngKeyCreationParameters.KeyCreationOptions
  - System.Security.Cryptography.CngKeyCreationParameters.KeyUsage
  - System.Security.Cryptography.CngKeyCreationParameters.Parameters
  - System.Security.Cryptography.CngKeyCreationParameters.ParentWindowHandle
  - System.Security.Cryptography.CngKeyCreationParameters.Provider
  - System.Security.Cryptography.CngKeyCreationParameters.UIPolicy
  langs:
  - csharp
  - vb
  name: CngKeyCreationParameters
  nameWithType: CngKeyCreationParameters
  fullName: System.Security.Cryptography.CngKeyCreationParameters
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CngKeyCreationParameters
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 163
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Contains advanced properties for key creation.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Security.Cryptography.CngKey\" data-throw-if-not-resolved=\"false\"></xref> objects contain properties. Some properties must be added to a key when it is created. Other properties can be added after the key is created.</p>\n<p>The <xref href=\"System.Security.Cryptography.CngKeyCreationParameters\" data-throw-if-not-resolved=\"false\"></xref> class enables you to add properties to a key as it is being created. You can do this by passing a <xref href=\"System.Security.Cryptography.CngKeyCreationParameters\" data-throw-if-not-resolved=\"false\"></xref> object that contains standard key properties, such as key storage provider (KSP), export policy, key usage, user interface (UI) policy, and parent window handle, to the <xref href=\"System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.Security.Cryptography.CngKey\" data-throw-if-not-resolved=\"false\"></xref> object that is being created will be initialized with these values before it is finalized.</p>\n<p>You can also add non-standard properties to a key by using the <xref href=\"System.Security.Cryptography.CngKeyCreationParameters.Parameters\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If you need to add properties after a key is created, use the <xref href=\"System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public sealed class CngKeyCreationParameters
    content.vb: Public NotInheritable Class CngKeyCreationParameters
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.Cryptography.CngKeyCreationParameters.#ctor
  commentId: M:System.Security.Cryptography.CngKeyCreationParameters.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.CngKeyCreationParameters
  langs:
  - csharp
  - vb
  name: CngKeyCreationParameters()
  nameWithType: CngKeyCreationParameters.CngKeyCreationParameters()
  fullName: System.Security.Cryptography.CngKeyCreationParameters.CngKeyCreationParameters()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 165
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.CngKeyCreationParameters\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public CngKeyCreationParameters()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CngKeyCreationParameters.ExportPolicy
  commentId: P:System.Security.Cryptography.CngKeyCreationParameters.ExportPolicy
  id: ExportPolicy
  parent: System.Security.Cryptography.CngKeyCreationParameters
  langs:
  - csharp
  - vb
  name: ExportPolicy
  nameWithType: CngKeyCreationParameters.ExportPolicy
  fullName: System.Security.Cryptography.CngKeyCreationParameters.ExportPolicy
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExportPolicy
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 166
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets or sets the key export policy.</p>\n"
  remarks: "\n<p>For information about key export policies, see the <xref href=\"System.Security.Cryptography.CngExportPolicies\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public CngExportPolicies? ExportPolicy { get; set; }
    content.vb: Public Property ExportPolicy As CngExportPolicies?
    parameters: []
    return:
      type: System.Nullable{System.Security.Cryptography.CngExportPolicies}
      description: "\n<p>An object that specifies a key export policy. The default value is <strong>null</strong>, which indicates that the key storage provider's default export policy is set.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CngKeyCreationParameters.KeyCreationOptions
  commentId: P:System.Security.Cryptography.CngKeyCreationParameters.KeyCreationOptions
  id: KeyCreationOptions
  parent: System.Security.Cryptography.CngKeyCreationParameters
  langs:
  - csharp
  - vb
  name: KeyCreationOptions
  nameWithType: CngKeyCreationParameters.KeyCreationOptions
  fullName: System.Security.Cryptography.CngKeyCreationParameters.KeyCreationOptions
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeyCreationOptions
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 167
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets or sets the key creation options.</p>\n"
  remarks: "\n<p>The returned <xref href=\"System.Security.Cryptography.CngKeyCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> object defines options that are used when you create a new <xref href=\"System.Security.Cryptography.CngKey\" data-throw-if-not-resolved=\"false\"></xref> object. These options determine whether the key is created in the user or machine key store, and whether a new key should overwrite an existing key. By default, if <xref href=\"System.Security.Cryptography.CngKeyCreationOptions.MachineKey\" data-throw-if-not-resolved=\"false\"></xref> is not specified, the key is created in the user store.</p>\n"
  syntax:
    content: public CngKeyCreationOptions KeyCreationOptions { get; set; }
    content.vb: Public Property KeyCreationOptions As CngKeyCreationOptions
    parameters: []
    return:
      type: System.Security.Cryptography.CngKeyCreationOptions
      description: "\n<p>An object that specifies options for creating keys. The default value is <strong>null</strong>, which indicates that the key storage provider's default key creation options are set.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CngKeyCreationParameters.KeyUsage
  commentId: P:System.Security.Cryptography.CngKeyCreationParameters.KeyUsage
  id: KeyUsage
  parent: System.Security.Cryptography.CngKeyCreationParameters
  langs:
  - csharp
  - vb
  name: KeyUsage
  nameWithType: CngKeyCreationParameters.KeyUsage
  fullName: System.Security.Cryptography.CngKeyCreationParameters.KeyUsage
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeyUsage
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 168
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets or sets the cryptographic operations that apply to the current key. </p>\n"
  remarks: "\n<p>This property is used when you create a new <xref href=\"System.Security.Cryptography.CngKey\" data-throw-if-not-resolved=\"false\"></xref> object. It specifies the usages (such as encryption/decryption, signing/verification, and secret agreement generation) that will be enabled on the new key.</p>\n"
  syntax:
    content: public CngKeyUsages? KeyUsage { get; set; }
    content.vb: Public Property KeyUsage As CngKeyUsages?
    parameters: []
    return:
      type: System.Nullable{System.Security.Cryptography.CngKeyUsages}
      description: "\n<p>A bitwise combination of one or more enumeration values that specify key usage. The default value is <strong>null</strong>, which indicates that the key storage provider's default key usage is set.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CngKeyCreationParameters.Parameters
  commentId: P:System.Security.Cryptography.CngKeyCreationParameters.Parameters
  id: Parameters
  parent: System.Security.Cryptography.CngKeyCreationParameters
  langs:
  - csharp
  - vb
  name: Parameters
  nameWithType: CngKeyCreationParameters.Parameters
  fullName: System.Security.Cryptography.CngKeyCreationParameters.Parameters
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parameters
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 169
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Enables a <xref href=\"System.Security.Cryptography.CngKey\" data-throw-if-not-resolved=\"false\"></xref> object to be created with additional properties that are set before the key is finalized.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Cryptography.CngKeyCreationParameters\" data-throw-if-not-resolved=\"false\"></xref> class enables you to create a new <xref href=\"System.Security.Cryptography.CngKey\" data-throw-if-not-resolved=\"false\"></xref> object and initialize it with common properties. If you must set additional properties on the key during its creation, follow these steps:</p>\n<ol><li>\n<p>Create a new <xref href=\"System.Security.Cryptography.CngProperty\" data-throw-if-not-resolved=\"false\"></xref> object for each additional property that you must set.</p>\n</li><li>\n<p>Call the <xref href=\"System.Security.Cryptography.CngKeyCreationParameters.Parameters\" data-throw-if-not-resolved=\"false\"></xref> property to obtain an empty <xref href=\"System.Security.Cryptography.CngPropertyCollection\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n</li><li>\n<p>Add the <xref href=\"System.Security.Cryptography.CngProperty\" data-throw-if-not-resolved=\"false\"></xref> objects to the <xref href=\"System.Security.Cryptography.CngPropertyCollection\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n</li><li>\n<p>Call the <xref href=\"System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)\" data-throw-if-not-resolved=\"false\"></xref> method overload and pass the initialized <xref href=\"System.Security.Cryptography.CngKeyCreationParameters\" data-throw-if-not-resolved=\"false\"></xref> object to it.</p>\n</li></ol>\n"
  syntax:
    content: public CngPropertyCollection Parameters { get; }
    content.vb: Public ReadOnly Property Parameters As CngPropertyCollection
    parameters: []
    return:
      type: System.Security.Cryptography.CngPropertyCollection
      description: "\n<p>A collection object that contains any additional parameters that you must set on a <xref href=\"System.Security.Cryptography.CngKey\" data-throw-if-not-resolved=\"false\"></xref> object during key creation.</p>\n"
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.CngKeyCreationParameters.ParentWindowHandle
  commentId: P:System.Security.Cryptography.CngKeyCreationParameters.ParentWindowHandle
  id: ParentWindowHandle
  parent: System.Security.Cryptography.CngKeyCreationParameters
  langs:
  - csharp
  - vb
  name: ParentWindowHandle
  nameWithType: CngKeyCreationParameters.ParentWindowHandle
  fullName: System.Security.Cryptography.CngKeyCreationParameters.ParentWindowHandle
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ParentWindowHandle
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 170
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets or sets the window handle that should be used as the parent window for dialog boxes that are created by Cryptography Next Generation (CNG) classes.</p>\n"
  remarks: "\n<p>This property should be set if key creation causes CNG to show a dialog box.</p>\n"
  syntax:
    content: public IntPtr ParentWindowHandle { get; set; }
    content.vb: Public Property ParentWindowHandle As IntPtr
    parameters: []
    return:
      type: System.IntPtr
      description: "\n<p>The HWND of the parent window that is used for CNG dialog boxes.</p>\n"
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CngKeyCreationParameters.Provider
  commentId: P:System.Security.Cryptography.CngKeyCreationParameters.Provider
  id: Provider
  parent: System.Security.Cryptography.CngKeyCreationParameters
  langs:
  - csharp
  - vb
  name: Provider
  nameWithType: CngKeyCreationParameters.Provider
  fullName: System.Security.Cryptography.CngKeyCreationParameters.Provider
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Provider
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 171
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets or sets the key storage provider (KSP) to create a key in.</p>\n"
  syntax:
    content: public CngProvider Provider { get; set; }
    content.vb: Public Property Provider As CngProvider
    parameters: []
    return:
      type: System.Security.Cryptography.CngProvider
      description: "\n<p>An object that specifies the KSP that a new key will be created in.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <xref href=\"System.Security.Cryptography.CngKeyCreationParameters.Provider\" data-throw-if-not-resolved=\"false\"></xref> property is set to a <strong>null</strong> value.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CngKeyCreationParameters.UIPolicy
  commentId: P:System.Security.Cryptography.CngKeyCreationParameters.UIPolicy
  id: UIPolicy
  parent: System.Security.Cryptography.CngKeyCreationParameters
  langs:
  - csharp
  - vb
  name: UIPolicy
  nameWithType: CngKeyCreationParameters.UIPolicy
  fullName: System.Security.Cryptography.CngKeyCreationParameters.UIPolicy
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UIPolicy
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 172
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets or sets information about the user interface to display when a key is created or accessed.</p>\n"
  syntax:
    content: public CngUIPolicy UIPolicy { get; set; }
    content.vb: Public Property UIPolicy As CngUIPolicy
    parameters: []
    return:
      type: System.Security.Cryptography.CngUIPolicy
      description: "\n<p>An object that contains details about the user interface shown by Cryptography Next Generation (CNG) classes when a key is created or accessed. A <strong>null</strong> value indicates that the key storage provider's default user interface policy is set.</p>\n"
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  nameWithType: System.Security.Cryptography
  fullName: System.Security.Cryptography
  commentId: N:System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
  commentId: T:System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
  commentId: N:System
- uid: System.Nullable{System.Security.Cryptography.CngExportPolicies}
  parent: System
  definition: System.Nullable`1
  name: Nullable<CngExportPolicies>
  nameWithType: Nullable<CngExportPolicies>
  fullName: System.Nullable<System.Security.Cryptography.CngExportPolicies>
  nameWithType.vb: Nullable(Of CngExportPolicies)
  fullname.vb: System.Nullable(Of System.Security.Cryptography.CngExportPolicies)
  name.vb: Nullable(Of CngExportPolicies)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Cryptography.CngExportPolicies
    name: CngExportPolicies
    nameWithType: CngExportPolicies
    fullName: System.Security.Cryptography.CngExportPolicies
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Cryptography.CngExportPolicies
    name: CngExportPolicies
    nameWithType: CngExportPolicies
    fullName: System.Security.Cryptography.CngExportPolicies
  - name: )
    nameWithType: )
    fullName: )
  commentId: T:System.Nullable{System.Security.Cryptography.CngExportPolicies}
- uid: System.Nullable`1
  parent: System
  isExternal: false
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  commentId: T:System.Nullable`1
- uid: System.Security.Cryptography.CngKeyCreationOptions
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKeyCreationOptions
  nameWithType: CngKeyCreationOptions
  fullName: System.Security.Cryptography.CngKeyCreationOptions
  commentId: T:System.Security.Cryptography.CngKeyCreationOptions
- uid: System.Nullable{System.Security.Cryptography.CngKeyUsages}
  parent: System
  definition: System.Nullable`1
  name: Nullable<CngKeyUsages>
  nameWithType: Nullable<CngKeyUsages>
  fullName: System.Nullable<System.Security.Cryptography.CngKeyUsages>
  nameWithType.vb: Nullable(Of CngKeyUsages)
  fullname.vb: System.Nullable(Of System.Security.Cryptography.CngKeyUsages)
  name.vb: Nullable(Of CngKeyUsages)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Cryptography.CngKeyUsages
    name: CngKeyUsages
    nameWithType: CngKeyUsages
    fullName: System.Security.Cryptography.CngKeyUsages
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Cryptography.CngKeyUsages
    name: CngKeyUsages
    nameWithType: CngKeyUsages
    fullName: System.Security.Cryptography.CngKeyUsages
  - name: )
    nameWithType: )
    fullName: )
  commentId: T:System.Nullable{System.Security.Cryptography.CngKeyUsages}
- uid: System.Security.Cryptography.CngPropertyCollection
  parent: System.Security.Cryptography
  isExternal: false
  name: CngPropertyCollection
  nameWithType: CngPropertyCollection
  fullName: System.Security.Cryptography.CngPropertyCollection
  commentId: T:System.Security.Cryptography.CngPropertyCollection
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
  commentId: T:System.IntPtr
- uid: System.Security.Cryptography.CngProvider
  parent: System.Security.Cryptography
  isExternal: false
  name: CngProvider
  nameWithType: CngProvider
  fullName: System.Security.Cryptography.CngProvider
  commentId: T:System.Security.Cryptography.CngProvider
- uid: System.Security.Cryptography.CngUIPolicy
  parent: System.Security.Cryptography
  isExternal: false
  name: CngUIPolicy
  nameWithType: CngUIPolicy
  fullName: System.Security.Cryptography.CngUIPolicy
  commentId: T:System.Security.Cryptography.CngUIPolicy
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
