items:
- uid: System.Threading.SemaphoreSlim
  id: SemaphoreSlim
  parent: System.Threading
  children:
  - System.Threading.SemaphoreSlim.#ctor(System.Int32)
  - System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)
  - System.Threading.SemaphoreSlim.AvailableWaitHandle
  - System.Threading.SemaphoreSlim.CurrentCount
  - System.Threading.SemaphoreSlim.Dispose
  - System.Threading.SemaphoreSlim.Dispose(System.Boolean)
  - System.Threading.SemaphoreSlim.Release
  - System.Threading.SemaphoreSlim.Release(System.Int32)
  - System.Threading.SemaphoreSlim.Wait
  - System.Threading.SemaphoreSlim.Wait(System.Int32)
  - System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)
  - System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)
  - System.Threading.SemaphoreSlim.Wait(System.TimeSpan)
  - System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)
  - System.Threading.SemaphoreSlim.WaitAsync
  - System.Threading.SemaphoreSlim.WaitAsync(System.Int32)
  - System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)
  - System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)
  - System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)
  - System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)
  href: System.Threading.SemaphoreSlim.yml
  name: SemaphoreSlim
  fullName: System.Threading.SemaphoreSlim
  type: Class
  source:
    remote: &o0
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://vicancy@github.com/dotnet/corefx.git
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 259
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Represents a lightweight alternative to @'System.Threading.Semaphore' that limits the number of threads that can access a resource or pool of resources concurrently.
  syntax:
    content: 'public class SemaphoreSlim : IDisposable'
    content.vb: Public Class SemaphoreSlim Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Threading.SemaphoreSlim.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: SemaphoreSlim(Int32)
  fullName: System.Threading.SemaphoreSlim.SemaphoreSlim(System.Int32)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 261
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Initializes a new instance of the @'System.Threading.SemaphoreSlim' class, specifying the initial number of requests that can be granted concurrently.
  syntax:
    content: public SemaphoreSlim(int initialCount)
    content.vb: Public Sub New(initialCount As Integer)
    parameters:
    - id: initialCount
      type: System.Int32
      description: The initial number of requests for the semaphore that can be granted concurrently.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: '*initialCount* is less than 0.'
- uid: System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: SemaphoreSlim(Int32, Int32)
  fullName: System.Threading.SemaphoreSlim.SemaphoreSlim(System.Int32, System.Int32)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 262
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Initializes a new instance of the @'System.Threading.SemaphoreSlim' class, specifying the initial and maximum number of requests that can be granted concurrently.
  syntax:
    content: public SemaphoreSlim(int initialCount, int maxCount)
    content.vb: Public Sub New(initialCount As Integer, maxCount As Integer)
    parameters:
    - id: initialCount
      type: System.Int32
      description: The initial number of requests for the semaphore that can be granted concurrently.
    - id: maxCount
      type: System.Int32
      description: The maximum number of requests for the semaphore that can be granted concurrently.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: '*initialCount* is less than 0, or *initialCount* is greater than *maxCount*, or *maxCount* is equal to or less than 0.'
- uid: System.Threading.SemaphoreSlim.AvailableWaitHandle
  id: AvailableWaitHandle
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: AvailableWaitHandle
  fullName: System.Threading.SemaphoreSlim.AvailableWaitHandle
  type: Property
  source:
    remote: *o0
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 263
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Returns a @'System.Threading.WaitHandle' that can be used to wait on the semaphore.
  syntax:
    content: public WaitHandle AvailableWaitHandle { get; }
    content.vb: Public ReadOnly Property AvailableWaitHandle As WaitHandle
    parameters: []
    return:
      type: System.Threading.WaitHandle
      description: A @'System.Threading.WaitHandle' that can be used to wait on the semaphore.
  exceptions:
  - type: System.ObjectDisposedException
    description: The @'System.Threading.SemaphoreSlim' has been disposed.
- uid: System.Threading.SemaphoreSlim.CurrentCount
  id: CurrentCount
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: CurrentCount
  fullName: System.Threading.SemaphoreSlim.CurrentCount
  type: Property
  source:
    remote: *o0
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 264
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Gets the number of remaining threads that can enter the @'System.Threading.SemaphoreSlim' object.
  syntax:
    content: public int CurrentCount { get; }
    content.vb: Public ReadOnly Property CurrentCount As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of remaining threads that can enter the semaphore.
- uid: System.Threading.SemaphoreSlim.Dispose
  id: Dispose
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: Dispose()
  fullName: System.Threading.SemaphoreSlim.Dispose()
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 265
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Releases all resources used by the current instance of the @'System.Threading.SemaphoreSlim' class.
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
- uid: System.Threading.SemaphoreSlim.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: Dispose(Boolean)
  fullName: System.Threading.SemaphoreSlim.Dispose(System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 266
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Releases the unmanaged resources used by the @'System.Threading.SemaphoreSlim', and optionally releases the managed resources.
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: true to release both managed and unmanaged resources; false to release only unmanaged resources.
- uid: System.Threading.SemaphoreSlim.Release
  id: Release
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: Release()
  fullName: System.Threading.SemaphoreSlim.Release()
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 267
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Releases the @'System.Threading.SemaphoreSlim' object once.
  syntax:
    content: public int Release()
    content.vb: Public Function Release As Integer
    return:
      type: System.Int32
      description: The previous count of the @'System.Threading.SemaphoreSlim'.
  exceptions:
  - type: System.ObjectDisposedException
    description: The current instance has already been disposed.
  - type: System.Threading.SemaphoreFullException
    description: The @'System.Threading.SemaphoreSlim' has already reached its maximum size.
- uid: System.Threading.SemaphoreSlim.Release(System.Int32)
  id: Release(System.Int32)
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: Release(Int32)
  fullName: System.Threading.SemaphoreSlim.Release(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 268
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Releases the @'System.Threading.SemaphoreSlim' object a specified number of times.
  syntax:
    content: public int Release(int releaseCount)
    content.vb: Public Function Release(releaseCount As Integer) As Integer
    parameters:
    - id: releaseCount
      type: System.Int32
      description: The number of times to exit the semaphore.
    return:
      type: System.Int32
      description: The previous count of the @'System.Threading.SemaphoreSlim'.
  exceptions:
  - type: System.ObjectDisposedException
    description: The current instance has already been disposed.
  - type: System.ArgumentOutOfRangeException
    description: '*releaseCount* is less than 1.'
  - type: System.Threading.SemaphoreFullException
    description: The @'System.Threading.SemaphoreSlim' has already reached its maximum size.
- uid: System.Threading.SemaphoreSlim.Wait
  id: Wait
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: Wait()
  fullName: System.Threading.SemaphoreSlim.Wait()
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 269
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Blocks the current thread until it can enter the @'System.Threading.SemaphoreSlim'.
  syntax:
    content: public void Wait()
    content.vb: Public Sub Wait
  exceptions:
  - type: System.ObjectDisposedException
    description: The current instance has already been disposed.
- uid: System.Threading.SemaphoreSlim.Wait(System.Int32)
  id: Wait(System.Int32)
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: Wait(Int32)
  fullName: System.Threading.SemaphoreSlim.Wait(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 270
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Blocks the current thread until it can enter the @'System.Threading.SemaphoreSlim', using a 32-bit signed integer that specifies the timeout.
  syntax:
    content: public bool Wait(int millisecondsTimeout)
    content.vb: Public Function Wait(millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or @'System.Threading.Timeout.Infinite'(-1) to wait indefinitely.
    return:
      type: System.Boolean
      description: true if the current thread successfully entered the @'System.Threading.SemaphoreSlim'; otherwise, false.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: '*millisecondsTimeout* is a negative number other than -1, which represents an infinite time-out.'
- uid: System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)
  id: Wait(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: Wait(Int32, CancellationToken)
  fullName: System.Threading.SemaphoreSlim.Wait(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 271
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Blocks the current thread until it can enter the @'System.Threading.SemaphoreSlim', using a 32-bit signed integer that specifies the timeout, while observing a @'System.Threading.CancellationToken'.
  syntax:
    content: public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Function Wait(millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or @'System.Threading.Timeout.Infinite'(-1) to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The @'System.Threading.CancellationToken' to observe.
    return:
      type: System.Boolean
      description: true if the current thread successfully entered the @'System.Threading.SemaphoreSlim'; otherwise, false.
  exceptions:
  - type: System.OperationCanceledException
    description: '*cancellationToken* was canceled.'
  - type: System.ArgumentOutOfRangeException
    description: '*millisecondsTimeout* is a negative number other than -1, which represents an infinite time-out.'
  - type: System.ObjectDisposedException
    description: The @'System.Threading.SemaphoreSlim' instance has been disposed, or the @'System.Threading.CancellationTokenSource' that created *cancellationToken* has been disposed.
- uid: System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)
  id: Wait(System.Threading.CancellationToken)
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: Wait(CancellationToken)
  fullName: System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 272
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Blocks the current thread until it can enter the @'System.Threading.SemaphoreSlim', while observing a @'System.Threading.CancellationToken'.
  syntax:
    content: public void Wait(CancellationToken cancellationToken)
    content.vb: Public Sub Wait(cancellationToken As CancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The @'System.Threading.CancellationToken' token to observe.
  exceptions:
  - type: System.OperationCanceledException
    description: '*cancellationToken* was canceled.'
  - type: System.ObjectDisposedException
    description: The current instance has already been disposed.-or-The @'System.Threading.CancellationTokenSource' that created* cancellationToken* has already been disposed.
- uid: System.Threading.SemaphoreSlim.Wait(System.TimeSpan)
  id: Wait(System.TimeSpan)
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: Wait(TimeSpan)
  fullName: System.Threading.SemaphoreSlim.Wait(System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 273
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Blocks the current thread until it can enter the @'System.Threading.SemaphoreSlim', using a @'System.TimeSpan' to specify the timeout.
  syntax:
    content: public bool Wait(TimeSpan timeout)
    content.vb: Public Function Wait(timeout As TimeSpan) As Boolean
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: A @'System.TimeSpan' that represents the number of milliseconds to wait, or a @'System.TimeSpan' that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Boolean
      description: true if the current thread successfully entered the @'System.Threading.SemaphoreSlim'; otherwise, false.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: '*timeout* is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than @''System.Int32.MaxValue''.'
  - type: System.ObjectDisposedException
    description: The semaphoreSlim instance has been disposed*.*
- uid: System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)
  id: Wait(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: Wait(TimeSpan, CancellationToken)
  fullName: System.Threading.SemaphoreSlim.Wait(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 274
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Blocks the current thread until it can enter the @'System.Threading.SemaphoreSlim', using a @'System.TimeSpan' that specifies the timeout, while observing a @'System.Threading.CancellationToken'.
  syntax:
    content: public bool Wait(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function Wait(timeout As TimeSpan, cancellationToken As CancellationToken) As Boolean
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: A @'System.TimeSpan' that represents the number of milliseconds to wait, or a @'System.TimeSpan' that represents -1 milliseconds to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The @'System.Threading.CancellationToken' to observe.
    return:
      type: System.Boolean
      description: true if the current thread successfully entered the @'System.Threading.SemaphoreSlim'; otherwise, false.
  exceptions:
  - type: System.OperationCanceledException
    description: '*cancellationToken* was canceled.'
  - type: System.ArgumentOutOfRangeException
    description: '*timeout* is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than @''System.Int32.MaxValue''.'
  - type: System.ObjectDisposedException
    description: The semaphoreSlim instance has been disposed*.**-or-*The @'System.Threading.CancellationTokenSource' that created *cancellationToken* has already been disposed.
- uid: System.Threading.SemaphoreSlim.WaitAsync
  id: WaitAsync
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: WaitAsync()
  fullName: System.Threading.SemaphoreSlim.WaitAsync()
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 275
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Asynchronously waits to enter the @'System.Threading.SemaphoreSlim'.
  syntax:
    content: public Task WaitAsync()
    content.vb: Public Function WaitAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: A task that will complete when the semaphore has been entered.
- uid: System.Threading.SemaphoreSlim.WaitAsync(System.Int32)
  id: WaitAsync(System.Int32)
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: WaitAsync(Int32)
  fullName: System.Threading.SemaphoreSlim.WaitAsync(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 276
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Asynchronously waits to enter the @'System.Threading.SemaphoreSlim', using a 32-bit signed integer to measure the time interval.
  syntax:
    content: public Task<bool> WaitAsync(int millisecondsTimeout)
    content.vb: Public Function WaitAsync(millisecondsTimeout As Integer) As Task(Of Boolean)
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or @'System.Threading.Timeout.Infinite' (-1) to wait indefinitely.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A task that will complete with a result of true if the current thread successfully entered the @'System.Threading.SemaphoreSlim', otherwise with a result of false.
  exceptions:
  - type: System.ObjectDisposedException
    description: The current instance has already been disposed.
  - type: System.ArgumentOutOfRangeException
    description: '*millisecondsTimeout* is a negative number other than -1, which represents an infinite time-out.'
- uid: System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)
  id: WaitAsync(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: WaitAsync(Int32, CancellationToken)
  fullName: System.Threading.SemaphoreSlim.WaitAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 277
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Asynchronously waits to enter the @'System.Threading.SemaphoreSlim', using a 32-bit signed integer to measure the time interval, while observing a @'System.Threading.CancellationToken'.
  syntax:
    content: public Task<bool> WaitAsync(int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Function WaitAsync(millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or @'System.Threading.Timeout.Infinite' (-1) to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The @'System.Threading.CancellationToken' to observe.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A task that will complete with a result of true if the current thread successfully entered the @'System.Threading.SemaphoreSlim', otherwise with a result of false.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: '*millisecondsTimeout* is a negative number other than -1, which represents an infinite time-out.'
  - type: System.ObjectDisposedException
    description: The current instance has already been disposed.
  - type: System.OperationCanceledException
    description: '*cancellationToken* was canceled.'
- uid: System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)
  id: WaitAsync(System.Threading.CancellationToken)
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: WaitAsync(CancellationToken)
  fullName: System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 278
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Asynchronously waits to enter the @'System.Threading.SemaphoreSlim', while observing a @'System.Threading.CancellationToken'.
  syntax:
    content: public Task WaitAsync(CancellationToken cancellationToken)
    content.vb: Public Function WaitAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The @'System.Threading.CancellationToken' token to observe.
    return:
      type: System.Threading.Tasks.Task
      description: A task that will complete when the semaphore has been entered.
  exceptions:
  - type: System.ObjectDisposedException
    description: The current instance has already been disposed.
  - type: System.OperationCanceledException
    description: '*cancellationToken* was canceled.'
- uid: System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)
  id: WaitAsync(System.TimeSpan)
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: WaitAsync(TimeSpan)
  fullName: System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 279
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Asynchronously waits to enter the @'System.Threading.SemaphoreSlim', using a @'System.TimeSpan' to measure the time interval.
  syntax:
    content: public Task<bool> WaitAsync(TimeSpan timeout)
    content.vb: Public Function WaitAsync(timeout As TimeSpan) As Task(Of Boolean)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: A @'System.TimeSpan' that represents the number of milliseconds to wait, or a @'System.TimeSpan' that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A task that will complete with a result of true if the current thread successfully entered the @'System.Threading.SemaphoreSlim', otherwise with a result of false.
  exceptions:
  - type: System.ObjectDisposedException
    description: The current instance has already been disposed.
  - type: System.ArgumentOutOfRangeException
    description: '*millisecondsTimeout* is a negative number other than -1, which represents an infinite time-out -or- timeout is greater than @''System.Int32.MaxValue''.'
- uid: System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)
  id: WaitAsync(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.SemaphoreSlim
  href: System.Threading.SemaphoreSlim.yml
  name: WaitAsync(TimeSpan, CancellationToken)
  fullName: System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 280
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Asynchronously waits to enter the @'System.Threading.SemaphoreSlim', using a @'System.TimeSpan' to measure the time interval, while observing a @'System.Threading.CancellationToken'.
  syntax:
    content: public Task<bool> WaitAsync(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function WaitAsync(timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: A @'System.TimeSpan' that represents the number of milliseconds to wait, or a @'System.TimeSpan' that represents -1 milliseconds to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The @'System.Threading.CancellationToken' token to observe.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A task that will complete with a result of true if the current thread successfully entered the @'System.Threading.SemaphoreSlim', otherwise with a result of false.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: '*millisecondsTimeout* is a negative number other than -1, which represents an infinite time-out-or-timeout is greater than @''System.Int32.MaxValue''.'
  - type: System.OperationCanceledException
    description: '*cancellationToken* was canceled.'
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
  type: Class
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Int32
  parent: System
  isExternal: false
  href: System.Int32.yml
  name: Int32
  fullName: System.Int32
  type: Struct
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: false
  href: System.Threading.WaitHandle.yml
  name: WaitHandle
  fullName: System.Threading.WaitHandle
  type: Class
- uid: System.Boolean
  parent: System
  isExternal: false
  href: System.Boolean.yml
  name: Boolean
  fullName: System.Boolean
  type: Struct
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  href: System.Threading.CancellationToken.yml
  name: CancellationToken
  fullName: System.Threading.CancellationToken
  type: Struct
- uid: System.TimeSpan
  parent: System
  isExternal: false
  href: System.TimeSpan.yml
  name: TimeSpan
  fullName: System.TimeSpan
  type: Struct
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.Task.yml
  name: Task
  fullName: System.Threading.Tasks.Task
  type: Class
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
  type: Namespace
- uid: System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  name.vb: Task(Of Boolean)
  fullName: System.Threading.Tasks.Task<System.Boolean>
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.Task`1.yml
  name: Task<TResult>
  name.vb: Task(Of TResult)
  fullName: System.Threading.Tasks.Task<TResult>
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  type: Class
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  href: System.ArgumentOutOfRangeException.yml
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  type: Class
- uid: System.ObjectDisposedException
  isExternal: false
  href: System.ObjectDisposedException.yml
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
  type: Class
- uid: System.Threading.SemaphoreFullException
  isExternal: false
  href: System.Threading.SemaphoreFullException.yml
  name: SemaphoreFullException
  fullName: System.Threading.SemaphoreFullException
  type: Class
  summary: The exception that is thrown when the <see cref="Overload:System.Threading.Semaphore.Release" /> method is called on a semaphore whose count is already at the maximum.
- uid: System.OperationCanceledException
  parent: System
  isExternal: false
  href: System.OperationCanceledException.yml
  name: OperationCanceledException
  fullName: System.OperationCanceledException
  type: Class
