items:
- uid: System.Xml.Linq.XAttribute
  commentId: T:System.Xml.Linq.XAttribute
  id: XAttribute
  parent: System.Xml.Linq
  children:
  - System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XAttribute)
  - System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XName,System.Object)
  - System.Xml.Linq.XAttribute.EmptySequence
  - System.Xml.Linq.XAttribute.IsNamespaceDeclaration
  - System.Xml.Linq.XAttribute.Name
  - System.Xml.Linq.XAttribute.NextAttribute
  - System.Xml.Linq.XAttribute.NodeType
  - System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Boolean
  - System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTime
  - System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTimeOffset
  - System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Decimal
  - System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Double
  - System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Guid
  - System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int32
  - System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int64
  - System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Boolean}
  - System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTime}
  - System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTimeOffset}
  - System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Decimal}
  - System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Double}
  - System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Guid}
  - System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int32}
  - System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int64}
  - System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Single}
  - System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.TimeSpan}
  - System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt32}
  - System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt64}
  - System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Single
  - System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.String
  - System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.TimeSpan
  - System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt32
  - System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt64
  - System.Xml.Linq.XAttribute.PreviousAttribute
  - System.Xml.Linq.XAttribute.Remove
  - System.Xml.Linq.XAttribute.SetValue(System.Object)
  - System.Xml.Linq.XAttribute.ToString
  - System.Xml.Linq.XAttribute.Value
  langs:
  - csharp
  - vb
  name: XAttribute
  fullName: System.Xml.Linq.XAttribute
  type: Class
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XAttribute
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 52
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Represents an XML attribute.</p>\n"
  example:
  - 
  syntax:
    content: 'public class XAttribute : XObject'
    content.vb: >-
      Public Class XAttribute
          Inherits XObject
  seealso:
  - type: System.Xml.Linq.XElement
    commentId: T:System.Xml.Linq.XElement
  - type: System.Xml.Linq.XDocument
    commentId: T:System.Xml.Linq.XDocument
  inheritance:
  - System.Object
  - System.Xml.Linq.XObject
  inheritedMembers:
  - System.Xml.Linq.XObject.BaseUri
  - System.Xml.Linq.XObject.Document
  - System.Xml.Linq.XObject.Parent
  - System.Xml.Linq.XObject.Changed
  - System.Xml.Linq.XObject.Changing
  - System.Xml.Linq.XObject.AddAnnotation(System.Object)
  - System.Xml.Linq.XObject.Annotation(System.Type)
  - System.Xml.Linq.XObject.Annotation``1
  - System.Xml.Linq.XObject.Annotations(System.Type)
  - System.Xml.Linq.XObject.Annotations``1
  - System.Xml.Linq.XObject.RemoveAnnotations(System.Type)
  - System.Xml.Linq.XObject.RemoveAnnotations``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: XAttribute
- uid: System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XAttribute)
  commentId: M:System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XAttribute)
  id: '#ctor(System.Xml.Linq.XAttribute)'
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: XAttribute(XAttribute)
  fullName: System.Xml.Linq.XAttribute.XAttribute(System.Xml.Linq.XAttribute)
  type: Constructor
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 54
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> class from another <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  example:
  - "\n<p>This example demonstrates that creating a deep copy of an XML tree creates a copy, not a clone, of an attribute in the tree.</p>\n<pre><code class=\"c#\">XElement root1 = XElement.Parse(\"<Root Att1='abc' />\");\n// Make a deep copy.\nXElement root2 = new XElement(root1);\nif (root1.Attribute(\"Att1\") == root2.Attribute(\"Att1\"))\nConsole.WriteLine(\"This will not be printed\");\nelse\nConsole.WriteLine(\"Creating a deep copy created a new attribute from the original.\");</code></pre>\n<pre><code class=\"vb\">Dim root1 As XElement = <Root Att1='abc'/>\n' Make a deep copy.\nDim root2 As XElement = New XElement(root1)\nIf root1.Attribute(\"Att1\") Is root2.Attribute(\"Att1\") Then\nConsole.WriteLine(\"This will not be printed\")\nElse\nConsole.WriteLine(\"Creating a deep copy created a new attribute from the original.\")\nEnd If</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Creating a deep copy created a new attribute from the original.</code></pre>\n"
  syntax:
    content: public XAttribute(XAttribute other)
    content.vb: Public Sub New(other As XAttribute)
    parameters:
    - id: other
      type: System.Xml.Linq.XAttribute
      description: "\n<p>An <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> object to copy from.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>other</em> parameter is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.Name
    commentId: P:System.Xml.Linq.XAttribute.Name
  - type: System.Xml.Linq.XAttribute.Value
    commentId: P:System.Xml.Linq.XAttribute.Value
  - type: System.Xml.Linq.XAttribute.NodeType
    commentId: P:System.Xml.Linq.XAttribute.NodeType
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: XAttribute.XAttribute(XAttribute)
- uid: System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XName,System.Object)
  commentId: M:System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XName,System.Object)
  id: '#ctor(System.Xml.Linq.XName,System.Object)'
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: XAttribute(XName, Object)
  fullName: System.Xml.Linq.XAttribute.XAttribute(System.Xml.Linq.XName, System.Object)
  type: Constructor
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 55
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> class from the specified name and value. </p>\n"
  example:
  - "\n<p>The following example uses this constructor to create attributes. It passes strings as the first argument to the <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> constructor, which are then implicitly converted to <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> objects. The attributes are added to an element.</p>\n<pre><code class=\"c#\">XElement root;\n\ndouble dbl = 12.345;\nXAttribute[] attArray = {\nnew XAttribute(\"Att4\", 1),\nnew XAttribute(\"Att5\", 2),\nnew XAttribute(\"Att6\", 3)\n};\nDateTime dt = new DateTime(2006, 10, 6, 12, 30, 00);\n\n// string content\nroot = new XElement(\"Root\",\nnew XAttribute(\"Att1\", \"Some text\"),\n\n// double content\nnew XAttribute(\"Att2\", dbl),\n\n// DateTime content\nnew XAttribute(\"Att3\", dt),\n\n// XAttribute array content\nattArray\n);\n\nConsole.WriteLine(root);</code></pre>\n<pre><code class=\"vb\">Dim dbl As Double = 12.345\nDim attArray As XAttribute() = { _\nNew XAttribute(\"Att4\", 1), _\nNew XAttribute(\"Att5\", 2), _\nNew XAttribute(\"Att6\", 3) _\n}\nDim dt As DateTime = New DateTime(2006, 10, 6, 12, 30, 0)\nDim root As XElement = <Root Att1=\"Some text\"\n                   Att2=<%= dbl %>\n                   Att3=<%= dt %>\n                   <%= attArray %>\n               />\nConsole.WriteLine(root)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code><Root Att1=\"Some text\" Att2=\"12.345\" Att3=\"2006-10-06T12:30:00\" Att4=\"1\" Att5=\"2\" Att6=\"3\" /></code></pre>\n"
  syntax:
    content: public XAttribute(XName name, object value)
    content.vb: Public Sub New(name As XName, value As Object)
    parameters:
    - id: name
      type: System.Xml.Linq.XName
      description: "\n<p>The <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> of the attribute.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> containing the value of the attribute.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> or <em>value</em> parameter is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.Name
    commentId: P:System.Xml.Linq.XAttribute.Name
  - type: System.Xml.Linq.XAttribute.Value
    commentId: P:System.Xml.Linq.XAttribute.Value
  - type: System.Xml.Linq.XAttribute.NodeType
    commentId: P:System.Xml.Linq.XAttribute.NodeType
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: XAttribute.XAttribute(XName, Object)
- uid: System.Xml.Linq.XAttribute.EmptySequence
  commentId: P:System.Xml.Linq.XAttribute.EmptySequence
  id: EmptySequence
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: EmptySequence
  fullName: System.Xml.Linq.XAttribute.EmptySequence
  type: Property
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EmptySequence
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 56
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets an empty collection of attributes.</p>\n"
  example:
  - 
  syntax:
    content: public static IEnumerable<XAttribute> EmptySequence { get; }
    content.vb: Public Shared ReadOnly Property EmptySequence As IEnumerable(Of XAttribute)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> containing an empty collection.</p>\n"
  seealso:
  - type: System.Xml.Linq.XElement.EmptySequence
    commentId: P:System.Xml.Linq.XElement.EmptySequence
  - type: System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XAttribute)
    commentId: M:System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XAttribute)
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: XAttribute.EmptySequence
- uid: System.Xml.Linq.XAttribute.IsNamespaceDeclaration
  commentId: P:System.Xml.Linq.XAttribute.IsNamespaceDeclaration
  id: IsNamespaceDeclaration
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: IsNamespaceDeclaration
  fullName: System.Xml.Linq.XAttribute.IsNamespaceDeclaration
  type: Property
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNamespaceDeclaration
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 57
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Determines if this attribute is a namespace declaration.</p>\n"
  example:
  - "\n<p>The following example creates an attribute that is a namespace declaration and an attribute that is not. It then uses this property to display whether each attribute is a namespace declaration or not.</p>\n<pre><code class=\"c#\">XNamespace aw = \"http://www.adventure-works.com\";\nXElement root = new XElement(aw + \"Root\",\nnew XAttribute(XNamespace.Xmlns + \"aw\", \"http://www.adventure-works.com\"),\nnew XAttribute(aw + \"Att\", \"content\")\n);\n\nforeach (XAttribute att in root.Attributes()) {\nif (att.IsNamespaceDeclaration)\nConsole.WriteLine(\"{0} is a namespace declaration\", att.Name);\nelse\nConsole.WriteLine(\"{0} is not a namespace declaration\", att.Name);\n}</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <aw:Root xmlns:aw='http://www.adventure-works.com'\n                   aw:Att='content'/>\n\nFor Each att As XAttribute In root.Attributes()\nIf (att.IsNamespaceDeclaration) Then\nConsole.WriteLine(\"{0} is a namespace declaration\", att.Name)\nElse\nConsole.WriteLine(\"{0} is not a namespace declaration\", att.Name)\nEnd If\nNext</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>{http://www.w3.org/2000/xmlns/}aw is a namespace declaration\n{http://www.adventure-works.com}Att is not a namespace declaration</code></pre>\n"
  syntax:
    content: public bool IsNamespaceDeclaration { get; }
    content.vb: Public ReadOnly Property IsNamespaceDeclaration As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this attribute is a namespace declaration; otherwise <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XNamespace
    commentId: T:System.Xml.Linq.XNamespace
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: XAttribute.IsNamespaceDeclaration
- uid: System.Xml.Linq.XAttribute.Name
  commentId: P:System.Xml.Linq.XAttribute.Name
  id: Name
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Xml.Linq.XAttribute.Name
  type: Property
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 58
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets the expanded name of this attribute.</p>\n"
  example:
  - "\n<p>The following example creates an element with three attributes. It then uses this property to print out the name of each attribute. The example also shows creation of a new attribute using the name of an existing attribute.</p>\n<pre><code class=\"c#\">XNamespace aw = \"http://www.adventure-works.com\";\nXElement root = new XElement(aw + \"Root\",\nnew XAttribute(XNamespace.Xmlns + \"aw\", \"http://www.adventure-works.com\"),\nnew XAttribute(aw + \"Att\", \"content\"),\nnew XAttribute(\"Att2\", \"different content\")\n);\n\nforeach (XAttribute att in root.Attributes())\nConsole.WriteLine(\"{0}={1}\", att.Name, att.Value);\nConsole.WriteLine(\"\");\n\nXElement newRoot = new XElement(aw + \"Root\",\nfrom att in root.Attributes(\"Att2\")\nselect new XAttribute(att.Name, \"new content\"));\n\nforeach (XAttribute att in newRoot.Attributes())\nConsole.WriteLine(\"{0}={1}\", att.Name, att.Value);</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = _ \n<aw:Root xmlns:aw='http://www.adventure-works.com'\naw:Att='content'\nAtt2='different content'/>\n\nFor Each att As XAttribute In root.Attributes()\nConsole.WriteLine(\"{0}={1}\", att.Name, att.Value)\nNext\nConsole.WriteLine(\"\")\n\nDim NewRoot As XElement = _\n<Root\n<%= _\nFrom att In root.Attributes(\"Att2\") _\nSelect New XAttribute(att.Name, \"new content\") _\n%>>_\n</Root>\n\nFor Each att As XAttribute In NewRoot.Attributes()\nConsole.WriteLine(\"{0}={1}\", att.Name, att.Value)\nNext</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>{http://www.w3.org/2000/xmlns/}aw=http://www.adventure-works.com\n{http://www.adventure-works.com}Att=content\nAtt2=different content\n\nAtt2=new content</code></pre>\n"
  syntax:
    content: public XName Name { get; }
    content.vb: Public ReadOnly Property Name As XName
    parameters: []
    return:
      type: System.Xml.Linq.XName
      description: "\n<p>An <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> containing the name of this attribute.</p>\n"
  seealso:
  - type: System.Xml.Linq.XName
    commentId: T:System.Xml.Linq.XName
  - type: System.Xml.Linq.XAttribute.Value
    commentId: P:System.Xml.Linq.XAttribute.Value
  - type: System.Xml.Linq.XAttribute.ToString
    commentId: M:System.Xml.Linq.XAttribute.ToString
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: XAttribute.Name
- uid: System.Xml.Linq.XAttribute.NextAttribute
  commentId: P:System.Xml.Linq.XAttribute.NextAttribute
  id: NextAttribute
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: NextAttribute
  fullName: System.Xml.Linq.XAttribute.NextAttribute
  type: Property
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NextAttribute
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 59
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets the next attribute of the parent element.</p>\n"
  example:
  - "\n<p>The following example shows how to iterate through the attributes of an element using this property.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XAttribute(\"Att1\", 1),\nnew XAttribute(\"Att2\", 2),\nnew XAttribute(\"Att3\", 3),\nnew XAttribute(\"Att4\", 4)\n);\n\nXAttribute att = root.FirstAttribute;\ndo {\nConsole.WriteLine(att);\n}\nwhile((att = att.NextAttribute) != null);</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att1=\"1\" Att2=\"2\" Att3=\"3\" Att4=\"4\"/>\nDim att As XAttribute = root.FirstAttribute\nDim val As Boolean = True\nDo\nConsole.WriteLine(att)\natt = att.NextAttribute\nLoop While (Not (att Is Nothing))</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Att1=\"1\"\nAtt2=\"2\"\nAtt3=\"3\"\nAtt4=\"4\"</code></pre>\n"
  syntax:
    content: public XAttribute NextAttribute { get; }
    content.vb: Public ReadOnly Property NextAttribute As XAttribute
    parameters: []
    return:
      type: System.Xml.Linq.XAttribute
      description: "\n<p>An <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> containing the next attribute of the parent element.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.PreviousAttribute
    commentId: P:System.Xml.Linq.XAttribute.PreviousAttribute
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: XAttribute.NextAttribute
- uid: System.Xml.Linq.XAttribute.NodeType
  commentId: P:System.Xml.Linq.XAttribute.NodeType
  id: NodeType
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: NodeType
  fullName: System.Xml.Linq.XAttribute.NodeType
  type: Property
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NodeType
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 60
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets the node type for this node.</p>\n"
  example:
  - "\n<p>The following example creates an attribute, and then displays the node type using this property.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XAttribute(\"Att\", \"content\")\n);\n\nXAttribute att = root.FirstAttribute;\nConsole.WriteLine(att.NodeType);</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att=\"content\"/>\nDim att As XAttribute = root.FirstAttribute\nConsole.WriteLine(att.NodeType.ToString)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Attribute</code></pre>\n"
  syntax:
    content: public override XmlNodeType NodeType { get; }
    content.vb: Public Overrides ReadOnly Property NodeType As XmlNodeType
    parameters: []
    return:
      type: System.Xml.XmlNodeType
      description: "\n<p>The node type. For <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> objects, this value is <xref href=\"System.Xml.XmlNodeType.Attribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Xml.Linq.XObject.NodeType
  seealso:
  - type: System.Xml.XmlNodeType
    commentId: T:System.Xml.XmlNodeType
  - type: System.Xml.Linq.XNode
    commentId: T:System.Xml.Linq.XNode
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  nameWithType: XAttribute.NodeType
- uid: System.Xml.Linq.XAttribute.PreviousAttribute
  commentId: P:System.Xml.Linq.XAttribute.PreviousAttribute
  id: PreviousAttribute
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: PreviousAttribute
  fullName: System.Xml.Linq.XAttribute.PreviousAttribute
  type: Property
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PreviousAttribute
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 61
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets the previous attribute of the parent element.</p>\n"
  example:
  - "\n<p>The following example shows how to iterate through the attributes of an element using this property.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XAttribute(\"Att1\", 1),\nnew XAttribute(\"Att2\", 2),\nnew XAttribute(\"Att3\", 3),\nnew XAttribute(\"Att4\", 4)\n);\nXAttribute att = root.LastAttribute;\ndo {\nConsole.WriteLine(att);\n}\nwhile((att = att.PreviousAttribute) != null);</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att1=\"1\" Att2=\"2\" Att3=\"3\" Att4=\"4\"/>\nDim att As XAttribute = root.LastAttribute\nDim val As Boolean = True\nDo\nConsole.WriteLine(att)\natt = att.PreviousAttribute\nLoop While (Not (att Is Nothing))</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Att4=\"4\"\nAtt3=\"3\"\nAtt2=\"2\"\nAtt1=\"1\"</code></pre>\n"
  syntax:
    content: public XAttribute PreviousAttribute { get; }
    content.vb: Public ReadOnly Property PreviousAttribute As XAttribute
    parameters: []
    return:
      type: System.Xml.Linq.XAttribute
      description: "\n<p>An <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> containing the previous attribute of the parent element.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.NextAttribute
    commentId: P:System.Xml.Linq.XAttribute.NextAttribute
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: XAttribute.PreviousAttribute
- uid: System.Xml.Linq.XAttribute.Value
  commentId: P:System.Xml.Linq.XAttribute.Value
  id: Value
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Value
  fullName: System.Xml.Linq.XAttribute.Value
  type: Property
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Value
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 62
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets or sets the value of this attribute.</p>\n"
  example:
  - "\n<p>The following example creates an element with an attribute. It then retrieves the value of the attribute, and then sets it.</p>\n<p>Note that the Visual Basic example uses the XML attribute property.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XAttribute(\"Att\", \"content\")\n);\nXAttribute att = root.FirstAttribute;\nConsole.WriteLine(att.Value);\natt.Value = \"new text\";\nConsole.WriteLine(att.Value);</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att=\"content\"/>\nConsole.WriteLine(root.@Att)\nroot.@Att = \"new text\"\nConsole.WriteLine(root.@Att)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>content\nnew text</code></pre>\n<p>The following example shows the benefit of using the explicit conversion operators to get the value of an attribute that might not exist:</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XAttribute(\"Att1\", \"attribute 1 content\"),\nnew XAttribute(\"Att2\", \"2\")\n);\n\n// The following assignments demonstrate why it is easier to use\n// casting when the attribute might or might not exist.\n\nstring c1 = (string)root.Attribute(\"Att1\");\nConsole.WriteLine(\"c1:{0}\", c1 == null ? \"attribute does not exist\" : c1);\n\nint? c2 = (int?)root.Attribute(\"Att2\");\nConsole.WriteLine(\"c2:{0}\", c2 == null ? \"attribute does not exist\" : c2.ToString());\n\nstring c3 = (string)root.Attribute(\"Att3\");\nConsole.WriteLine(\"c3:{0}\", c3 == null ? \"attribute does not exist\" : c3);\n\nint? c4 = (int?)root.Attribute(\"Att4\");\nConsole.WriteLine(\"c4:{0}\", c4 == null ? \"attribute does not exist\" : c4.ToString());\n\nConsole.WriteLine();\n\n// The following assignments show the necessary code when using\n// the value property when the attribute might or might not exist.\n\nXAttribute att1 = root.Attribute(\"Att1\");\nstring v1;\nif (att1 == null)\nv1 = null;\nelse\nv1 = att1.Value;\nConsole.WriteLine(\"v1:{0}\", v1 == null ? \"attribute does not exist\" : v1);\n\nXAttribute att2 = root.Attribute(\"Att2\");\nint? v2;\nif (att2 == null)\nv2 = null;\nelse\nv2 = Int32.Parse(att2.Value);\nConsole.WriteLine(\"v2:{0}\", v2 == null ? \"attribute does not exist\" : v2.ToString());\n\nXAttribute att3 = root.Attribute(\"Att3\");\nstring v3;\nif (att3 == null)\nv3 = null;\nelse\nv3 = att3.Value;\nConsole.WriteLine(\"v3:{0}\", v3 == null ? \"attribute does not exist\" : v3);\n\nXAttribute att4 = root.Attribute(\"Att4\");\nint? v4;\nif (att4 == null)\nv4 = null;\nelse\nv4 = Int32.Parse(att4.Value);\nConsole.WriteLine(\"v4:{0}\", v4 == null ? \"attribute does not exist\" : v4.ToString());</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att1=\"attribute 1 content\" Att2=\"2\"/>\n\n' The following assignments demonstrate why it is easier to use\n' casting when the attribute might or might not exist.\n\nDim c1 As String = CStr(root.Attribute(\"Att1\"))\nConsole.WriteLine(\"c1:{0}\", IIf(c1 Is Nothing, \"attribute does not exist\", c1))\n\nDim c2 As Nullable(Of Integer) = CType(root.Attribute(\"Att2\"), Nullable(Of Integer))\nConsole.WriteLine(\"c2:{0}\", IIf(c2.HasValue, c2, \"attribute does not exist\"))\n\nDim c3 As String = CStr(root.Attribute(\"Att3\"))\nConsole.WriteLine(\"c3:{0}\", IIf(c3 Is Nothing, \"attribute does not exist\", c3))\n\nDim c4 As Nullable(Of Integer) = CType(root.Attribute(\"Att4\"), Nullable(Of Integer))\nConsole.WriteLine(\"c4:{0}\", IIf(c4.HasValue, c4, \"attribute does not exist\"))\n\nConsole.WriteLine()\n\n' The following assignments show the necessary code when using\n' the value property when the attribute might or might not exist.\n\nDim att1 As XAttribute = root.Attribute(\"Att1\")\nDim v1 As String\nIf att1 Is Nothing Then\nv1 = Nothing\nElse\nv1 = att1.Value\nEnd If\n\nConsole.WriteLine(\"v1:{0}\", IIf(v1 Is Nothing, \"attribute does not exist\", v1))\n\nDim att2 As XAttribute = root.Attribute(\"Att2\")\nDim v2 As Nullable(Of Integer)\nIf att2 Is Nothing Then\nv2 = Nothing\nElse\nv2 = Int32.Parse(att2.Value)\nEnd If\n\nConsole.WriteLine(\"v2:{0}\", IIf(v2.HasValue, v2, \"attribute does not exist\"))\n\nDim att3 As XAttribute = root.Attribute(\"Att3\")\nDim v3 As String\nIf att3 Is Nothing Then\nv3 = Nothing\nElse\nv3 = att3.Value\nEnd If\n\nConsole.WriteLine(\"v3:{0}\", IIf(v3 Is Nothing, \"attribute does not exist\", v3))\n\nDim att4 As XAttribute = root.Attribute(\"Att4\")\nDim v4 As Nullable(Of Integer)\nIf att4 Is Nothing Then\nv4 = Nothing\nElse\nv4 = Int32.Parse(att4.Value)\nEnd If\n\nConsole.WriteLine(\"v4:{0}\", IIf(v4.HasValue, v4, \"attribute does not exist\"))</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>c1:attribute 1 content\nc2:2\nc3:attribute does not exist\nc4:attribute does not exist\n\nv1:attribute 1 content\nv2:2\nv3:attribute does not exist\nv4:attribute does not exist</code></pre>\n"
  syntax:
    content: public string Value { get; set; }
    content.vb: Public Property Value As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the value of this attribute.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>When setting, the <em>value</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.SetValue(System.Object)
    commentId: M:System.Xml.Linq.XAttribute.SetValue(System.Object)
  - type: System.Xml.Linq.XAttribute.Name
    commentId: P:System.Xml.Linq.XAttribute.Name
  - type: System.Xml.Linq.XAttribute.ToString
    commentId: M:System.Xml.Linq.XAttribute.ToString
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: XAttribute.Value
- uid: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Boolean
  commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Boolean
  id: op_Explicit(System.Xml.Linq.XAttribute)~System.Boolean
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Explicit(XAttribute to Boolean)
  fullName: System.Xml.Linq.XAttribute.Explicit(System.Xml.Linq.XAttribute to System.Boolean)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 63
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Cast the value of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an attribute with a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value, then casts it to <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\", \nnew XAttribute(\"BoolValue\", true)\n);\nbool bv = (bool)root.Attribute(\"BoolValue\");\nConsole.WriteLine(\"(bool)BoolValue={0}\", bv);</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <root BoolValue=\"true\"/>\nDim bv As Boolean = CBool(root.Attribute(\"BoolValue\"))\nConsole.WriteLine(\"(bool)BoolValue={0}\", bv)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>(bool)BoolValue=True</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator bool (XAttribute attribute)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(attribute As XAttribute) As Boolean
    parameters:
    - id: attribute
      type: System.Xml.Linq.XAttribute
      description: "\n<p>The <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to cast to <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>A <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> that contains the content of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The attribute does not contain a valid <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>attribute</em> parameter is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Boolean}
    commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Boolean}
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XAttribute.Narrowing(System.Xml.Linq.XAttribute to System.Boolean)
  name.vb: Narrowing(XAttribute to Boolean)
  nameWithType: XAttribute.Explicit(XAttribute to Boolean)
  nameWithType.vb: XAttribute.Narrowing(XAttribute to Boolean)
- uid: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTime
  commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTime
  id: op_Explicit(System.Xml.Linq.XAttribute)~System.DateTime
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Explicit(XAttribute to DateTime)
  fullName: System.Xml.Linq.XAttribute.Explicit(System.Xml.Linq.XAttribute to System.DateTime)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 65
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Cast the value of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an attribute with date and time content. It then casts it to <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> to retrieve the value. </p>\n<pre><code class=\"c#\">// Behavior is strict when formatting an XML element or attribute from a DateTime,\n// but behavior is lax when casting to a DateTime from an element or attribute.\n\nXElement root = new XElement(\"Root\",\nnew XAttribute(\"Att\", new DateTime(2006, 10, 6, 12, 30, 0))\n);\nConsole.WriteLine(root);\n\n// casting from a strictly formatted XML attribute\nDateTime dt = (DateTime)root.Attribute(\"Att\");\nConsole.WriteLine(\"dt={0}\", dt);\nConsole.WriteLine(\"-----\");\n\n// if root is formatted in some different way than the standard ISO 8601, if at all possible,\n// the value is appropriately converted to DateTime\n\nXAttribute dtAtt = new XAttribute(\"OrderDate\", \"October 6, 2006\");\nConsole.WriteLine(dtAtt);\nDateTime orderDate = (DateTime)dtAtt;\nConsole.WriteLine(\"OrderDate={0:d}\", orderDate);</code></pre>\n<pre><code class=\"vb\">' Behavior is strict when formatting an XML element or attribute from a DateTime,\n' but behavior is lax when casting to a DateTime from an element or attribute.\nDim root As XElement = <Root Att=<%= New DateTime(2006, 10, 6, 12, 30, 0) %>/>\n\nConsole.WriteLine(root)\n\n' casting from a strictly formatted XML attribute\nDim dt As DateTime = CType(root.Attribute(\"Att\"), DateTime)\nConsole.WriteLine(\"dt={0}\", dt)\nConsole.WriteLine(\"-----\")\n\n' if root is formatted in some different way than the standard ISO 8601, if at all possible,\n' the value is appropriately converted to DateTime\nDim dtAtt As XAttribute = New XAttribute(\"OrderDate\", \"October 6, 2006\")\nConsole.WriteLine(dtAtt)\nDim orderDate As DateTime = CType(dtAtt, DateTime)\nConsole.WriteLine(\"OrderDate={0:d}\", orderDate)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code><Root Att=\"2006-10-06T12:30:00\" />\ndt=10/6/2006 12:30:00 PM\n-----\nOrderDate=\"October 6, 2006\"\nOrderDate=10/6/2006</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator DateTime(XAttribute attribute)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(attribute As XAttribute) As Date
    parameters:
    - id: attribute
      type: System.Xml.Linq.XAttribute
      description: "\n<p>The <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to cast to <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.DateTime
      description: "\n<p>A <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> that contains the content of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The attribute does not contain a valid <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>attribute</em> parameter is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTime}
    commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTime}
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XAttribute.Narrowing(System.Xml.Linq.XAttribute to System.DateTime)
  name.vb: Narrowing(XAttribute to DateTime)
  nameWithType: XAttribute.Explicit(XAttribute to DateTime)
  nameWithType.vb: XAttribute.Narrowing(XAttribute to DateTime)
- uid: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTimeOffset
  commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTimeOffset
  id: op_Explicit(System.Xml.Linq.XAttribute)~System.DateTimeOffset
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Explicit(XAttribute to DateTimeOffset)
  fullName: System.Xml.Linq.XAttribute.Explicit(System.Xml.Linq.XAttribute to System.DateTimeOffset)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 67
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Cast the value of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an attribute with date and time content. It then casts it to <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> to retrieve the value. </p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XAttribute(\"Att\", new DateTimeOffset(new DateTime(2006, 10, 6, 12, 30, 0)))\n);\nConsole.WriteLine(root);\n\n// casting from a strictly formatted XML attribute\nDateTimeOffset dt = (DateTimeOffset)root.Attribute(\"Att\");\nConsole.WriteLine(\"dt={0}\", dt);</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = _\n<Root\nAtt=<%= New DateTimeOffset(New DateTime(2006, 10, 6, 12, 30, 0)) %>/>\nConsole.WriteLine(root)\n\n' casting from a strictly formatted XML attribute\nDim dt As DateTimeOffset = CType(root.Attribute(\"Att\"), DateTimeOffset)\nConsole.WriteLine(\"dt={0}\", dt)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code><Root Att=\"2006-10-06T12:30:00-07:00\" />\ndt=10/6/2006 12:30:00 PM -07:00</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator DateTimeOffset(XAttribute attribute)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(attribute As XAttribute) As DateTimeOffset
    parameters:
    - id: attribute
      type: System.Xml.Linq.XAttribute
      description: "\n<p>The <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to cast to <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.DateTimeOffset
      description: "\n<p>A <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> that contains the content of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The attribute does not contain a valid <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>attribute</em> parameter is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTimeOffset}
    commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTimeOffset}
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XAttribute.Narrowing(System.Xml.Linq.XAttribute to System.DateTimeOffset)
  name.vb: Narrowing(XAttribute to DateTimeOffset)
  nameWithType: XAttribute.Explicit(XAttribute to DateTimeOffset)
  nameWithType.vb: XAttribute.Narrowing(XAttribute to DateTimeOffset)
- uid: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Decimal
  commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Decimal
  id: op_Explicit(System.Xml.Linq.XAttribute)~System.Decimal
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Explicit(XAttribute to Decimal)
  fullName: System.Xml.Linq.XAttribute.Explicit(System.Xml.Linq.XAttribute to System.Decimal)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 69
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Cast the value of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an attribute with a decimal value. It then retrieves the value of the attribute by casting to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XAttribute(\"Att\", \"79228162514264337593543950335\")\n);\ndecimal value = (decimal)root.Attribute(\"Att\");\nConsole.WriteLine(\"value={0}\", value);</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att=\"79228162514264337593543950335\"/>\nDim value As Decimal = CDec(root.Attribute(\"Att\"))\nConsole.WriteLine(\"value={0}\", value)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>value=79228162514264337593543950335</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator decimal (XAttribute attribute)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(attribute As XAttribute) As Decimal
    parameters:
    - id: attribute
      type: System.Xml.Linq.XAttribute
      description: "\n<p>The <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to cast to <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>A <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> that contains the content of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The attribute does not contain a valid <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>attribute</em> parameter is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Decimal}
    commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Decimal}
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XAttribute.Narrowing(System.Xml.Linq.XAttribute to System.Decimal)
  name.vb: Narrowing(XAttribute to Decimal)
  nameWithType: XAttribute.Explicit(XAttribute to Decimal)
  nameWithType.vb: XAttribute.Narrowing(XAttribute to Decimal)
- uid: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Double
  commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Double
  id: op_Explicit(System.Xml.Linq.XAttribute)~System.Double
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Explicit(XAttribute to Double)
  fullName: System.Xml.Linq.XAttribute.Explicit(System.Xml.Linq.XAttribute to System.Double)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 71
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Cast the value of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an attribute with <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> content. It then retrieves the value by casting to <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XAttribute(\"Att\", 1.79769313486231e308)\n);\ndouble value = (double)root.Attribute(\"Att\");\nConsole.WriteLine(\"value={0}\", value);</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att=\"1.79769313486231E+308\"/>\nDim value As Double = CDbl(root.Attribute(\"Att\"))\nConsole.WriteLine(\"value={0}\", value)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>value=1.79769313486231E+308</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator double (XAttribute attribute)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(attribute As XAttribute) As Double
    parameters:
    - id: attribute
      type: System.Xml.Linq.XAttribute
      description: "\n<p>The <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to cast to <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Double
      description: "\n<p>A <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> that contains the content of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The attribute does not contain a valid <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>attribute</em> parameter is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Double}
    commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Double}
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XAttribute.Narrowing(System.Xml.Linq.XAttribute to System.Double)
  name.vb: Narrowing(XAttribute to Double)
  nameWithType: XAttribute.Explicit(XAttribute to Double)
  nameWithType.vb: XAttribute.Narrowing(XAttribute to Double)
- uid: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Guid
  commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Guid
  id: op_Explicit(System.Xml.Linq.XAttribute)~System.Guid
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Explicit(XAttribute to Guid)
  fullName: System.Xml.Linq.XAttribute.Explicit(System.Xml.Linq.XAttribute to System.Guid)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 73
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Cast the value of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an attribute with a GUID as content. It then retrieves the value by casting to <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XAttribute(\"Att\", new Guid(\"3c1cc55b-baff-4b7a-9d17-077af3aa5730\"))\n);\nGuid value = (Guid)root.Attribute(\"Att\");\nConsole.WriteLine(\"value={0}\", value);</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att=<%= New Guid(\"3c1cc55b-baff-4b7a-9d17-077af3aa5730\") %>/>\nDim value As Guid = CType(root.Attribute(\"Att\"), Guid)\nConsole.WriteLine(\"value={0}\", value)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>value=3c1cc55b-baff-4b7a-9d17-077af3aa5730</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator Guid(XAttribute attribute)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(attribute As XAttribute) As Guid
    parameters:
    - id: attribute
      type: System.Xml.Linq.XAttribute
      description: "\n<p>The <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to cast to <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Guid
      description: "\n<p>A <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> that contains the content of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The attribute does not contain a valid <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>attribute</em> parameter is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Guid}
    commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Guid}
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XAttribute.Narrowing(System.Xml.Linq.XAttribute to System.Guid)
  name.vb: Narrowing(XAttribute to Guid)
  nameWithType: XAttribute.Explicit(XAttribute to Guid)
  nameWithType.vb: XAttribute.Narrowing(XAttribute to Guid)
- uid: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int32
  commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int32
  id: op_Explicit(System.Xml.Linq.XAttribute)~System.Int32
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Explicit(XAttribute to Int32)
  fullName: System.Xml.Linq.XAttribute.Explicit(System.Xml.Linq.XAttribute to System.Int32)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 75
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Cast the value of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an attribute with an integer as content. It then retrieves the value by casting to <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XAttribute(\"Att\", 2147483647)\n);\nint value = (int)root.Attribute(\"Att\");\nConsole.WriteLine(\"value={0}\", value);</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att=\"2147483647\"/>\nDim value As Integer = CInt(root.Attribute(\"Att\"))\nConsole.WriteLine(\"value={0}\", value)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>value=2147483647</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator int (XAttribute attribute)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(attribute As XAttribute) As Integer
    parameters:
    - id: attribute
      type: System.Xml.Linq.XAttribute
      description: "\n<p>The <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to cast to <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that contains the content of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The attribute does not contain a valid <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>attribute</em> parameter is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int32}
    commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int32}
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XAttribute.Narrowing(System.Xml.Linq.XAttribute to System.Int32)
  name.vb: Narrowing(XAttribute to Int32)
  nameWithType: XAttribute.Explicit(XAttribute to Int32)
  nameWithType.vb: XAttribute.Narrowing(XAttribute to Int32)
- uid: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int64
  commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int64
  id: op_Explicit(System.Xml.Linq.XAttribute)~System.Int64
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Explicit(XAttribute to Int64)
  fullName: System.Xml.Linq.XAttribute.Explicit(System.Xml.Linq.XAttribute to System.Int64)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 77
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Cast the value of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an attribute with a long integer as content. It then retrieves the value of the attribute by casting to <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XAttribute(\"Att\", 9223372036854775807)\n);\nlong value = (long)root.Attribute(\"Att\");\nConsole.WriteLine(\"value={0}\", value);</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att=\"9223372036854775807\"/>\nDim value As Long = CLng(root.Attribute(\"Att\"))\nConsole.WriteLine(\"value={0}\", value)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>value=9223372036854775807</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator long (XAttribute attribute)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(attribute As XAttribute) As Long
    parameters:
    - id: attribute
      type: System.Xml.Linq.XAttribute
      description: "\n<p>The <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to cast to <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>A <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> that contains the content of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The attribute does not contain a valid <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>attribute</em> parameter is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int64}
    commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int64}
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XAttribute.Narrowing(System.Xml.Linq.XAttribute to System.Int64)
  name.vb: Narrowing(XAttribute to Int64)
  nameWithType: XAttribute.Explicit(XAttribute to Int64)
  nameWithType.vb: XAttribute.Narrowing(XAttribute to Int64)
- uid: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Boolean}
  commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Boolean}
  id: op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Boolean}
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Explicit(XAttribute to Nullable<Boolean>)
  fullName: System.Xml.Linq.XAttribute.Explicit(System.Xml.Linq.XAttribute to System.Nullable<System.Boolean>)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 79
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Cast the value of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an attribute with Boolean content. It then retrieves the value by casting to <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\", \nnew XAttribute(\"BoolValue1\", true),\nnew XAttribute(\"BoolValue2\", false)\n);\nbool? bool1 = (bool?)root.Attribute(\"BoolValue1\");\nbool? bool2 = (bool?)root.Attribute(\"BoolValue2\");\nConsole.WriteLine(\"Nullable boolean: BoolValue1={0}\", bool1);\nConsole.WriteLine(\"Nullable boolean: BoolValue2={0}\", bool2);</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root BoolValue1=\"true\" BoolValue2=\"false\"/>\nDim bool1 As Nullable(Of Boolean) = CType(root.Attribute(\"BoolValue1\"), Nullable(Of Boolean))\nDim bool2 As Nullable(Of Boolean) = CType(root.Attribute(\"BoolValue2\"), Nullable(Of Boolean))\nConsole.WriteLine(\"Nullable boolean: BoolValue1={0}\", bool1)\nConsole.WriteLine(\"Nullable boolean: BoolValue2={0}\", bool2)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Nullable boolean: BoolValue1=True\nNullable boolean: BoolValue2=False</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator bool ? (XAttribute attribute)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(attribute As XAttribute) As Boolean?
    parameters:
    - id: attribute
      type: System.Xml.Linq.XAttribute
      description: "\n<p>The <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to cast to <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Nullable{System.Boolean}
      description: "\n<p>A <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> that contains the content of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The attribute does not contain a valid <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Boolean
    commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Boolean
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XAttribute.Narrowing(System.Xml.Linq.XAttribute to System.Nullable(Of System.Boolean))
  name.vb: Narrowing(XAttribute to Nullable(Of Boolean))
  nameWithType: XAttribute.Explicit(XAttribute to Nullable<Boolean>)
  nameWithType.vb: XAttribute.Narrowing(XAttribute to Nullable(Of Boolean))
- uid: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTime}
  commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTime}
  id: op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTime}
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Explicit(XAttribute to Nullable<DateTime>)
  fullName: System.Xml.Linq.XAttribute.Explicit(System.Xml.Linq.XAttribute to System.Nullable<System.DateTime>)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 81
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Cast the value of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an attribute with a date and time as content. It then retrieves the value by casting to <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XAttribute(\"Att\", new DateTime(2006, 10, 6, 12, 30, 0))\n);\nDateTime? value = (DateTime?)root.Attribute(\"Att\");\nConsole.WriteLine(\"Nullable DateTime: value={0}\", value == null ? \"null\" : value.ToString());</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att=<%= New DateTime(2006, 10, 6, 12, 30, 0) %>/>\nDim value As Nullable(Of DateTime) = CType(root.Attribute(\"Att\"), Nullable(Of DateTime))\nConsole.WriteLine(\"Nullable DateTime: value={0}\", IIf(value.HasValue, value.ToString(), \"null\"))</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Nullable DateTime: value=10/6/2006 12:30:00 PM</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator DateTime? (XAttribute attribute)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(attribute As XAttribute) As Date?
    parameters:
    - id: attribute
      type: System.Xml.Linq.XAttribute
      description: "\n<p>The <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to cast to a <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Nullable{System.DateTime}
      description: "\n<p>A <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> that contains the content of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The attribute does not contain a valid <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTime
    commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTime
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XAttribute.Narrowing(System.Xml.Linq.XAttribute to System.Nullable(Of System.DateTime))
  name.vb: Narrowing(XAttribute to Nullable(Of DateTime))
  nameWithType: XAttribute.Explicit(XAttribute to Nullable<DateTime>)
  nameWithType.vb: XAttribute.Narrowing(XAttribute to Nullable(Of DateTime))
- uid: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTimeOffset}
  commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTimeOffset}
  id: op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTimeOffset}
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Explicit(XAttribute to Nullable<DateTimeOffset>)
  fullName: System.Xml.Linq.XAttribute.Explicit(System.Xml.Linq.XAttribute to System.Nullable<System.DateTimeOffset>)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 83
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Cast the value of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an attribute with a date and time as content. It then retrieves the value by casting to <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XAttribute(\"Att\", new DateTimeOffset(new DateTime(2006, 10, 6, 12, 30, 0)))\n);\nDateTimeOffset? value = (DateTimeOffset?)root.Attribute(\"Att\");\nConsole.WriteLine(\"Nullable DateTimeOffset: value={0}\", value == null ? \"null\" : value.ToString());</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = _\n<Root\nAtt=<%= New DateTimeOffset(New DateTime(2006, 10, 6, 12, 30, 0)) %>/>\nDim value As Nullable(Of DateTimeOffset) = CType(root.Attribute(\"Att\"), Nullable(Of DateTimeOffset))\nConsole.WriteLine(\"Nullable DateTimeOffset: value={0}\", IIf(value.HasValue, value.ToString(), \"null\"))</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Nullable DateTimeOffset: value=10/6/2006 12:30:00 PM -07:00</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator DateTimeOffset? (XAttribute attribute)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(attribute As XAttribute) As DateTimeOffset?
    parameters:
    - id: attribute
      type: System.Xml.Linq.XAttribute
      description: "\n<p>The <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to cast to a <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Nullable{System.DateTimeOffset}
      description: "\n<p>A <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> that contains the content of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The attribute does not contain a valid <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XAttribute.Narrowing(System.Xml.Linq.XAttribute to System.Nullable(Of System.DateTimeOffset))
  name.vb: Narrowing(XAttribute to Nullable(Of DateTimeOffset))
  nameWithType: XAttribute.Explicit(XAttribute to Nullable<DateTimeOffset>)
  nameWithType.vb: XAttribute.Narrowing(XAttribute to Nullable(Of DateTimeOffset))
- uid: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Decimal}
  commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Decimal}
  id: op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Decimal}
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Explicit(XAttribute to Nullable<Decimal>)
  fullName: System.Xml.Linq.XAttribute.Explicit(System.Xml.Linq.XAttribute to System.Nullable<System.Decimal>)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 85
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Cast the value of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an attribute with decimal content. It then retrieves the value by casting to <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XAttribute(\"Att\", \"79228162514264337593543950335\")\n);\ndecimal? value = (decimal?)root.Attribute(\"Att\");\nConsole.WriteLine(\"Nullable decimal: value={0}\", value == null ? \"null\" : value.ToString());</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att=\"79228162514264337593543950335\"/>\nDim value As Nullable(Of Decimal) = CType(root.Attribute(\"Att\"), Nullable(Of Decimal))\nConsole.WriteLine(\"Nullable decimal: value={0}\", IIf(value.HasValue, value.ToString(), \"null\"))</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Nullable decimal: value=79228162514264337593543950335</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator decimal ? (XAttribute attribute)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(attribute As XAttribute) As Decimal?
    parameters:
    - id: attribute
      type: System.Xml.Linq.XAttribute
      description: "\n<p>The <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to cast to <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Nullable{System.Decimal}
      description: "\n<p>A <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> that contains the content of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The attribute does not contain a valid <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Decimal
    commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Decimal
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XAttribute.Narrowing(System.Xml.Linq.XAttribute to System.Nullable(Of System.Decimal))
  name.vb: Narrowing(XAttribute to Nullable(Of Decimal))
  nameWithType: XAttribute.Explicit(XAttribute to Nullable<Decimal>)
  nameWithType.vb: XAttribute.Narrowing(XAttribute to Nullable(Of Decimal))
- uid: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Double}
  commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Double}
  id: op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Double}
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Explicit(XAttribute to Nullable<Double>)
  fullName: System.Xml.Linq.XAttribute.Explicit(System.Xml.Linq.XAttribute to System.Nullable<System.Double>)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 87
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Cast the value of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an attribute with double precision floating point content. It then retrieves the value by casting to <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XAttribute(\"Att\", 1.79769313486231e308)\n);\ndouble? value = (double?)root.Attribute(\"Att\");\nConsole.WriteLine(\"Nullable double: value={0}\", value == null ? \"null\" : value.ToString());</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att=\"1.79769313486231E+308\"/>\nDim value As Nullable(Of Double) = CType(root.Attribute(\"Att\"), Nullable(Of Double))\nConsole.WriteLine(\"Nullable double: value={0}\", IIf(value.HasValue, value.ToString(), \"null\"))</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Nullable double: value=1.79769313486231E+308</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator double ? (XAttribute attribute)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(attribute As XAttribute) As Double?
    parameters:
    - id: attribute
      type: System.Xml.Linq.XAttribute
      description: "\n<p>The <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to cast to <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>A <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> that contains the content of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The attribute does not contain a valid <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Double
    commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Double
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XAttribute.Narrowing(System.Xml.Linq.XAttribute to System.Nullable(Of System.Double))
  name.vb: Narrowing(XAttribute to Nullable(Of Double))
  nameWithType: XAttribute.Explicit(XAttribute to Nullable<Double>)
  nameWithType.vb: XAttribute.Narrowing(XAttribute to Nullable(Of Double))
- uid: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Guid}
  commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Guid}
  id: op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Guid}
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Explicit(XAttribute to Nullable<Guid>)
  fullName: System.Xml.Linq.XAttribute.Explicit(System.Xml.Linq.XAttribute to System.Nullable<System.Guid>)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 89
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Cast the value of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an attribute with guid content. It then retrieves the value by casting to <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XAttribute(\"Att\", new Guid(\"3c1cc55b-baff-4b7a-9d17-077af3aa5730\"))\n);\nGuid? value = (Guid?)root.Attribute(\"Att\");\nConsole.WriteLine(\"Nullable Guid: value={0}\", value == null ? \"null\" : value.ToString());</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att=<%= New Guid(\"3c1cc55b-baff-4b7a-9d17-077af3aa5730\") %>/>\nDim value As Nullable(Of Guid) = CType(root.Attribute(\"Att\"), Nullable(Of Guid))\nConsole.WriteLine(\"Nullable Guid: value={0}\", IIf(value.HasValue, value.ToString(), \"null\"))</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Nullable Guid: value=3c1cc55b-baff-4b7a-9d17-077af3aa5730</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator Guid? (XAttribute attribute)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(attribute As XAttribute) As Guid?
    parameters:
    - id: attribute
      type: System.Xml.Linq.XAttribute
      description: "\n<p>The <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to cast to a <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Nullable{System.Guid}
      description: "\n<p>A <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> that contains the content of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The attribute does not contain a valid <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Guid
    commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Guid
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XAttribute.Narrowing(System.Xml.Linq.XAttribute to System.Nullable(Of System.Guid))
  name.vb: Narrowing(XAttribute to Nullable(Of Guid))
  nameWithType: XAttribute.Explicit(XAttribute to Nullable<Guid>)
  nameWithType.vb: XAttribute.Narrowing(XAttribute to Nullable(Of Guid))
- uid: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int32}
  commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int32}
  id: op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int32}
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Explicit(XAttribute to Nullable<Int32>)
  fullName: System.Xml.Linq.XAttribute.Explicit(System.Xml.Linq.XAttribute to System.Nullable<System.Int32>)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 91
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Cast the value of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an attribute with integer content. It then retrieves the value by casting to <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\", \nnew XAttribute(\"Att\", 2147483647)\n);\nint? value = (int?)root.Attribute(\"Att\");\nConsole.WriteLine(\"Nullable int: value={0}\", value == null ? \"null\" : value.ToString());</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att=\"2147483647\"/>\nDim value As Nullable(Of Integer) = CType(root.Attribute(\"Att\"), Nullable(Of Integer))\nConsole.WriteLine(\"Nullable int: value={0}\", IIf(value.HasValue, value.ToString(), \"null\"))</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Nullable int: value=2147483647</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator int ? (XAttribute attribute)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(attribute As XAttribute) As Integer?
    parameters:
    - id: attribute
      type: System.Xml.Linq.XAttribute
      description: "\n<p>The <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to cast to a <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Nullable{System.Int32}
      description: "\n<p>A <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that contains the content of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int32
    commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int32
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XAttribute.Narrowing(System.Xml.Linq.XAttribute to System.Nullable(Of System.Int32))
  name.vb: Narrowing(XAttribute to Nullable(Of Int32))
  nameWithType: XAttribute.Explicit(XAttribute to Nullable<Int32>)
  nameWithType.vb: XAttribute.Narrowing(XAttribute to Nullable(Of Int32))
- uid: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int64}
  commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int64}
  id: op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int64}
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Explicit(XAttribute to Nullable<Int64>)
  fullName: System.Xml.Linq.XAttribute.Explicit(System.Xml.Linq.XAttribute to System.Nullable<System.Int64>)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 93
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Cast the value of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an attribute with long integer content. It then retrieves the value by casting to <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\", \nnew XAttribute(\"Att\", 9223372036854775807)\n);\nlong? value = (long?)root.Attribute(\"Att\");\nConsole.WriteLine(\"Nullable long: value={0}\", value == null ? \"null\" : value.ToString());</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att=\"9223372036854775807\"/>\nDim value As Nullable(Of Long) = CType(root.Attribute(\"Att\"), Nullable(Of Long))\nConsole.WriteLine(\"Nullable long: value={0}\", IIf(value.HasValue, value.ToString(), \"null\"))</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Nullable long: value=9223372036854775807</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator long ? (XAttribute attribute)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(attribute As XAttribute) As Long?
    parameters:
    - id: attribute
      type: System.Xml.Linq.XAttribute
      description: "\n<p>The <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to cast to a <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>A <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> that contains the content of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The attribute does not contain a valid <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int64
    commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int64
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XAttribute.Narrowing(System.Xml.Linq.XAttribute to System.Nullable(Of System.Int64))
  name.vb: Narrowing(XAttribute to Nullable(Of Int64))
  nameWithType: XAttribute.Explicit(XAttribute to Nullable<Int64>)
  nameWithType.vb: XAttribute.Narrowing(XAttribute to Nullable(Of Int64))
- uid: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Single}
  commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Single}
  id: op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Single}
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Explicit(XAttribute to Nullable<Single>)
  fullName: System.Xml.Linq.XAttribute.Explicit(System.Xml.Linq.XAttribute to System.Nullable<System.Single>)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 95
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Cast the value of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an attribute with single precision floating point content. It then retrieves the value by casting to <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\", \nnew XAttribute(\"Att\", 3.402823e38)\n);\nfloat? value = (float?)root.Attribute(\"Att\");\nConsole.WriteLine(\"Nullable Single: value={0}\", value == null ? \"null\" : value.ToString());</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att=\"3.402823E+38\"/>\nDim value As Nullable(Of Single) = CType(root.Attribute(\"Att\"), Nullable(Of Single))\nConsole.WriteLine(\"Nullable Single: value={0}\", IIf(value.HasValue, value.ToString(), \"null\"))</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Nullable Single: value=3.402823E+38</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator float ? (XAttribute attribute)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(attribute As XAttribute) As Single?
    parameters:
    - id: attribute
      type: System.Xml.Linq.XAttribute
      description: "\n<p>The <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to cast to <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Nullable{System.Single}
      description: "\n<p>A <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> that contains the content of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The attribute does not contain a valid <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Single
    commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Single
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XAttribute.Narrowing(System.Xml.Linq.XAttribute to System.Nullable(Of System.Single))
  name.vb: Narrowing(XAttribute to Nullable(Of Single))
  nameWithType: XAttribute.Explicit(XAttribute to Nullable<Single>)
  nameWithType.vb: XAttribute.Narrowing(XAttribute to Nullable(Of Single))
- uid: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.TimeSpan}
  commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.TimeSpan}
  id: op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.TimeSpan}
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Explicit(XAttribute to Nullable<TimeSpan>)
  fullName: System.Xml.Linq.XAttribute.Explicit(System.Xml.Linq.XAttribute to System.Nullable<System.TimeSpan>)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 97
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Cast the value of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an attribute with time span content. It then retrieves the value by casting to <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XAttribute(\"Att\", new TimeSpan(1, 5, 30))\n);\nTimeSpan? value = (TimeSpan?)root.Attribute(\"Att\");\nConsole.WriteLine(\"Nullable TimeSpan: value={0}\", value == null ? \"null\" : value.ToString());</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att=<%= New TimeSpan(1, 5, 30) %>/>\nDim value As Nullable(Of TimeSpan) = CType(root.Attribute(\"Att\"), Nullable(Of TimeSpan))\nConsole.WriteLine(\"Nullable TimeSpan: value={0}\", IIf(value.HasValue, value.ToString(), \"null\"))</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Nullable TimeSpan: value=01:05:30</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator TimeSpan? (XAttribute attribute)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(attribute As XAttribute) As TimeSpan?
    parameters:
    - id: attribute
      type: System.Xml.Linq.XAttribute
      description: "\n<p>The <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to cast to a <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Nullable{System.TimeSpan}
      description: "\n<p>A <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that contains the content of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The attribute does not contain a valid <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.TimeSpan
    commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.TimeSpan
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XAttribute.Narrowing(System.Xml.Linq.XAttribute to System.Nullable(Of System.TimeSpan))
  name.vb: Narrowing(XAttribute to Nullable(Of TimeSpan))
  nameWithType: XAttribute.Explicit(XAttribute to Nullable<TimeSpan>)
  nameWithType.vb: XAttribute.Narrowing(XAttribute to Nullable(Of TimeSpan))
- uid: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt32}
  commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt32}
  id: op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt32}
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Explicit(XAttribute to Nullable<UInt32>)
  fullName: System.Xml.Linq.XAttribute.Explicit(System.Xml.Linq.XAttribute to System.Nullable<System.UInt32>)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 99
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Cast the value of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an attribute with unsigned integer content. It then retrieves the value by casting to <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\", \nnew XAttribute(\"Att\", 4294967295)\n);\nuint? value = (uint?)root.Attribute(\"Att\");\nConsole.WriteLine(\"Nullable uint: value={0}\", value == null ? \"null\" : value.ToString());</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att=\"4294967295\"/>\nDim value As Nullable(Of UInteger) = CType(root.Attribute(\"Att\"), Nullable(Of UInteger))\nConsole.WriteLine(\"Nullable uint: value={0}\", IIf(value.HasValue, value.ToString(), \"null\"))</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Nullable uint: value=4294967295</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator uint ? (XAttribute attribute)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(attribute As XAttribute) As UInteger?
    parameters:
    - id: attribute
      type: System.Xml.Linq.XAttribute
      description: "\n<p>The <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to cast to a <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Nullable{System.UInt32}
      description: "\n<p>A <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> that contains the content of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The attribute does not contain a valid <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt32
    commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt32
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XAttribute.Narrowing(System.Xml.Linq.XAttribute to System.Nullable(Of System.UInt32))
  name.vb: Narrowing(XAttribute to Nullable(Of UInt32))
  nameWithType: XAttribute.Explicit(XAttribute to Nullable<UInt32>)
  nameWithType.vb: XAttribute.Narrowing(XAttribute to Nullable(Of UInt32))
- uid: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt64}
  commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt64}
  id: op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt64}
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Explicit(XAttribute to Nullable<UInt64>)
  fullName: System.Xml.Linq.XAttribute.Explicit(System.Xml.Linq.XAttribute to System.Nullable<System.UInt64>)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 101
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Cast the value of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an attribute with unsigned long integer content. It then retrieves the value by casting to <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\", \nnew XAttribute(\"Att\", 9223372036854775807)\n);\nulong? value = (ulong?)root.Attribute(\"Att\");\nConsole.WriteLine(\"Nullable ulong: value={0}\", value == null ? \"null\" : value.ToString());</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att=\"9223372036854775807\"/>\nDim value As Nullable(Of ULong) = CType(root.Attribute(\"Att\"), Nullable(Of ULong))\nConsole.WriteLine(\"Nullable ulong: value={0}\", IIf(value.HasValue, value.ToString(), \"null\"))</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Nullable ulong: value=9223372036854775807</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator ulong ? (XAttribute attribute)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(attribute As XAttribute) As ULong?
    parameters:
    - id: attribute
      type: System.Xml.Linq.XAttribute
      description: "\n<p>The <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to cast to a <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Nullable{System.UInt64}
      description: "\n<p>A <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> that contains the content of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The attribute does not contain a valid <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt64
    commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt64
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XAttribute.Narrowing(System.Xml.Linq.XAttribute to System.Nullable(Of System.UInt64))
  name.vb: Narrowing(XAttribute to Nullable(Of UInt64))
  nameWithType: XAttribute.Explicit(XAttribute to Nullable<UInt64>)
  nameWithType.vb: XAttribute.Narrowing(XAttribute to Nullable(Of UInt64))
- uid: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Single
  commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Single
  id: op_Explicit(System.Xml.Linq.XAttribute)~System.Single
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Explicit(XAttribute to Single)
  fullName: System.Xml.Linq.XAttribute.Explicit(System.Xml.Linq.XAttribute to System.Single)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 103
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Cast the value of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an attribute with single precision floating point content. It then retrieves the value by casting to <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XAttribute(\"Att\", 3.402823e38)\n);\nfloat value = (float)root.Attribute(\"Att\");\nConsole.WriteLine(\"value={0}\", value);</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att=\"3.402823E+38\"/>\nDim value As Single = CSng(root.Attribute(\"Att\"))\nConsole.WriteLine(\"value={0}\", value)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>value=3.402823E+38</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator float (XAttribute attribute)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(attribute As XAttribute) As Single
    parameters:
    - id: attribute
      type: System.Xml.Linq.XAttribute
      description: "\n<p>The <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to cast to <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Single
      description: "\n<p>A <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> that contains the content of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The attribute does not contain a valid <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>attribute</em> parameter is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Single}
    commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Single}
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XAttribute.Narrowing(System.Xml.Linq.XAttribute to System.Single)
  name.vb: Narrowing(XAttribute to Single)
  nameWithType: XAttribute.Explicit(XAttribute to Single)
  nameWithType.vb: XAttribute.Narrowing(XAttribute to Single)
- uid: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.String
  commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.String
  id: op_Explicit(System.Xml.Linq.XAttribute)~System.String
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Explicit(XAttribute to String)
  fullName: System.Xml.Linq.XAttribute.Explicit(System.Xml.Linq.XAttribute to System.String)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 105
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Cast the value of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an attribute with string content. It then retrieves the value by casting to <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XAttribute(\"Att\", \"attribute content\")\n);\nXAttribute att = root.Attribute(\"Att\");\nstring str = (string)att;\nConsole.WriteLine(\"(string)att={0}\", str);</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att=\"attribute content\"/>\nDim att As XAttribute = root.Attribute(\"Att\")\nDim str As String = CStr(att)\nConsole.WriteLine(\"(string)att={0}\", str)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>(string)att=attribute content</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator string (XAttribute attribute)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(attribute As XAttribute) As String
    parameters:
    - id: attribute
      type: System.Xml.Linq.XAttribute
      description: "\n<p>The <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to cast to <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that contains the content of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.ToString
    commentId: M:System.Xml.Linq.XAttribute.ToString
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XAttribute.Narrowing(System.Xml.Linq.XAttribute to System.String)
  name.vb: Narrowing(XAttribute to String)
  nameWithType: XAttribute.Explicit(XAttribute to String)
  nameWithType.vb: XAttribute.Narrowing(XAttribute to String)
- uid: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.TimeSpan
  commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.TimeSpan
  id: op_Explicit(System.Xml.Linq.XAttribute)~System.TimeSpan
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Explicit(XAttribute to TimeSpan)
  fullName: System.Xml.Linq.XAttribute.Explicit(System.Xml.Linq.XAttribute to System.TimeSpan)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 107
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Cast the value of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an attribute with time span content. It then retrieves the value by casting to <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XAttribute(\"Att\", new TimeSpan(1, 5, 30))\n);\nTimeSpan value = (TimeSpan)root.Attribute(\"Att\");\nConsole.WriteLine(\"value={0}\", value);</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att=<%= New TimeSpan(1, 5, 30) %>/>\nDim value As TimeSpan = CType(root.Attribute(\"Att\"), TimeSpan)\nConsole.WriteLine(\"value={0}\", value)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>value=01:05:30</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator TimeSpan(XAttribute attribute)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(attribute As XAttribute) As TimeSpan
    parameters:
    - id: attribute
      type: System.Xml.Linq.XAttribute
      description: "\n<p>The <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to cast to <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that contains the content of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The attribute does not contain a valid <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>attribute</em> parameter is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.TimeSpan}
    commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.TimeSpan}
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XAttribute.Narrowing(System.Xml.Linq.XAttribute to System.TimeSpan)
  name.vb: Narrowing(XAttribute to TimeSpan)
  nameWithType: XAttribute.Explicit(XAttribute to TimeSpan)
  nameWithType.vb: XAttribute.Narrowing(XAttribute to TimeSpan)
- uid: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt32
  commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt32
  id: op_Explicit(System.Xml.Linq.XAttribute)~System.UInt32
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Explicit(XAttribute to UInt32)
  fullName: System.Xml.Linq.XAttribute.Explicit(System.Xml.Linq.XAttribute to System.UInt32)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 109
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Cast the value of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an attribute with unsigned integer content. It then retrieves the value by casting to <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\", \nnew XAttribute(\"Att\", 4294967295)\n);\nuint value = (uint)root.Attribute(\"Att\");\nConsole.WriteLine(\"value={0}\", value);</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att=\"4294967295\"/>\nDim value As UInteger = CUInt(root.Attribute(\"Att\"))\nConsole.WriteLine(\"value={0}\", value)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>value=4294967295</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator uint (XAttribute attribute)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(attribute As XAttribute) As UInteger
    parameters:
    - id: attribute
      type: System.Xml.Linq.XAttribute
      description: "\n<p>The <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to cast to <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.UInt32
      description: "\n<p>A <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> that contains the content of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The attribute does not contain a valid <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>attribute</em> parameter is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt32}
    commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt32}
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XAttribute.Narrowing(System.Xml.Linq.XAttribute to System.UInt32)
  name.vb: Narrowing(XAttribute to UInt32)
  nameWithType: XAttribute.Explicit(XAttribute to UInt32)
  nameWithType.vb: XAttribute.Narrowing(XAttribute to UInt32)
- uid: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt64
  commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt64
  id: op_Explicit(System.Xml.Linq.XAttribute)~System.UInt64
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Explicit(XAttribute to UInt64)
  fullName: System.Xml.Linq.XAttribute.Explicit(System.Xml.Linq.XAttribute to System.UInt64)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 111
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Cast the value of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an attribute with unsigned long integer content. It then retrieves the value by casting to <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XAttribute(\"Att\", 1844674407370955161)\n);\nulong value = (ulong)root.Attribute(\"Att\");\nConsole.WriteLine(\"value={0}\", value);</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att=\"1844674407370955161\"/>\nDim value As ULong = CULng(root.Attribute(\"Att\"))\nConsole.WriteLine(\"value={0}\", value)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>value=1844674407370955161</code></pre>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static explicit operator ulong (XAttribute attribute)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Narrowing Operator CType(attribute As XAttribute) As ULong
    parameters:
    - id: attribute
      type: System.Xml.Linq.XAttribute
      description: "\n<p>The <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> to cast to <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.UInt64
      description: "\n<p>A <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> that contains the content of this <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The attribute does not contain a valid <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>attribute</em> parameter is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt64}
    commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt64}
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XAttribute.Narrowing(System.Xml.Linq.XAttribute to System.UInt64)
  name.vb: Narrowing(XAttribute to UInt64)
  nameWithType: XAttribute.Explicit(XAttribute to UInt64)
  nameWithType.vb: XAttribute.Narrowing(XAttribute to UInt64)
- uid: System.Xml.Linq.XAttribute.Remove
  commentId: M:System.Xml.Linq.XAttribute.Remove
  id: Remove
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: Remove()
  fullName: System.Xml.Linq.XAttribute.Remove()
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 113
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Removes this attribute from its parent element.</p>\n"
  example:
  - "\n<p>The following example creates an element with three attributes. It then removes one of the attributes.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XAttribute(\"Att1\", \"content1\"),\nnew XAttribute(\"Att2\", \"content2\"),\nnew XAttribute(\"Att3\", \"content3\")\n);\nXAttribute att = root.Attribute(\"Att2\");\natt.Remove();\nConsole.WriteLine(root);</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att1=\"content1\" Att2=\"content2\" Att3=\"content3\"/>\nDim att As XAttribute = root.Attribute(\"Att2\")\natt.Remove()\nConsole.WriteLine(root)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code><Root Att1=\"content1\" Att3=\"content3\" /></code></pre>\n"
  syntax:
    content: public void Remove()
    content.vb: Public Sub Remove
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The parent element is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: XAttribute.Remove()
- uid: System.Xml.Linq.XAttribute.SetValue(System.Object)
  commentId: M:System.Xml.Linq.XAttribute.SetValue(System.Object)
  id: SetValue(System.Object)
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: SetValue(Object)
  fullName: System.Xml.Linq.XAttribute.SetValue(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetValue
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 114
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Sets the value of this attribute.</p>\n"
  example:
  - "\n<p>The following example creates an element with several attributes. It then changes the contents of one of the attributes.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XAttribute(\"Att1\", \"content1\"),\nnew XAttribute(\"Att2\", \"content2\"),\nnew XAttribute(\"Att3\", \"content3\")\n);\nXAttribute att = root.Attribute(\"Att2\");\natt.SetValue(\"new content\");\nConsole.WriteLine(root);</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att1=\"content1\" Att2=\"content2\" Att3=\"content3\"/>\nDim att As XAttribute = root.Attribute(\"Att2\")\natt.SetValue(\"new content\")\nConsole.WriteLine(root)</code></pre>\n<p>This example produces the following output:</p>\n<pre><code><Root Att1=\"content1\" Att2=\"new content\" Att3=\"content3\" /></code></pre>\n"
  syntax:
    content: public void SetValue(object value)
    content.vb: Public Sub SetValue(value As Object)
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The value to assign to this attribute.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>value</em> parameter is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>value</em> is an <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XElement.SetValue(System.Object)
    commentId: M:System.Xml.Linq.XElement.SetValue(System.Object)
  - type: System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)
    commentId: M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)
  - type: System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)
    commentId: M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)
  - type: System.Xml.Linq.XAttribute.Value
    commentId: P:System.Xml.Linq.XAttribute.Value
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: XAttribute.SetValue(Object)
- uid: System.Xml.Linq.XAttribute.ToString
  commentId: M:System.Xml.Linq.XAttribute.ToString
  id: ToString
  parent: System.Xml.Linq.XAttribute
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Xml.Linq.XAttribute.ToString()
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 115
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Converts the current <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> object to a string representation.</p>\n"
  example:
  - "\n<p>The following example creates an element with several attributes. It then gets an attribute and displays it and its content by calling this method.</p>\n<pre><code class=\"c#\">XElement root = new XElement(\"Root\",\nnew XAttribute(\"Att1\", \"content1\"),\nnew XAttribute(\"Att2\", \"content2\"),\nnew XAttribute(\"Att3\", \"content3\")\n);\nXAttribute att = root.Attribute(\"Att2\");\nConsole.WriteLine(att.ToString());</code></pre>\n<pre><code class=\"vb\">Dim root As XElement = <Root Att1=\"content1\" Att2=\"content2\" Att3=\"content3\"/>\nDim att As XAttribute = root.Attribute(\"Att2\")\nConsole.WriteLine(att.ToString())</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Att2=\"content2\"</code></pre>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the XML text representation of an attribute and its value.</p>\n"
  seealso:
  - type: System.Xml.Linq.XAttribute.Name
    commentId: P:System.Xml.Linq.XAttribute.Name
  - type: System.Xml.Linq.XAttribute.Value
    commentId: P:System.Xml.Linq.XAttribute.Value
  - type: System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.String
    commentId: M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.String
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: XAttribute.ToString()
references:
- uid: System.Xml.Linq
  isExternal: false
  name: System.Xml.Linq
  fullName: System.Xml.Linq
  commentId: N:System.Xml.Linq
  nameWithType: System.Xml.Linq
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  commentId: T:System.Object
  nameWithType: Object
- uid: System.Xml.Linq.XObject
  parent: System.Xml.Linq
  isExternal: false
  name: XObject
  fullName: System.Xml.Linq.XObject
  commentId: T:System.Xml.Linq.XObject
  nameWithType: XObject
- uid: System.Xml.Linq.XObject.BaseUri
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: BaseUri
  fullName: System.Xml.Linq.XObject.BaseUri
  commentId: P:System.Xml.Linq.XObject.BaseUri
  nameWithType: XObject.BaseUri
- uid: System.Xml.Linq.XObject.Document
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Document
  fullName: System.Xml.Linq.XObject.Document
  commentId: P:System.Xml.Linq.XObject.Document
  nameWithType: XObject.Document
- uid: System.Xml.Linq.XObject.Parent
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Parent
  fullName: System.Xml.Linq.XObject.Parent
  commentId: P:System.Xml.Linq.XObject.Parent
  nameWithType: XObject.Parent
- uid: System.Xml.Linq.XObject.Changed
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Changed
  fullName: System.Xml.Linq.XObject.Changed
  commentId: E:System.Xml.Linq.XObject.Changed
  nameWithType: XObject.Changed
- uid: System.Xml.Linq.XObject.Changing
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Changing
  fullName: System.Xml.Linq.XObject.Changing
  commentId: E:System.Xml.Linq.XObject.Changing
  nameWithType: XObject.Changing
- uid: System.Xml.Linq.XObject.AddAnnotation(System.Object)
  parent: System.Xml.Linq.XObject
  isExternal: true
  name: AddAnnotation(Object)
  fullName: System.Xml.Linq.XObject.AddAnnotation(System.Object)
  spec.csharp:
  - uid: System.Xml.Linq.XObject.AddAnnotation(System.Object)
    name: AddAnnotation
    fullName: System.Xml.Linq.XObject.AddAnnotation
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XObject.AddAnnotation(System.Object)
    name: AddAnnotation
    fullName: System.Xml.Linq.XObject.AddAnnotation
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Xml.Linq.XObject.AddAnnotation(System.Object)
  nameWithType: XObject.AddAnnotation(Object)
- uid: System.Xml.Linq.XObject.Annotation(System.Type)
  parent: System.Xml.Linq.XObject
  isExternal: true
  name: Annotation(Type)
  fullName: System.Xml.Linq.XObject.Annotation(System.Type)
  spec.csharp:
  - uid: System.Xml.Linq.XObject.Annotation(System.Type)
    name: Annotation
    fullName: System.Xml.Linq.XObject.Annotation
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XObject.Annotation(System.Type)
    name: Annotation
    fullName: System.Xml.Linq.XObject.Annotation
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Xml.Linq.XObject.Annotation(System.Type)
  nameWithType: XObject.Annotation(Type)
- uid: System.Xml.Linq.XObject.Annotation``1
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Annotation<T>()
  fullName: System.Xml.Linq.XObject.Annotation<T>()
  fullname.vb: System.Xml.Linq.XObject.Annotation(Of T)()
  name.vb: Annotation(Of T)()
  spec.csharp:
  - uid: System.Xml.Linq.XObject.Annotation``1
    name: Annotation<T>
    fullName: System.Xml.Linq.XObject.Annotation<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XObject.Annotation``1
    name: Annotation(Of T)
    fullName: System.Xml.Linq.XObject.Annotation(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Xml.Linq.XObject.Annotation``1
  nameWithType: XObject.Annotation<T>()
  nameWithType.vb: XObject.Annotation(Of T)()
- uid: System.Xml.Linq.XObject.Annotations(System.Type)
  parent: System.Xml.Linq.XObject
  isExternal: true
  name: Annotations(Type)
  fullName: System.Xml.Linq.XObject.Annotations(System.Type)
  spec.csharp:
  - uid: System.Xml.Linq.XObject.Annotations(System.Type)
    name: Annotations
    fullName: System.Xml.Linq.XObject.Annotations
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XObject.Annotations(System.Type)
    name: Annotations
    fullName: System.Xml.Linq.XObject.Annotations
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Xml.Linq.XObject.Annotations(System.Type)
  nameWithType: XObject.Annotations(Type)
- uid: System.Xml.Linq.XObject.Annotations``1
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: Annotations<T>()
  fullName: System.Xml.Linq.XObject.Annotations<T>()
  fullname.vb: System.Xml.Linq.XObject.Annotations(Of T)()
  name.vb: Annotations(Of T)()
  spec.csharp:
  - uid: System.Xml.Linq.XObject.Annotations``1
    name: Annotations<T>
    fullName: System.Xml.Linq.XObject.Annotations<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XObject.Annotations``1
    name: Annotations(Of T)
    fullName: System.Xml.Linq.XObject.Annotations(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Xml.Linq.XObject.Annotations``1
  nameWithType: XObject.Annotations<T>()
  nameWithType.vb: XObject.Annotations(Of T)()
- uid: System.Xml.Linq.XObject.RemoveAnnotations(System.Type)
  parent: System.Xml.Linq.XObject
  isExternal: true
  name: RemoveAnnotations(Type)
  fullName: System.Xml.Linq.XObject.RemoveAnnotations(System.Type)
  spec.csharp:
  - uid: System.Xml.Linq.XObject.RemoveAnnotations(System.Type)
    name: RemoveAnnotations
    fullName: System.Xml.Linq.XObject.RemoveAnnotations
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XObject.RemoveAnnotations(System.Type)
    name: RemoveAnnotations
    fullName: System.Xml.Linq.XObject.RemoveAnnotations
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Xml.Linq.XObject.RemoveAnnotations(System.Type)
  nameWithType: XObject.RemoveAnnotations(Type)
- uid: System.Xml.Linq.XObject.RemoveAnnotations``1
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: RemoveAnnotations<T>()
  fullName: System.Xml.Linq.XObject.RemoveAnnotations<T>()
  fullname.vb: System.Xml.Linq.XObject.RemoveAnnotations(Of T)()
  name.vb: RemoveAnnotations(Of T)()
  spec.csharp:
  - uid: System.Xml.Linq.XObject.RemoveAnnotations``1
    name: RemoveAnnotations<T>
    fullName: System.Xml.Linq.XObject.RemoveAnnotations<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.Linq.XObject.RemoveAnnotations``1
    name: RemoveAnnotations(Of T)
    fullName: System.Xml.Linq.XObject.RemoveAnnotations(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Xml.Linq.XObject.RemoveAnnotations``1
  nameWithType: XObject.RemoveAnnotations<T>()
  nameWithType.vb: XObject.RemoveAnnotations(Of T)()
- uid: System
  isExternal: false
  name: System
  fullName: System
  commentId: N:System
  nameWithType: System
- uid: System.Xml.Linq.XAttribute
  parent: System.Xml.Linq
  isExternal: false
  name: XAttribute
  fullName: System.Xml.Linq.XAttribute
  commentId: T:System.Xml.Linq.XAttribute
  nameWithType: XAttribute
- uid: System.Xml.Linq.XName
  parent: System.Xml.Linq
  isExternal: false
  name: XName
  fullName: System.Xml.Linq.XName
  commentId: T:System.Xml.Linq.XName
  nameWithType: XName
- uid: System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<XAttribute>
  fullName: System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XAttribute)
  name.vb: IEnumerable(Of XAttribute)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Xml.Linq.XAttribute
    name: XAttribute
    fullName: System.Xml.Linq.XAttribute
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Xml.Linq.XAttribute
    name: XAttribute
    fullName: System.Xml.Linq.XAttribute
  - name: )
    fullName: )
  commentId: T:System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute}
  nameWithType: IEnumerable<XAttribute>
  nameWithType.vb: IEnumerable(Of XAttribute)
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  commentId: T:System.Collections.Generic.IEnumerable`1
  nameWithType: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
  commentId: N:System.Collections.Generic
  nameWithType: System.Collections.Generic
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  commentId: T:System.Boolean
  nameWithType: Boolean
- uid: System.Xml.Linq.XObject.NodeType
  parent: System.Xml.Linq.XObject
  isExternal: false
  name: NodeType
  fullName: System.Xml.Linq.XObject.NodeType
  commentId: P:System.Xml.Linq.XObject.NodeType
  nameWithType: XObject.NodeType
- uid: System.Xml.XmlNodeType
  parent: System.Xml
  isExternal: false
  name: XmlNodeType
  fullName: System.Xml.XmlNodeType
  commentId: T:System.Xml.XmlNodeType
  nameWithType: XmlNodeType
- uid: System.Xml
  isExternal: false
  name: System.Xml
  fullName: System.Xml
  commentId: N:System.Xml
  nameWithType: System.Xml
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  commentId: T:System.String
  nameWithType: String
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  fullName: System.DateTime
  commentId: T:System.DateTime
  nameWithType: DateTime
- uid: System.DateTimeOffset
  parent: System
  isExternal: false
  name: DateTimeOffset
  fullName: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  nameWithType: DateTimeOffset
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
  commentId: T:System.Decimal
  nameWithType: Decimal
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
  commentId: T:System.Double
  nameWithType: Double
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  fullName: System.Guid
  commentId: T:System.Guid
  nameWithType: Guid
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
  commentId: T:System.Int32
  nameWithType: Int32
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
  commentId: T:System.Int64
  nameWithType: Int64
- uid: System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  fullname.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Nullable{System.Boolean}
  nameWithType: Nullable<Boolean>
  nameWithType.vb: Nullable(Of Boolean)
- uid: System.Nullable`1
  parent: System
  isExternal: false
  name: Nullable<T>
  fullName: System.Nullable<T>
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  commentId: T:System.Nullable`1
  nameWithType: Nullable<T>
  nameWithType.vb: Nullable(Of T)
- uid: System.Nullable{System.DateTime}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTime>
  fullName: System.Nullable<System.DateTime>
  fullname.vb: System.Nullable(Of System.DateTime)
  name.vb: Nullable(Of DateTime)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Nullable{System.DateTime}
  nameWithType: Nullable<DateTime>
  nameWithType.vb: Nullable(Of DateTime)
- uid: System.Nullable{System.DateTimeOffset}
  parent: System
  definition: System.Nullable`1
  name: Nullable<DateTimeOffset>
  fullName: System.Nullable<System.DateTimeOffset>
  fullname.vb: System.Nullable(Of System.DateTimeOffset)
  name.vb: Nullable(Of DateTimeOffset)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Nullable{System.DateTimeOffset}
  nameWithType: Nullable<DateTimeOffset>
  nameWithType.vb: Nullable(Of DateTimeOffset)
- uid: System.Nullable{System.Decimal}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Decimal>
  fullName: System.Nullable<System.Decimal>
  fullname.vb: System.Nullable(Of System.Decimal)
  name.vb: Nullable(Of Decimal)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Nullable{System.Decimal}
  nameWithType: Nullable<Decimal>
  nameWithType.vb: Nullable(Of Decimal)
- uid: System.Nullable{System.Double}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Double>
  fullName: System.Nullable<System.Double>
  fullname.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Nullable{System.Double}
  nameWithType: Nullable<Double>
  nameWithType.vb: Nullable(Of Double)
- uid: System.Nullable{System.Guid}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Guid>
  fullName: System.Nullable<System.Guid>
  fullname.vb: System.Nullable(Of System.Guid)
  name.vb: Nullable(Of Guid)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Nullable{System.Guid}
  nameWithType: Nullable<Guid>
  nameWithType.vb: Nullable(Of Guid)
- uid: System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Nullable{System.Int32}
  nameWithType: Nullable<Int32>
  nameWithType.vb: Nullable(Of Int32)
- uid: System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  fullname.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Nullable{System.Int64}
  nameWithType: Nullable<Int64>
  nameWithType.vb: Nullable(Of Int64)
- uid: System.Nullable{System.Single}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Single>
  fullName: System.Nullable<System.Single>
  fullname.vb: System.Nullable(Of System.Single)
  name.vb: Nullable(Of Single)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Nullable{System.Single}
  nameWithType: Nullable<Single>
  nameWithType.vb: Nullable(Of Single)
- uid: System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  fullName: System.Nullable<System.TimeSpan>
  fullname.vb: System.Nullable(Of System.TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Nullable{System.TimeSpan}
  nameWithType: Nullable<TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
- uid: System.Nullable{System.UInt32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<UInt32>
  fullName: System.Nullable<System.UInt32>
  fullname.vb: System.Nullable(Of System.UInt32)
  name.vb: Nullable(Of UInt32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Nullable{System.UInt32}
  nameWithType: Nullable<UInt32>
  nameWithType.vb: Nullable(Of UInt32)
- uid: System.Nullable{System.UInt64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<UInt64>
  fullName: System.Nullable<System.UInt64>
  fullname.vb: System.Nullable(Of System.UInt64)
  name.vb: Nullable(Of UInt64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.UInt64
    name: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Nullable{System.UInt64}
  nameWithType: Nullable<UInt64>
  nameWithType.vb: Nullable(Of UInt64)
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
  commentId: T:System.Single
  nameWithType: Single
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  fullName: System.TimeSpan
  commentId: T:System.TimeSpan
  nameWithType: TimeSpan
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  fullName: System.UInt32
  commentId: T:System.UInt32
  nameWithType: UInt32
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  fullName: System.UInt64
  commentId: T:System.UInt64
  nameWithType: UInt64
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  fullName: System.FormatException
  nameWithType: FormatException
  commentId: T:System.FormatException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
  nameWithType: InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException
