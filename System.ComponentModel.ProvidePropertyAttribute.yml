items:
- uid: System.ComponentModel.ProvidePropertyAttribute
  commentId: T:System.ComponentModel.ProvidePropertyAttribute
  id: ProvidePropertyAttribute
  parent: System.ComponentModel
  children:
  - System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)
  - System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)
  - System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)
  - System.ComponentModel.ProvidePropertyAttribute.GetHashCode
  - System.ComponentModel.ProvidePropertyAttribute.PropertyName
  - System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName
  langs:
  - csharp
  - vb
  name: ProvidePropertyAttribute
  fullName: System.ComponentModel.ProvidePropertyAttribute
  type: Class
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/ProvidePropertyAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProvidePropertyAttribute
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/ProvidePropertyAttribute.cs
    startLine: 10
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Specifies the name of the property that an implementer of <xref href=\"System.ComponentModel.IExtenderProvider\" data-throw-if-not-resolved=\"false\"></xref> offers to other components. This class cannot be inherited</p>\n"
  remarks: "\n<p>When you mark a class with this attribute, you tell the code generator to create an extender property with the name you provide. The marked class must implement <xref href=\"System.ComponentModel.IExtenderProvider\" data-throw-if-not-resolved=\"false\"></xref>. As a result, the new property can be used by other components in a container.</p>\n<p>Within the marked class, you must implement <strong>Get</strong> <name> and <strong>Set</strong> <name> methods. For example, if you mark a class with [ProvideProperty(\"PropertyName\")], you must implement <strong>GetPropertyName</strong> and <strong>SetPropertyName</strong> methods. To specify that the new property will be an extender property, you must implement from <xref href=\"System.ComponentModel.IExtenderProvider\" data-throw-if-not-resolved=\"false\"></xref>, you must also implement a <strong>CanExtend</strong> method.</p>\n<p>For more information, see Extending Metadata Using Attributes.</p>\n"
  example:
  - "\n<p>The following example marks <code>MyClass</code> with a <xref href=\"System.ComponentModel.ProvidePropertyAttribute\" data-throw-if-not-resolved=\"false\"></xref> that tells the compiler to create a property called <code>MyProperty</code> from the <code>GetMyProperty</code> and <code>SetMyProperty</code> methods.</p>Classic ProvidePropertyAttribute Example#1"
  syntax:
    content: 'public sealed class ProvidePropertyAttribute : Attribute'
    content.vb: >-
      Public NotInheritable Class ProvidePropertyAttribute
          Inherits Attribute
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)
  commentId: M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.ComponentModel.ProvidePropertyAttribute
  langs:
  - csharp
  - vb
  name: ProvidePropertyAttribute(String, String)
  fullName: System.ComponentModel.ProvidePropertyAttribute.ProvidePropertyAttribute(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/ProvidePropertyAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/ProvidePropertyAttribute.cs
    startLine: 28
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.ProvidePropertyAttribute\" data-throw-if-not-resolved=\"false\"></xref> class with the name of the property and the type of its receiver.</p>\n"
  syntax:
    content: public ProvidePropertyAttribute(string propertyName, string receiverTypeName)
    content.vb: Public Sub New(propertyName As String, receiverTypeName As String)
    parameters:
    - id: propertyName
      type: System.String
      description: "\n<p>The name of the property extending to an object of the specified type. </p>\n"
    - id: receiverTypeName
      type: System.String
      description: "\n<p>The name of the data type this property can extend. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)
  commentId: M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)
  id: '#ctor(System.String,System.Type)'
  parent: System.ComponentModel.ProvidePropertyAttribute
  langs:
  - csharp
  - vb
  name: ProvidePropertyAttribute(String, Type)
  fullName: System.ComponentModel.ProvidePropertyAttribute.ProvidePropertyAttribute(System.String, System.Type)
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
    startLine: 423
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.ProvidePropertyAttribute\" data-throw-if-not-resolved=\"false\"></xref> class with the name of the property and its <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public ProvidePropertyAttribute(string propertyName, Type receiverType)
    content.vb: Public Sub New(propertyName As String, receiverType As Type)
    parameters:
    - id: propertyName
      type: System.String
      description: "\n<p>The name of the property extending to an object of the specified type. </p>\n"
    - id: receiverType
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of the data type of the object that can receive the property. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.ProvidePropertyAttribute.PropertyName
  commentId: P:System.ComponentModel.ProvidePropertyAttribute.PropertyName
  id: PropertyName
  parent: System.ComponentModel.ProvidePropertyAttribute
  langs:
  - csharp
  - vb
  name: PropertyName
  fullName: System.ComponentModel.ProvidePropertyAttribute.PropertyName
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/ProvidePropertyAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PropertyName
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/ProvidePropertyAttribute.cs
    startLine: 39
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets the name of a property that this class provides.</p>\n"
  syntax:
    content: public string PropertyName { get; }
    content.vb: Public ReadOnly Property PropertyName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of a property that this class provides.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName
  commentId: P:System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName
  id: ReceiverTypeName
  parent: System.ComponentModel.ProvidePropertyAttribute
  langs:
  - csharp
  - vb
  name: ReceiverTypeName
  fullName: System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/ProvidePropertyAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReceiverTypeName
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/ProvidePropertyAttribute.cs
    startLine: 52
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets the name of the data type this property can extend.</p>\n"
  syntax:
    content: public string ReceiverTypeName { get; }
    content.vb: Public ReadOnly Property ReceiverTypeName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the data type this property can extend.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)
  commentId: M:System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.ComponentModel.ProvidePropertyAttribute
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/ProvidePropertyAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/ProvidePropertyAttribute.cs
    startLine: 60
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether the value of the given object is equal to the current <xref href=\"System.ComponentModel.ProvidePropertyAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to test the value equality of. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of the given object is equal to that of the current; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.ComponentModel.ProvidePropertyAttribute.GetHashCode
  commentId: M:System.ComponentModel.ProvidePropertyAttribute.GetHashCode
  id: GetHashCode
  parent: System.ComponentModel.ProvidePropertyAttribute
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.ComponentModel.ProvidePropertyAttribute.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/ProvidePropertyAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/ProvidePropertyAttribute.cs
    startLine: 72
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A hash code for the current <xref href=\"System.ComponentModel.ProvidePropertyAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.ComponentModel
  isExternal: false
  name: System.ComponentModel
  fullName: System.ComponentModel
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
