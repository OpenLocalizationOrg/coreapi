items:
- uid: Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle
  commentId: T:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle
  id: SafeMemoryMappedViewHandle
  parent: Microsoft.Win32.SafeHandles
  children:
  - Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle.ReleaseHandle
  langs:
  - csharp
  - vb
  name: SafeMemoryMappedViewHandle
  fullName: Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle
  type: Class
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/src/Microsoft/Win32/SafeMemoryMappedViewHandle.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SafeMemoryMappedViewHandle
    path: src/System.IO.MemoryMappedFiles/src/Microsoft/Win32/SafeMemoryMappedViewHandle.Windows.cs
    startLine: 9
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: Microsoft.Win32.SafeHandles
  summary: "\n<p>Provides a safe handle that represents a view of a block of unmanaged memory for random access. </p>\n"
  remarks: "\n<p>Use the <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.SafeMemoryMappedViewHandle\" data-throw-if-not-resolved=\"false\"></xref> property to obtain the safe handle.</p>\n<p>This type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic.</p>\n"
  example:
  - 
  syntax:
    content: 'public sealed class SafeMemoryMappedViewHandle : Runtime.InteropServices.SafeBuffer'
    content.vb: >-
      Public NotInheritable Class SafeMemoryMappedViewHandle
          Inherits Runtime.InteropServices.SafeBuffer
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle.ReleaseHandle
  commentId: M:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle.ReleaseHandle
  id: ReleaseHandle
  parent: Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle
  langs:
  - csharp
  - vb
  name: ReleaseHandle()
  fullName: Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle.ReleaseHandle()
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/src/Microsoft/Win32/SafeMemoryMappedViewHandle.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReleaseHandle
    path: src/System.IO.MemoryMappedFiles/src/Microsoft/Win32/SafeMemoryMappedViewHandle.Windows.cs
    startLine: 11
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: Microsoft.Win32.SafeHandles
  syntax:
    content: protected override bool ReleaseHandle()
    content.vb: Protected Overrides Function ReleaseHandle As Boolean
    return:
      type: System.Boolean
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: Microsoft.Win32.SafeHandles
  isExternal: false
  name: Microsoft.Win32.SafeHandles
  fullName: Microsoft.Win32.SafeHandles
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
