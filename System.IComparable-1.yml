items:
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  id: IComparable`1
  parent: System
  children:
  - System.IComparable`1.CompareTo(`0)
  langs:
  - csharp
  - vb
  name: IComparable<T>
  fullName: System.IComparable<T>
  type: Interface
  source:
    remote:
      path: src/mscorlib/src/System/IComparable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IComparable
    path: src/mscorlib/src/System/IComparable.cs
    startLine: 27
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines a generalized comparison method that a value type or class implements to create a type-specific comparison method for ordering or sorting its instances.</p>\n"
  example:
  - "\n<p>The following code example illustrates the implementation of  <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> for a simple <code>Temperature</code> object. The example creates a <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> collection of strings with <code>Temperature</code> object keys, and adds several pairs of temperatures and strings to the list out of sequence. In the call to the <xref href=\"System.Collections.Generic.SortedList`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method, the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> collection uses the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> implementation to sort the list entries, which are then displayed in order of increasing temperature. </p>IComparable`1 Example#1"
  syntax:
    content: public interface IComparable<in T>
    content.vb: Public Interface IComparable(Of In T)
    typeParameters:
    - id: T
      description: "\n<p>The type of object to compare. </p>\n"
  seealso:
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.IEquatable`1
    commentId: T:System.IEquatable`1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  nameWithType: IComparable<T>
  nameWithType.vb: IComparable(Of T)
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  id: CompareTo(`0)
  parent: System.IComparable`1
  langs:
  - csharp
  - vb
  name: CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IComparable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CompareTo
    path: src/mscorlib/src/System/IComparable.cs
    startLine: 36
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. </p>\n"
  example:
  - "\n<p>The following code example illustrates the implementation of <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> for a simple <code>Temperature</code> object. The example creates a <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> collection of strings with <code>Temperature</code> object keys, and adds several pairs of temperatures and strings to the list out of sequence. In the call to the <xref href=\"System.Collections.Generic.SortedList`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method, the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> collection uses the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> implementation to sort the list entries, which are then displayed in order of increasing temperature. </p>IComparable`1 Example#1"
  syntax:
    content: int CompareTo(T other)
    content.vb: Function CompareTo(other As T) As Integer
    parameters:
    - id: other
      type: '{T}'
      description: "\n<p>An object to compare with this instance. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A value that indicates the relative order of the objects being compared. The return value has these meanings: </p>\n<p>Value </p>\n<p>Meaning </p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>This instance precedes <em>other</em> in the sort order.  </p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>This instance occurs in the same position in the sort order as <em>other</em>. </p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>This instance follows <em>other</em> in the sort order. </p>\n</td></tr></tbody></table>\n"
  seealso:
  - type: System.Object
    commentId: T:System.Object
  - type: System.IComparable
    commentId: T:System.IComparable
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: '{T}'
  definition: T
  name: T
  fullName: T
  nameWithType: T
  commentId: '!:T'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: T
  isExternal: false
  name: T
  fullName: T
  nameWithType: T
