items:
- uid: System.Func`5
  commentId: T:System.Func`5
  id: Func`5
  parent: System
  children: []
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, TResult>
  nameWithType: Func<T1, T2, T3, T4, TResult>
  fullName: System.Func<T1, T2, T3, T4, TResult>
  type: Delegate
  source:
    remote:
      path: src/mscorlib/src/System/Action.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Func
    path: src/mscorlib/src/System/Action.cs
    startLine: 71
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Encapsulates a method that has four parameters and returns a value of the type specified by the <em>TResult</em> parameter.</p>\n"
  remarks: "\n<p>You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have four parameters, each of which is passed to it by value, and that it must return a value.</p>\n<p>To reference a method that has four parameters and returns <strong>void</strong> (or in Visual Basic, that is declared as a <strong>Sub</strong> rather than as a <strong>Function</strong>), use the generic <xref href=\"System.Action`4\" data-throw-if-not-resolved=\"false\"></xref> delegate instead. </p>\n<p>When you use the <xref href=\"System.Func`5\" data-throw-if-not-resolved=\"false\"></xref> delegate, you do not have to explicitly define a delegate that encapsulates a method with four parameters. For example, the following code explicitly declares a generic delegate named <code>Searcher</code> and assigns a reference to the <xref href=\"System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)\" data-throw-if-not-resolved=\"false\"></xref> method to its delegate instance.</p>System.Func~5#1<p>The following example simplifies this code by instantiating the <xref href=\"System.Func`5\" data-throw-if-not-resolved=\"false\"></xref> delegate instead of explicitly defining a new delegate and assigning a named method to it.</p>System.Func~5#2<p>You can use the <xref href=\"System.Func`5\" data-throw-if-not-resolved=\"false\"></xref> delegate with anonymous methods in C#, as the following example illustrates. (For an introduction to anonymous methods, see Anonymous Methods (C# Programming Guide).)</p>System.Func~5#3<p>You can also assign a lambda expression to a <xref href=\"System.Func`5\" data-throw-if-not-resolved=\"false\"></xref> delegate, as the following example illustrates. (For an introduction to lambda expressions, see Lambda Expressions (Visual Basic) and Lambda Expressions (C# Programming Guide).)</p>System.Func~5#4<p>The underlying type of a lambda expression is one of the generic <strong>Func</strong> delegates. This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate. In particular, because many methods of types in the <xref href=\"System.Linq\" data-throw-if-not-resolved=\"false\"></xref> namespace have <strong>Func</strong> parameters, you can pass these methods a lambda expression without explicitly instantiating a <strong>Func</strong> delegate.</p>"
  syntax:
    content: >-
      [TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")]

      public delegate TResult Func<in T1, in T2, in T3, in T4, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    content.vb: >-
      <TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")>

      Public Delegate Function Func(Of In T1, In T2, In T3, In T4, Out TResult)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4) As TResult
    parameters:
    - id: arg1
      type: '{T1}'
      description: "\n<p>The first parameter of the method that this delegate encapsulates.</p>\n"
    - id: arg2
      type: '{T2}'
      description: "\n<p>The second parameter of the method that this delegate encapsulates.</p>\n"
    - id: arg3
      type: '{T3}'
      description: "\n<p>The third parameter of the method that this delegate encapsulates.</p>\n"
    - id: arg4
      type: '{T4}'
      description: "\n<p>The fourth parameter of the method that this delegate encapsulates.</p>\n"
    typeParameters:
    - id: T1
      description: "\n<p>The type of the first parameter of the method that this delegate encapsulates.</p>\n"
    - id: T2
      description: "\n<p>The type of the second parameter of the method that this delegate encapsulates.</p>\n"
    - id: T3
      description: "\n<p>The type of the third parameter of the method that this delegate encapsulates.</p>\n"
    - id: T4
      description: "\n<p>The type of the fourth parameter of the method that this delegate encapsulates.</p>\n"
    - id: TResult
      description: "\n<p>The type of the return value of the method that this delegate encapsulates.</p>\n"
    return:
      type: '{TResult}'
      description: "\n<p>The return value of the method that this delegate encapsulates.</p>\n"
  extensionMethods:
  - System.Delegate.System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  nameWithType.vb: Func(Of T1, T2, T3, T4, TResult)
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
  fullName.vb: System.Func(Of T1, T2, T3, T4, TResult)
  name.vb: Func(Of T1, T2, T3, T4, TResult)
references:
- uid: System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
  commentId: N:System
- uid: System.Delegate.System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  parent: System.Reflection.RuntimeReflectionExtensions
  definition: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  name: GetMethodInfo()
  nameWithType: RuntimeReflectionExtensions.GetMethodInfo()
  fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo()
  spec.csharp:
  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
    name: GetMethodInfo
    nameWithType: RuntimeReflectionExtensions.GetMethodInfo
    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
    name: GetMethodInfo
    nameWithType: RuntimeReflectionExtensions.GetMethodInfo
    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
- uid: '{T1}'
  definition: T1
  name: T1
  nameWithType: T1
  fullName: T1
  commentId: '!:T1'
- uid: '{T2}'
  definition: T2
  name: T2
  nameWithType: T2
  fullName: T2
  commentId: '!:T2'
- uid: '{T3}'
  definition: T3
  name: T3
  nameWithType: T3
  fullName: T3
  commentId: '!:T3'
- uid: '{T4}'
  definition: T4
  name: T4
  nameWithType: T4
  fullName: T4
  commentId: '!:T4'
- uid: '{TResult}'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
  commentId: '!:TResult'
- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  isExternal: true
  name: GetMethodInfo(Delegate)
  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  spec.csharp:
  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
    name: GetMethodInfo
    nameWithType: RuntimeReflectionExtensions.GetMethodInfo
    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Delegate
    name: Delegate
    nameWithType: Delegate
    fullName: System.Delegate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
    name: GetMethodInfo
    nameWithType: RuntimeReflectionExtensions.GetMethodInfo
    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Delegate
    name: Delegate
    nameWithType: Delegate
    fullName: System.Delegate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
- uid: System.Reflection.RuntimeReflectionExtensions
  parent: System.Reflection
  isExternal: false
  name: RuntimeReflectionExtensions
  nameWithType: RuntimeReflectionExtensions
  fullName: System.Reflection.RuntimeReflectionExtensions
  commentId: T:System.Reflection.RuntimeReflectionExtensions
- uid: T1
  isExternal: false
  name: T1
  nameWithType: T1
  fullName: T1
- uid: T2
  isExternal: false
  name: T2
  nameWithType: T2
  fullName: T2
- uid: T3
  isExternal: false
  name: T3
  nameWithType: T3
  fullName: T3
- uid: T4
  isExternal: false
  name: T4
  nameWithType: T4
  fullName: T4
- uid: TResult
  isExternal: false
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
  commentId: N:System.Reflection
