items:
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  id: IEnumerable`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.IEnumerable`1.GetEnumerator
  langs:
  - csharp
  - vb
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  type: Interface
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/IEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IEnumerable
    path: src/mscorlib/src/System/Collections/Generic/IEnumerable.cs
    startLine: 29
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: "\n<p>Exposes the enumerator, which supports a simple iteration over a collection of a specified type.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/collections/generic/ienumerable.cs#3acf01620172c7f0\">Reference Source</see>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to implement the <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> interface and how to use that implementation to create a LINQ query. When you implement <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, you must also implement <xref href=\"System.Collections.Generic.IEnumerator`1\" data-throw-if-not-resolved=\"false\"></xref> or, for C# only, you can use the yield (C# Reference) keyword. Implementing <xref href=\"System.Collections.Generic.IEnumerator`1\" data-throw-if-not-resolved=\"false\"></xref> also requires <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> to be implemented, which you will see in this example.</p>System.Collections.Generic.IEnumerableEx#1<p>For another C# example that demonstrates how to implement the <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> interface, see the <see href=\"http://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593\">Generics Sample</see>. This sample uses the <strong>yield</strong> keyword instead of implementing <xref href=\"System.Collections.Generic.IEnumerator`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>"
  syntax:
    content: >-
      [TypeDependency("System.SZArrayHelper")]

      public interface IEnumerable<out T> : IEnumerable
    content.vb: >-
      <TypeDependency("System.SZArrayHelper")>

      Public Interface IEnumerable(Of Out T)
          Inherits IEnumerable
    typeParameters:
    - id: T
      description: "\n<p>The type of objects to enumerate.</p>\n"
  seealso:
  - type: System.Collections.Generic.IEnumerator`1
    commentId: T:System.Collections.Generic.IEnumerator`1
  - type: System.Collections
    commentId: N:System.Collections
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  nameWithType: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.IEnumerable`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/IEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEnumerator
    path: src/mscorlib/src/System/Collections/Generic/IEnumerable.cs
    startLine: 35
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: "\n<p>Returns an enumerator that iterates through the collection.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to implement the <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> interface and uses that implementation to create a LINQ query. When you implement <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, you must also implement <xref href=\"System.Collections.Generic.IEnumerator`1\" data-throw-if-not-resolved=\"false\"></xref> or, for C# only, you can use the yield (C# Reference) keyword. Implementing <xref href=\"System.Collections.Generic.IEnumerator`1\" data-throw-if-not-resolved=\"false\"></xref> also requires <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> to be implemented, which you will see in this example.</p>System.Collections.Generic.IEnumerableEx#1<p>For another C# example that demonstrates how to implement the <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> interface, see the <see href=\"http://code.msdn.microsoft.com/Generics-Sample-C-9b41a192/sourcecode?fileId=46476&pathId=1364935593\">Generics Sample</see>. This sample uses of the <strong>yield</strong> keyword instead of implementing <xref href=\"System.Collections.Generic.IEnumerator`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>"
  syntax:
    content: IEnumerator<T> GetEnumerator()
    content.vb: Function GetEnumerator As IEnumerator(Of T)
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
      description: "\n<p>An enumerator that can be used to iterate through the collection.</p>\n"
  seealso:
  - type: System.Collections.Generic.IEnumerator`1
    commentId: T:System.Collections.Generic.IEnumerator`1
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
  nameWithType: System.Collections.Generic
  commentId: N:System.Collections.Generic
- uid: System.Collections.Generic.IEnumerator{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  commentId: T:System.Collections.Generic.IEnumerator{`0}
- uid: System.Collections.Generic.IEnumerator`1
  isExternal: false
  name: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  commentId: T:System.Collections.Generic.IEnumerator`1
