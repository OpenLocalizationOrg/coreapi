items:
- uid: System.Xml.Serialization.XmlArrayAttribute
  commentId: T:System.Xml.Serialization.XmlArrayAttribute
  id: XmlArrayAttribute
  parent: System.Xml.Serialization
  children:
  - System.Xml.Serialization.XmlArrayAttribute.#ctor
  - System.Xml.Serialization.XmlArrayAttribute.#ctor(System.String)
  - System.Xml.Serialization.XmlArrayAttribute.ElementName
  - System.Xml.Serialization.XmlArrayAttribute.Form
  - System.Xml.Serialization.XmlArrayAttribute.IsNullable
  - System.Xml.Serialization.XmlArrayAttribute.Namespace
  - System.Xml.Serialization.XmlArrayAttribute.Order
  langs:
  - csharp
  - vb
  name: XmlArrayAttribute
  fullName: System.Xml.Serialization.XmlArrayAttribute
  type: Class
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlArrayAttribute
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 36
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Specifies that the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> must serialize a particular class member as an array of XML elements.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Xml.Serialization.XmlArrayAttribute\" data-throw-if-not-resolved=\"false\"></xref> belongs to a family of attributes that controls how the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> serializes or deserializes an object. For a complete list of similar attributes, see Attributes That Control XML Serialization.</p>\n<p>You can apply the <xref href=\"System.Xml.Serialization.XmlArrayAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a public field or read/write property that returns an array of objects. You can also apply it to collections and fields that return an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> or any field that returns an object that implements the <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>When you apply the <xref href=\"System.Xml.Serialization.XmlArrayAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a class member, the <xref href=\"System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> class generates a nested sequence of XML elements from that member. An XML schema document (an .xsd file), indicates such an array as a <strong>complexType</strong>. For example, if the class to be serialized represents a purchase order, you can generate an array of purchased items by applying the <xref href=\"System.Xml.Serialization.XmlArrayAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a public field that returns an array of objects that represent order items.</p>\n<p>If no attributes are applied to a public field or property that returns an array of complex or primitive type objects, the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> generates a nested sequence of XML elements by default. To more precisely control what XML elements are generated, apply an <xref href=\"System.Xml.Serialization.XmlArrayItemAttribute\" data-throw-if-not-resolved=\"false\"></xref> and an <xref href=\"System.Xml.Serialization.XmlArrayAttribute\" data-throw-if-not-resolved=\"false\"></xref> to the field or property. For example, by default, the name of the generated XML element is derived from the member identifier You can change the name of the generated XML element by setting the <xref href=\"System.Xml.Serialization.XmlArrayAttribute.ElementName\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If you serialize an array that contains items of a specific type and all the classes derived from that type, you must use the <xref href=\"System.Xml.Serialization.XmlArrayItemAttribute\" data-throw-if-not-resolved=\"false\"></xref> to declare each of the types.</p>\n<p>You can use <strong>XmlArray</strong> in your code instead of the longer <xref href=\"System.Xml.Serialization.XmlArrayAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For more information about using attributes, see Extending Metadata Using Attributes.</p>\n"
  example:
  - "\n<p>The following example serializes a class instance into an XML document that contains several object arrays. The <xref href=\"System.Xml.Serialization.XmlArrayAttribute\" data-throw-if-not-resolved=\"false\"></xref> is applied to the members that become XML element arrays.</p>Classic XmlArrayAttribute Example#1"
  syntax:
    content: 'public class XmlArrayAttribute : Attribute'
    content.vb: >-
      Public Class XmlArrayAttribute
          Inherits Attribute
  seealso:
  - type: System.Xml.Serialization.XmlAttributes.XmlArray
    commentId: P:System.Xml.Serialization.XmlAttributes.XmlArray
  - type: System.Xml.Serialization.XmlArrayItemAttribute
    commentId: T:System.Xml.Serialization.XmlArrayItemAttribute
  - type: System.Xml.Serialization.XmlAttributeOverrides
    commentId: T:System.Xml.Serialization.XmlAttributeOverrides
  - type: System.Xml.Serialization.XmlAttributes
    commentId: T:System.Xml.Serialization.XmlAttributes
  - type: System.Xml.Serialization.XmlAttributes
    commentId: T:System.Xml.Serialization.XmlAttributes
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Xml.Serialization.XmlArrayAttribute.#ctor
  commentId: M:System.Xml.Serialization.XmlArrayAttribute.#ctor
  id: '#ctor'
  parent: System.Xml.Serialization.XmlArrayAttribute
  langs:
  - csharp
  - vb
  name: XmlArrayAttribute()
  fullName: System.Xml.Serialization.XmlArrayAttribute.XmlArrayAttribute()
  type: Constructor
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 39
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.Serialization.XmlArrayAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>For more information about using attributes, see Extending Metadata Using Attributes.</p>\n"
  example:
  - "\n<p>The following example assigns the <xref href=\"System.Xml.Serialization.XmlArrayAttribute\" data-throw-if-not-resolved=\"false\"></xref> to two arrays.</p>Classic XmlArrayAttribute.XmlArrayAttribute Example#1"
  syntax:
    content: public XmlArrayAttribute()
    content.vb: Public Sub New
  seealso:
  - type: System.Xml.Serialization.XmlArrayItemAttribute
    commentId: T:System.Xml.Serialization.XmlArrayItemAttribute
  - type: System.Xml.Serialization.XmlSerializer
    commentId: T:System.Xml.Serialization.XmlSerializer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Serialization.XmlArrayAttribute.#ctor(System.String)
  commentId: M:System.Xml.Serialization.XmlArrayAttribute.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Xml.Serialization.XmlArrayAttribute
  langs:
  - csharp
  - vb
  name: XmlArrayAttribute(String)
  fullName: System.Xml.Serialization.XmlArrayAttribute.XmlArrayAttribute(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 40
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.Serialization.XmlArrayAttribute\" data-throw-if-not-resolved=\"false\"></xref> class and specifies the XML element name generated in the XML document instance.</p>\n"
  remarks: "\n<p>For more information about using attributes, see Extending Metadata Using Attributes.</p>\n"
  example:
  - "\n<p>The following example assigns the <xref href=\"System.Xml.Serialization.XmlArrayAttribute\" data-throw-if-not-resolved=\"false\"></xref> to two arrays, and serializes a class instance that contains those arrays.</p>Classic XmlArrayAttribute.XmlArrayAttribute1 Example#1"
  syntax:
    content: public XmlArrayAttribute(string elementName)
    content.vb: Public Sub New(elementName As String)
    parameters:
    - id: elementName
      type: System.String
      description: "\n<p>The name of the XML element that the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> generates. </p>\n"
  seealso:
  - type: System.Xml.Serialization.XmlArrayItemAttribute
    commentId: T:System.Xml.Serialization.XmlArrayItemAttribute
  - type: System.Xml.Serialization.XmlSerializer
    commentId: T:System.Xml.Serialization.XmlSerializer
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Serialization.XmlArrayAttribute.ElementName
  commentId: P:System.Xml.Serialization.XmlArrayAttribute.ElementName
  id: ElementName
  parent: System.Xml.Serialization.XmlArrayAttribute
  langs:
  - csharp
  - vb
  name: ElementName
  fullName: System.Xml.Serialization.XmlArrayAttribute.ElementName
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ElementName
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 41
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Gets or sets the XML element name given to the serialized array.</p>\n"
  remarks: "\n<p>Specify an <xref href=\"System.Xml.Serialization.XmlArrayAttribute.ElementName\" data-throw-if-not-resolved=\"false\"></xref> when you want the generated XML element name to differ from the member's identifier.</p>\n<p>You can set the same <xref href=\"System.Xml.Serialization.XmlArrayAttribute.ElementName\" data-throw-if-not-resolved=\"false\"></xref> value to more than one member as long as the generated XML document uses XML namespaces to distinguish between the identically named members. For more details about using namespaces and creating prefixed names in the XML document, see <xref href=\"System.Xml.Serialization.XmlSerializerNamespaces\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example serializes an instance of the <strong>Library</strong> class that contains a property named <strong>Books</strong> that returns an array of <strong>Book</strong> items. The example uses the <xref href=\"System.Xml.Serialization.XmlArrayAttribute.ElementName\" data-throw-if-not-resolved=\"false\"></xref> property to specify that the array of XML elements should be named <strong>My_Books</strong> rather than <strong>Books</strong>.</p>Classic XmlArrayAttribute.ElementName Example#1"
  syntax:
    content: public string ElementName { get; set; }
    content.vb: Public Property ElementName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The XML element name of the serialized array. The default is the name of the member to which the <xref href=\"System.Xml.Serialization.XmlArrayAttribute\" data-throw-if-not-resolved=\"false\"></xref> is assigned.</p>\n"
  seealso:
  - type: System.Xml.Serialization.XmlSerializer
    commentId: T:System.Xml.Serialization.XmlSerializer
  - type: System.Xml.Serialization.XmlArrayAttribute.Namespace
    commentId: P:System.Xml.Serialization.XmlArrayAttribute.Namespace
  - type: System.Xml.Serialization.XmlArrayAttribute.Form
    commentId: P:System.Xml.Serialization.XmlArrayAttribute.Form
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.Serialization.XmlArrayAttribute.Form
  commentId: P:System.Xml.Serialization.XmlArrayAttribute.Form
  id: Form
  parent: System.Xml.Serialization.XmlArrayAttribute
  langs:
  - csharp
  - vb
  name: Form
  fullName: System.Xml.Serialization.XmlArrayAttribute.Form
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Form
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 42
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Gets or sets a value that indicates whether the XML element name generated by the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> is qualified or unqualified.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Xml.Serialization.XmlArrayAttribute.Form\" data-throw-if-not-resolved=\"false\"></xref> property determines whether an XML element name is qualified or unqualified. The <xref href=\"System.Xml.Serialization.XmlArrayAttribute.Form\" data-throw-if-not-resolved=\"false\"></xref> property conforms to the 1999 World Wide Web Consortium (www.w3.org) document titled \"Namespaces in XML.\" </p>\n<p>If the <xref href=\"System.Xml.Serialization.XmlAttributeAttribute.Namespace\" data-throw-if-not-resolved=\"false\"></xref> property is set to any value, attempting to set the <xref href=\"System.Xml.Serialization.XmlElementAttribute.Form\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>XmlSchemaForm.Unqualified</strong> throws an exception.</p>\n<p>The default setting, <strong>XmlSchemaForm.None</strong>, instructs the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> to check the schema for the XML document to determine whether the namespace is qualified. If the schema does not specify a value for an individual element or attribute, the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> uses the <strong>elementFormDefault</strong> and <strong>attributeFormDefault</strong> values to determine whether an element or attribute is qualified. The following XML code shows a schema: </p>\n<pre><code> <schema elementFormDefault=\"qualified\" \nattributeFormDefault=\"unqualified\"... >\n<element name=\"Name\"/>\n<attribute name=\"Number\"/>\n</schema></code></pre>\n<p>When the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> reads the schema, the <xref href=\"System.Xml.Serialization.XmlAttributeAttribute.Form\" data-throw-if-not-resolved=\"false\"></xref> value for both the <strong>Name</strong> and <strong>Number</strong> is <strong>XmlSchemaForm.None</strong>, but the <strong>Name</strong> element is qualified, while the <strong>Number</strong> element is unqualified.</p>\n"
  example:
  - "\n<p>The following example serializes an instance of the <strong>Enterprises</strong> class. Two XML elements have the same local name (<strong>Company</strong>) but different prefixes. The example sets the <xref href=\"System.Xml.Serialization.XmlArrayAttribute.Form\" data-throw-if-not-resolved=\"false\"></xref> property is set to <strong>XmlForm.Qualified</strong> to ensure that the qualified names occur in the XML instance.</p>Classic XmlArrayAttribute.Form Example#1"
  syntax:
    content: public Schema.XmlSchemaForm Form { get; set; }
    content.vb: Public Property Form As Schema.XmlSchemaForm
    parameters: []
    return:
      type: System.Xml.Schema.XmlSchemaForm
      description: "\n<p>One of the <xref href=\"System.Xml.Schema.XmlSchemaForm\" data-throw-if-not-resolved=\"false\"></xref> values. The default is <strong>XmlSchemaForm.None</strong>.</p>\n"
  seealso:
  - type: System.Xml.Serialization.XmlSerializer
    commentId: T:System.Xml.Serialization.XmlSerializer
  - type: System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)
    commentId: M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)
  - type: System.Xml.Serialization.XmlArrayAttribute.ElementName
    commentId: P:System.Xml.Serialization.XmlArrayAttribute.ElementName
  - type: System.Xml.Serialization.XmlArrayAttribute.Namespace
    commentId: P:System.Xml.Serialization.XmlArrayAttribute.Namespace
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.Serialization.XmlArrayAttribute.IsNullable
  commentId: P:System.Xml.Serialization.XmlArrayAttribute.IsNullable
  id: IsNullable
  parent: System.Xml.Serialization.XmlArrayAttribute
  langs:
  - csharp
  - vb
  name: IsNullable
  fullName: System.Xml.Serialization.XmlArrayAttribute.IsNullable
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNullable
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 43
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Gets or sets a value that indicates whether the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> must serialize a member as an empty XML tag with the <strong>xsi:nil</strong> attribute set to <strong>true</strong>.</p>\n"
  remarks: "\n<p>The XML schema specification for structures allows an XML document to explicitly signal that an element's content is missing. Such an element contains the attribute <strong>xsi:nil</strong> set to <strong>true</strong>. For more information, see the World Wide Web Consortium (www.w3.org) specification titled \"XML Schema Part 1: Structures.\" </p>\n<p>If the <xref href=\"System.Xml.Serialization.XmlArrayAttribute.IsNullable\" data-throw-if-not-resolved=\"false\"></xref> property is set to <strong>true</strong>, the <strong>xsi:nil</strong> attribute is generated for class members that have been set to <strong>null</strong>. For example, if you set a field named <strong>MyStringArray</strong> to <strong>null</strong>, the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> generates the following XML code.</p>\n<pre><code> <MyStringArray xsi:nil = \"true\" /></code></pre>\n<p>If the <xref href=\"System.Xml.Serialization.XmlArrayAttribute.IsNullable\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>, no XML element is generated.</p>\n<p>You cannot apply the <xref href=\"System.Xml.Serialization.XmlArrayAttribute.IsNullable\" data-throw-if-not-resolved=\"false\"></xref> property to a member typed as a value type because a value type cannot contain <strong>null</strong>.</p>\n"
  example:
  - "\n<p>The following example contains two arrays: one with the <xref href=\"System.Xml.Serialization.XmlArrayAttribute.IsNullable\" data-throw-if-not-resolved=\"false\"></xref> property set to <strong>true</strong>, and another with the <xref href=\"System.Xml.Serialization.XmlArrayAttribute.IsNullable\" data-throw-if-not-resolved=\"false\"></xref> property set to <strong>false</strong>.</p>Classic XmlArrayAttribute.IsNullable Example#1"
  syntax:
    content: public bool IsNullable { get; set; }
    content.vb: Public Property IsNullable As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> generates the <strong>xsi:nil</strong> attribute; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.Serialization.XmlArrayAttribute.Namespace
  commentId: P:System.Xml.Serialization.XmlArrayAttribute.Namespace
  id: Namespace
  parent: System.Xml.Serialization.XmlArrayAttribute
  langs:
  - csharp
  - vb
  name: Namespace
  fullName: System.Xml.Serialization.XmlArrayAttribute.Namespace
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Namespace
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 44
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Gets or sets the namespace of the XML element.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Xml.Serialization.XmlArrayAttribute.Namespace\" data-throw-if-not-resolved=\"false\"></xref> property allows you to create qualified XML element names. The <xref href=\"System.Xml.Serialization.XmlArrayAttribute.Namespace\" data-throw-if-not-resolved=\"false\"></xref> property conforms to the rules for creating an XML namespace as found in the 1999 World Wide Web Consortium (www.w3.org) document titled \"Namespaces in XML.\" </p>\n<p>To create namespaces that are associated with a prefix, you must create an instance of the <xref href=\"System.Xml.Serialization.XmlSerializerNamespaces\" data-throw-if-not-resolved=\"false\"></xref> class that contains the namespaces and prefixes used in the XML document. As you set the namespace for each <xref href=\"System.Xml.Serialization.XmlArrayAttribute\" data-throw-if-not-resolved=\"false\"></xref>, it must match one of the namespaces in the <xref href=\"System.Xml.Serialization.XmlSerializerNamespaces\" data-throw-if-not-resolved=\"false\"></xref>. When the XML is generated, each array is correctly prefixed with the prefix associated with the specified namespace.</p>\n"
  example:
  - "\n<p>The following example serializes an instance of the <strong>Library</strong> class that contains two members, one that contain book titles, and another that contain periodical titles. Although both XML elements are named <strong>Titles</strong>, each contains a different prefix. The example also includes an instance of the <xref href=\"System.Xml.Serialization.XmlSerializerNamespaces\" data-throw-if-not-resolved=\"false\"></xref> class that contains the namespaces and prefixes used to qualify the two element names.</p>Classic XmlArrayAttribute.Namespace Example#1"
  syntax:
    content: public string Namespace { get; set; }
    content.vb: Public Property Namespace As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The namespace of the XML element.</p>\n"
  seealso:
  - type: System.Xml.Serialization.XmlSerializer
    commentId: T:System.Xml.Serialization.XmlSerializer
  - type: System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)
    commentId: M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)
  - type: System.Xml.Serialization.XmlArrayAttribute.ElementName
    commentId: P:System.Xml.Serialization.XmlArrayAttribute.ElementName
  - type: System.Xml.Serialization.XmlArrayAttribute.Form
    commentId: P:System.Xml.Serialization.XmlArrayAttribute.Form
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.Serialization.XmlArrayAttribute.Order
  commentId: P:System.Xml.Serialization.XmlArrayAttribute.Order
  id: Order
  parent: System.Xml.Serialization.XmlArrayAttribute
  langs:
  - csharp
  - vb
  name: Order
  fullName: System.Xml.Serialization.XmlArrayAttribute.Order
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Order
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 45
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Gets or sets the explicit order in which the elements are serialized or deserialized.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Xml.Serialization.CodeGenerationOptions.GenerateOrder\" data-throw-if-not-resolved=\"false\"></xref> enumeration to instruct the <xref href=\"System.Web.Services.Description.ServiceDescriptionImporter\" data-throw-if-not-resolved=\"false\"></xref> to generate code that sets the <xref href=\"System.Xml.Serialization.XmlElementAttribute.Order\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n<p>Once the <xref href=\"System.Xml.Serialization.XmlElementAttribute.Order\" data-throw-if-not-resolved=\"false\"></xref> property has been used on one public property or field in a type, it must be applied to all public properties and fields for that type and all inherited types.</p>\n"
  example:
  - 
  syntax:
    content: public int Order { get; set; }
    content.vb: Public Property Order As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The order of the code generation.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: System.Xml.Serialization
  isExternal: false
  name: System.Xml.Serialization
  fullName: System.Xml.Serialization
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Xml.Schema.XmlSchemaForm
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaForm
  fullName: System.Xml.Schema.XmlSchemaForm
- uid: System.Xml.Schema
  isExternal: false
  name: System.Xml.Schema
  fullName: System.Xml.Schema
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
