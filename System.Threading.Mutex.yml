items:
- uid: System.Threading.Mutex
  id: Mutex
  parent: System.Threading
  children:
  - System.Threading.Mutex.#ctor
  - System.Threading.Mutex.#ctor(System.Boolean)
  - System.Threading.Mutex.#ctor(System.Boolean,System.String)
  - System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)
  - System.Threading.Mutex.OpenExisting(System.String)
  - System.Threading.Mutex.ReleaseMutex
  - System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)
  href: System.Threading.Mutex.yml
  name: Mutex
  fullName: System.Threading.Mutex
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/Threading/Mutex.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    path: src/mscorlib/src/System/Threading/Mutex.cs
    startLine: 32
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: A synchronization primitive that can also be used for interprocess synchronization.
  syntax:
    content: 'public sealed class Mutex : WaitHandle'
    content.vb: Public NotInheritable Class Mutex Inherits WaitHandle
  inheritance:
  - System.Object
- uid: System.Threading.Mutex.#ctor
  id: '#ctor'
  parent: System.Threading.Mutex
  href: System.Threading.Mutex.yml
  name: Mutex()
  fullName: System.Threading.Mutex.Mutex()
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Mutex.cs
    startLine: 267
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Initializes a new instance of the @'System.Threading.Mutex' class with default properties.
  syntax:
    content: public Mutex()
    content.vb: Public Sub New
- uid: System.Threading.Mutex.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Threading.Mutex
  href: System.Threading.Mutex.yml
  name: Mutex(Boolean)
  fullName: System.Threading.Mutex.Mutex(System.Boolean)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Mutex.cs
    startLine: 261
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Initializes a new instance of the @'System.Threading.Mutex' class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex.
  syntax:
    content: public Mutex(bool initiallyOwned)
    content.vb: Public Sub New(initiallyOwned As Boolean)
    parameters:
    - id: initiallyOwned
      type: System.Boolean
      description: true to give the calling thread initial ownership of the mutex; otherwise, false.
- uid: System.Threading.Mutex.#ctor(System.Boolean,System.String)
  id: '#ctor(System.Boolean,System.String)'
  parent: System.Threading.Mutex
  href: System.Threading.Mutex.yml
  name: Mutex(Boolean, String)
  fullName: System.Threading.Mutex.Mutex(System.Boolean, System.String)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Mutex.cs
    startLine: 253
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Initializes a new instance of the @'System.Threading.Mutex' class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, and a string that is the name of the mutex.
  syntax:
    content: public Mutex(bool initiallyOwned, string name)
    content.vb: Public Sub New(initiallyOwned As Boolean, name As String)
    parameters:
    - id: initiallyOwned
      type: System.Boolean
      description: true to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, false.
    - id: name
      type: System.String
      description: The name of the @'System.Threading.Mutex'. If the value is null, the @'System.Threading.Mutex' is unnamed.
  exceptions:
  - type: System.UnauthorizedAccessException
    description: The named mutex exists and has access control security, but the user does not have @'System.Security.AccessControl.MutexRights.FullControl'.
  - type: System.IO.IOException
    description: A Win32 error occurred.
  - type: System.Threading.WaitHandleCannotBeOpenedException
    description: The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.
  - type: System.ArgumentException
    description: '*name* is longer than 260 characters.'
- uid: System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)
  id: '#ctor(System.Boolean,System.String,System.Boolean@)'
  parent: System.Threading.Mutex
  href: System.Threading.Mutex.yml
  name: Mutex(Boolean, String, out Boolean)
  name.vb: Mutex(Boolean, String, ByRef Boolean)
  fullName: System.Threading.Mutex.Mutex(System.Boolean, System.String, out System.Boolean)
  fullName.vb: System.Threading.Mutex.Mutex(System.Boolean, System.String, ByRef System.Boolean)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Mutex.cs
    startLine: 43
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Initializes a new instance of the @'System.Threading.Mutex' class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, and a Boolean value that, when the method returns, indicates whether the calling thread was granted initial ownership of the mutex.
  syntax:
    content: public Mutex(bool initiallyOwned, string name, out bool createdNew)
    content.vb: Public Sub New(initiallyOwned As Boolean, name As String, ByRef createdNew As Boolean)
    parameters:
    - id: initiallyOwned
      type: System.Boolean
      description: true to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, false.
    - id: name
      type: System.String
      description: The name of the @'System.Threading.Mutex'. If the value is null, the @'System.Threading.Mutex' is unnamed.
    - id: createdNew
      type: System.Boolean
      description: When this method returns, contains a Boolean that is true if a local mutex was created (that is, if *name* is null or an empty string) or if the specified named system mutex was created; false if the specified named system mutex already existed. This parameter is passed uninitialized.
  exceptions:
  - type: System.UnauthorizedAccessException
    description: The named mutex exists and has access control security, but the user does not have @'System.Security.AccessControl.MutexRights.FullControl'.
  - type: System.IO.IOException
    description: A Win32 error occurred.
  - type: System.Threading.WaitHandleCannotBeOpenedException
    description: The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.
  - type: System.ArgumentException
    description: '*name* is longer than 260 characters.'
- uid: System.Threading.Mutex.OpenExisting(System.String)
  id: OpenExisting(System.String)
  parent: System.Threading.Mutex
  href: System.Threading.Mutex.yml
  name: OpenExisting(String)
  fullName: System.Threading.Mutex.OpenExisting(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Mutex.cs
    startLine: 281
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Opens the specified named mutex, if it already exists.
  syntax:
    content: public static Mutex OpenExisting(string name)
    content.vb: Public Shared Function OpenExisting(name As String) As Mutex
    parameters:
    - id: name
      type: System.String
      description: The name of the system mutex to open.
    return:
      type: System.Threading.Mutex
      description: An object that represents the named system mutex.
  exceptions:
  - type: System.ArgumentException
    description: '*name* is an empty string.-or-*name* is longer than 260 characters.'
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.Threading.WaitHandleCannotBeOpenedException
    description: The named mutex does not exist.
  - type: System.IO.IOException
    description: A Win32 error occurred.
  - type: System.UnauthorizedAccessException
    description: The named mutex exists, but the user does not have the security access required to use it.
- uid: System.Threading.Mutex.ReleaseMutex
  id: ReleaseMutex
  parent: System.Threading.Mutex
  href: System.Threading.Mutex.yml
  name: ReleaseMutex()
  fullName: System.Threading.Mutex.ReleaseMutex()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Mutex.cs
    startLine: 396
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Releases the @'System.Threading.Mutex' once.
  syntax:
    content: public void ReleaseMutex()
    content.vb: Public Sub ReleaseMutex
  exceptions:
  - type: System.ApplicationException
    description: The calling thread does not own the mutex.
- uid: System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)
  id: TryOpenExisting(System.String,System.Threading.Mutex@)
  parent: System.Threading.Mutex
  href: System.Threading.Mutex.yml
  name: TryOpenExisting(String, out Mutex)
  name.vb: TryOpenExisting(String, ByRef Mutex)
  fullName: System.Threading.Mutex.TryOpenExisting(System.String, out System.Threading.Mutex)
  fullName.vb: System.Threading.Mutex.TryOpenExisting(System.String, ByRef System.Threading.Mutex)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Threading/Mutex.cs
    startLine: 318
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Opens the specified named mutex, if it already exists, and returns a value that indicates whether the operation succeeded.
  syntax:
    content: public static bool TryOpenExisting(string name, out Mutex result)
    content.vb: Public Shared Function TryOpenExisting(name As String, ByRef result As Mutex) As Boolean
    parameters:
    - id: name
      type: System.String
      description: The name of the system mutex to open.
    - id: result
      type: System.Threading.Mutex
      description: When this method returns, contains a @'System.Threading.Mutex' object that represents the named mutex if the call succeeded, or null if the call failed. This parameter is treated as uninitialized.
    return:
      type: System.Boolean
      description: true if the named mutex was opened successfully; otherwise, false.
  exceptions:
  - type: System.ArgumentException
    description: '*name* is an empty string.-or-*name* is longer than 260 characters.'
  - type: System.ArgumentNullException
    description: '*name* is null.'
  - type: System.IO.IOException
    description: A Win32 error occurred.
  - type: System.UnauthorizedAccessException
    description: The named mutex exists, but the user does not have the security access required to use it.
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  href: System.Boolean.yml
  name: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  href: System.String.yml
  name: String
  fullName: System.String
- uid: System.Threading.Mutex
  parent: System.Threading
  isExternal: false
  href: System.Threading.Mutex.yml
  name: Mutex
  fullName: System.Threading.Mutex
- uid: System.UnauthorizedAccessException
  isExternal: false
  href: System.UnauthorizedAccessException.yml
  name: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
  summary: The exception that is thrown when the operating system denies access because of an I/O error or a specific type of security error.
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  href: System.IO.IOException.yml
  name: IOException
  fullName: System.IO.IOException
  summary: The exception that is thrown when an I/O error occurs.
- uid: System.Threading.WaitHandleCannotBeOpenedException
  isExternal: false
  href: System.Threading.WaitHandleCannotBeOpenedException.yml
  name: WaitHandleCannotBeOpenedException
  fullName: System.Threading.WaitHandleCannotBeOpenedException
  summary: The exception that is thrown when an attempt is made to open a system mutex or semaphore that does not exist.
- uid: System.ArgumentException
  parent: System
  isExternal: false
  href: System.ArgumentException.yml
  name: ArgumentException
  fullName: System.ArgumentException
  summary: The exception that is thrown when one of the arguments provided to a method is not valid.
- uid: System.ArgumentNullException
  isExternal: false
  href: System.ArgumentNullException.yml
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  summary: The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
- uid: System.ApplicationException
