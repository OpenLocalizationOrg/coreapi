items:
- uid: System.ComponentModel.TypeConverterAttribute
  commentId: T:System.ComponentModel.TypeConverterAttribute
  id: TypeConverterAttribute
  parent: System.ComponentModel
  children:
  - System.ComponentModel.TypeConverterAttribute.#ctor
  - System.ComponentModel.TypeConverterAttribute.#ctor(System.String)
  - System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)
  - System.ComponentModel.TypeConverterAttribute.ConverterTypeName
  - System.ComponentModel.TypeConverterAttribute.Default
  - System.ComponentModel.TypeConverterAttribute.Equals(System.Object)
  - System.ComponentModel.TypeConverterAttribute.GetHashCode
  langs:
  - csharp
  - vb
  name: TypeConverterAttribute
  fullName: System.ComponentModel.TypeConverterAttribute
  type: Class
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverterAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeConverterAttribute
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverterAttribute.cs
    startLine: 12
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Specifies what type to use as a converter for the object this attribute is bound to.</p>\n"
  remarks: "\n<p>The class you use for conversion must inherit from <xref href=\"System.ComponentModel.TypeConverter\" data-throw-if-not-resolved=\"false\"></xref>. Use the <xref href=\"System.ComponentModel.TypeConverterAttribute.ConverterTypeName\" data-throw-if-not-resolved=\"false\"></xref> property to get the name of the class that provides the data conversion for the object this attribute is bound to.</p>\n<p>For more information about attributes, see Extending Metadata Using Attributes. For more information about type converters, see the <xref href=\"System.ComponentModel.TypeConverter\" data-throw-if-not-resolved=\"false\"></xref> base class and How to: Implement a Type Converter.</p>\n<p>In order to establish a type converter on a custom class that provides type conversion behavior for XAML, you apply the <xref href=\"System.ComponentModel.TypeConverterAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute to your type. The argument of the attribute references your type converter implementation. Your type converter should be able to accept values from a string that is used for attributes or initialization text in XAML markup, and convert that string into your intended destination type. For more information, seeTypeConverters and XAML.</p>\n<p>Rather than applying to all values of a type, a type converter behavior for XAML can also be established on a specific property. In this case, you apply <xref href=\"System.ComponentModel.TypeConverterAttribute\" data-throw-if-not-resolved=\"false\"></xref> to the property definition (the outer definition, not the specific <strong>get</strong> and <strong>set</strong> definitions).</p>\n<p>A type converter behavior for XAML usage of a custom attachable member can be assigned by applying <xref href=\"System.ComponentModel.TypeConverterAttribute\" data-throw-if-not-resolved=\"false\"></xref> to the <strong>get</strong> method accessor that supports the XAML usage. For more information, see Attached Properties Overview.</p>\n<p>For complex XAML serialization cases that require additional state from the object runtime, consider defining a value serializer in addition to a type converter, and attribute both support classes on your custom types or custom members. For more information, see <xref href=\"System.Windows.Markup.ValueSerializer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example declares <code>MyClass</code> to use the type converter called <code>MyClassConverter</code>. This example assumes that <code>MyClassConverter</code> has been implemented elsewhere. The class implementing the converter (<code>MyClassConverter</code>) must inherit from the <xref href=\"System.ComponentModel.TypeConverter\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Classic TypeConverterAttribute Example#1<p>The next example creates an instance of <code>MyClass</code>. Then it gets the attributes for the class, and prints the name of the type converter used by <code>MyClass</code>.</p>Classic TypeConverterAttribute Example#2"
  syntax:
    content: 'public sealed class TypeConverterAttribute : Attribute'
    content.vb: >-
      Public NotInheritable Class TypeConverterAttribute
          Inherits Attribute
  seealso:
  - type: System.ComponentModel.TypeConverter
    commentId: T:System.ComponentModel.TypeConverter
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.ComponentModel.TypeConverterAttribute.Default
  commentId: F:System.ComponentModel.TypeConverterAttribute.Default
  id: Default
  parent: System.ComponentModel.TypeConverterAttribute
  langs:
  - csharp
  - vb
  name: Default
  fullName: System.ComponentModel.TypeConverterAttribute.Default
  type: Field
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverterAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Default
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverterAttribute.cs
    startLine: 22
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Specifies the type to use as a converter for the object this attribute is bound to. </p>\n"
  syntax:
    content: public static readonly TypeConverterAttribute Default
    content.vb: Public Shared ReadOnly Default As TypeConverterAttribute
    return:
      type: System.ComponentModel.TypeConverterAttribute
  seealso:
  - type: System.ComponentModel.TypeConverter
    commentId: T:System.ComponentModel.TypeConverter
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.ComponentModel.TypeConverterAttribute.#ctor
  commentId: M:System.ComponentModel.TypeConverterAttribute.#ctor
  id: '#ctor'
  parent: System.ComponentModel.TypeConverterAttribute
  langs:
  - csharp
  - vb
  name: TypeConverterAttribute()
  fullName: System.ComponentModel.TypeConverterAttribute.TypeConverterAttribute()
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverterAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverterAttribute.cs
    startLine: 30
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.TypeConverterAttribute\" data-throw-if-not-resolved=\"false\"></xref> class with the default type converter, which is an empty string (\"\").</p>\n"
  remarks: "\n<p>The class that provides the data conversion must inherit from <xref href=\"System.ComponentModel.TypeConverter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public TypeConverterAttribute()
    content.vb: Public Sub New
  seealso:
  - type: System.ComponentModel.TypeConverter
    commentId: T:System.ComponentModel.TypeConverter
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverterAttribute.#ctor(System.String)
  commentId: M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.ComponentModel.TypeConverterAttribute
  langs:
  - csharp
  - vb
  name: TypeConverterAttribute(String)
  fullName: System.ComponentModel.TypeConverterAttribute.TypeConverterAttribute(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverterAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverterAttribute.cs
    startLine: 52
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.TypeConverterAttribute\" data-throw-if-not-resolved=\"false\"></xref> class, using the specified type name as the data converter for the object this attribute is bound to.</p>\n"
  remarks: "\n<p>The class that provides the data conversion must inherit from <xref href=\"System.ComponentModel.TypeConverter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public TypeConverterAttribute(string typeName)
    content.vb: Public Sub New(typeName As String)
    parameters:
    - id: typeName
      type: System.String
      description: "\n<p>The fully qualified name of the class to use for data conversion for the object this attribute is bound to. </p>\n"
  seealso:
  - type: System.ComponentModel.TypeConverter
    commentId: T:System.ComponentModel.TypeConverter
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)
  commentId: M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)
  id: '#ctor(System.Type)'
  parent: System.ComponentModel.TypeConverterAttribute
  langs:
  - csharp
  - vb
  name: TypeConverterAttribute(Type)
  fullName: System.ComponentModel.TypeConverterAttribute.TypeConverterAttribute(System.Type)
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
    startLine: 528
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.TypeConverterAttribute\" data-throw-if-not-resolved=\"false\"></xref> class, using the specified type as the data converter for the object this attribute is bound to.</p>\n"
  remarks: "\n<p>The class that provides the data conversion must inherit from <xref href=\"System.ComponentModel.TypeConverter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public TypeConverterAttribute(Type type)
    content.vb: Public Sub New(type As Type)
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that represents the type of the converter class to use for data conversion for the object this attribute is bound to. </p>\n"
  seealso:
  - type: System.ComponentModel.TypeConverter
    commentId: T:System.ComponentModel.TypeConverter
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverterAttribute.ConverterTypeName
  commentId: P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName
  id: ConverterTypeName
  parent: System.ComponentModel.TypeConverterAttribute
  langs:
  - csharp
  - vb
  name: ConverterTypeName
  fullName: System.ComponentModel.TypeConverterAttribute.ConverterTypeName
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverterAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConverterTypeName
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverterAttribute.cs
    startLine: 63
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets the fully qualified type name of the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> to use as a converter for the object this attribute is bound to.</p>\n"
  syntax:
    content: public string ConverterTypeName { get; }
    content.vb: Public ReadOnly Property ConverterTypeName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The fully qualified type name of the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> to use as a converter for the object this attribute is bound to, or an empty string (\"\") if none exists. The default value is an empty string (\"\").</p>\n"
  seealso:
  - type: System.ComponentModel.TypeConverter
    commentId: T:System.ComponentModel.TypeConverter
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.ComponentModel.TypeConverterAttribute.Equals(System.Object)
  commentId: M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.ComponentModel.TypeConverterAttribute
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.ComponentModel.TypeConverterAttribute.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverterAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverterAttribute.cs
    startLine: 71
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether the value of the given object is equal to the current <xref href=\"System.ComponentModel.TypeConverterAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to test the value equality of. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of the given object is equal to that of the current <xref href=\"System.ComponentModel.TypeConverterAttribute\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.ComponentModel.TypeConverterAttribute.GetHashCode
  commentId: M:System.ComponentModel.TypeConverterAttribute.GetHashCode
  id: GetHashCode
  parent: System.ComponentModel.TypeConverterAttribute
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.ComponentModel.TypeConverterAttribute.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverterAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverterAttribute.cs
    startLine: 77
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A hash code for the current <xref href=\"System.ComponentModel.TypeConverterAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.ComponentModel
  isExternal: false
  name: System.ComponentModel
  fullName: System.ComponentModel
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.ComponentModel.TypeConverterAttribute
  parent: System.ComponentModel
  isExternal: false
  name: TypeConverterAttribute
  fullName: System.ComponentModel.TypeConverterAttribute
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
