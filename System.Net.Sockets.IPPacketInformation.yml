items:
- uid: System.Net.Sockets.IPPacketInformation
  id: IPPacketInformation
  parent: System.Net.Sockets
  children:
  - System.Net.Sockets.IPPacketInformation.Address
  - System.Net.Sockets.IPPacketInformation.Equals(System.Object)
  - System.Net.Sockets.IPPacketInformation.GetHashCode
  - System.Net.Sockets.IPPacketInformation.Interface
  - System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  - System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  href: System.Net.Sockets.IPPacketInformation.yml
  name: IPPacketInformation
  fullName: System.Net.Sockets.IPPacketInformation
  type: Struct
  source:
    remote: &o0
      path: src/System.Net.Sockets/src/System/Net/Sockets/IPPacketInformation.cs
      branch: master
      repo: https://vicancy@github.com/dotnet/corefx.git
    path: src/System.Net.Sockets/src/System/Net/Sockets/IPPacketInformation.cs
    startLine: 7
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Presents the packet information from a call to @'System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)' or @'System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)'.
  syntax:
    content: public struct IPPacketInformation
    content.vb: Public Structure IPPacketInformation
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
- uid: System.Net.Sockets.IPPacketInformation.Address
  id: Address
  parent: System.Net.Sockets.IPPacketInformation
  href: System.Net.Sockets.IPPacketInformation.yml
  name: Address
  fullName: System.Net.Sockets.IPPacketInformation.Address
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/IPPacketInformation.cs
    startLine: 18
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets the origin information of the packet that was received as a result of calling the @'System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)' method or @'System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)' method.
  syntax:
    content: public IPAddress Address { get; }
    content.vb: Public ReadOnly Property Address As IPAddress
    parameters: []
    return:
      type: System.Net.IPAddress
      description: An @'System.Net.IPAddress' that indicates the origin information of the packet that was received as a result of calling the @'System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)' method or @'System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)' method. For packets that were sent from a unicast address, the @'System.Net.Sockets.IPPacketInformation.Address' property will return the @'System.Net.IPAddress' of the sender; for multicast or broadcast packets, the @'System.Net.Sockets.IPPacketInformation.Address' property will return the multicast or broadcast @'System.Net.IPAddress'.
- uid: System.Net.Sockets.IPPacketInformation.Interface
  id: Interface
  parent: System.Net.Sockets.IPPacketInformation
  href: System.Net.Sockets.IPPacketInformation.yml
  name: Interface
  fullName: System.Net.Sockets.IPPacketInformation.Interface
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/IPPacketInformation.cs
    startLine: 26
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets the network interface information that is associated with a call to @'System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)' or @'System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)'.
  syntax:
    content: public int Interface { get; }
    content.vb: Public ReadOnly Property Interface As Integer
    parameters: []
    return:
      type: System.Int32
      description: An @'System.Int32' value, which represents the index of the network interface. You can use this index with @'System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces' to get more information about the relevant interface.
- uid: System.Net.Sockets.IPPacketInformation.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Net.Sockets.IPPacketInformation
  href: System.Net.Sockets.IPPacketInformation.yml
  name: Equals(Object)
  fullName: System.Net.Sockets.IPPacketInformation.Equals(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/IPPacketInformation.cs
    startLine: 45
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Returns a value that indicates whether this instance is equal to a specified object.
  syntax:
    content: public override bool Equals(object comparand)
    content.vb: Public Overrides Function Equals(comparand As Object) As Boolean
    parameters:
    - id: comparand
      type: System.Object
      description: The object to compare with this instance.
    return:
      type: System.Boolean
      description: true if *comparand* is an instance of @'System.Net.Sockets.IPPacketInformation' and equals the value of the instance; otherwise, false.
  overridden: System.ValueType.Equals(System.Object)
- uid: System.Net.Sockets.IPPacketInformation.GetHashCode
  id: GetHashCode
  parent: System.Net.Sockets.IPPacketInformation
  href: System.Net.Sockets.IPPacketInformation.yml
  name: GetHashCode()
  fullName: System.Net.Sockets.IPPacketInformation.GetHashCode()
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/IPPacketInformation.cs
    startLine: 55
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Returns the hash code for this instance.
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: An Int32 hash code.
  overridden: System.ValueType.GetHashCode
- uid: System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  id: op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  parent: System.Net.Sockets.IPPacketInformation
  href: System.Net.Sockets.IPPacketInformation.yml
  name: Equality(IPPacketInformation, IPPacketInformation)
  fullName: System.Net.Sockets.IPPacketInformation.Equality(System.Net.Sockets.IPPacketInformation, System.Net.Sockets.IPPacketInformation)
  type: Operator
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/IPPacketInformation.cs
    startLine: 34
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Tests whether two specified @'System.Net.Sockets.IPPacketInformation' instances are equivalent.
  syntax:
    content: public static bool operator ==(IPPacketInformation packetInformation1, IPPacketInformation packetInformation2)
    content.vb: Public Shared Operator =(packetInformation1 As IPPacketInformation, packetInformation2 As IPPacketInformation) As Boolean
    parameters:
    - id: packetInformation1
      type: System.Net.Sockets.IPPacketInformation
      description: The @'System.Net.Sockets.IPPacketInformation' instance that is to the left of the equality operator.
    - id: packetInformation2
      type: System.Net.Sockets.IPPacketInformation
      description: The @'System.Net.Sockets.IPPacketInformation' instance that is to the right of the equality operator.
    return:
      type: System.Boolean
      description: true if *packetInformation1* and *packetInformation2* are equal; otherwise, false.
- uid: System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  id: op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  parent: System.Net.Sockets.IPPacketInformation
  href: System.Net.Sockets.IPPacketInformation.yml
  name: Inequality(IPPacketInformation, IPPacketInformation)
  fullName: System.Net.Sockets.IPPacketInformation.Inequality(System.Net.Sockets.IPPacketInformation, System.Net.Sockets.IPPacketInformation)
  type: Operator
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/IPPacketInformation.cs
    startLine: 40
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Tests whether two specified @'System.Net.Sockets.IPPacketInformation' instances are not equal.
  syntax:
    content: public static bool operator !=(IPPacketInformation packetInformation1, IPPacketInformation packetInformation2)
    content.vb: Public Shared Operator <>(packetInformation1 As IPPacketInformation, packetInformation2 As IPPacketInformation) As Boolean
    parameters:
    - id: packetInformation1
      type: System.Net.Sockets.IPPacketInformation
      description: The @'System.Net.Sockets.IPPacketInformation' instance that is to the left of the inequality operator.
    - id: packetInformation2
      type: System.Net.Sockets.IPPacketInformation
      description: The @'System.Net.Sockets.IPPacketInformation' instance that is to the right of the inequality operator.
    return:
      type: System.Boolean
      description: true if *packetInformation1* and *packetInformation2* are unequal; otherwise, false.
references:
- uid: System.Net.Sockets
  isExternal: false
  name: System.Net.Sockets
  fullName: System.Net.Sockets
  type: Namespace
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  href: System.ValueType.yml
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
    href: System.ValueType.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
    href: System.ValueType.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType
  parent: System
  isExternal: false
  href: System.ValueType.yml
  name: ValueType
  fullName: System.ValueType
  type: Class
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
  type: Class
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: false
  href: System.Net.IPAddress.yml
  name: IPAddress
  fullName: System.Net.IPAddress
  type: Class
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
  type: Namespace
- uid: System.Int32
  parent: System
  isExternal: false
  href: System.Int32.yml
  name: Int32
  fullName: System.Int32
  type: Struct
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  href: System.ValueType.yml
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
    href: System.ValueType.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
    href: System.ValueType.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  href: System.Boolean.yml
  name: Boolean
  fullName: System.Boolean
  type: Struct
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  href: System.ValueType.yml
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
    href: System.ValueType.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
    href: System.ValueType.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Net.Sockets.IPPacketInformation
  parent: System.Net.Sockets
  isExternal: false
  href: System.Net.Sockets.IPPacketInformation.yml
  name: IPPacketInformation
  fullName: System.Net.Sockets.IPPacketInformation
  type: Struct
