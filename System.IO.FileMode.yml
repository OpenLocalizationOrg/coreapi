items:
- uid: System.IO.FileMode
  id: FileMode
  parent: System.IO
  children:
  - System.IO.FileMode.Append
  - System.IO.FileMode.Create
  - System.IO.FileMode.CreateNew
  - System.IO.FileMode.Open
  - System.IO.FileMode.OpenOrCreate
  - System.IO.FileMode.Truncate
  href: System.IO.FileMode.yml
  name: FileMode
  fullName: System.IO.FileMode
  type: Enum
  source:
    remote: &o0
      path: src/mscorlib/src/System/IO/FileMode.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    path: src/mscorlib/src/System/IO/FileMode.cs
    startLine: 28
  assemblies:
  - System.IO.FileSystem.Primitives
  namespace: System.IO
  summary: Specifies how the operating system should open a file.
  syntax:
    content: 'public enum FileMode : int'
    content.vb: Public Enum FileMode As Integer
- uid: System.IO.FileMode.Append
  id: Append
  parent: System.IO.FileMode
  href: System.IO.FileMode.yml
  name: Append
  fullName: System.IO.FileMode.Append
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileMode.cs
    startLine: 51
  assemblies:
  - System.IO.FileSystem.Primitives
  namespace: System.IO
  summary: Opens the file if it exists and seeks to the end of the file, or creates a new file. This requires @'System.Security.Permissions.FileIOPermissionAccess.Append' permission. FileMode.Append can be used only in conjunction with FileAccess.Write. Trying to seek to a position before the end of the file throws an @'System.IO.IOException' exception, and any attempt to read fails and throws a @'System.NotSupportedException' exception.
  syntax:
    content: Append = null
    content.vb: Append = Nothing
- uid: System.IO.FileMode.Create
  id: Create
  parent: System.IO.FileMode
  href: System.IO.FileMode.yml
  name: Create
  fullName: System.IO.FileMode.Create
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileMode.cs
    startLine: 36
  assemblies:
  - System.IO.FileSystem.Primitives
  namespace: System.IO
  summary: Specifies that the operating system should create a new file. If the file already exists, it will be overwritten. This requires @'System.Security.Permissions.FileIOPermissionAccess.Write' permission. FileMode.Create is equivalent to requesting that if the file does not exist, use @'System.IO.FileMode.CreateNew'; otherwise, use @'System.IO.FileMode.Truncate'. If the file already exists but is a hidden file, an @'System.UnauthorizedAccessException' exception is thrown.
  syntax:
    content: Create = null
    content.vb: Create = Nothing
- uid: System.IO.FileMode.CreateNew
  id: CreateNew
  parent: System.IO.FileMode
  href: System.IO.FileMode.yml
  name: CreateNew
  fullName: System.IO.FileMode.CreateNew
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileMode.cs
    startLine: 33
  assemblies:
  - System.IO.FileSystem.Primitives
  namespace: System.IO
  summary: Specifies that the operating system should create a new file. This requires @'System.Security.Permissions.FileIOPermissionAccess.Write' permission. If the file already exists, an @'System.IO.IOException' exception is thrown.
  syntax:
    content: CreateNew = null
    content.vb: CreateNew = Nothing
- uid: System.IO.FileMode.Open
  id: Open
  parent: System.IO.FileMode
  href: System.IO.FileMode.yml
  name: Open
  fullName: System.IO.FileMode.Open
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileMode.cs
    startLine: 39
  assemblies:
  - System.IO.FileSystem.Primitives
  namespace: System.IO
  summary: Specifies that the operating system should open an existing file. The ability to open the file is dependent on the value specified by the @'System.IO.FileAccess' enumeration. A @'System.IO.FileNotFoundException' exception is thrown if the file does not exist.
  syntax:
    content: Open = null
    content.vb: Open = Nothing
- uid: System.IO.FileMode.OpenOrCreate
  id: OpenOrCreate
  parent: System.IO.FileMode
  href: System.IO.FileMode.yml
  name: OpenOrCreate
  fullName: System.IO.FileMode.OpenOrCreate
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileMode.cs
    startLine: 42
  assemblies:
  - System.IO.FileSystem.Primitives
  namespace: System.IO
  summary: Specifies that the operating system should open a file if it exists; otherwise, a new file should be created. If the file is opened with FileAccess.Read, @'System.Security.Permissions.FileIOPermissionAccess.Read' permission is required. If the file access is FileAccess.Write, @'System.Security.Permissions.FileIOPermissionAccess.Write' permission is required. If the file is opened with FileAccess.ReadWrite, both @'System.Security.Permissions.FileIOPermissionAccess.Read' and @'System.Security.Permissions.FileIOPermissionAccess.Write' permissions are required.
  syntax:
    content: OpenOrCreate = null
    content.vb: OpenOrCreate = Nothing
- uid: System.IO.FileMode.Truncate
  id: Truncate
  parent: System.IO.FileMode
  href: System.IO.FileMode.yml
  name: Truncate
  fullName: System.IO.FileMode.Truncate
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/FileMode.cs
    startLine: 47
  assemblies:
  - System.IO.FileSystem.Primitives
  namespace: System.IO
  summary: Specifies that the operating system should open an existing file. When the file is opened, it should be truncated so that its size is zero bytes. This requires @'System.Security.Permissions.FileIOPermissionAccess.Write' permission. Attempts to read from a file opened with FileMode.Truncate cause an @'System.ArgumentException' exception.
  syntax:
    content: Truncate = null
    content.vb: Truncate = Nothing
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
