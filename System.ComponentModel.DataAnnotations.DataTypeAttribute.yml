items:
- uid: System.ComponentModel.DataAnnotations.DataTypeAttribute
  commentId: T:System.ComponentModel.DataAnnotations.DataTypeAttribute
  id: DataTypeAttribute
  parent: System.ComponentModel.DataAnnotations
  children:
  - System.ComponentModel.DataAnnotations.DataTypeAttribute.#ctor(System.ComponentModel.DataAnnotations.DataType)
  - System.ComponentModel.DataAnnotations.DataTypeAttribute.#ctor(System.String)
  - System.ComponentModel.DataAnnotations.DataTypeAttribute.CustomDataType
  - System.ComponentModel.DataAnnotations.DataTypeAttribute.DataType
  - System.ComponentModel.DataAnnotations.DataTypeAttribute.DisplayFormat
  - System.ComponentModel.DataAnnotations.DataTypeAttribute.GetDataTypeName
  - System.ComponentModel.DataAnnotations.DataTypeAttribute.IsValid(System.Object)
  langs:
  - csharp
  - vb
  name: DataTypeAttribute
  fullName: System.ComponentModel.DataAnnotations.DataTypeAttribute
  type: Class
  source:
    remote:
      path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/DataTypeAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DataTypeAttribute
    path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/DataTypeAttribute.cs
    startLine: 13
  assemblies:
  - System.ComponentModel.Annotations
  namespace: System.ComponentModel.DataAnnotations
  summary: "\n<p>Specifies the name of an additional type to associate with a data field.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ComponentModel.DataAnnotations.DataTypeAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute enables you to mark fields by using a type that is more specific than the database intrinsic type. The type name is selected from the <xref href=\"System.ComponentModel.DataAnnotations.DataType\" data-throw-if-not-resolved=\"false\"></xref> enumeration type. For example, a string data field that contains e-mail addresses can be specified as the <xref href=\"System.ComponentModel.DataAnnotations.DataType.EmailAddress\" data-throw-if-not-resolved=\"false\"></xref> type. This information is then accessed by the field templates to modify how the data field is processed. </p>\n<p>You use the <xref href=\"System.ComponentModel.DataAnnotations.DataTypeAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute for the following reasons:</p>\n<ul><li>\n<p>To provide additional type information for a data field. You do this by applying the <xref href=\"System.ComponentModel.DataAnnotations.DataTypeAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute to a data field in the data model and by specifying the additional type name from the <xref href=\"System.ComponentModel.DataAnnotations.DataType\" data-throw-if-not-resolved=\"false\"></xref> enumeration. The field template that processes the data field can access this additional metadata type information to determine how to process the field. For example, the text field template can generate hyperlinks for e-mail addresses whose intrinsic type is <strong>String</strong>.</p>\n</li><li>\n<p>To associate a custom field template with a data field. The specified custom field template will then be used to process the data field. This is an alternative to using the <xref href=\"System.ComponentModel.DataAnnotations.UIHintAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute. </p>\n</li></ul>\n<p>When you apply the <xref href=\"System.ComponentModel.DataAnnotations.DataTypeAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute to a data field you must do the following:</p>\n<ul><li>\n<p>Follow the attribute usage rules.</p>\n</li><li>\n<p>Implement the metadata class that contains the data fields to which you want to apply the attribute.</p>\n</li><li>\n<p>Issue validation errors as appropriate.</p>\n</li></ul>\n<p>For more information, see ASP.NET Dynamic Data Guidelines.</p>\n<p>See a run-time code example of this feature: <see href=\"http://go.microsoft.com/fwlink/?LinkId=120736&sref=System.ComponentModel.DataAnnotations.DataTypeAttribute\">Run</see>.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.ComponentModel.DataAnnotations.DataTypeAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute to customize the display of the EmailAddress data field. The e-mail addresses are shown as hyperlinks instead of as simple text, which is what Dynamic Data would infer from the intrinsic data type. The example code is in three parts, and it performs the following steps:</p>\n<ul><li>\n<p>It implements a metadata partial class and the associated metadata class. </p>\n</li><li>\n<p>In the associated metadata class, it applies the <xref href=\"System.ComponentModel.DataAnnotations.DataTypeAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute to the EmailAddress data field by specifying the <xref href=\"System.ComponentModel.DataAnnotations.DataType.EmailAddress\" data-throw-if-not-resolved=\"false\"></xref> enumerated value. This indicates to the Text.ascx field template that it should customize the display of e-mail addresses.</p>\n</li><li>\n<p>It modifies the Text.ascx field template to customize the display of the EmailAddress data fields. </p>\n</li></ul>System.ComponentModel.DataAnnotations.DataTypeAttribute#1System.ComponentModel.DataAnnotations.DataTypeAttribute#2System.ComponentModel.DataAnnotations.DataTypeAttribute#3<p>To compile and run the example code, you need the following:</p><ul><li><p>Visual Studio 2008 Service Pack 1 or Visual Developer 2008 Express Edition Service Pack 1. </p></li><li><p>The AdventureWorksLT sample database. For information about how to download and install the SQL Server sample database, see <see href=\"http://go.microsoft.com/fwlink/?LinkId=117483\">Microsoft SQL Server Product Samples: Database</see> on the CodePlex site. Make sure that you install the correct version of the sample database for the version of SQL Server that you are running (SQL Server 2005 or SQL Server 2008).</p></li><li><p>A data-driven Web site. This enables you to create a data context for the database and to create the class that contains the data field to customize. For more information, see Walkthrough: Creating a New Dynamic Data Web Site using Scaffolding.</p></li></ul>"
  syntax:
    content: 'public class DataTypeAttribute : ValidationAttribute'
    content.vb: >-
      Public Class DataTypeAttribute
          Inherits ValidationAttribute
  seealso:
  - type: System.ComponentModel.DataAnnotations.ValidationAttribute
    commentId: T:System.ComponentModel.DataAnnotations.ValidationAttribute
  - type: System.ComponentModel.DataAnnotations.UIHintAttribute
    commentId: T:System.ComponentModel.DataAnnotations.UIHintAttribute
  - type: System.ComponentModel.DataAnnotations.DataType
    commentId: T:System.ComponentModel.DataAnnotations.DataType
  - type: System.AttributeUsageAttribute
    commentId: T:System.AttributeUsageAttribute
  - type: System.AttributeTargets
    commentId: T:System.AttributeTargets
  inheritance:
  - System.Object
  - System.ComponentModel.DataAnnotations.ValidationAttribute
  inheritedMembers:
  - System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage
  - System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName
  - System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType
  - System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageString
  - System.ComponentModel.DataAnnotations.ValidationAttribute.RequiresValidationContext
  - System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)
  - System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)
  - System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)
  - System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)
  - System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object,System.String)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.ComponentModel.DataAnnotations.DataTypeAttribute.#ctor(System.ComponentModel.DataAnnotations.DataType)
  commentId: M:System.ComponentModel.DataAnnotations.DataTypeAttribute.#ctor(System.ComponentModel.DataAnnotations.DataType)
  id: '#ctor(System.ComponentModel.DataAnnotations.DataType)'
  parent: System.ComponentModel.DataAnnotations.DataTypeAttribute
  langs:
  - csharp
  - vb
  name: DataTypeAttribute(DataType)
  fullName: System.ComponentModel.DataAnnotations.DataTypeAttribute.DataTypeAttribute(System.ComponentModel.DataAnnotations.DataType)
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/DataTypeAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/DataTypeAttribute.cs
    startLine: 24
  assemblies:
  - System.ComponentModel.Annotations
  namespace: System.ComponentModel.DataAnnotations
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.DataAnnotations.DataTypeAttribute\" data-throw-if-not-resolved=\"false\"></xref> class by using the specified type name.</p>\n"
  remarks: "\n<p>The name is one of the values that are defined by the <xref href=\"System.ComponentModel.DataAnnotations.DataType\" data-throw-if-not-resolved=\"false\"></xref> enumeration.</p>\n"
  example:
  - "\n<p>The following example shows how to use the <xref href=\"System.ComponentModel.DataAnnotations.DataTypeAttribute.#ctor(System.ComponentModel.DataAnnotations.DataType)\" data-throw-if-not-resolved=\"false\"></xref> constructor to specify an alternative type for a data field.</p>System.ComponentModel.DataAnnotations.DataTypeAttribute#11"
  syntax:
    content: public DataTypeAttribute(DataType dataType)
    content.vb: Public Sub New(dataType As DataType)
    parameters:
    - id: dataType
      type: System.ComponentModel.DataAnnotations.DataType
      description: "\n<p>The name of the type to associate with the data field.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.DataAnnotations.DataTypeAttribute.#ctor(System.String)
  commentId: M:System.ComponentModel.DataAnnotations.DataTypeAttribute.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.ComponentModel.DataAnnotations.DataTypeAttribute
  langs:
  - csharp
  - vb
  name: DataTypeAttribute(String)
  fullName: System.ComponentModel.DataAnnotations.DataTypeAttribute.DataTypeAttribute(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/DataTypeAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/DataTypeAttribute.cs
    startLine: 55
  assemblies:
  - System.ComponentModel.Annotations
  namespace: System.ComponentModel.DataAnnotations
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.DataAnnotations.DataTypeAttribute\" data-throw-if-not-resolved=\"false\"></xref> class by using the specified field template name.</p>\n"
  remarks: "\n<p>This method provides an alternative to using the <xref href=\"System.ComponentModel.DataAnnotations.UIHintAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute.</p>\n"
  example:
  - 
  syntax:
    content: public DataTypeAttribute(string customDataType)
    content.vb: Public Sub New(customDataType As String)
    parameters:
    - id: customDataType
      type: System.String
      description: "\n<p>The name of the custom field template to associate with the data field.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>customDataType</em> is <strong>null</strong> or an empty string (\"\"). </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.DataAnnotations.DataTypeAttribute.CustomDataType
  commentId: P:System.ComponentModel.DataAnnotations.DataTypeAttribute.CustomDataType
  id: CustomDataType
  parent: System.ComponentModel.DataAnnotations.DataTypeAttribute
  langs:
  - csharp
  - vb
  name: CustomDataType
  fullName: System.ComponentModel.DataAnnotations.DataTypeAttribute.CustomDataType
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/DataTypeAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CustomDataType
    path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/DataTypeAttribute.cs
    startLine: 70
  assemblies:
  - System.ComponentModel.Annotations
  namespace: System.ComponentModel.DataAnnotations
  summary: "\n<p>Gets the name of custom field template that is associated with the data field.</p>\n"
  example:
  - 
  syntax:
    content: public string CustomDataType { get; }
    content.vb: Public ReadOnly Property CustomDataType As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the custom field template that is associated with the data field.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.ComponentModel.DataAnnotations.DataTypeAttribute.DataType
  commentId: P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DataType
  id: DataType
  parent: System.ComponentModel.DataAnnotations.DataTypeAttribute
  langs:
  - csharp
  - vb
  name: DataType
  fullName: System.ComponentModel.DataAnnotations.DataTypeAttribute.DataType
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/DataTypeAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DataType
    path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/DataTypeAttribute.cs
    startLine: 64
  assemblies:
  - System.ComponentModel.Annotations
  namespace: System.ComponentModel.DataAnnotations
  summary: "\n<p>Gets the type that is associated with the data field.</p>\n"
  example:
  - 
  syntax:
    content: public DataType DataType { get; }
    content.vb: Public ReadOnly Property DataType As DataType
    parameters: []
    return:
      type: System.ComponentModel.DataAnnotations.DataType
      description: "\n<p>One of the <xref href=\"System.ComponentModel.DataAnnotations.DataType\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.ComponentModel.DataAnnotations.DataTypeAttribute.DisplayFormat
  commentId: P:System.ComponentModel.DataAnnotations.DataTypeAttribute.DisplayFormat
  id: DisplayFormat
  parent: System.ComponentModel.DataAnnotations.DataTypeAttribute
  langs:
  - csharp
  - vb
  name: DisplayFormat
  fullName: System.ComponentModel.DataAnnotations.DataTypeAttribute.DisplayFormat
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/DataTypeAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DisplayFormat
    path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/DataTypeAttribute.cs
    startLine: 75
  assemblies:
  - System.ComponentModel.Annotations
  namespace: System.ComponentModel.DataAnnotations
  summary: "\n<p>Gets a data-field display format.</p>\n"
  example:
  - 
  syntax:
    content: public DisplayFormatAttribute DisplayFormat { get; protected set; }
    content.vb: Public Property DisplayFormat As DisplayFormatAttribute
    parameters: []
    return:
      type: System.ComponentModel.DataAnnotations.DisplayFormatAttribute
      description: "\n<p>The data-field display format.</p>\n"
  seealso:
  - type: System.ComponentModel.DataAnnotations.DisplayFormatAttribute
    commentId: T:System.ComponentModel.DataAnnotations.DisplayFormatAttribute
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: System.ComponentModel.DataAnnotations.DataTypeAttribute.GetDataTypeName
  commentId: M:System.ComponentModel.DataAnnotations.DataTypeAttribute.GetDataTypeName
  id: GetDataTypeName
  parent: System.ComponentModel.DataAnnotations.DataTypeAttribute
  langs:
  - csharp
  - vb
  name: GetDataTypeName()
  fullName: System.ComponentModel.DataAnnotations.DataTypeAttribute.GetDataTypeName()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/DataTypeAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDataTypeName
    path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/DataTypeAttribute.cs
    startLine: 83
  assemblies:
  - System.ComponentModel.Annotations
  namespace: System.ComponentModel.DataAnnotations
  summary: "\n<p>Returns the name of the type that is associated with the data field.</p>\n"
  remarks: "\n<p>The name of the type that is associated with the data field.</p>\n"
  example:
  - 
  syntax:
    content: public virtual string GetDataTypeName()
    content.vb: Public Overridable Function GetDataTypeName As String
    return:
      type: System.String
      description: "\n<p>The name of the type associated with the data field.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.DataAnnotations.DataTypeAttribute.IsValid(System.Object)
  commentId: M:System.ComponentModel.DataAnnotations.DataTypeAttribute.IsValid(System.Object)
  id: IsValid(System.Object)
  parent: System.ComponentModel.DataAnnotations.DataTypeAttribute
  langs:
  - csharp
  - vb
  name: IsValid(Object)
  fullName: System.ComponentModel.DataAnnotations.DataTypeAttribute.IsValid(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/DataTypeAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsValid
    path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/DataTypeAttribute.cs
    startLine: 104
  assemblies:
  - System.ComponentModel.Annotations
  namespace: System.ComponentModel.DataAnnotations
  summary: "\n<p>Checks that the value of the data field is valid.</p>\n"
  remarks: "\n<p>This method implements validation logic that is specific to the <xref href=\"System.ComponentModel.DataAnnotations.DataTypeAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute.</p>\n"
  example:
  - 
  syntax:
    content: public override bool IsValid(object value)
    content.vb: Public Overrides Function IsValid(value As Object) As Boolean
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The data field value to validate.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> always.</p>\n"
  overridden: System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)
  seealso:
  - type: System.ComponentModel.DataAnnotations.ValidationAttribute
    commentId: T:System.ComponentModel.DataAnnotations.ValidationAttribute
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.ComponentModel.DataAnnotations
  isExternal: false
  name: System.ComponentModel.DataAnnotations
  fullName: System.ComponentModel.DataAnnotations
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.ComponentModel.DataAnnotations.ValidationAttribute
  parent: System.ComponentModel.DataAnnotations
  isExternal: false
  name: ValidationAttribute
  fullName: System.ComponentModel.DataAnnotations.ValidationAttribute
- uid: System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage
  parent: System.ComponentModel.DataAnnotations.ValidationAttribute
  isExternal: false
  name: ErrorMessage
  fullName: System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage
- uid: System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName
  parent: System.ComponentModel.DataAnnotations.ValidationAttribute
  isExternal: false
  name: ErrorMessageResourceName
  fullName: System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName
- uid: System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType
  parent: System.ComponentModel.DataAnnotations.ValidationAttribute
  isExternal: false
  name: ErrorMessageResourceType
  fullName: System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType
- uid: System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageString
  parent: System.ComponentModel.DataAnnotations.ValidationAttribute
  isExternal: false
  name: ErrorMessageString
  fullName: System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageString
- uid: System.ComponentModel.DataAnnotations.ValidationAttribute.RequiresValidationContext
  parent: System.ComponentModel.DataAnnotations.ValidationAttribute
  isExternal: false
  name: RequiresValidationContext
  fullName: System.ComponentModel.DataAnnotations.ValidationAttribute.RequiresValidationContext
- uid: System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)
  parent: System.ComponentModel.DataAnnotations.ValidationAttribute
  isExternal: true
  name: FormatErrorMessage(String)
  fullName: System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)
  spec.csharp:
  - uid: System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)
    name: FormatErrorMessage
    fullName: System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String)
    name: FormatErrorMessage
    fullName: System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)
  parent: System.ComponentModel.DataAnnotations.ValidationAttribute
  isExternal: true
  name: GetValidationResult(Object, ValidationContext)
  fullName: System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object, System.ComponentModel.DataAnnotations.ValidationContext)
  spec.csharp:
  - uid: System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)
    name: GetValidationResult
    fullName: System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.ComponentModel.DataAnnotations.ValidationContext
    name: ValidationContext
    fullName: System.ComponentModel.DataAnnotations.ValidationContext
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)
    name: GetValidationResult
    fullName: System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.ComponentModel.DataAnnotations.ValidationContext
    name: ValidationContext
    fullName: System.ComponentModel.DataAnnotations.ValidationContext
  - name: )
    fullName: )
- uid: System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)
  parent: System.ComponentModel.DataAnnotations.ValidationAttribute
  isExternal: true
  name: IsValid(Object, ValidationContext)
  fullName: System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object, System.ComponentModel.DataAnnotations.ValidationContext)
  spec.csharp:
  - uid: System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)
    name: IsValid
    fullName: System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.ComponentModel.DataAnnotations.ValidationContext
    name: ValidationContext
    fullName: System.ComponentModel.DataAnnotations.ValidationContext
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)
    name: IsValid
    fullName: System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.ComponentModel.DataAnnotations.ValidationContext
    name: ValidationContext
    fullName: System.ComponentModel.DataAnnotations.ValidationContext
  - name: )
    fullName: )
- uid: System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)
  parent: System.ComponentModel.DataAnnotations.ValidationAttribute
  isExternal: true
  name: Validate(Object, ValidationContext)
  fullName: System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object, System.ComponentModel.DataAnnotations.ValidationContext)
  spec.csharp:
  - uid: System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)
    name: Validate
    fullName: System.ComponentModel.DataAnnotations.ValidationAttribute.Validate
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.ComponentModel.DataAnnotations.ValidationContext
    name: ValidationContext
    fullName: System.ComponentModel.DataAnnotations.ValidationContext
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)
    name: Validate
    fullName: System.ComponentModel.DataAnnotations.ValidationAttribute.Validate
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.ComponentModel.DataAnnotations.ValidationContext
    name: ValidationContext
    fullName: System.ComponentModel.DataAnnotations.ValidationContext
  - name: )
    fullName: )
- uid: System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object,System.String)
  parent: System.ComponentModel.DataAnnotations.ValidationAttribute
  isExternal: true
  name: Validate(Object, String)
  fullName: System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object, System.String)
  spec.csharp:
  - uid: System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object,System.String)
    name: Validate
    fullName: System.ComponentModel.DataAnnotations.ValidationAttribute.Validate
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object,System.String)
    name: Validate
    fullName: System.ComponentModel.DataAnnotations.ValidationAttribute.Validate
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.ComponentModel.DataAnnotations.DataType
  parent: System.ComponentModel.DataAnnotations
  isExternal: false
  name: DataType
  fullName: System.ComponentModel.DataAnnotations.DataType
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.ComponentModel.DataAnnotations.DisplayFormatAttribute
  parent: System.ComponentModel.DataAnnotations
  isExternal: false
  name: DisplayFormatAttribute
  fullName: System.ComponentModel.DataAnnotations.DisplayFormatAttribute
- uid: System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)
  parent: System.ComponentModel.DataAnnotations.ValidationAttribute
  isExternal: true
  name: IsValid(Object)
  fullName: System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)
  spec.csharp:
  - uid: System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)
    name: IsValid
    fullName: System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object)
    name: IsValid
    fullName: System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
