items:
- uid: System.Reflection.FieldInfo
  commentId: T:System.Reflection.FieldInfo
  id: FieldInfo
  parent: System.Reflection
  children:
  - System.Reflection.FieldInfo.Attributes
  - System.Reflection.FieldInfo.Equals(System.Object)
  - System.Reflection.FieldInfo.FieldType
  - System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)
  - System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  - System.Reflection.FieldInfo.GetHashCode
  - System.Reflection.FieldInfo.GetOptionalCustomModifiers
  - System.Reflection.FieldInfo.GetRawConstantValue
  - System.Reflection.FieldInfo.GetRequiredCustomModifiers
  - System.Reflection.FieldInfo.GetValue(System.Object)
  - System.Reflection.FieldInfo.IsAssembly
  - System.Reflection.FieldInfo.IsFamily
  - System.Reflection.FieldInfo.IsFamilyAndAssembly
  - System.Reflection.FieldInfo.IsFamilyOrAssembly
  - System.Reflection.FieldInfo.IsInitOnly
  - System.Reflection.FieldInfo.IsLiteral
  - System.Reflection.FieldInfo.IsPrivate
  - System.Reflection.FieldInfo.IsPublic
  - System.Reflection.FieldInfo.IsSpecialName
  - System.Reflection.FieldInfo.IsStatic
  - System.Reflection.FieldInfo.MemberType
  - System.Reflection.FieldInfo.SetValue(System.Object,System.Object)
  langs:
  - csharp
  - vb
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FieldInfo
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 25
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Discovers the attributes of a field and provides access to field metadata. </p>\n"
  remarks: "\n<p>The field information is obtained from metadata. The <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> class does not have a public constructor. <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> objects are obtained by calling either the <xref href=\"System.Type.GetFields\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Type.GetField(System.String,System.Reflection.BindingFlags)\" data-throw-if-not-resolved=\"false\"></xref> method of a <strong>Type</strong> object.</p>\n<p>Fields are variables defined in the class. <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> provides access to the metadata for a field within a class and provides dynamic set and get functionality for the field. The class is not loaded into memory until invoke or get is called on the object.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [ClassInterface(ClassInterfaceType.None)]

      [ComDefaultInterface(typeof (_FieldInfo))]

      [PermissionSet(SecurityAction.InheritanceDemand, Name = "FullTrust")]

      [ComVisible(true)]

      public abstract class FieldInfo : MemberInfo, ICustomAttributeProvider, _MemberInfo, _FieldInfo
    content.vb: >-
      <Serializable>

      <ClassInterface(ClassInterfaceType.None)>

      <ComDefaultInterface(GetType(_FieldInfo))>

      <PermissionSet(SecurityAction.InheritanceDemand, Name:="FullTrust")>

      <ComVisible(True)>

      Public MustInherit Class FieldInfo
          Inherits MemberInfo
          Implements ICustomAttributeProvider, _MemberInfo, _FieldInfo
  seealso:
  - type: System.Type
    commentId: T:System.Type
  see:
  - type: System.Security.Permissions.SecurityAction.InheritanceDemand
    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand
  inheritance:
  - System.Object
  - System.Reflection.MemberInfo
  implements:
  - System.Reflection.ICustomAttributeProvider
  inheritedMembers:
  - System.Reflection.MemberInfo.CustomAttributes
  - System.Reflection.MemberInfo.DeclaringType
  - System.Reflection.MemberInfo.MetadataToken
  - System.Reflection.MemberInfo.Module
  - System.Reflection.MemberInfo.Name
  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Reflection.FieldInfo.Attributes
  commentId: P:System.Reflection.FieldInfo.Attributes
  id: Attributes
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: Attributes
  nameWithType: FieldInfo.Attributes
  fullName: System.Reflection.FieldInfo.Attributes
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Attributes
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 133
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the attributes associated with this field.</p>\n"
  remarks: "\n<p>All members have a set of attributes, which are defined in relation to the specific type of member. <strong>FieldAttributes</strong> informs the user whether this field is the private field, a static field, and so on.</p>\n<p>To get the <strong>Attributes</strong> property, first get the class <strong>Type</strong>. From the <strong>Type</strong>, get the <strong>FieldInfo</strong>. From the <strong>FieldInfo</strong>, get the <strong>Attributes</strong>.</p>\n"
  syntax:
    content: public abstract FieldAttributes Attributes { get; }
    content.vb: Public MustOverride ReadOnly Property Attributes As FieldAttributes
    parameters: []
    return:
      type: System.Reflection.FieldAttributes
      description: "\n<p>The <strong>FieldAttributes</strong> for this field.</p>\n"
  seealso:
  - type: System.Reflection.FieldAttributes
    commentId: T:System.Reflection.FieldAttributes
  - type: System.Type
    commentId: T:System.Type
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.FieldInfo.FieldType
  commentId: P:System.Reflection.FieldInfo.FieldType
  id: FieldType
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: FieldType
  nameWithType: FieldInfo.FieldType
  fullName: System.Reflection.FieldInfo.FieldType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FieldType
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 125
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the type of this field object.</p>\n"
  remarks: "\n<p>The type is some primitive data type, such as <strong>String</strong>, <strong>Boolean</strong>, or <strong>GUID</strong>.</p>\n<p>To get the <strong>FieldType</strong> property, first get the class <strong>Type</strong>. From the <strong>Type</strong>, get the <strong>FieldInfo</strong>. From the <strong>FieldInfo</strong>, get the <strong>FieldType</strong> value.</p>\n"
  syntax:
    content: public abstract Type FieldType { get; }
    content.vb: Public MustOverride ReadOnly Property FieldType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The type of this field object.</p>\n"
  seealso:
  - type: System.Reflection.FieldAttributes
    commentId: T:System.Reflection.FieldAttributes
  - type: System.Type
    commentId: T:System.Type
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsAssembly
  commentId: P:System.Reflection.FieldInfo.IsAssembly
  id: IsAssembly
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsAssembly
  nameWithType: FieldInfo.IsAssembly
  fullName: System.Reflection.FieldInfo.IsAssembly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsAssembly
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 156
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the potential visibility of this field is described by <xref href=\"System.Reflection.FieldAttributes.Assembly\" data-throw-if-not-resolved=\"false\"></xref>; that is, the field is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.</p>\n"
  remarks: "\n<p>The actual visibility of a field is limited by the visibility of its type. The <xref href=\"System.Reflection.FieldInfo.IsAssembly\" data-throw-if-not-resolved=\"false\"></xref> property might be <strong>true</strong> for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.</p>\n<p>The visibility of a field is exactly described by <xref href=\"System.Reflection.FieldAttributes.Assembly\" data-throw-if-not-resolved=\"false\"></xref> if the only visibility modifier is <strong>internal</strong> (<strong>Friend</strong> in Visual Basic). This property is <strong>false</strong> for fields that are <strong>protected internal</strong> in C# (<strong>Protected Friend</strong> in Visual Basic, <strong>protected public</strong> in C++); use the <xref href=\"System.Reflection.FieldInfo.IsFamilyOrAssembly\" data-throw-if-not-resolved=\"false\"></xref> property to identify such fields.</p>\n"
  syntax:
    content: public bool IsAssembly { get; }
    content.vb: Public ReadOnly Property IsAssembly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the visibility of this field is exactly described by <xref href=\"System.Reflection.FieldAttributes.Assembly\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Reflection.FieldAttributes
    commentId: T:System.Reflection.FieldAttributes
  - type: System.Reflection.FieldInfo.IsFamily
    commentId: P:System.Reflection.FieldInfo.IsFamily
  - type: System.Reflection.FieldInfo.IsFamilyOrAssembly
    commentId: P:System.Reflection.FieldInfo.IsFamilyOrAssembly
  - type: System.Reflection.FieldInfo.IsFamilyAndAssembly
    commentId: P:System.Reflection.FieldInfo.IsFamilyAndAssembly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsFamily
  commentId: P:System.Reflection.FieldInfo.IsFamily
  id: IsFamily
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsFamily
  nameWithType: FieldInfo.IsFamily
  fullName: System.Reflection.FieldInfo.IsFamily
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsFamily
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 154
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the visibility of this field is described by <xref href=\"System.Reflection.FieldAttributes.Family\" data-throw-if-not-resolved=\"false\"></xref>; that is, the field is visible only within its class and derived classes.</p>\n"
  remarks: "\n<p>The visibility of a field is exactly described by <xref href=\"System.Reflection.FieldAttributes.Family\" data-throw-if-not-resolved=\"false\"></xref> if the only visibility modifier is <strong>protected</strong>. This property is <strong>false</strong> for fields that are <strong>protected internal</strong> in C# (<strong>Protected Friend</strong> in Visual Basic, <strong>protected public</strong> in C++); use the <xref href=\"System.Reflection.FieldInfo.IsFamilyOrAssembly\" data-throw-if-not-resolved=\"false\"></xref> property to identify such fields.</p>\n"
  syntax:
    content: public bool IsFamily { get; }
    content.vb: Public ReadOnly Property IsFamily As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if access to this field is exactly described by <xref href=\"System.Reflection.FieldAttributes.Family\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Reflection.FieldAttributes
    commentId: T:System.Reflection.FieldAttributes
  - type: System.Type
    commentId: T:System.Type
  - type: System.Reflection.FieldInfo.IsAssembly
    commentId: P:System.Reflection.FieldInfo.IsAssembly
  - type: System.Reflection.FieldInfo.IsFamilyOrAssembly
    commentId: P:System.Reflection.FieldInfo.IsFamilyOrAssembly
  - type: System.Reflection.FieldInfo.IsFamilyAndAssembly
    commentId: P:System.Reflection.FieldInfo.IsFamilyAndAssembly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsFamilyAndAssembly
  commentId: P:System.Reflection.FieldInfo.IsFamilyAndAssembly
  id: IsFamilyAndAssembly
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsFamilyAndAssembly
  nameWithType: FieldInfo.IsFamilyAndAssembly
  fullName: System.Reflection.FieldInfo.IsFamilyAndAssembly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsFamilyAndAssembly
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 158
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the visibility of this field is described by <xref href=\"System.Reflection.FieldAttributes.FamANDAssem\" data-throw-if-not-resolved=\"false\"></xref>; that is, the field can be accessed from derived classes, but only if they are in the same assembly.</p>\n"
  remarks: "\n<p>If a field has <xref href=\"System.Reflection.FieldAttributes.FamANDAssem\" data-throw-if-not-resolved=\"false\"></xref> level visibility, it can be called from any member in a derived class that is also in the same assembly, but not from any other type.</p>\n<p>The visibility of a field is exactly described by <xref href=\"System.Reflection.FieldAttributes.FamANDAssem\" data-throw-if-not-resolved=\"false\"></xref> if the visibility modifier is <strong>protected private</strong> in C++. Fields with this visibility cannot be defined in Visual Basic or C#.</p>\n"
  syntax:
    content: public bool IsFamilyAndAssembly { get; }
    content.vb: Public ReadOnly Property IsFamilyAndAssembly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if access to this field is exactly described by <xref href=\"System.Reflection.FieldAttributes.FamANDAssem\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Reflection.FieldInfo.IsFamilyOrAssembly
    commentId: P:System.Reflection.FieldInfo.IsFamilyOrAssembly
  - type: System.Reflection.FieldAttributes
    commentId: T:System.Reflection.FieldAttributes
  - type: System.Reflection.FieldInfo.IsAssembly
    commentId: P:System.Reflection.FieldInfo.IsAssembly
  - type: System.Reflection.FieldInfo.IsFamily
    commentId: P:System.Reflection.FieldInfo.IsFamily
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsFamilyOrAssembly
  commentId: P:System.Reflection.FieldInfo.IsFamilyOrAssembly
  id: IsFamilyOrAssembly
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsFamilyOrAssembly
  nameWithType: FieldInfo.IsFamilyOrAssembly
  fullName: System.Reflection.FieldInfo.IsFamilyOrAssembly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsFamilyOrAssembly
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 160
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the potential visibility of this field is described by <xref href=\"System.Reflection.FieldAttributes.FamORAssem\" data-throw-if-not-resolved=\"false\"></xref>; that is, the field can be accessed by derived classes wherever they are, and by classes in the same assembly.</p>\n"
  remarks: "\n<p>If a field has <xref href=\"System.Reflection.FieldAttributes.FamORAssem\" data-throw-if-not-resolved=\"false\"></xref> level visibility, it can be called from any member in a derived class or any member in the same assembly, but not from any other type.</p>\n<p>The actual visibility of a field is limited by the visibility of its type. The <xref href=\"System.Reflection.FieldInfo.IsFamilyOrAssembly\" data-throw-if-not-resolved=\"false\"></xref> property might be <strong>true</strong> for a field, but if it is a field of a private nested type then the field is not visible outside the containing type.</p>\n<p>The visibility of a field is exactly described by <xref href=\"System.Reflection.FieldAttributes.FamORAssem\" data-throw-if-not-resolved=\"false\"></xref> if the visibility modifier is <strong>protected internal</strong> in C# (<strong>Protected Friend</strong> in Visual Basic, <strong>protected public</strong> in C++).</p>\n"
  syntax:
    content: public bool IsFamilyOrAssembly { get; }
    content.vb: Public ReadOnly Property IsFamilyOrAssembly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if access to this field is exactly described by <xref href=\"System.Reflection.FieldAttributes.FamORAssem\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Reflection.FieldAttributes
    commentId: T:System.Reflection.FieldAttributes
  - type: System.Reflection.FieldInfo.IsAssembly
    commentId: P:System.Reflection.FieldInfo.IsAssembly
  - type: System.Reflection.FieldInfo.IsFamily
    commentId: P:System.Reflection.FieldInfo.IsFamily
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsInitOnly
  commentId: P:System.Reflection.FieldInfo.IsInitOnly
  id: IsInitOnly
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsInitOnly
  nameWithType: FieldInfo.IsInitOnly
  fullName: System.Reflection.FieldInfo.IsInitOnly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsInitOnly
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 164
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the field can only be set in the body of the constructor.</p>\n"
  remarks: "\n<p>If the returned value is <strong>true</strong>, the field can only be initialized, and is read-only thereafter.</p>\n<p>To get the <strong>IsInitOnly</strong> property, first get the class <strong>Type</strong>. From the <strong>Type</strong>, get the <strong>FieldInfo</strong>. From the <strong>FieldInfo</strong>, get the <strong>IsInitOnly</strong> property. To access a non-public field, combine <xref href=\"System.Reflection.BindingFlags.NonPublic\" data-throw-if-not-resolved=\"false\"></xref> with either or both of <xref href=\"System.Reflection.BindingFlags.Static\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.BindingFlags.Instance\" data-throw-if-not-resolved=\"false\"></xref> in the <strong>GetField</strong> method.</p>\n<p>The <strong>IsInitOnly</strong> property is set when the <xref href=\"System.Reflection.FieldAttributes.InitOnly\" data-throw-if-not-resolved=\"false\"></xref> attribute is set.</p>\n"
  syntax:
    content: public bool IsInitOnly { get; }
    content.vb: Public ReadOnly Property IsInitOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the field has the <strong>InitOnly</strong> attribute set; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Reflection.FieldAttributes
    commentId: T:System.Reflection.FieldAttributes
  - type: System.Type.GetField(System.String,System.Reflection.BindingFlags)
    commentId: M:System.Type.GetField(System.String,System.Reflection.BindingFlags)
  - type: System.Type
    commentId: T:System.Type
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsLiteral
  commentId: P:System.Reflection.FieldInfo.IsLiteral
  id: IsLiteral
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsLiteral
  nameWithType: FieldInfo.IsLiteral
  fullName: System.Reflection.FieldInfo.IsLiteral
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsLiteral
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 166
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the value is written at compile time and cannot be changed.</p>\n"
  remarks: "\n<p>The <strong>IsLiteral</strong> property is set when the <strong>FieldAttributes.Literal</strong> attribute is set. If this attribute is set, the field cannot be changed and is constant.</p>\n"
  syntax:
    content: public bool IsLiteral { get; }
    content.vb: Public ReadOnly Property IsLiteral As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the field has the <strong>Literal</strong> attribute set; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Reflection.FieldAttributes
    commentId: T:System.Reflection.FieldAttributes
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsPrivate
  commentId: P:System.Reflection.FieldInfo.IsPrivate
  id: IsPrivate
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsPrivate
  nameWithType: FieldInfo.IsPrivate
  fullName: System.Reflection.FieldInfo.IsPrivate
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsPrivate
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 152
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the field is private.</p>\n"
  remarks: "\n<p>Private fields are accessible only from member functions.</p>\n<p>The <strong>IsPrivate</strong> property is set when the <strong>FieldAttributes.Private</strong> attribute is set.</p>\n<p>To get the <strong>IsPrivate</strong> property, first get the class <strong>Type</strong>. From the <strong>Type</strong>, get the <strong>FieldInfo</strong>. From the <strong>FieldInfo</strong>, get the <strong>IsPrivate</strong> property. To access a non-public field, set the <strong>BindingFlags</strong> to <strong>NonPublic</strong>, and either <strong>Static</strong> or <strong>Instance</strong> in the <strong>GetField</strong> method.</p>\n"
  syntax:
    content: public bool IsPrivate { get; }
    content.vb: Public ReadOnly Property IsPrivate As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the field is private; otherwise; <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Reflection.BindingFlags
    commentId: T:System.Reflection.BindingFlags
  - type: System.Type
    commentId: T:System.Type
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsPublic
  commentId: P:System.Reflection.FieldInfo.IsPublic
  id: IsPublic
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsPublic
  nameWithType: FieldInfo.IsPublic
  fullName: System.Reflection.FieldInfo.IsPublic
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsPublic
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 150
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the field is public.</p>\n"
  remarks: "\n<p>Public fields are accessible everywhere their corresponding classes are visible.</p>\n<p>The <strong>IsPublic</strong> property is set when the <strong>FieldAttributes.Public</strong> attribute is set.</p>\n<p>To get the <strong>IsPublic</strong> property, first get the class <strong>Type</strong>. From the <strong>Type</strong>, get the <strong>FieldInfo</strong>. From the <strong>FieldInfo</strong>, get the <strong>IsPublic</strong> property. If the field is other than public, it is protected and cannot be readily accessed. To access a nonpublic field, set the <strong>BindingFlags</strong> to <strong>NonPublic</strong>, specify either <strong>BindingFlags.Instance</strong> or <strong>BindingFlags.Static</strong>, and use this for the <strong>GetField</strong> method.</p>\n"
  syntax:
    content: public bool IsPublic { get; }
    content.vb: Public ReadOnly Property IsPublic As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this field is public; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Reflection.FieldAttributes
    commentId: T:System.Reflection.FieldAttributes
  - type: System.Reflection.BindingFlags
    commentId: T:System.Reflection.BindingFlags
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsSpecialName
  commentId: P:System.Reflection.FieldInfo.IsSpecialName
  id: IsSpecialName
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsSpecialName
  nameWithType: FieldInfo.IsSpecialName
  fullName: System.Reflection.FieldInfo.IsSpecialName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsSpecialName
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 170
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the corresponding <strong>SpecialName</strong> attribute is set in the <xref href=\"System.Reflection.FieldAttributes\" data-throw-if-not-resolved=\"false\"></xref> enumerator.</p>\n"
  remarks: "\n<p>Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.</p>\n"
  syntax:
    content: public bool IsSpecialName { get; }
    content.vb: Public ReadOnly Property IsSpecialName As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <strong>SpecialName</strong> attribute is set in <xref href=\"System.Reflection.FieldAttributes\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Reflection.FieldAttributes
    commentId: T:System.Reflection.FieldAttributes
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsStatic
  commentId: P:System.Reflection.FieldInfo.IsStatic
  id: IsStatic
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsStatic
  nameWithType: FieldInfo.IsStatic
  fullName: System.Reflection.FieldInfo.IsStatic
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsStatic
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 162
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the field is static.</p>\n"
  remarks: "\n<p>When a field is static, one copy of the field is shared by all instances of the type.</p>\n<p>The <strong>IsStatic</strong> property is set when the <strong>FieldAttributes.Static</strong> attribute is set.</p>\n<p>To get the <strong>IsStatic</strong> property, first get the class <strong>Type</strong>. From the <strong>Type</strong>, get the <strong>FieldInfo</strong>. From the <strong>FieldInfo</strong>, get the <strong>IsStatic</strong> property. To access a non-public field, set the <strong>BindingFlags</strong> to <strong>NonPublic</strong> in the <strong>GetField</strong> method and set the accessibility to <strong>Instance</strong> or <strong>Static</strong>.</p>\n"
  syntax:
    content: public bool IsStatic { get; }
    content.vb: Public ReadOnly Property IsStatic As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this field is static; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Reflection.FieldAttributes
    commentId: T:System.Reflection.FieldAttributes
  - type: System.Type.GetField(System.String,System.Reflection.BindingFlags)
    commentId: M:System.Type.GetField(System.String,System.Reflection.BindingFlags)
  - type: System.Type
    commentId: T:System.Type
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.Equals(System.Object)
  commentId: M:System.Reflection.FieldInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: FieldInfo.Equals(Object)
  fullName: System.Reflection.FieldInfo.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 85
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>An object to compare with this instance, or <strong>null</strong>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> equals the type and value of this instance; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Reflection.MemberInfo.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)
  commentId: M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)
  id: GetFieldFromHandle(System.RuntimeFieldHandle)
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: GetFieldFromHandle(RuntimeFieldHandle)
  nameWithType: FieldInfo.GetFieldFromHandle(RuntimeFieldHandle)
  fullName: System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetFieldFromHandle
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 35
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> for the field represented by the specified handle.</p>\n"
  remarks: "\n<p>Handles are valid only in the application domain in which they were obtained.</p>\n"
  syntax:
    content: public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle)
    content.vb: Public Shared Function GetFieldFromHandle(handle As RuntimeFieldHandle) As FieldInfo
    parameters:
    - id: handle
      type: System.RuntimeFieldHandle
      description: "\n<p>A <xref href=\"System.RuntimeFieldHandle\" data-throw-if-not-resolved=\"false\"></xref> structure that contains the handle to the internal metadata representation of a field. </p>\n"
    return:
      type: System.Reflection.FieldInfo
      description: "\n<p>A <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> object representing the field specified by <em>handle</em>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>handle</em> is invalid.</p>\n"
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  commentId: M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  id: GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: GetFieldFromHandle(RuntimeFieldHandle, RuntimeTypeHandle)
  nameWithType: FieldInfo.GetFieldFromHandle(RuntimeFieldHandle, RuntimeTypeHandle)
  fullName: System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle, System.RuntimeTypeHandle)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetFieldFromHandle
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 51
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> for the field represented by the specified handle, for the specified generic type.</p>\n"
  remarks: "\n<p>Handles are valid only in the application domain in which they were obtained.</p>\n<p>The recommended practice is that <em>declaringType</em> should always be the runtime type handle of the constructed type that <em>handle</em> belongs to. That is, if <em>handle</em> is a runtime field handle for a field that belongs to <code>MyType<int></code> (<code>MyType(Of Integer)</code> in Visual Basic), <em>declaringType</em> is the runtime type handle for <code>MyType<int></code>. Do not use the runtime type handle of the generic type definition, unless the runtime field handle represents a field on the generic type definition.</p>\n<p>Implementations are compatible in some cases. For example, a single implementation is shared by all types that are constructed from a particular generic type definition by using reference types for the generic type arguments. For example, <code>MyType<string></code>, <code>MyType<object></code>, and <code>MyType<ArrayList></code> all share the same implementation. In this situation, the <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> object that is returned represents a field on the type that <em>declaringType</em> specifies, regardless of the original source of <em>handle</em>. This practice is not recommended, because it works only if the generic type arguments of the constructed type are reference types.</p>\n<p>If a generic argument is a value type, the runtime type handle of the constructed type is not compatible with runtime field handles from constructions that have a reference type in the same generic parameter position, or that have a different value type in that position. In that case, the only way to use the <xref href=\"System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)\" data-throw-if-not-resolved=\"false\"></xref> overload is to ensure that <em>declaringType</em> is the runtime type handle for the constructed type that <em>handle</em> belongs to.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle, RuntimeTypeHandle declaringType)
    content.vb: >-
      <ComVisible(False)>

      Public Shared Function GetFieldFromHandle(handle As RuntimeFieldHandle, declaringType As RuntimeTypeHandle) As FieldInfo
    parameters:
    - id: handle
      type: System.RuntimeFieldHandle
      description: "\n<p>A <xref href=\"System.RuntimeFieldHandle\" data-throw-if-not-resolved=\"false\"></xref> structure that contains the handle to the internal metadata representation of a field.</p>\n"
    - id: declaringType
      type: System.RuntimeTypeHandle
      description: "\n<p>A <xref href=\"System.RuntimeTypeHandle\" data-throw-if-not-resolved=\"false\"></xref> structure that contains the handle to the generic type that defines the field.</p>\n"
    return:
      type: System.Reflection.FieldInfo
      description: "\n<p>A <xref href=\"System.Reflection.FieldInfo\" data-throw-if-not-resolved=\"false\"></xref> object representing the field specified by <em>handle</em>, in the generic type specified by <em>declaringType</em>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>handle</em> is invalid.</p>\n<p>-or-</p>\n<p>\n<em>declaringType</em> is not compatible with <em>handle</em>. For example, <em>declaringType</em> is the runtime type handle of the generic type definition, and <em>handle</em> comes from a constructed type. See Remarks.</p>\n"
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.FieldInfo.GetHashCode
  commentId: M:System.Reflection.FieldInfo.GetHashCode
  id: GetHashCode
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: FieldInfo.GetHashCode()
  fullName: System.Reflection.FieldInfo.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 90
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  overridden: System.Reflection.MemberInfo.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.FieldInfo.GetOptionalCustomModifiers
  commentId: M:System.Reflection.FieldInfo.GetOptionalCustomModifiers
  id: GetOptionalCustomModifiers
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: GetOptionalCustomModifiers()
  nameWithType: FieldInfo.GetOptionalCustomModifiers()
  fullName: System.Reflection.FieldInfo.GetOptionalCustomModifiers()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetOptionalCustomModifiers
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 106
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets an array of types that identify the optional custom modifiers of the field.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Reflection.FieldInfo.GetOptionalCustomModifiers\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.FieldInfo.GetRequiredCustomModifiers\" data-throw-if-not-resolved=\"false\"></xref> methods are provided for designers of managed compilers. For more information on custom modifiers, see <xref href=\"System.Runtime.CompilerServices.IsBoxed\" data-throw-if-not-resolved=\"false\"></xref> and related classes in the <xref href=\"System.Runtime.CompilerServices\" data-throw-if-not-resolved=\"false\"></xref> namespace and the metadata specification in the ECMA Partition II documentation. The documentation is available online; see <see href=\"http://go.microsoft.com/fwlink/?LinkID=99212\">ECMA C# and Common Language Infrastructure Standards</see> on MSDN and <see href=\"http://go.microsoft.com/fwlink/?LinkID=65552\">Standard ECMA-335 - Common Language Infrastructure (CLI)</see> on the Ecma International Web site.</p>\n"
  syntax:
    content: public virtual Type[] GetOptionalCustomModifiers()
    content.vb: Public Overridable Function GetOptionalCustomModifiers As Type()
    return:
      type: System.Type[]
      description: "\n<p>An array of <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> objects that identify the optional custom modifiers of the current field, such as <xref href=\"System.Runtime.CompilerServices.IsConst\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.FieldInfo.GetRawConstantValue
  commentId: M:System.Reflection.FieldInfo.GetRawConstantValue
  id: GetRawConstantValue
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: GetRawConstantValue()
  nameWithType: FieldInfo.GetRawConstantValue()
  fullName: System.Reflection.FieldInfo.GetRawConstantValue()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetRawConstantValue
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 129
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns a literal value associated with the field by a compiler. </p>\n"
  remarks: "\n<p>This method is provided for designers of managed compilers and code analyzers.</p>\n<p>This method can be used in both the execution context and the reflection-only context.</p>\n<p>In unmanaged metadata, the Constant table is used to store constant values for fields, parameters, and properties. Constant information does not directly influence runtime behavior. Compilers inspect this information, at compile time, when importing metadata. If used, the value of a constant is embedded in the Microsoft intermediate language (MSIL) stream the compiler emits. There are no MSIL instructions that can be used to access the Constant table at run time.</p>\n<p>For more information on constant values and the Constant table, see the ECMA Partition II documentation. The documentation is available online; see <see href=\"http://go.microsoft.com/fwlink/?LinkID=99212\">ECMA C# and Common Language Infrastructure Standards</see> on MSDN and <see href=\"http://go.microsoft.com/fwlink/?LinkID=65552\">Standard ECMA-335 - Common Language Infrastructure (CLI)</see> on the Ecma International Web site.</p>\n"
  syntax:
    content: public virtual object GetRawConstantValue()
    content.vb: Public Overridable Function GetRawConstantValue As Object
    return:
      type: System.Object
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that contains the literal value associated with the field. If the literal value is a class type with an element value of zero, the return value is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The Constant table in unmanaged metadata does not contain a constant value for the current field.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification Metadata Logical Format: Other Structures, Element Types used in Signatures. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The constant value for the field is not set. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.FieldInfo.GetRequiredCustomModifiers
  commentId: M:System.Reflection.FieldInfo.GetRequiredCustomModifiers
  id: GetRequiredCustomModifiers
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: GetRequiredCustomModifiers()
  nameWithType: FieldInfo.GetRequiredCustomModifiers()
  fullName: System.Reflection.FieldInfo.GetRequiredCustomModifiers()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetRequiredCustomModifiers
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 101
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets an array of types that identify the required custom modifiers of the property.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Reflection.FieldInfo.GetOptionalCustomModifiers\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.FieldInfo.GetRequiredCustomModifiers\" data-throw-if-not-resolved=\"false\"></xref> methods are provided for designers of managed compilers. For more information on custom modifiers, see <xref href=\"System.Runtime.CompilerServices.IsBoxed\" data-throw-if-not-resolved=\"false\"></xref> and related classes in the <xref href=\"System.Runtime.CompilerServices\" data-throw-if-not-resolved=\"false\"></xref> namespace and the metadata specification in the ECMA Partition II documentation. The documentation is available online; see <see href=\"http://go.microsoft.com/fwlink/?LinkID=99212\">ECMA C# and Common Language Infrastructure Standards</see> on MSDN and <see href=\"http://go.microsoft.com/fwlink/?LinkID=65552\">Standard ECMA-335 - Common Language Infrastructure (CLI)</see> on the Ecma International Web site.</p>\n"
  syntax:
    content: public virtual Type[] GetRequiredCustomModifiers()
    content.vb: Public Overridable Function GetRequiredCustomModifiers As Type()
    return:
      type: System.Type[]
      description: "\n<p>An array of <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> objects that identify the required custom modifiers of the current property, such as <xref href=\"System.Runtime.CompilerServices.IsConst\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsImplicitlyDereferenced\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.FieldInfo.GetValue(System.Object)
  commentId: M:System.Reflection.FieldInfo.GetValue(System.Object)
  id: GetValue(System.Object)
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: GetValue(Object)
  nameWithType: FieldInfo.GetValue(Object)
  fullName: System.Reflection.FieldInfo.GetValue(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetValue
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 127
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>When overridden in a derived class, returns the value of a field supported by a given object.</p>\n"
  remarks: "\n<p>If the field is static, <em>obj</em> is ignored. For non-static fields, <em>obj</em> should be an instance of a class that inherits or declares the field. Note that the return type of <strong>GetValue</strong> is <strong>Object</strong>. For example, if the field holds a Boolean primitive value, an instance of <strong>Object</strong> with the appropriate Boolean value is returned. Before returning the value, <strong>GetValue</strong> checks to see if the user has access permission.</p>\n<p>Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked through reflection whenever the code is fully trusted.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this method can be used to access non-public members if the caller has been granted <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess\" data-throw-if-not-resolved=\"false\"></xref> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See Security Considerations for Reflection.) </p>\n<p>To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  syntax:
    content: public abstract object GetValue(object obj)
    content.vb: Public MustOverride Function GetValue(obj As Object) As Object
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object whose field value will be returned. </p>\n"
    return:
      type: System.Object
      description: "\n<p>An object containing the value of the field reflected by this instance.</p>\n"
  exceptions:
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> instead.</p>\n<p>The field is non-static and <em>obj</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>A field is marked literal, but the field does not have one of the accepted literal types. </p>\n"
  - type: System.FieldAccessException
    commentId: T:System.FieldAccessException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\"System.MemberAccessException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>The caller does not have permission to access this field. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The method is neither declared nor inherited by the class of <em>obj</em>. </p>\n"
  seealso:
  - type: System.Object
    commentId: T:System.Object
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Reflection.FieldInfo.MemberType
  commentId: P:System.Reflection.FieldInfo.MemberType
  id: MemberType
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: MemberType
  nameWithType: FieldInfo.MemberType
  fullName: System.Reflection.FieldInfo.MemberType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MemberType
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 96
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a <xref href=\"System.Reflection.MemberTypes\" data-throw-if-not-resolved=\"false\"></xref> value indicating that this member is a field.</p>\n"
  remarks: "\n<p>This property overrides <xref href=\"System.Reflection.MemberInfo.MemberType\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, when you examine a set of <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> objects — for example, the array returned by <see cref=\"Overload:System.Type.GetMembers\"></see> — the <xref href=\"System.Reflection.MemberInfo.MemberType\" data-throw-if-not-resolved=\"false\"></xref> property returns <xref href=\"System.Reflection.MemberTypes.Field\" data-throw-if-not-resolved=\"false\"></xref> only when a given member is a field.</p>\n"
  syntax:
    content: public override MemberTypes MemberType { get; }
    content.vb: Public Overrides ReadOnly Property MemberType As MemberTypes
    parameters: []
    return:
      type: System.Reflection.MemberTypes
      description: "\n<p>A <xref href=\"System.Reflection.MemberTypes\" data-throw-if-not-resolved=\"false\"></xref> value indicating that this member is a field.</p>\n"
  overridden: System.Reflection.MemberInfo.MemberType
  seealso:
  - type: System.Reflection.FieldInfo
    commentId: T:System.Reflection.FieldInfo
  - type: System.Type
    commentId: T:System.Type
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.FieldInfo.SetValue(System.Object,System.Object)
  commentId: M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)
  id: SetValue(System.Object,System.Object)
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: SetValue(Object, Object)
  nameWithType: FieldInfo.SetValue(Object, Object)
  fullName: System.Reflection.FieldInfo.SetValue(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetValue
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 137
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Sets the value of the field supported by the given object.</p>\n"
  remarks: "\n<p>This method will assign <em>value</em> to the field reflected by this instance on object <em>obj</em>. If the field is static, <em>obj</em> will be ignored. For non-static fields, <em>obj</em> should be an instance of a class that inherits or declares the field. The new value is passed as an <strong>Object</strong>. For example, if the field's type is Boolean, an instance of <strong>Object</strong> with the appropriate Boolean value is passed. Before setting the value, <strong>SetValue</strong> checks to see if the user has access permission. This final method is a convenience method for calling the following <strong>SetValue</strong> method.</p>\n<p>Fully trusted code has the permissions that are needed to access and invoke private constructors, methods, fields, and properties using reflection.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this method can be used to access non-public members if the caller has been granted <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess\" data-throw-if-not-resolved=\"false\"></xref> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See Security Considerations for Reflection.) </p>\n<p>To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  syntax:
    content: >-
      [DebuggerStepThrough]

      [DebuggerHidden]

      public void SetValue(object obj, object value)
    content.vb: >-
      <DebuggerStepThrough>

      <DebuggerHidden>

      Public Sub SetValue(obj As Object, value As Object)
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object whose field value will be set. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value to assign to the field. </p>\n"
  exceptions:
  - type: System.FieldAccessException
    commentId: T:System.FieldAccessException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\"System.MemberAccessException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>The caller does not have permission to access this field. </p>\n"
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> instead.</p>\n<p>The <em>obj</em> parameter is <strong>null</strong> and the field is an instance field. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The field does not exist on the object.</p>\n<p>-or- </p>\n<p>The <em>value</em> parameter cannot be converted and stored in the field. </p>\n"
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
  commentId: N:System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
  commentId: T:System.Object
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
  commentId: T:System.Reflection.MemberInfo
- uid: System.Reflection.ICustomAttributeProvider
  parent: System.Reflection
  isExternal: false
  name: ICustomAttributeProvider
  nameWithType: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
  commentId: T:System.Reflection.ICustomAttributeProvider
- uid: System.Reflection.MemberInfo.CustomAttributes
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: CustomAttributes
  nameWithType: MemberInfo.CustomAttributes
  fullName: System.Reflection.MemberInfo.CustomAttributes
  commentId: P:System.Reflection.MemberInfo.CustomAttributes
- uid: System.Reflection.MemberInfo.DeclaringType
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: DeclaringType
  nameWithType: MemberInfo.DeclaringType
  fullName: System.Reflection.MemberInfo.DeclaringType
  commentId: P:System.Reflection.MemberInfo.DeclaringType
- uid: System.Reflection.MemberInfo.MetadataToken
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: MetadataToken
  nameWithType: MemberInfo.MetadataToken
  fullName: System.Reflection.MemberInfo.MetadataToken
  commentId: P:System.Reflection.MemberInfo.MetadataToken
- uid: System.Reflection.MemberInfo.Module
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Module
  nameWithType: MemberInfo.Module
  fullName: System.Reflection.MemberInfo.Module
  commentId: P:System.Reflection.MemberInfo.Module
- uid: System.Reflection.MemberInfo.Name
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Name
  nameWithType: MemberInfo.Name
  fullName: System.Reflection.MemberInfo.Name
  commentId: P:System.Reflection.MemberInfo.Name
- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)
  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)
  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)
  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)
  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
    name: ICustomAttributeProvider.GetCustomAttributes
    nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes
    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
    name: System.Reflection.ICustomAttributeProvider.GetCustomAttributes
    nameWithType: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes
    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type, System.Boolean)
  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
    name: ICustomAttributeProvider.GetCustomAttributes
    nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes
    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
    name: System.Reflection.ICustomAttributeProvider.GetCustomAttributes
    nameWithType: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes
    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: ICustomAttributeProvider.IsDefined(Type, Boolean)
  nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)
  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined(System.Type, System.Boolean)
  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)
  name.vb: System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
    name: ICustomAttributeProvider.IsDefined
    nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined
    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
    name: System.Reflection.ICustomAttributeProvider.IsDefined
    nameWithType: MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined
    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
  commentId: N:System
- uid: System.Reflection.FieldAttributes
  parent: System.Reflection
  isExternal: false
  name: FieldAttributes
  nameWithType: FieldAttributes
  fullName: System.Reflection.FieldAttributes
  commentId: T:System.Reflection.FieldAttributes
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
  commentId: T:System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
  commentId: T:System.Boolean
- uid: System.Reflection.MemberInfo.Equals(System.Object)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: Equals(Object)
  nameWithType: MemberInfo.Equals(Object)
  fullName: System.Reflection.MemberInfo.Equals(System.Object)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.Equals(System.Object)
    name: Equals
    nameWithType: MemberInfo.Equals
    fullName: System.Reflection.MemberInfo.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.Equals(System.Object)
    name: Equals
    nameWithType: MemberInfo.Equals
    fullName: System.Reflection.MemberInfo.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Reflection.MemberInfo.Equals(System.Object)
- uid: System.RuntimeFieldHandle
  parent: System
  isExternal: false
  name: RuntimeFieldHandle
  nameWithType: RuntimeFieldHandle
  fullName: System.RuntimeFieldHandle
  commentId: T:System.RuntimeFieldHandle
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
  commentId: T:System.Reflection.FieldInfo
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: false
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
  commentId: T:System.RuntimeTypeHandle
- uid: System.Reflection.MemberInfo.GetHashCode
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: GetHashCode()
  nameWithType: MemberInfo.GetHashCode()
  fullName: System.Reflection.MemberInfo.GetHashCode()
  spec.csharp:
  - uid: System.Reflection.MemberInfo.GetHashCode
    name: GetHashCode
    nameWithType: MemberInfo.GetHashCode
    fullName: System.Reflection.MemberInfo.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.GetHashCode
    name: GetHashCode
    nameWithType: MemberInfo.GetHashCode
    fullName: System.Reflection.MemberInfo.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Reflection.MemberInfo.GetHashCode
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
  commentId: T:System.Int32
- uid: System.Type[]
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.MemberInfo.MemberType
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: MemberType
  nameWithType: MemberInfo.MemberType
  fullName: System.Reflection.MemberInfo.MemberType
  commentId: P:System.Reflection.MemberInfo.MemberType
- uid: System.Reflection.MemberTypes
  parent: System.Reflection
  isExternal: false
  name: MemberTypes
  nameWithType: MemberTypes
  fullName: System.Reflection.MemberTypes
  commentId: T:System.Reflection.MemberTypes
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  nameWithType: FormatException
  fullName: System.FormatException
  commentId: T:System.FormatException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
  commentId: T:System.NotSupportedException
- uid: System.Reflection.TargetException
  isExternal: false
  name: TargetException
  nameWithType: TargetException
  fullName: System.Reflection.TargetException
  commentId: T:System.Reflection.TargetException
- uid: System.FieldAccessException
  isExternal: false
  name: FieldAccessException
  nameWithType: FieldAccessException
  fullName: System.FieldAccessException
  commentId: T:System.FieldAccessException
