items:
- uid: System.ComponentModel.PropertyDescriptorCollection
  commentId: T:System.ComponentModel.PropertyDescriptorCollection
  id: PropertyDescriptorCollection
  parent: System.ComponentModel
  children:
  - System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])
  - System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)
  - System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)
  - System.ComponentModel.PropertyDescriptorCollection.Clear
  - System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)
  - System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)
  - System.ComponentModel.PropertyDescriptorCollection.Count
  - System.ComponentModel.PropertyDescriptorCollection.Empty
  - System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)
  - System.ComponentModel.PropertyDescriptorCollection.GetEnumerator
  - System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)
  - System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)
  - System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)
  - System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])
  - System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)
  - System.ComponentModel.PropertyDescriptorCollection.Item(System.String)
  - System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)
  - System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)
  - System.ComponentModel.PropertyDescriptorCollection.Sort
  - System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)
  - System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])
  - System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)
  langs:
  - csharp
  - vb
  name: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
  type: Class
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PropertyDescriptorCollection
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 19
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Represents a collection of <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> is read-only; it does not implement methods that add or remove properties. You must inherit from this class to implement these methods.</p>\n<p>Using the properties available in the <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> class, you can query the collection about its contents. Use the <xref href=\"System.ComponentModel.PropertyDescriptorCollection.Count\" data-throw-if-not-resolved=\"false\"></xref> property to determine the number of elements in the collection. Use the <xref href=\"System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property to get a specific property by index number or by name.</p>\n<p>In addition to properties, you can use the <xref href=\"System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method to get a description of the property with the specified name from the collection.</p>\n"
  example:
  - "\n<p>The following code example creates a new <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> using the properties on <code>button1</code>. It requires that <code>button1</code> has been instantiated on a form.</p>Classic PropertyDescriptorCollection Example#1<p>The next example prints all the properties on a button in a text box. It requires that <code>button1</code> and <code>textBox1</code> have been instantiated on a form.</p>Classic PropertyDescriptorCollection Example#2"
  syntax:
    content: 'public class PropertyDescriptorCollection : Collections.ICollection, Collections.IEnumerable, Collections.IDictionary, Collections.IList'
    content.vb: >-
      Public Class PropertyDescriptorCollection
          Inherits Collections.ICollection
          Implements Collections.IEnumerable, Collections.IDictionary, Collections.IList
  seealso:
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - type: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerable
  - System.Collections.IDictionary
  - System.Collections.IList
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.ComponentModel.PropertyDescriptorCollection.Empty
  commentId: F:System.ComponentModel.PropertyDescriptorCollection.Empty
  id: Empty
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Empty
  fullName: System.ComponentModel.PropertyDescriptorCollection.Empty
  type: Field
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Empty
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 25
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Specifies an empty collection that you can use instead of creating a new one with no items. This <strong>static</strong> field is read-only.</p>\n"
  syntax:
    content: public static readonly PropertyDescriptorCollection Empty
    content.vb: Public Shared ReadOnly Empty As PropertyDescriptorCollection
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])
  id: '#ctor(System.ComponentModel.PropertyDescriptor[])'
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: PropertyDescriptorCollection(PropertyDescriptor[])
  fullName: System.ComponentModel.PropertyDescriptorCollection.PropertyDescriptorCollection(System.ComponentModel.PropertyDescriptor[])
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 45
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public PropertyDescriptorCollection(PropertyDescriptor[] properties)
    content.vb: Public Sub New(properties As PropertyDescriptor())
    parameters:
    - id: properties
      type: System.ComponentModel.PropertyDescriptor[]
      description: "\n<p>An array of type <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> that provides the properties for this collection. </p>\n"
  seealso:
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - type: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.ComponentModel.PropertyDescriptorCollection.PropertyDescriptorCollection(System.ComponentModel.PropertyDescriptor())
  name.vb: PropertyDescriptorCollection(PropertyDescriptor())
- uid: System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)
  id: '#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)'
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: PropertyDescriptorCollection(PropertyDescriptor[], Boolean)
  fullName: System.ComponentModel.PropertyDescriptorCollection.PropertyDescriptorCollection(System.ComponentModel.PropertyDescriptor[], System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 64
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> class, which is optionally read-only.</p>\n"
  syntax:
    content: public PropertyDescriptorCollection(PropertyDescriptor[] properties, bool readOnly)
    content.vb: Public Sub New(properties As PropertyDescriptor(), readOnly As Boolean)
    parameters:
    - id: properties
      type: System.ComponentModel.PropertyDescriptor[]
      description: "\n<p>An array of type <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> that provides the properties for this collection.</p>\n"
    - id: readOnly
      type: System.Boolean
      description: "\n<p>If <strong>true</strong>, specifies that the collection cannot be modified.</p>\n"
  seealso:
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - type: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.ComponentModel.PropertyDescriptorCollection.PropertyDescriptorCollection(System.ComponentModel.PropertyDescriptor(), System.Boolean)
  name.vb: PropertyDescriptorCollection(PropertyDescriptor(), Boolean)
- uid: System.ComponentModel.PropertyDescriptorCollection.Count
  commentId: P:System.ComponentModel.PropertyDescriptorCollection.Count
  id: Count
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.ComponentModel.PropertyDescriptorCollection.Count
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 90
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets the number of property descriptors in the collection.</p>\n"
  remarks: "\n<p>You can use the <xref href=\"System.ComponentModel.PropertyDescriptorCollection.Count\" data-throw-if-not-resolved=\"false\"></xref> property to set the limits of a loop that iterates through a collection of objects. Because the collection is zero-based, be sure to use <code>Count - 1</code> as the upper boundary of the loop.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.ComponentModel.PropertyDescriptorCollection.Count\" data-throw-if-not-resolved=\"false\"></xref> property to print the number of properties on <code>button1</code>. It requires that <code>button1</code> and <code>textBox1</code> have been instantiated on a form.</p>Classic PropertyDescriptorCollection.Count Example#1"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of property descriptors in the collection.</p>\n"
  seealso:
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - type: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)
  commentId: P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Item[Int32]
  fullName: System.ComponentModel.PropertyDescriptorCollection.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 102
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets or sets the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> at the specified index number.</p>\n"
  remarks: "\n<p>The index number is zero-based. Therefore, you must subtract 1 from the numerical position of a particular <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to access that <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref>. For example, to get the third <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref>, you need to specify <code>myColl[2]</code>.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property to print the name of the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> specified by the index number in a text box. Because the index number is zero-based, this example prints the name of the second <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref>. It requires that <code>button1</code> has been instantiated on a form.</p>Classic PropertyDescriptorCollection.this Example#1"
  syntax:
    content: public virtual PropertyDescriptor this[int index] { get; }
    content.vb: Public Overridable ReadOnly Property Item(index As Integer) As PropertyDescriptor
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to get or set. </p>\n"
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "\n<p>The <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> with the specified index number.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The <em>index</em> parameter is not a valid index for <xref href=\"System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - type: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.ComponentModel.PropertyDescriptorCollection.Item(System.String)
  commentId: P:System.ComponentModel.PropertyDescriptorCollection.Item(System.String)
  id: Item(System.String)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Item[String]
  fullName: System.ComponentModel.PropertyDescriptorCollection.Item[System.String]
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 118
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets or sets the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> with the specified name.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property is case-sensitive when searching for names. That is, the names \"Pname\" and \"pname\" are considered to be two different properties.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property to print the type of component for the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> specified by the index. It requires that <code>button1</code> and <code>textBox1</code> have been instantiated on a form.</p>Classic PropertyDescriptorCollection.this1 Example#1"
  syntax:
    content: public virtual PropertyDescriptor this[string name] { get; }
    content.vb: Public Overridable ReadOnly Property Item(name As String) As PropertyDescriptor
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to get from the collection. </p>\n"
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "\n<p>The <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> with the specified name, or <strong>null</strong> if the property does not exist.</p>\n"
  seealso:
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - type: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: System.ComponentModel.PropertyDescriptorCollection.Item(System.String)
  name.vb: Item(String)
- uid: System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)
  id: Add(System.ComponentModel.PropertyDescriptor)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Add(PropertyDescriptor)
  fullName: System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 129
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Adds the specified <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to the collection.</p>\n"
  syntax:
    content: public int Add(PropertyDescriptor value)
    content.vb: Public Function Add(value As PropertyDescriptor) As Integer
    parameters:
    - id: value
      type: System.ComponentModel.PropertyDescriptor
      description: "\n<p>The <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to add to the collection. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> that was added to the collection.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.PropertyDescriptorCollection.Clear
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Clear
  id: Clear
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.ComponentModel.PropertyDescriptorCollection.Clear()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 144
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Removes all <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects from the collection.</p>\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)
  id: Contains(System.ComponentModel.PropertyDescriptor)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Contains(PropertyDescriptor)
  fullName: System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 158
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether the collection contains the given <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public bool Contains(PropertyDescriptor value)
    content.vb: Public Function Contains(value As PropertyDescriptor) As Boolean
    parameters:
    - id: value
      type: System.ComponentModel.PropertyDescriptor
      description: "\n<p>The <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to find in the collection. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the collection contains the given <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: CopyTo(Array, Int32)
  fullName: System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
    startLine: 406
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Copies the entire collection to an array, starting at the specified index number.</p>\n"
  syntax:
    content: public void CopyTo(Array array, int index)
    content.vb: Public Sub CopyTo(array As Array, index As Integer)
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>An array of <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects to copy elements of the collection to. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index of the <em>array</em> parameter at which copying begins. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)
  id: Find(System.String,System.Boolean)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Find(String, Boolean)
  fullName: System.ComponentModel.PropertyDescriptorCollection.Find(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Find
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 217
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> with the specified name, using a Boolean to indicate whether to ignore case.</p>\n"
  example:
  - "\n<p>The following code example finds a specific <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref>. It prints the type of component for this <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> in a text box. It requires that <code>button1</code> and <code>textBox1</code> have been instantiated on a form.</p>Classic PropertyDescriptorCollection.Find Example#1"
  syntax:
    content: public virtual PropertyDescriptor Find(string name, bool ignoreCase)
    content.vb: Public Overridable Function Find(name As String, ignoreCase As Boolean) As PropertyDescriptor
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to return from the collection. </p>\n"
    - id: ignoreCase
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if you want to ignore the case of the property name; otherwise, <strong>false</strong>. </p>\n"
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "\n<p>A <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> with the specified name, or <strong>null</strong> if the property does not exist.</p>\n"
  seealso:
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - type: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.PropertyDescriptorCollection.GetEnumerator
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator
  id: GetEnumerator
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.ComponentModel.PropertyDescriptorCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 460
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns an enumerator for this class.</p>\n"
  example:
  - "\n<p>The following code example gets an enumerator for the properties on <code>button1</code>. It uses the enumerator to print the names of the properties in the collection. It requires that <code>button1</code> and <code>textBox1</code> have been instantiated on a form.</p>Classic PropertyDescriptorCollection.GetEnumerator Example#1"
  syntax:
    content: public virtual Collections.IEnumerator GetEnumerator()
    content.vb: Public Overridable Function GetEnumerator As Collections.IEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An enumerator of type <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - type: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)
  id: IndexOf(System.ComponentModel.PropertyDescriptor)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: IndexOf(PropertyDescriptor)
  fullName: System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 277
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the index of the given <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int IndexOf(PropertyDescriptor value)
    content.vb: Public Function IndexOf(value As PropertyDescriptor) As Integer
    parameters:
    - id: value
      type: System.ComponentModel.PropertyDescriptor
      description: "\n<p>The <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to return the index of. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the given <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)
  id: Insert(System.Int32,System.ComponentModel.PropertyDescriptor)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Insert(Int32, PropertyDescriptor)
  fullName: System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32, System.ComponentModel.PropertyDescriptor)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Insert
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 285
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Adds the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to the collection at the specified index number.</p>\n"
  syntax:
    content: public void Insert(int index, PropertyDescriptor value)
    content.vb: Public Sub Insert(index As Integer, value As PropertyDescriptor)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The index at which to add the <em>value</em> parameter to the collection. </p>\n"
    - id: value
      type: System.ComponentModel.PropertyDescriptor
      description: "\n<p>The <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to add to the collection. </p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)
  id: InternalSort(System.Collections.IComparer)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: InternalSort(Collections.IComparer)
  fullName: System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InternalSort
    path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
    startLine: 411
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Sorts the members of this collection, using the specified <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: protected void InternalSort(Collections.IComparer sorter)
    content.vb: Protected Sub InternalSort(sorter As Collections.IComparer)
    parameters:
    - id: sorter
      type: System.Collections.IComparer
      description: "\n<p>A comparer to use to sort the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects in this collection. </p>\n"
  seealso:
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])
  id: InternalSort(System.String[])
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: InternalSort(String[])
  fullName: System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InternalSort
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 388
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.</p>\n"
  example:
  - "\n<p>The following code example defines the sort order for the <xref href=\"System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])\" data-throw-if-not-resolved=\"false\"></xref> method. If the <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> contains four <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects with the names <code>A</code>, <code>B</code>, <code>C</code>, and <code>D</code>, the properties of <code>myNewColl</code> would be sorted in the order <code>D</code>, <code>B</code>, <code>A</code>, and <code>C</code>.</p>Classic EventDescriptorCollection.InternalSort Example#1"
  syntax:
    content: protected void InternalSort(string[] names)
    content.vb: Protected Sub InternalSort(names As String())
    parameters:
    - id: names
      type: System.String[]
      description: "\n<p>An array of strings describing the order in which to sort the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects in this collection. </p>\n"
  seealso:
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String())
  name.vb: InternalSort(String())
- uid: System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)
  id: Remove(System.ComponentModel.PropertyDescriptor)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Remove(PropertyDescriptor)
  fullName: System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 304
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Removes the specified <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> from the collection.</p>\n"
  syntax:
    content: public void Remove(PropertyDescriptor value)
    content.vb: Public Sub Remove(value As PropertyDescriptor)
    parameters:
    - id: value
      type: System.ComponentModel.PropertyDescriptor
      description: "\n<p>The <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to remove from the collection. </p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  fullName: System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAt
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 322
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Removes the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> at the specified index from the collection.</p>\n"
  syntax:
    content: public void RemoveAt(int index)
    content.vb: Public Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The index of the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to remove from the collection. </p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.PropertyDescriptorCollection.Sort
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Sort
  id: Sort
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Sort()
  fullName: System.ComponentModel.PropertyDescriptorCollection.Sort()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 343
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Sorts the members of this collection, using the default sort for this collection, which is usually alphabetical.</p>\n"
  syntax:
    content: public virtual PropertyDescriptorCollection Sort()
    content.vb: Public Overridable Function Sort As PropertyDescriptorCollection
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "\n<p>A new <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the sorted <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)
  id: Sort(System.Collections.IComparer)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Sort(Collections.IComparer)
  fullName: System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
    startLine: 416
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Sorts the members of this collection, using the specified <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual PropertyDescriptorCollection Sort(Collections.IComparer comparer)
    content.vb: Public Overridable Function Sort(comparer As Collections.IComparer) As PropertyDescriptorCollection
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>A comparer to use to sort the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects in this collection. </p>\n"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "\n<p>A new <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the sorted <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  seealso:
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])
  id: Sort(System.String[])
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Sort(String[])
  fullName: System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 355
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.</p>\n"
  example:
  - "\n<p>The following code example defines the sort order for the <xref href=\"System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])\" data-throw-if-not-resolved=\"false\"></xref> method. If the <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> contains four <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects with the names <code>A</code>, <code>B</code>, <code>C</code>, and <code>D</code>, the properties of <code>myNewColl</code> would be sorted in the order <code>D</code>, <code>B</code>, <code>A</code>, and <code>C</code>.</p>classic eventdescriptorcollection.sort example#1"
  syntax:
    content: public virtual PropertyDescriptorCollection Sort(string[] names)
    content.vb: Public Overridable Function Sort(names As String()) As PropertyDescriptorCollection
    parameters:
    - id: names
      type: System.String[]
      description: "\n<p>An array of strings describing the order in which to sort the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects in this collection. </p>\n"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "\n<p>A new <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the sorted <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  seealso:
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.ComponentModel.PropertyDescriptorCollection.Sort(System.String())
  name.vb: Sort(String())
- uid: System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)
  id: Sort(System.String[],System.Collections.IComparer)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Sort(String[], Collections.IComparer)
  fullName: System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[], System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
    startLine: 418
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Sorts the members of this collection. The specified order is applied first, followed by the sort using the specified <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example defines the sort order for the <xref href=\"System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> method. If the <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> contains four <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects with the names <code>A</code>, <code>B</code>, <code>C</code>, and <code>D</code>, the properties of <code>myNewColl</code> would be sorted in the order <code>D</code>, <code>B</code>, <code>A</code>, and <code>C</code>.</p>classic eventdescriptorcollection.sort example#1"
  syntax:
    content: public virtual PropertyDescriptorCollection Sort(string[] names, Collections.IComparer comparer)
    content.vb: Public Overridable Function Sort(names As String(), comparer As Collections.IComparer) As PropertyDescriptorCollection
    parameters:
    - id: names
      type: System.String[]
      description: "\n<p>An array of strings describing the order in which to sort the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects in this collection. </p>\n"
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>A comparer to use to sort the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects in this collection. </p>\n"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "\n<p>A new <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the sorted <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  seealso:
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.ComponentModel.PropertyDescriptorCollection.Sort(System.String(), System.Collections.IComparer)
  name.vb: Sort(String(), Collections.IComparer)
references:
- uid: System.ComponentModel
  isExternal: false
  name: System.ComponentModel
  fullName: System.ComponentModel
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  fullName: System.Collections.IList
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.ComponentModel.PropertyDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
- uid: System.ComponentModel.PropertyDescriptor[]
  isExternal: false
  name: PropertyDescriptor[]
  fullName: System.ComponentModel.PropertyDescriptor[]
  fullname.vb: System.ComponentModel.PropertyDescriptor()
  name.vb: PropertyDescriptor()
  spec.csharp:
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
  - name: ()
    fullName: ()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.ComponentModel.PropertyDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptor
  fullName: System.ComponentModel.PropertyDescriptor
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: Collections.IComparer
  fullName: System.Collections.IComparer
- uid: System.String[]
  isExternal: false
  name: String[]
  fullName: System.String[]
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
  - name: ()
    fullName: ()
- uid: System.IndexOutOfRangeException
  isExternal: false
  name: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
