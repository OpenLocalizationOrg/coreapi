items:
- uid: System.Data.Common.DbEnumerator
  commentId: T:System.Data.Common.DbEnumerator
  id: DbEnumerator
  parent: System.Data.Common
  children:
  - System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader,System.Boolean)
  - System.Data.Common.DbEnumerator.Current
  - System.Data.Common.DbEnumerator.MoveNext
  - System.Data.Common.DbEnumerator.Reset
  langs:
  - csharp
  - vb
  name: DbEnumerator
  fullName: System.Data.Common.DbEnumerator
  type: Class
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbEnumerator.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DbEnumerator
    path: src/System.Data.Common/src/System/Data/Common/DbEnumerator.cs
    startLine: 15
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Exposes the <xref href=\"System.Collections.IEnumerable.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method, which supports a simple iteration over a collection by a .NET Framework data provider.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.Common.DbEnumerator\" data-throw-if-not-resolved=\"false\"></xref> class is implemented by a .NET Framework data provider to provide data binding support.</p>\n<p>By design, the <xref href=\"System.Data.Common.DbEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object is intended for use with only one resultset. For example, if you execute a batch statement containing two SQL SELECT statements that return different schemas, the second statement might not retun the entire schema. To avoid this situation, obtain a <xref href=\"System.Data.Common.DbEnumerator\" data-throw-if-not-resolved=\"false\"></xref> for each resultset, and then call the <strong>NextResult</strong> method of a .NET Framework data provider DataReader object.</p>\n"
  syntax:
    content: 'public class DbEnumerator : Collections.IEnumerator'
    content.vb: >-
      Public Class DbEnumerator
          Inherits Collections.IEnumerator
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader,System.Boolean)
  commentId: M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader,System.Boolean)
  id: '#ctor(System.Data.IDataReader,System.Boolean)'
  parent: System.Data.Common.DbEnumerator
  langs:
  - csharp
  - vb
  name: DbEnumerator(IDataReader, Boolean)
  fullName: System.Data.Common.DbEnumerator.DbEnumerator(System.Data.IDataReader, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbEnumerator.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.Common/src/System/Data/Common/DbEnumerator.cs
    startLine: 24
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Data.Common.DbEnumerator\" data-throw-if-not-resolved=\"false\"></xref> class using the specified <strong>DataReader</strong>, and indicates whether to automatically close the <strong>DataReader</strong> after iterating through its data.</p>\n"
  syntax:
    content: public DbEnumerator(IDataReader reader, bool closeReader)
    content.vb: Public Sub New(reader As IDataReader, closeReader As Boolean)
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "\n<p>The <strong>DataReader</strong> through which to iterate. </p>\n"
    - id: closeReader
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to automatically close the <strong>DataReader</strong> after iterating through its data; otherwise, <strong>false</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.Common.DbEnumerator.Current
  commentId: P:System.Data.Common.DbEnumerator.Current
  id: Current
  parent: System.Data.Common.DbEnumerator
  langs:
  - csharp
  - vb
  name: Current
  fullName: System.Data.Common.DbEnumerator.Current
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbEnumerator.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Current
    path: src/System.Data.Common/src/System/Data/Common/DbEnumerator.cs
    startLine: 35
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the current element in the collection.</p>\n"
  remarks: "\n<p>After an enumerator is created or after a <xref href=\"System.Data.Common.DbEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Data.Common.DbEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> must be called to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Data.Common.DbEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <xref href=\"System.Data.Common.DbEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. <xref href=\"System.Data.Common.DbEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> also throws an exception if the last call to <xref href=\"System.Data.Common.DbEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned false, which indicates the end of the collection. <xref href=\"System.Data.Common.DbEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> does not move the position of the enumerator and consecutive calls to <xref href=\"System.Data.Common.DbEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> return the same object until either <xref href=\"System.Data.Common.DbEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Data.Common.DbEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref href=\"System.Data.Common.DbEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Data.Common.DbEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> generates an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>. If the collection is modified between <xref href=\"System.Data.Common.DbEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.Common.DbEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Data.Common.DbEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the element to which it is set, even if the enumerator is already invalidated.</p>\n"
  syntax:
    content: public object Current { get; }
    content.vb: Public ReadOnly Property Current As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>The current element in the collection.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The enumerator is positioned before the first element of the collection or after the last element. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Data.Common.DbEnumerator.MoveNext
  commentId: M:System.Data.Common.DbEnumerator.MoveNext
  id: MoveNext
  parent: System.Data.Common.DbEnumerator
  langs:
  - csharp
  - vb
  name: MoveNext()
  fullName: System.Data.Common.DbEnumerator.MoveNext()
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbEnumerator.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveNext
    path: src/System.Data.Common/src/System/Data/Common/DbEnumerator.cs
    startLine: 43
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Advances the enumerator to the next element of the collection.</p>\n"
  remarks: "\n<p>After an enumerator is created or after a call to <xref href=\"System.Data.Common.DbEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref>, an enumerator is positioned before the first element of the collection, and the first call to <xref href=\"System.Data.Common.DbEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> moves the enumerator over the first element of the collection. After the end of the collection is passed, subsequent calls to <xref href=\"System.Data.Common.DbEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> return false until <xref href=\"System.Data.Common.DbEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref href=\"System.Data.Common.DbEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Data.Common.DbEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public bool MoveNext()
    content.vb: Public Function MoveNext As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the enumerator was successfully advanced to the next element; <strong>false</strong> if the enumerator has passed the end of the collection.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The collection was modified after the enumerator was created. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.Common.DbEnumerator.Reset
  commentId: M:System.Data.Common.DbEnumerator.Reset
  id: Reset
  parent: System.Data.Common.DbEnumerator
  langs:
  - csharp
  - vb
  name: Reset()
  fullName: System.Data.Common.DbEnumerator.Reset()
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbEnumerator.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reset
    path: src/System.Data.Common/src/System/Data/Common/DbEnumerator.cs
    startLine: 68
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Sets the enumerator to its initial position, which is before the first element in the collection.</p>\n"
  remarks: "\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref href=\"System.Data.Common.DbEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Data.Common.DbEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The collection was modified after the enumerator was created. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Data.Common
  isExternal: false
  name: System.Data.Common
  fullName: System.Data.Common
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Data
  isExternal: false
  name: System.Data
  fullName: System.Data
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
