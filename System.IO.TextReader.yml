items:
- uid: System.IO.TextReader
  id: TextReader
  parent: System.IO
  children:
  - System.IO.TextReader.#ctor
  - System.IO.TextReader.Dispose
  - System.IO.TextReader.Dispose(System.Boolean)
  - System.IO.TextReader.Null
  - System.IO.TextReader.Peek
  - System.IO.TextReader.Read
  - System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)
  - System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)
  - System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)
  - System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  - System.IO.TextReader.ReadLine
  - System.IO.TextReader.ReadLineAsync
  - System.IO.TextReader.ReadToEnd
  - System.IO.TextReader.ReadToEndAsync
  href: System.IO.TextReader.yml
  name: TextReader
  fullName: System.IO.TextReader
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/IO/TextReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 34
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Represents a reader that can read a sequential series of characters.
  syntax:
    content: 'public abstract class TextReader : IDisposable'
    content.vb: Public MustInherit Class TextReader Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.IO.TextReader.Null
  parent: System.IO.TextReader
  href: System.IO.TextReader.yml
  fullName: System.IO.TextReader.Null
  type: Field
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 42
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Provides a TextReader with no data to read from.
  syntax:
    content: public static readonly TextReader Null
    content.vb: Public Shared ReadOnly Null As TextReader
- uid: System.IO.TextReader.#ctor
  id: '#ctor'
  parent: System.IO.TextReader
  href: System.IO.TextReader.yml
  name: TextReader()
  fullName: System.IO.TextReader.TextReader()
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 44
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Initializes a new instance of the @'System.IO.TextReader' class.
  syntax:
    content: protected TextReader()
    content.vb: Protected Sub New
- uid: System.IO.TextReader.Dispose
  id: Dispose
  parent: System.IO.TextReader
  href: System.IO.TextReader.yml
  name: Dispose()
  fullName: System.IO.TextReader.Dispose()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 58
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Releases all resources used by the @'System.IO.TextReader' object.
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
- uid: System.IO.TextReader.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.TextReader
  href: System.IO.TextReader.yml
  name: Dispose(Boolean)
  fullName: System.IO.TextReader.Dispose(System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 64
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Releases the unmanaged resources used by the @'System.IO.TextReader' and optionally releases the managed resources.
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: true to release both managed and unmanaged resources; false to release only unmanaged resources.
- uid: System.IO.TextReader.Peek
  id: Peek
  parent: System.IO.TextReader
  href: System.IO.TextReader.yml
  name: Peek()
  fullName: System.IO.TextReader.Peek()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 75
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads the next character without changing the state of the reader or the character source. Returns the next available character without actually reading it from the reader.
  syntax:
    content: public virtual int Peek()
    content.vb: Public Overridable Function Peek As Integer
    return:
      type: System.Int32
      description: An integer representing the next character to be read, or -1 if no more characters are available or the reader does not support seeking.
  exceptions:
  - type: System.ObjectDisposedException
    description: The @'System.IO.TextReader' is closed.
  - type: System.IO.IOException
    description: An I/O error occurs.
- uid: System.IO.TextReader.Read
  id: Read
  parent: System.IO.TextReader
  href: System.IO.TextReader.yml
  name: Read()
  fullName: System.IO.TextReader.Read()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 88
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads the next character from the text reader and advances the character position by one character.
  syntax:
    content: public virtual int Read()
    content.vb: Public Overridable Function Read As Integer
    return:
      type: System.Int32
      description: The next character from the text reader, or -1 if no more characters are available. The default implementation returns -1.
  exceptions:
  - type: System.ObjectDisposedException
    description: The @'System.IO.TextReader' is closed.
  - type: System.IO.IOException
    description: An I/O error occurs.
- uid: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)
  id: Read(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextReader
  href: System.IO.TextReader.yml
  name: Read(Char[], Int32, Int32)
  name.vb: Read(Char(), Int32, Int32)
  fullName: System.IO.TextReader.Read(System.Char[], System.Int32, System.Int32)
  fullName.vb: System.IO.TextReader.Read(System.Char(), System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 99
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads a specified maximum number of characters from the current reader and writes the data to a buffer, beginning at the specified index.
  syntax:
    content: public virtual int Read(char[] buffer, int index, int count)
    content.vb: Public Overridable Function Read(buffer As Char(), index As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Char[]
      description: When this method returns, contains the specified character array with the values between *index* and (*index* + *count* - 1) replaced by the characters read from the current source.
    - id: index
      type: System.Int32
      description: The position in *buffer* at which to begin writing.
    - id: count
      type: System.Int32
      description: The maximum number of characters to read. If the end of the reader is reached before the specified number of characters is read into the buffer, the method returns.
    return:
      type: System.Int32
      description: The number of characters that have been read. The number will be less than or equal to *count*, depending on whether the data is available within the reader. This method returns 0 (zero) if it is called when no more characters are left to read.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.'
  - type: System.ArgumentException
    description: The buffer length minus *index* is less than *count*.
  - type: System.ArgumentOutOfRangeException
    description: '*index* or *count* is negative.'
  - type: System.ObjectDisposedException
    description: The @'System.IO.TextReader' is closed.
  - type: System.IO.IOException
    description: An I/O error occurs.
- uid: System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)
  id: ReadAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextReader
  href: System.IO.TextReader.yml
  name: ReadAsync(Char[], Int32, Int32)
  name.vb: ReadAsync(Char(), Int32, Int32)
  fullName: System.IO.TextReader.ReadAsync(System.Char[], System.Int32, System.Int32)
  fullName.vb: System.IO.TextReader.ReadAsync(System.Char(), System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 202
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads a specified maximum number of characters from the current text reader asynchronously and writes the data to a buffer, beginning at the specified index.
  syntax:
    content: public virtual Task<int> ReadAsync(char[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadAsync(buffer As Char(), index As Integer, count As Integer) As Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Char[]
      description: When this method returns, contains the specified character array with the values between *index* and (*index* + *count* - 1) replaced by the characters read from the current source.
    - id: index
      type: System.Int32
      description: The position in *buffer* at which to begin writing.
    - id: count
      type: System.Int32
      description: The maximum number of characters to read. If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: A task that represents the asynchronous read operation. The value of the *TResult* parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*index* or *count* is negative.'
  - type: System.ArgumentException
    description: The sum of *index* and *count* is larger than the buffer length.
  - type: System.ObjectDisposedException
    description: The text reader has been disposed.
  - type: System.InvalidOperationException
    description: The reader is currently in use by a previous read operation.
- uid: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)
  id: ReadBlock(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextReader
  href: System.IO.TextReader.yml
  name: ReadBlock(Char[], Int32, Int32)
  name.vb: ReadBlock(Char(), Int32, Int32)
  fullName: System.IO.TextReader.ReadBlock(System.Char[], System.Int32, System.Int32)
  fullName.vb: System.IO.TextReader.ReadBlock(System.Char(), System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 141
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads a specified maximum number of characters from the current text reader and writes the data to a buffer, beginning at the specified index.
  syntax:
    content: public virtual int ReadBlock(char[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadBlock(buffer As Char(), index As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Char[]
      description: When this method returns, this parameter contains the specified character array with the values between *index* and (*index* + *count* -1) replaced by the characters read from the current source.
    - id: index
      type: System.Int32
      description: The position in *buffer* at which to begin writing.
    - id: count
      type: System.Int32
      description: The maximum number of characters to read.
    return:
      type: System.Int32
      description: The number of characters that have been read. The number will be less than or equal to *count*, depending on whether all input characters have been read.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.'
  - type: System.ArgumentException
    description: The buffer length minus *index* is less than *count*.
  - type: System.ArgumentOutOfRangeException
    description: '*index* or *count* is negative.'
  - type: System.ObjectDisposedException
    description: The @'System.IO.TextReader' is closed.
  - type: System.IO.IOException
    description: An I/O error occurs.
- uid: System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  id: ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextReader
  href: System.IO.TextReader.yml
  name: ReadBlockAsync(Char[], Int32, Int32)
  name.vb: ReadBlockAsync(Char(), Int32, Int32)
  fullName: System.IO.TextReader.ReadBlockAsync(System.Char[], System.Int32, System.Int32)
  fullName.vb: System.IO.TextReader.ReadBlockAsync(System.Char(), System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 233
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads a specified maximum number of characters from the current text reader asynchronously and writes the data to a buffer, beginning at the specified index.
  syntax:
    content: public virtual Task<int> ReadBlockAsync(char[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadBlockAsync(buffer As Char(), index As Integer, count As Integer) As Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Char[]
      description: When this method returns, contains the specified character array with the values between *index* and (*index* + *count* - 1) replaced by the characters read from the current source.
    - id: index
      type: System.Int32
      description: The position in *buffer* at which to begin writing.
    - id: count
      type: System.Int32
      description: The maximum number of characters to read. If the end of the text is reached before the specified number of characters is read into the buffer, the current method returns.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: A task that represents the asynchronous read operation. The value of the *TResult* parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the text has been reached.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*index* or *count* is negative.'
  - type: System.ArgumentException
    description: The sum of *index* and *count* is larger than the buffer length.
  - type: System.ObjectDisposedException
    description: The text reader has been disposed.
  - type: System.InvalidOperationException
    description: The reader is currently in use by a previous read operation.
- uid: System.IO.TextReader.ReadLine
  id: ReadLine
  parent: System.IO.TextReader
  href: System.IO.TextReader.yml
  name: ReadLine()
  fullName: System.IO.TextReader.ReadLine()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 159
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads a line of characters from the text reader and returns the data as a string.
  syntax:
    content: public virtual string ReadLine()
    content.vb: Public Overridable Function ReadLine As String
    return:
      type: System.String
      description: The next line from the reader, or null if all characters have been read.
  exceptions:
  - type: System.IO.IOException
    description: An I/O error occurs.
  - type: System.OutOfMemoryException
    description: There is insufficient memory to allocate a buffer for the returned string.
  - type: System.ObjectDisposedException
    description: The @'System.IO.TextReader' is closed.
  - type: System.ArgumentOutOfRangeException
    description: The number of characters in the next line is larger than @'System.Int32.MaxValue'
- uid: System.IO.TextReader.ReadLineAsync
  id: ReadLineAsync
  parent: System.IO.TextReader
  href: System.IO.TextReader.yml
  name: ReadLineAsync()
  fullName: System.IO.TextReader.ReadLineAsync()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 177
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads a line of characters asynchronously and returns the data as a string.
  syntax:
    content: public virtual Task<string> ReadLineAsync()
    content.vb: Public Overridable Function ReadLineAsync As Task(Of String)
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A task that represents the asynchronous read operation. The value of the *TResult* parameter contains the next line from the text reader, or is null if all of the characters have been read.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: The number of characters in the next line is larger than @'System.Int32.MaxValue'.
  - type: System.ObjectDisposedException
    description: The text reader has been disposed.
  - type: System.InvalidOperationException
    description: The reader is currently in use by a previous read operation.
- uid: System.IO.TextReader.ReadToEnd
  id: ReadToEnd
  parent: System.IO.TextReader
  href: System.IO.TextReader.yml
  name: ReadToEnd()
  fullName: System.IO.TextReader.ReadToEnd()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 124
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads all characters from the current position to the end of the text reader and returns them as one string.
  syntax:
    content: public virtual string ReadToEnd()
    content.vb: Public Overridable Function ReadToEnd As String
    return:
      type: System.String
      description: A string that contains all characters from the current position to the end of the text reader.
  exceptions:
  - type: System.IO.IOException
    description: An I/O error occurs.
  - type: System.ObjectDisposedException
    description: The @'System.IO.TextReader' is closed.
  - type: System.OutOfMemoryException
    description: There is insufficient memory to allocate a buffer for the returned string.
  - type: System.ArgumentOutOfRangeException
    description: The number of characters in the next line is larger than @'System.Int32.MaxValue'
- uid: System.IO.TextReader.ReadToEndAsync
  id: ReadToEndAsync
  parent: System.IO.TextReader
  href: System.IO.TextReader.yml
  name: ReadToEndAsync()
  fullName: System.IO.TextReader.ReadToEndAsync()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/TextReader.cs
    startLine: 188
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads all characters from the current position to the end of the text reader asynchronously and returns them as one string.
  syntax:
    content: public virtual Task<string> ReadToEndAsync()
    content.vb: Public Overridable Function ReadToEndAsync As Task(Of String)
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A task that represents the asynchronous read operation. The value of the *TResult* parameter contains a string with the characters from the current position to the end of the text reader.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: The number of characters is larger than @'System.Int32.MaxValue'.
  - type: System.ObjectDisposedException
    description: The text reader has been disposed.
  - type: System.InvalidOperationException
    description: The reader is currently in use by a previous read operation.
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  href: System.Boolean.yml
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  href: System.Int32.yml
  name: Int32
  fullName: System.Int32
- uid: System.Char[]
  isExternal: true
  name: Char[]
  name.vb: Char()
  fullName: System.Char[]
  fullName.vb: System.Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  name.vb: Task(Of Int32)
  fullName: System.Threading.Tasks.Task<System.Int32>
  fullName.vb: System.Threading.Tasks.Task(Of System.Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.Task`1.yml
  name: Task<TResult>
  name.vb: Task(Of TResult)
  fullName: System.Threading.Tasks.Task<TResult>
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.String
  parent: System
  isExternal: false
  href: System.String.yml
  name: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  name.vb: Task(Of String)
  fullName: System.Threading.Tasks.Task<System.String>
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.ObjectDisposedException
  isExternal: false
  href: System.ObjectDisposedException.yml
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
  summary: The exception that is thrown when an operation is performed on a disposed object.
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  href: System.IO.IOException.yml
  name: IOException
  fullName: System.IO.IOException
  summary: The exception that is thrown when an I/O error occurs.
- uid: System.ArgumentNullException
  isExternal: false
  href: System.ArgumentNullException.yml
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  summary: The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
- uid: System.ArgumentException
  parent: System
  isExternal: false
  href: System.ArgumentException.yml
  name: ArgumentException
  fullName: System.ArgumentException
  summary: The exception that is thrown when one of the arguments provided to a method is not valid.
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  href: System.ArgumentOutOfRangeException.yml
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  summary: The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  href: System.InvalidOperationException.yml
  name: InvalidOperationException
  fullName: System.InvalidOperationException
  summary: The exception that is thrown when a method call is invalid for the object's current state.
- uid: System.OutOfMemoryException
  isExternal: false
  href: System.OutOfMemoryException.yml
  name: OutOfMemoryException
  fullName: System.OutOfMemoryException
  summary: The exception that is thrown when there is not enough memory to continue the execution of a program.
