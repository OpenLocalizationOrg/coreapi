items:
- uid: System.Threading.Tasks.TaskFactory`1
  id: TaskFactory`1
  parent: System.Threading.Tasks
  children:
  - System.Threading.Tasks.TaskFactory`1.#ctor
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.CancellationToken
  - System.Threading.Tasks.TaskFactory`1.ContinuationOptions
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.CreationOptions
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.Scheduler
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: TaskFactory<TResult>
  name.vb: TaskFactory(Of TResult)
  fullName: System.Threading.Tasks.TaskFactory<TResult>
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult)
  type: Class
  source:
    remote: &o0
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://vicancy@github.com/dotnet/corefx.git
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 476
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Provides support for creating and scheduling @'System.Threading.Tasks.Task`1' objects.
  syntax:
    content: public class TaskFactory<TResult>
    content.vb: Public Class TaskFactory(Of TResult)
    typeParameters:
    - id: TResult
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Threading.Tasks.TaskFactory`1.#ctor
  id: '#ctor'
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: TaskFactory()
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory()
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).TaskFactory()
  type: Constructor
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 478
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Initializes a @'System.Threading.Tasks.TaskFactory`1' instance with the default configuration.
  syntax:
    content: public TaskFactory()
    content.vb: Public Sub New
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)
  id: '#ctor(System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: TaskFactory(CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).TaskFactory(System.Threading.CancellationToken)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 479
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Initializes a @'System.Threading.Tasks.TaskFactory`1' instance with the default configuration.
  syntax:
    content: public TaskFactory(CancellationToken cancellationToken)
    content.vb: Public Sub New(cancellationToken As CancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The default cancellation token that will be assigned to tasks created by this @'System.Threading.Tasks.TaskFactory' unless another cancellation token is explicitly specified when calling the factory methods.
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: '#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)'
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).TaskFactory(System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 480
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Initializes a @'System.Threading.Tasks.TaskFactory`1' instance with the specified configuration.
  syntax:
    content: public TaskFactory(CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Sub New(cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The default cancellation token that will be assigned to tasks created by this @'System.Threading.Tasks.TaskFactory' unless another cancellation token is explicitly specified when calling the factory methods.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The default options to use when creating tasks with this @'System.Threading.Tasks.TaskFactory`1'.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The default options to use when creating continuation tasks with this @'System.Threading.Tasks.TaskFactory`1'.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The default scheduler to use to schedule any tasks created with this @'System.Threading.Tasks.TaskFactory`1'. A null value indicates that @'System.Threading.Tasks.TaskScheduler.Current' should be used.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: '*creationOptions* or *continuationOptions* specifies an invalid value.'
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  id: '#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)'
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: TaskFactory(TaskCreationOptions, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).TaskFactory(System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 481
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Initializes a @'System.Threading.Tasks.TaskFactory`1' instance with the specified configuration.
  syntax:
    content: public TaskFactory(TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions)
    content.vb: Public Sub New(creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions)
    parameters:
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The default options to use when creating tasks with this @'System.Threading.Tasks.TaskFactory`1'.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The default options to use when creating continuation tasks with this @'System.Threading.Tasks.TaskFactory`1'.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: '*creationOptions* or *continuationOptions* specifies an invalid value.'
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)
  id: '#ctor(System.Threading.Tasks.TaskScheduler)'
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: TaskFactory(TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).TaskFactory(System.Threading.Tasks.TaskScheduler)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 482
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Initializes a @'System.Threading.Tasks.TaskFactory`1' instance with the specified configuration.
  syntax:
    content: public TaskFactory(TaskScheduler scheduler)
    content.vb: Public Sub New(scheduler As TaskScheduler)
    parameters:
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The scheduler to use to schedule any tasks created with this @'System.Threading.Tasks.TaskFactory`1'. A null value indicates that the current @'System.Threading.Tasks.TaskScheduler' should be used.
- uid: System.Threading.Tasks.TaskFactory`1.CancellationToken
  id: CancellationToken
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: CancellationToken
  fullName: System.Threading.Tasks.TaskFactory<TResult>.CancellationToken
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).CancellationToken
  type: Property
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 483
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Gets the default cancellation token for this task factory.
  syntax:
    content: public CancellationToken CancellationToken { get; }
    content.vb: Public ReadOnly Property CancellationToken As CancellationToken
    parameters: []
    return:
      type: System.Threading.CancellationToken
      description: The default cancellation token for this task factory.
- uid: System.Threading.Tasks.TaskFactory`1.ContinuationOptions
  id: ContinuationOptions
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinuationOptions
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinuationOptions
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinuationOptions
  type: Property
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 484
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Gets the @'System.Threading.Tasks.TaskContinuationOptions' enumeration value for this task factory.
  syntax:
    content: public TaskContinuationOptions ContinuationOptions { get; }
    content.vb: Public ReadOnly Property ContinuationOptions As TaskContinuationOptions
    parameters: []
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: One of the enumeration values that specifies the default continuation options for this task factory.
- uid: System.Threading.Tasks.TaskFactory`1.CreationOptions
  id: CreationOptions
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: CreationOptions
  fullName: System.Threading.Tasks.TaskFactory<TResult>.CreationOptions
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).CreationOptions
  type: Property
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 485
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Gets the @'System.Threading.Tasks.TaskCreationOptions' enumeration value for this task factory.
  syntax:
    content: public TaskCreationOptions CreationOptions { get; }
    content.vb: Public ReadOnly Property CreationOptions As TaskCreationOptions
    parameters: []
    return:
      type: System.Threading.Tasks.TaskCreationOptions
      description: One of the enumeration values that specifies the default creation options for this task factory.
- uid: System.Threading.Tasks.TaskFactory`1.Scheduler
  id: Scheduler
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: Scheduler
  fullName: System.Threading.Tasks.TaskFactory<TResult>.Scheduler
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).Scheduler
  type: Property
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 486
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Gets the task scheduler for this task factory.
  syntax:
    content: public TaskScheduler Scheduler { get; }
    content.vb: Public ReadOnly Property Scheduler As TaskScheduler
    parameters: []
    return:
      type: System.Threading.Tasks.TaskScheduler
      description: The task scheduler for this task factory.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAll(Task[], Func<Task[], TResult>)
  name.vb: ContinueWhenAll(Task(), Func(Of Task(), TResult))
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 487
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of a set of provided tasks.
  syntax:
    content: public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction)
    content.vb: Public Function ContinueWhenAll(tasks As Task(), continuationFunction As Func(Of Task(), TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: The function delegate to execute asynchronously when all tasks in the *tasks* array have completed.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation task.
  exceptions:
  - type: System.ObjectDisposedException
    description: One of the elements in the *tasks* array has been disposed.
  - type: System.ArgumentNullException
    description: '*tasks* array is null.-or-The *continuationFunction* is null.'
  - type: System.ArgumentException
    description: The *tasks* array contains a null value or is empty.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAll(Task[], Func<Task[], TResult>, CancellationToken)
  name.vb: ContinueWhenAll(Task(), Func(Of Task(), TResult), CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 488
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of a set of provided tasks.
  syntax:
    content: public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAll(tasks As Task(), continuationFunction As Func(Of Task(), TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: The function delegate to execute asynchronously when all tasks in the *tasks* array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be assigned to the new continuation task.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation task.
  exceptions:
  - type: System.ObjectDisposedException
    description: One of the elements in the *tasks* array has been disposed.-or-The @'System.Threading.CancellationTokenSource' that created* cancellationToken* has already been disposed.
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-*continuationFunction* is null.
  - type: System.ArgumentException
    description: The *tasks* array contains a null value or is empty.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAll(Task[], Func<Task[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  name.vb: ContinueWhenAll(Task(), Func(Of Task(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 489
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of a set of provided Tasks.
  syntax:
    content: public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAll(tasks As Task(), continuationFunction As Func(Of Task(), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: The function delegate to execute asynchronously when all tasks in the *tasks* array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The scheduler that is used to schedule the created continuation task.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation task.
  exceptions:
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationFunction* argument is null.-or-The *scheduler* argument is null.
  - type: System.ArgumentException
    description: The *tasks* array contains a null value or is empty.
  - type: System.ArgumentOutOfRangeException
    description: '*continuationOptions* specifies an invalid value.'
  - type: System.ObjectDisposedException
    description: One of the elements in the *tasks* array has been disposed.-or-The @'System.Threading.CancellationTokenSource' that created* cancellationToken* has already been disposed.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAll(Task[], Func<Task[], TResult>, TaskContinuationOptions)
  name.vb: ContinueWhenAll(Task(), Func(Of Task(), TResult), TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.Tasks.TaskContinuationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 490
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of a set of provided Tasks.
  syntax:
    content: public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAll(tasks As Task(), continuationFunction As Func(Of Task(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: The function delegate to execute asynchronously when all tasks in the *tasks* array have completed.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation task.
  exceptions:
  - type: System.ObjectDisposedException
    description: One of the elements in the *tasks* array has been disposed.
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationFunction* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The *continuationOptions* argument specifies an invalid value.
  - type: System.ArgumentException
    description: The *tasks* array contains a null value or is empty.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>)
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult))
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 491
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of a set of provided tasks.
  syntax:
    content: public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: The function delegate to execute asynchronously when all tasks in the *tasks* array have completed.
    typeParameters:
    - id: TAntecedentResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation task.
  exceptions:
  - type: System.ObjectDisposedException
    description: One of the elements in the *tasks* array has been disposed.
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationFunction* argument is null.
  - type: System.ArgumentException
    description: The *tasks* array contains a null value or is empty.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken)
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 492
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of a set of provided tasks.
  syntax:
    content: public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: The function delegate to execute asynchronously when all tasks in the *tasks* array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be assigned to the new continuation task.
    typeParameters:
    - id: TAntecedentResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation task.
  exceptions:
  - type: System.ObjectDisposedException
    description: One of the elements in the *tasks* array has been disposed.-or-The @'System.Threading.CancellationTokenSource' that created* cancellationToken* has already been disposed.
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationFunction* argument is null.
  - type: System.ArgumentException
    description: The *tasks* array contains a null value or is empty.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 493
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of a set of provided tasks.
  syntax:
    content: public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: The function delegate to execute asynchronously when all tasks in the *tasks* array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The scheduler that is used to schedule the created continuation task.
    typeParameters:
    - id: TAntecedentResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation task.
  exceptions:
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationFunction* argument is null.-or-The *scheduler* argument is null.
  - type: System.ArgumentException
    description: The *tasks* array contains a null value or is empty.
  - type: System.ArgumentOutOfRangeException
    description: The *continuationOptions* argument specifies an invalid value.
  - type: System.ObjectDisposedException
    description: One of the elements in the *tasks* array has been disposed.-or-The @'System.Threading.CancellationTokenSource' that created* cancellationToken* has already been disposed.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, TaskContinuationOptions)
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.Tasks.TaskContinuationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 494
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of a set of provided tasks.
  syntax:
    content: public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: The function delegate to execute asynchronously when all tasks in the *tasks* array have completed.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.
    typeParameters:
    - id: TAntecedentResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation task.
  exceptions:
  - type: System.ObjectDisposedException
    description: One of the elements in the *tasks* array has been disposed.
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationFunction* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The *continuationOptions* argument specifies an invalid value.
  - type: System.ArgumentException
    description: The *tasks* array contains a null value or is empty.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAny(Task[], Func<Task, TResult>)
  name.vb: ContinueWhenAny(Task(), Func(Of Task, TResult))
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 495
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of any task in the provided set.
  syntax:
    content: public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction)
    content.vb: Public Function ContinueWhenAny(tasks As Task(), continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: The function delegate to execute asynchronously when one task in the *tasks* array completes.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation task.
  exceptions:
  - type: System.ObjectDisposedException
    description: One of the elements in the *tasks* array has been disposed.
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationFunction* argument is null.
  - type: System.ArgumentException
    description: The *tasks* array contains a null value or is empty.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAny(Task[], Func<Task, TResult>, CancellationToken)
  name.vb: ContinueWhenAny(Task(), Func(Of Task, TResult), CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 496
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of any task in the provided set.
  syntax:
    content: public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAny(tasks As Task(), continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: The function delegate to execute asynchronously when one task in the *tasks* array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be assigned to the new continuation task.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation task.
  exceptions:
  - type: System.ObjectDisposedException
    description: One of the elements in the *tasks* array has been disposed.-or-The @'System.Threading.CancellationTokenSource' that created* cancellationToken* has already been disposed.
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationFunction* argument is null.
  - type: System.ArgumentException
    description: The *tasks* array contains a null value.-or-The *tasks* array is empty.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAny(Task[], Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  name.vb: ContinueWhenAny(Task(), Func(Of Task, TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 497
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of any task in the provided set.
  syntax:
    content: public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAny(tasks As Task(), continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: The function delegate to execute asynchronously when one task in the *tasks* array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The task scheduler that is used to schedule the created continuation task.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation task.
  exceptions:
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationFunction* argument is null.-or-The *scheduler* argument is null.
  - type: System.ArgumentException
    description: The *tasks* array contains a null value.-or-The *tasks* array is empty.
  - type: System.ArgumentOutOfRangeException
    description: The *continuationOptions* argument specifies an invalid @'System.Threading.Tasks.TaskContinuationOptions' value.
  - type: System.ObjectDisposedException
    description: One of the elements in the *tasks* array has been disposed.-or-The @'System.Threading.CancellationTokenSource' that created* cancellationToken* has already been disposed.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAny(Task[], Func<Task, TResult>, TaskContinuationOptions)
  name.vb: ContinueWhenAny(Task(), Func(Of Task, TResult), TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.Tasks.TaskContinuationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 498
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of any task in the provided set.
  syntax:
    content: public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAny(tasks As Task(), continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: The function delegate to execute asynchronously when one task in the *tasks* array completes.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation task.
  exceptions:
  - type: System.ObjectDisposedException
    description: One of the elements in the *tasks* array has been disposed.
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationFunction* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The *continuationOptions* argument specifies an invalid enumeration value.
  - type: System.ArgumentException
    description: The *tasks* array contains a null value.-or-The *tasks* array is empty.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>)
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult))
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 499
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of any task in the provided set.
  syntax:
    content: public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: The function delegate to execute asynchronously when one task in the *tasks* array completes.
    typeParameters:
    - id: TAntecedentResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation @'System.Threading.Tasks.Task`1'.
  exceptions:
  - type: System.ObjectDisposedException
    description: One of the elements in the *tasks* array has been disposed.
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationFunction* argument is null.
  - type: System.ArgumentException
    description: The *tasks* array contains a null value.-or-The *tasks* array is empty.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken)
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 500
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of any task in the provided set.
  syntax:
    content: public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: The function delegate to execute asynchronously when one task in the *tasks* array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be assigned to the new continuation task.
    typeParameters:
    - id: TAntecedentResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation task.
  exceptions:
  - type: System.ObjectDisposedException
    description: One of the elements in the *tasks* array has been disposed.-or-The @'System.Threading.CancellationTokenSource' that created* cancellationToken* has already been disposed.
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationFunction* argument is null.
  - type: System.ArgumentException
    description: The *tasks* array contains a null value.-or-The *tasks* array is empty.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 501
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of any task in the provided set.
  syntax:
    content: public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: The function delegate to execute asynchronously when one task in the *tasks* array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The @'System.Threading.Tasks.TaskScheduler' that is used to schedule the created continuation @'System.Threading.Tasks.Task`1'.
    typeParameters:
    - id: TAntecedentResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation @'System.Threading.Tasks.Task`1'.
  exceptions:
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationFunction* argument is null.-or-The *scheduler* argument is null.
  - type: System.ArgumentException
    description: The *tasks* array contains a null value.-or-The *tasks* array is empty.
  - type: System.ArgumentOutOfRangeException
    description: The *continuationOptions* argument specifies an invalid TaskContinuationOptions value.
  - type: System.ObjectDisposedException
    description: One of the elements in the *tasks* array has been disposed.-or-The @'System.Threading.CancellationTokenSource' that created* cancellationToken* has already been disposed.
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, TaskContinuationOptions)
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.Tasks.TaskContinuationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 502
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of any task in the provided set.
  syntax:
    content: public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: The function delegate to execute asynchronously when one task in the *tasks* array completes.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.
    typeParameters:
    - id: TAntecedentResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The new continuation @'System.Threading.Tasks.Task`1'.
  exceptions:
  - type: System.ObjectDisposedException
    description: One of the elements in the *tasks* array has been disposed.
  - type: System.ArgumentNullException
    description: The *tasks* array is null.-or-The *continuationFunction* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The *continuationOptions* argument specifies an invalid enumeration value.
  - type: System.ArgumentException
    description: The *tasks* array contains a null value.-or-The *tasks* array is empty.
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object)
  name.vb: FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, System.Object)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 503
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  syntax:
    content: public Task<TResult> FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state)
    content.vb: Public Function FromAsync(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The delegate that ends the asynchronous operation.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *beginMethod* delegate.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The created task that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *beginMethod* argument is null.-or-The *endMethod* argument is null.
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object, TaskCreationOptions)
  name.vb: FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, System.Object, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 504
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  syntax:
    content: public Task<TResult> FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The delegate that ends the asynchronous operation.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *beginMethod* delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: One of the enumeration values that controls the behavior of the created task.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The created @'System.Threading.Tasks.Task`1' that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *beginMethod* argument is null.-or-The *endMethod* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The *creationOptions* argument specifies an invalid value.
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: FromAsync(IAsyncResult, Func<IAsyncResult, TResult>)
  name.vb: FromAsync(IAsyncResult, Func(Of IAsyncResult, TResult))
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 505
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a task that executes an end method function when a specified @'System.IAsyncResult' completes.
  syntax:
    content: public Task<TResult> FromAsync(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod)
    content.vb: Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult)) As Task(Of TResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: The @'System.IAsyncResult' whose completion should trigger the processing of the *endMethod*.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The function delegate that processes the completed *asyncResult*.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A @'System.Threading.Tasks.Task`1' that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *asyncResult* argument is null.-or-The *endMethod* argument is null.
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: FromAsync(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions)
  name.vb: FromAsync(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult), System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 506
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a task that executes an end method function when a specified @'System.IAsyncResult' completes.
  syntax:
    content: public Task<TResult> FromAsync(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: The @'System.IAsyncResult' whose completion should trigger the processing of the *endMethod*.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The function delegate that processes the completed *asyncResult*.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: One of the enumeration values that controls the behavior of the created task.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A task that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *asyncResult* argument is null.-or-The *endMethod* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The *creationOptions* argument specifies an invalid value.
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: FromAsync(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions, TaskScheduler)
  name.vb: FromAsync(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult), System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 507
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a task that executes an end method function when a specified @'System.IAsyncResult' completes.
  syntax:
    content: public Task<TResult> FromAsync(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: The @'System.IAsyncResult' whose completion should trigger the processing of the *endMethod*.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The function delegate that processes the completed *asyncResult*.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: One of the enumeration values that controls the behavior of the created task.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The task scheduler that is used to schedule the task that executes the end method.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The created task that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *asyncResult* argument is null.-or-The *endMethod* argument is null.-or-The *scheduler* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The *creationOptions* parameter specifies an invalid value.
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object)
  name.vb: FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, System.Object)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 508
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  syntax:
    content: public Task<TResult> FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state)
    content.vb: Public Function FromAsync(Of TArg1)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: '{TArg1}'
      description: The first argument passed to the *beginMethod* delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *beginMethod* delegate.
    typeParameters:
    - id: TArg1
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The created task that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *beginMethod* argument is null.-or-The *endMethod* argument is null.
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object, TaskCreationOptions)
  name.vb: FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 509
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  syntax:
    content: public Task<TResult> FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: '{TArg1}'
      description: The first argument passed to the *beginMethod* delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *beginMethod* delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: One of the enumeration values that controls the behavior of the created task.
    typeParameters:
    - id: TArg1
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The created task that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *beginMethod* argument is null.-or-The *endMethod* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The *creationOptions* parameter specifies an invalid value.
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object)
  name.vb: FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, System.Object)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 510
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state)
    content.vb: Public Function FromAsync(Of TArg1, TArg2)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: '{TArg1}'
      description: The first argument passed to the *beginMethod* delegate.
    - id: arg2
      type: '{TArg2}'
      description: The second argument passed to the *beginMethod* delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *beginMethod* delegate.
    typeParameters:
    - id: TArg1
    - id: TArg2
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The created task that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *beginMethod* argument is null.-or-The *endMethod* argument is null.
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object, TaskCreationOptions)
  name.vb: FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 511
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1, TArg2)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: '{TArg1}'
      description: The first argument passed to the *beginMethod* delegate.
    - id: arg2
      type: '{TArg2}'
      description: The second argument passed to the *beginMethod* delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *beginMethod* delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: An object that controls the behavior of the created @'System.Threading.Tasks.Task`1'.
    typeParameters:
    - id: TArg1
    - id: TArg2
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The created task that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *beginMethod* argument is null.-or-The *endMethod* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The *creationOptions* parameter specifies an invalid value.
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object)
  name.vb: FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1, TArg2, TArg3>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, TArg3, System.Object)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2, TArg3)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, TArg3, System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 512
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: '{TArg1}'
      description: The first argument passed to the *beginMethod* delegate.
    - id: arg2
      type: '{TArg2}'
      description: The second argument passed to the *beginMethod* delegate.
    - id: arg3
      type: '{TArg3}'
      description: The third argument passed to the *beginMethod* delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *beginMethod* delegate.
    typeParameters:
    - id: TArg1
    - id: TArg2
    - id: TArg3
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The created task that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *beginMethod* argument is null.-or-The *endMethod* argument is null.
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  name.vb: FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1, TArg2, TArg3>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2, TArg3)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 513
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: '{TArg1}'
      description: The first argument passed to the *beginMethod* delegate.
    - id: arg2
      type: '{TArg2}'
      description: The second argument passed to the *beginMethod* delegate.
    - id: arg3
      type: '{TArg3}'
      description: The third argument passed to the *beginMethod* delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the *beginMethod* delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: An object that controls the behavior of the created task.
    typeParameters:
    - id: TArg1
    - id: TArg2
    - id: TArg3
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The created task that represents the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *beginMethod* argument is null.-or-The *endMethod* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The *creationOptions* parameter specifies an invalid value.
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})
  id: StartNew(System.Func{`0})
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: StartNew(Func<TResult>)
  name.vb: StartNew(Func(Of TResult))
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<TResult>)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of TResult))
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 514
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates and starts a task.
  syntax:
    content: public Task<TResult> StartNew(Func<TResult> function)
    content.vb: Public Function StartNew(function As Func(Of TResult)) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: A function delegate that returns the future result to be available through the task.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The started task.
  exceptions:
  - type: System.ArgumentNullException
    description: The *function* argument is null.
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)
  id: StartNew(System.Func{`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: StartNew(Func<TResult>, CancellationToken)
  name.vb: StartNew(Func(Of TResult), CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<TResult>, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of TResult), System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 515
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates and starts a task.
  syntax:
    content: public Task<TResult> StartNew(Func<TResult> function, CancellationToken cancellationToken)
    content.vb: Public Function StartNew(function As Func(Of TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: A function delegate that returns the future result to be available through the task.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be assigned to the new task.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The started task.
  exceptions:
  - type: System.ObjectDisposedException
    description: The cancellation token source that created*cancellationToken* has already been disposed.
  - type: System.ArgumentNullException
    description: The *function* argument is null.
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: StartNew(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)
  name.vb: StartNew(Func(Of TResult), CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 516
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates and starts a task.
  syntax:
    content: public Task<TResult> StartNew(Func<TResult> function, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: Public Function StartNew(function As Func(Of TResult), cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: A function delegate that returns the future result to be available through the task.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be assigned to the new task.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: One of the enumeration values that controls the behavior of the created task.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The task scheduler that is used to schedule the created task.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The started task.
  exceptions:
  - type: System.ObjectDisposedException
    description: The cancellation token source that created*cancellationToken* has already been disposed.
  - type: System.ArgumentNullException
    description: The *function* argument is null.-or-The *scheduler* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The *creationOptions* parameter specifies an invalid value.
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  id: StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: StartNew(Func<TResult>, TaskCreationOptions)
  name.vb: StartNew(Func(Of TResult), TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<TResult>, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of TResult), System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 517
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates and starts a task.
  syntax:
    content: public Task<TResult> StartNew(Func<TResult> function, TaskCreationOptions creationOptions)
    content.vb: Public Function StartNew(function As Func(Of TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: A function delegate that returns the future result to be available through the task.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: One of the enumeration values that controls the behavior of the created task.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The started @'System.Threading.Tasks.Task`1'.
  exceptions:
  - type: System.ArgumentNullException
    description: The *function* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The *creationOptions* parameter specifies an invalid value.
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)
  id: StartNew(System.Func{System.Object,`0},System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: StartNew(Func<Object, TResult>, Object)
  name.vb: StartNew(Func(Of Object, TResult), Object)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<System.Object, TResult>, System.Object)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of System.Object, TResult), System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 518
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates and starts a task.
  syntax:
    content: public Task<TResult> StartNew(Func<object, TResult> function, object state)
    content.vb: Public Function StartNew(function As Func(Of Object, TResult), state As Object) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: A function delegate that returns the future result to be available through the task.
    - id: state
      type: System.Object
      description: An object that contains data to be used by the *function* delegate.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The started task.
  exceptions:
  - type: System.ArgumentNullException
    description: The *function* argument is null.
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: StartNew(Func<Object, TResult>, Object, CancellationToken)
  name.vb: StartNew(Func(Of Object, TResult), Object, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<System.Object, TResult>, System.Object, System.Threading.CancellationToken)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of System.Object, TResult), System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 519
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates and starts a task.
  syntax:
    content: public Task<TResult> StartNew(Func<object, TResult> function, object state, CancellationToken cancellationToken)
    content.vb: Public Function StartNew(function As Func(Of Object, TResult), state As Object, cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: A function delegate that returns the future result to be available through the task.
    - id: state
      type: System.Object
      description: An object that contains data to be used by the *function* delegate.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be assigned to the new task.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The started task.
  exceptions:
  - type: System.ObjectDisposedException
    description: The cancellation token source that created*cancellationToken* has already been disposed.
  - type: System.ArgumentNullException
    description: The *function* argument is null.
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: StartNew(Func<Object, TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  name.vb: StartNew(Func(Of Object, TResult), Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<System.Object, TResult>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of System.Object, TResult), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 520
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates and starts a task.
  syntax:
    content: public Task<TResult> StartNew(Func<object, TResult> function, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: Public Function StartNew(function As Func(Of Object, TResult), state As Object, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: A function delegate that returns the future result to be available through the task.
    - id: state
      type: System.Object
      description: An object that contains data to be used by the *function* delegate.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be assigned to the new task.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: One of the enumeration values that controls the behavior of the created task.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The task scheduler that is used to schedule the created task.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The started task.
  exceptions:
  - type: System.ObjectDisposedException
    description: The cancellation token source that created*cancellationToken* has already been disposed.
  - type: System.ArgumentNullException
    description: The *function* argument is null.-or-The *scheduler* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The *creationOptions* parameter specifies an invalid value.
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  href: System.Threading.Tasks.TaskFactory`1.yml
  name: StartNew(Func<Object, TResult>, Object, TaskCreationOptions)
  name.vb: StartNew(Func(Of Object, TResult), Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<System.Object, TResult>, System.Object, System.Threading.Tasks.TaskCreationOptions)
  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of System.Object, TResult), System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote: *o0
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 521
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates and starts a task.
  syntax:
    content: public Task<TResult> StartNew(Func<object, TResult> function, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function StartNew(function As Func(Of Object, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: A function delegate that returns the future result to be available through the task.
    - id: state
      type: System.Object
      description: An object that contains data to be used by the *function* delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: One of the enumeration values that controls the behavior of the created task.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The started task.
  exceptions:
  - type: System.ArgumentNullException
    description: The *function* argument is null.
  - type: System.ArgumentOutOfRangeException
    description: The *creationOptions* parameter specifies an invalid value.
references:
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
  type: Class
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  href: System.Threading.CancellationToken.yml
  name: CancellationToken
  fullName: System.Threading.CancellationToken
  type: Struct
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
  type: Namespace
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.TaskCreationOptions.yml
  name: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
  type: Enum
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.TaskContinuationOptions.yml
  name: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
  type: Enum
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.TaskScheduler.yml
  name: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
  type: Class
- uid: System.Threading.Tasks.Task[]
  isExternal: false
  href: System.Threading.Tasks.Task.yml
  name: Task[]
  name.vb: Task()
  fullName: System.Threading.Tasks.Task[]
  fullName.vb: System.Threading.Tasks.Task()
  spec.csharp:
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: ()
    fullName: ()
- uid: System.Func{System.Threading.Tasks.Task[],{TResult}}
  parent: System
  definition: System.Func`2
  href: System.Threading.Tasks.Task.yml
  name: Func<Task[], TResult>
  name.vb: Func(Of Task(), TResult)
  fullName: System.Func<System.Threading.Tasks.Task[], TResult>
  fullName.vb: System.Func(Of System.Threading.Tasks.Task(), TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TResult}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: System.Threading.Tasks.Task`1.yml
  name: Task<TResult>
  name.vb: Task(Of TResult)
  fullName: System.Threading.Tasks.Task<TResult>
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func`2
  parent: System
  isExternal: false
  href: System.Func`2.yml
  name: Func<T, TResult>
  name.vb: Func(Of T, TResult)
  fullName: System.Func<T, TResult>
  fullName.vb: System.Func(Of T, TResult)
  type: Delegate
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.Task`1.yml
  name: Task<TResult>
  name.vb: Task(Of TResult)
  fullName: System.Threading.Tasks.Task<TResult>
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  type: Class
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TAntecedentResult}}[]
  isExternal: false
  href: System.Threading.Tasks.Task`1.yml
  name: Task<TAntecedentResult>[]
  name.vb: Task(Of TAntecedentResult)()
  fullName: System.Threading.Tasks.Task<TAntecedentResult>[]
  fullName.vb: System.Threading.Tasks.Task(Of TAntecedentResult)()
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: <
    fullName: <
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: )
    fullName: )
  - name: ()
    fullName: ()
- uid: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
  parent: System
  definition: System.Func`2
  href: System.Threading.Tasks.Task`1.yml
  name: Func<Task<TAntecedentResult>[], TResult>
  name.vb: Func(Of Task(Of TAntecedentResult)(), TResult)
  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>
  fullName.vb: System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: <
    fullName: <
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: )
    fullName: )
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task,{TResult}}
  parent: System
  definition: System.Func`2
  href: System.Threading.Tasks.Task.yml
  name: Func<Task, TResult>
  name.vb: Func(Of Task, TResult)
  fullName: System.Func<System.Threading.Tasks.Task, TResult>
  fullName.vb: System.Func(Of System.Threading.Tasks.Task, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task.yml
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
  parent: System
  definition: System.Func`2
  href: System.Threading.Tasks.Task`1.yml
  name: Func<Task<TAntecedentResult>, TResult>
  name.vb: Func(Of Task(Of TAntecedentResult), TResult)
  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>
  fullName.vb: System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: <
    fullName: <
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TAntecedentResult
    fullName: TAntecedentResult
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  definition: System.Func`3
  name: Func<AsyncCallback, Object, IAsyncResult>
  name.vb: Func(Of AsyncCallback, Object, IAsyncResult)
  fullName: System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>
  fullName.vb: System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{System.IAsyncResult,{TResult}}
  parent: System
  definition: System.Func`2
  name: Func<IAsyncResult, TResult>
  name.vb: Func(Of IAsyncResult, TResult)
  fullName: System.Func<System.IAsyncResult, TResult>
  fullName.vb: System.Func(Of System.IAsyncResult, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func`3
  parent: System
  isExternal: false
  href: System.Func`3.yml
  name: Func<T1, T2, TResult>
  name.vb: Func(Of T1, T2, TResult)
  fullName: System.Func<T1, T2, TResult>
  fullName.vb: System.Func(Of T1, T2, TResult)
  type: Delegate
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    href: System.Func`3.yml
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    href: System.Func`3.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  href: System.IAsyncResult.yml
  name: IAsyncResult
  fullName: System.IAsyncResult
  type: Interface
- uid: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  definition: System.Func`4
  name: Func<TArg1, AsyncCallback, Object, IAsyncResult>
  name.vb: Func(Of TArg1, AsyncCallback, Object, IAsyncResult)
  fullName: System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>
  fullName.vb: System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
- uid: '{TArg1}'
  isExternal: false
  name: TArg1
  fullName: TArg1
- uid: System.Func`4
  parent: System
  isExternal: false
  href: System.Func`4.yml
  name: Func<T1, T2, T3, TResult>
  name.vb: Func(Of T1, T2, T3, TResult)
  fullName: System.Func<T1, T2, T3, TResult>
  fullName.vb: System.Func(Of T1, T2, T3, TResult)
  type: Delegate
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    href: System.Func`4.yml
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    href: System.Func`4.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  definition: System.Func`5
  name: Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>
  name.vb: Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult)
  fullName: System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>
  fullName.vb: System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - name: TArg2
    fullName: TArg2
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - name: TArg2
    fullName: TArg2
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
- uid: '{TArg2}'
  isExternal: false
  name: TArg2
  fullName: TArg2
- uid: System.Func`5
  parent: System
  isExternal: false
  href: System.Func`5.yml
  name: Func<T1, T2, T3, T4, TResult>
  name.vb: Func(Of T1, T2, T3, T4, TResult)
  fullName: System.Func<T1, T2, T3, T4, TResult>
  fullName.vb: System.Func(Of T1, T2, T3, T4, TResult)
  type: Delegate
  spec.csharp:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    href: System.Func`5.yml
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    href: System.Func`5.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  definition: System.Func`6
  name: Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>
  name.vb: Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult)
  fullName: System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>
  fullName.vb: System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult)
  spec.csharp:
  - uid: System.Func`6
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - name: TArg2
    fullName: TArg2
  - name: ', '
    fullName: ', '
  - name: TArg3
    fullName: TArg3
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`6
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TArg1
    fullName: TArg1
  - name: ', '
    fullName: ', '
  - name: TArg2
    fullName: TArg2
  - name: ', '
    fullName: ', '
  - name: TArg3
    fullName: TArg3
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
- uid: '{TArg3}'
  isExternal: false
  name: TArg3
  fullName: TArg3
- uid: System.Func`6
  parent: System
  isExternal: false
  href: System.Func`6.yml
  name: Func<T1, T2, T3, T4, T5, TResult>
  name.vb: Func(Of T1, T2, T3, T4, T5, TResult)
  fullName: System.Func<T1, T2, T3, T4, T5, TResult>
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, TResult)
  type: Delegate
  spec.csharp:
  - uid: System.Func`6
    name: Func
    fullName: System.Func
    href: System.Func`6.yml
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`6
    name: Func
    fullName: System.Func
    href: System.Func`6.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: T3
    fullName: T3
  - name: ', '
    fullName: ', '
  - name: T4
    fullName: T4
  - name: ', '
    fullName: ', '
  - name: T5
    fullName: T5
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TResult}}
  parent: System
  definition: System.Func`1
  name: Func<TResult>
  name.vb: Func(Of TResult)
  fullName: System.Func<TResult>
  fullName.vb: System.Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func`1
  parent: System
  isExternal: false
  href: System.Func`1.yml
  name: Func<TResult>
  name.vb: Func(Of TResult)
  fullName: System.Func<TResult>
  fullName.vb: System.Func(Of TResult)
  type: Delegate
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    href: System.Func`1.yml
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    href: System.Func`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{System.Object,{TResult}}
  parent: System
  definition: System.Func`2
  name: Func<Object, TResult>
  name.vb: Func(Of Object, TResult)
  fullName: System.Func<System.Object, TResult>
  fullName.vb: System.Func(Of System.Object, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  href: System.ArgumentOutOfRangeException.yml
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  type: Class
- uid: System.ObjectDisposedException
  isExternal: false
  href: System.ObjectDisposedException.yml
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
  type: Class
- uid: System.ArgumentNullException
  isExternal: false
  href: System.ArgumentNullException.yml
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  type: Class
  summary: The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
- uid: System.ArgumentException
  parent: System
  isExternal: false
  href: System.ArgumentException.yml
  name: ArgumentException
  fullName: System.ArgumentException
  type: Class
