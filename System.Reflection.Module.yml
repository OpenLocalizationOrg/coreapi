items:
- uid: System.Reflection.Module
  id: Module
  parent: System.Reflection
  children:
  - System.Reflection.Module.Assembly
  - System.Reflection.Module.CustomAttributes
  - System.Reflection.Module.Equals(System.Object)
  - System.Reflection.Module.FullyQualifiedName
  - System.Reflection.Module.GetHashCode
  - System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)
  - System.Reflection.Module.Name
  - System.Reflection.Module.ToString
  href: System.Reflection.Module.yml
  name: Module
  fullName: System.Reflection.Module
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/Reflection/Module.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    path: src/mscorlib/src/System/Reflection/Module.cs
    startLine: 56
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Performs reflection on a module.
  syntax:
    content: public abstract class Module
    content.vb: Public MustInherit Class Module
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Reflection.Module.Assembly
  id: Assembly
  parent: System.Reflection.Module
  href: System.Reflection.Module.yml
  name: Assembly
  fullName: System.Reflection.Module.Assembly
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Module.cs
    startLine: 514
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets the appropriate @'System.Reflection.Assembly' for this instance of @'System.Reflection.Module'.
  syntax:
    content: public virtual Assembly Assembly { get; }
    content.vb: Public Overridable ReadOnly Property Assembly As Assembly
    parameters: []
    return:
      type: System.Reflection.Assembly
      description: An Assembly object.
- uid: System.Reflection.Module.CustomAttributes
  id: CustomAttributes
  parent: System.Reflection.Module
  href: System.Reflection.Module.yml
  name: CustomAttributes
  fullName: System.Reflection.Module.CustomAttributes
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Module.cs
    startLine: 128
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a collection that contains this module's custom attributes.
  syntax:
    content: public virtual IEnumerable<CustomAttributeData> CustomAttributes { get; }
    content.vb: Public Overridable ReadOnly Property CustomAttributes As IEnumerable(Of CustomAttributeData)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
      description: A collection that contains this module's custom attributes.
- uid: System.Reflection.Module.FullyQualifiedName
  id: FullyQualifiedName
  parent: System.Reflection.Module
  href: System.Reflection.Module.yml
  name: FullyQualifiedName
  fullName: System.Reflection.Module.FullyQualifiedName
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Module.cs
    startLine: 300
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a string representing the fully qualified name and path to this module.
  syntax:
    content: public virtual string FullyQualifiedName { get; }
    content.vb: Public Overridable ReadOnly Property FullyQualifiedName As String
    parameters: []
    return:
      type: System.String
      description: The fully qualified module name.
  exceptions:
  - type: System.Security.SecurityException
    description: The caller does not have the required permissions.
- uid: System.Reflection.Module.Name
  id: Name
  parent: System.Reflection.Module
  href: System.Reflection.Module.yml
  name: Name
  fullName: System.Reflection.Module.Name
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Module.cs
    startLine: 499
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a String representing the name of the module with the path removed.
  syntax:
    content: public virtual string Name { get; }
    content.vb: Public Overridable ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: The module name with no path.
- uid: System.Reflection.Module.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Module
  href: System.Reflection.Module.yml
  name: Equals(Object)
  fullName: System.Reflection.Module.Equals(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Module.cs
    startLine: 106
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Determines whether this module and the specified object are equal.
  syntax:
    content: public override bool Equals(object o)
    content.vb: Public Overrides Function Equals(o As Object) As Boolean
    parameters:
    - id: o
      type: System.Object
      description: The object to compare with this instance.
    return:
      type: System.Boolean
      description: true if *o* is equal to this instance; otherwise, false.
  overridden: System.Object.Equals(System.Object)
- uid: System.Reflection.Module.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Module
  href: System.Reflection.Module.yml
  name: GetHashCode()
  fullName: System.Reflection.Module.GetHashCode()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Module.cs
    startLine: 111
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns the hash code for this instance.
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  overridden: System.Object.GetHashCode
- uid: System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)
  id: GetType(System.String,System.Boolean,System.Boolean)
  parent: System.Reflection.Module
  href: System.Reflection.Module.yml
  name: GetType(String, Boolean, Boolean)
  fullName: System.Reflection.Module.GetType(System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Module.cs
    startLine: 294
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns the specified type, specifying whether to make a case-sensitive search of the module and whether to throw an exception if the type cannot be found.
  syntax:
    content: public virtual Type GetType(string className, bool throwOnError, bool ignoreCase)
    content.vb: Public Overridable Function GetType(className As String, throwOnError As Boolean, ignoreCase As Boolean) As Type
    parameters:
    - id: className
      type: System.String
      description: The name of the type to locate. The name must be fully qualified with the namespace.
    - id: throwOnError
      type: System.Boolean
      description: true to throw an exception if the type cannot be found; false to return null.
    - id: ignoreCase
      type: System.Boolean
      description: true for case-insensitive search; otherwise, false.
    return:
      type: System.Type
      description: A @'System.Type' object representing the specified type, if the type is declared in this module; otherwise, null.
  exceptions:
  - type: System.ArgumentNullException
    description: '*className* is null.'
  - type: System.Reflection.TargetInvocationException
    description: The class initializers are invoked and an exception is thrown.
  - type: System.ArgumentException
    description: '*className* is a zero-length string.'
  - type: System.TypeLoadException
    description: '*throwOnError* is true, and the type cannot be found.'
  - type: System.IO.FileNotFoundException
    description: '*className* requires a dependent assembly that could not be found.'
  - type: System.IO.FileLoadException
    description: '*className* requires a dependent assembly that was found but could not be loaded.-or-The current assembly was loaded into the reflection-only context, and *className* requires a dependent assembly that was not preloaded.'
  - type: System.BadImageFormatException
    description: '*className* requires a dependent assembly, but the file is not a valid assembly. -or-*className* requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.'
- uid: System.Reflection.Module.ToString
  id: ToString
  parent: System.Reflection.Module
  href: System.Reflection.Module.yml
  name: ToString()
  fullName: System.Reflection.Module.ToString()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/Module.cs
    startLine: 122
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns the name of the module.
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: A String representing the name of this module.
  overridden: System.Object.ToString
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
  type: Class
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.Assembly.yml
  name: Assembly
  fullName: System.Reflection.Assembly
  type: Class
- uid: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: System.Reflection.CustomAttributeData.yml
  name: IEnumerable<CustomAttributeData>
  name.vb: IEnumerable(Of CustomAttributeData)
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.CustomAttributeData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.CustomAttributeData
    name: CustomAttributeData
    fullName: System.Reflection.CustomAttributeData
    href: System.Reflection.CustomAttributeData.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.CustomAttributeData
    name: CustomAttributeData
    fullName: System.Reflection.CustomAttributeData
    href: System.Reflection.CustomAttributeData.yml
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.IEnumerable`1.yml
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  type: Interface
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
  type: Namespace
- uid: System.String
  parent: System
  isExternal: false
  href: System.String.yml
  name: String
  fullName: System.String
  type: Class
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  href: System.Boolean.yml
  name: Boolean
  fullName: System.Boolean
  type: Struct
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  href: System.Int32.yml
  name: Int32
  fullName: System.Int32
  type: Struct
- uid: System.Type
  parent: System
  isExternal: false
  href: System.Type.yml
  name: Type
  fullName: System.Type
  type: Class
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.SecurityException
  isExternal: false
  href: System.Security.SecurityException.yml
  name: SecurityException
  fullName: System.Security.SecurityException
  type: Class
  summary: The exception that is thrown when a security error is detected.
- uid: System.ArgumentNullException
  isExternal: false
  href: System.ArgumentNullException.yml
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  type: Class
  summary: The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
- uid: System.Reflection.TargetInvocationException
  isExternal: false
  href: System.Reflection.TargetInvocationException.yml
  name: TargetInvocationException
  fullName: System.Reflection.TargetInvocationException
  type: Class
  summary: The exception that is thrown by methods invoked through reflection. This class cannot be inherited.
- uid: System.ArgumentException
  parent: System
  isExternal: false
  href: System.ArgumentException.yml
  name: ArgumentException
  fullName: System.ArgumentException
  type: Class
  summary: The exception that is thrown when one of the arguments provided to a method is not valid.
- uid: System.TypeLoadException
  parent: System
  isExternal: false
  href: System.TypeLoadException.yml
  name: TypeLoadException
  fullName: System.TypeLoadException
  type: Class
  summary: The exception that is thrown when type-loading failures occur.
- uid: System.IO.FileNotFoundException
  isExternal: false
  href: System.IO.FileNotFoundException.yml
  name: FileNotFoundException
  fullName: System.IO.FileNotFoundException
  type: Class
  summary: The exception that is thrown when an attempt to access a file that does not exist on disk fails.
- uid: System.IO.FileLoadException
  isExternal: false
  href: System.IO.FileLoadException.yml
  name: FileLoadException
  fullName: System.IO.FileLoadException
  type: Class
  summary: The exception that is thrown when a managed assembly is found but cannot be loaded.
- uid: System.BadImageFormatException
  isExternal: false
  href: System.BadImageFormatException.yml
  name: BadImageFormatException
  fullName: System.BadImageFormatException
  type: Class
  summary: The exception that is thrown when the file image of a dynamic link library (DLL) or an executable program is invalid.
