items:
- uid: System.Collections.Concurrent.ConcurrentDictionary`2
  id: ConcurrentDictionary`2
  parent: System.Collections.Concurrent
  children:
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.Clear
  - System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Count
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty
  - System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Keys
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Concurrent.ConcurrentDictionary`2.ToArray
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Values
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ConcurrentDictionary<TKey, TValue>
  name.vb: ConcurrentDictionary(Of TKey, TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue)
  type: Class
  source:
    remote: &o0
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 31
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Represents a thread-safe collection of key/value pairs that can be accessed by multiple threads concurrently.
  syntax:
    content: 'public class ConcurrentDictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IEnumerable'
    content.vb: Public Class ConcurrentDictionary(Of TKey, TValue) Implements IDictionary(Of TKey, TValue), ICollection(Of KeyValuePair(Of TKey, TValue)), IReadOnlyDictionary(Of TKey, TValue), IReadOnlyCollection(Of KeyValuePair(Of TKey, TValue)), IEnumerable(Of KeyValuePair(Of TKey, TValue)), IDictionary, ICollection, IEnumerable
    typeParameters:
    - id: TKey
    - id: TValue
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  - System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.IDictionary
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor
  id: '#ctor'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ConcurrentDictionary()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary()
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 121
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the @'System.Collections.Concurrent.ConcurrentDictionary`2' class that is empty, has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type.
  syntax:
    content: public ConcurrentDictionary()
    content.vb: Public Sub New
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ConcurrentDictionary(IEnumerable<KeyValuePair<TKey, TValue>>)
  name.vb: ConcurrentDictionary(IEnumerable(Of KeyValuePair(Of TKey, TValue)))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)))
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 154
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the @'System.Collections.Concurrent.ConcurrentDictionary`2' class that contains elements copied from the specified @'System.Collections.Generic.IEnumerable`1', has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type.
  syntax:
    content: public ConcurrentDictionary(IEnumerable<KeyValuePair<TKey, TValue>> collection)
    content.vb: Public Sub New(collection As IEnumerable(Of KeyValuePair(Of TKey, TValue)))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: The @'System.Collections.Generic.IEnumerable`1' whose elements are copied to the new @'System.Collections.Concurrent.ConcurrentDictionary`2'.
  exceptions:
  - type: System.ArgumentNullException
    description: '*collection* or any of its keys is  null.'
  - type: System.ArgumentException
    description: '*collection* contains one or more duplicate keys.'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ConcurrentDictionary(IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>)
  name.vb: ConcurrentDictionary(IEnumerable(Of KeyValuePair(Of TKey, TValue)), IEqualityComparer(Of TKey))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 184
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the @'System.Collections.Concurrent.ConcurrentDictionary`2' class that contains elements copied from the specified @'System.Collections.IEnumerable' has the default concurrency level, has the default initial capacity, and uses the specified  @'System.Collections.Generic.IEqualityComparer`1'.
  syntax:
    content: public ConcurrentDictionary(IEnumerable<KeyValuePair<TKey, TValue>> collection, IEqualityComparer<TKey> comparer)
    content.vb: Public Sub New(collection As IEnumerable(Of KeyValuePair(Of TKey, TValue)), comparer As IEqualityComparer(Of TKey))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: The @'System.Collections.Generic.IEnumerable`1' whose elements are copied to the new @'System.Collections.Concurrent.ConcurrentDictionary`2'.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The @'System.Collections.Generic.IEqualityComparer`1' implementation to use when comparing keys.
  exceptions:
  - type: System.ArgumentNullException
    description: '*collection* or *comparer* is null.'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ConcurrentDictionary(IEqualityComparer<TKey>)
  name.vb: ConcurrentDictionary(IEqualityComparer(Of TKey))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary(System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 165
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the @'System.Collections.Concurrent.ConcurrentDictionary`2' class that is empty, has the default concurrency level and capacity, and uses the specified @'System.Collections.Generic.IEqualityComparer`1'.
  syntax:
    content: public ConcurrentDictionary(IEqualityComparer<TKey> comparer)
    content.vb: Public Sub New(comparer As IEqualityComparer(Of TKey))
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The equality comparison implementation to use when comparing keys.
  exceptions:
  - type: System.ArgumentNullException
    description: '*comparer* is null.'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ConcurrentDictionary(Int32, IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>)
  name.vb: ConcurrentDictionary(Int32, IEnumerable(Of KeyValuePair(Of TKey, TValue)), IEqualityComparer(Of TKey))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Int32, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary(System.Int32, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)), System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 213
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the @'System.Collections.Concurrent.ConcurrentDictionary`2' class that contains elements copied from the specified @'System.Collections.IEnumerable', and uses the specified @'System.Collections.Generic.IEqualityComparer`1'.
  syntax:
    content: public ConcurrentDictionary(int concurrencyLevel, IEnumerable<KeyValuePair<TKey, TValue>> collection, IEqualityComparer<TKey> comparer)
    content.vb: Public Sub New(concurrencyLevel As Integer, collection As IEnumerable(Of KeyValuePair(Of TKey, TValue)), comparer As IEqualityComparer(Of TKey))
    parameters:
    - id: concurrencyLevel
      type: System.Int32
      description: The estimated number of threads that will update the @'System.Collections.Concurrent.ConcurrentDictionary`2' concurrently.
    - id: collection
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: The @'System.Collections.Generic.IEnumerable`1' whose elements are copied to the new @'System.Collections.Concurrent.ConcurrentDictionary`2'.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The @'System.Collections.Generic.IEqualityComparer`1' implementation to use when comparing keys.
  exceptions:
  - type: System.ArgumentNullException
    description: '*collection* or *comparer* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*concurrencyLevel* is less than 1.'
  - type: System.ArgumentException
    description: '*collection* contains one or more duplicate keys.'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ConcurrentDictionary(Int32, Int32)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Int32, System.Int32)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary(System.Int32, System.Int32)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 138
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the @'System.Collections.Concurrent.ConcurrentDictionary`2' class that is empty, has the specified concurrency level and capacity, and uses the default comparer for the key type.
  syntax:
    content: public ConcurrentDictionary(int concurrencyLevel, int capacity)
    content.vb: Public Sub New(concurrencyLevel As Integer, capacity As Integer)
    parameters:
    - id: concurrencyLevel
      type: System.Int32
      description: The estimated number of threads that will update the @'System.Collections.Concurrent.ConcurrentDictionary`2' concurrently.
    - id: capacity
      type: System.Int32
      description: The initial number of elements that the @'System.Collections.Concurrent.ConcurrentDictionary`2' can contain.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: '*concurrencyLevel* is less than 1.-or-*capacity* is less than 0.'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ConcurrentDictionary(Int32, Int32, IEqualityComparer<TKey>)
  name.vb: ConcurrentDictionary(Int32, Int32, IEqualityComparer(Of TKey))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer<TKey>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary(System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer(Of TKey))
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 260
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the @'System.Collections.Concurrent.ConcurrentDictionary`2' class that is empty, has the specified concurrency level, has the specified initial capacity, and uses the specified @'System.Collections.Generic.IEqualityComparer`1'.
  syntax:
    content: public ConcurrentDictionary(int concurrencyLevel, int capacity, IEqualityComparer<TKey> comparer)
    content.vb: Public Sub New(concurrencyLevel As Integer, capacity As Integer, comparer As IEqualityComparer(Of TKey))
    parameters:
    - id: concurrencyLevel
      type: System.Int32
      description: The estimated number of threads that will update the @'System.Collections.Concurrent.ConcurrentDictionary`2' concurrently.
    - id: capacity
      type: System.Int32
      description: The initial number of elements that the @'System.Collections.Concurrent.ConcurrentDictionary`2' can contain.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: The @'System.Collections.Generic.IEqualityComparer`1' implementation to use when comparing keys.
  exceptions:
  - type: System.ArgumentNullException
    description: '*comparer* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*concurrencyLevel* or *capacity* is less than 1.'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Count
  id: Count
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: Count
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Count
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 916
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets the number of key/value pairs contained in the @'System.Collections.Concurrent.ConcurrentDictionary`2'.
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of key/value pairs contained in the @'System.Collections.Concurrent.ConcurrentDictionary`2'.
  exceptions:
  - type: System.OverflowException
    description: The dictionary already contains the maximum number of elements (@'System.Int32.MaxValue').
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty
  id: IsEmpty
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IsEmpty
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.IsEmpty
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).IsEmpty
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1103
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets a value that indicates whether the @'System.Collections.Concurrent.ConcurrentDictionary`2' is empty.
  syntax:
    content: public bool IsEmpty { get; }
    content.vb: Public ReadOnly Property IsEmpty As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Collections.Concurrent.ConcurrentDictionary`2' is empty; otherwise, false.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)
  id: Item(`0)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: Item[TKey]
  name.vb: Item(TKey)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Item[TKey]
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Item(TKey)
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 886
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets or sets the value associated with the specified key.
  syntax:
    content: public TValue this[TKey key] { get; set; }
    content.vb: Public Property Item(key As TKey) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the value to get or set.
    return:
      type: '{TValue}'
      description: The value of the key/value pair at the specified index.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* is  null.'
  - type: System.Collections.Generic.KeyNotFoundException
    description: The property is retrieved and *key* does not exist in the collection.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Keys
  id: Keys
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: Keys
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Keys
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Keys
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1179
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets a collection containing the keys in the @'System.Collections.Generic.Dictionary`2'.
  syntax:
    content: public ICollection<TKey> Keys { get; }
    content.vb: Public ReadOnly Property Keys As ICollection(Of TKey)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{TKey}}
      description: A collection of keys in the @'System.Collections.Generic.Dictionary`2'.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.IsReadOnly
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1266
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: bool ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly As Boolean Implements ICollection(Of KeyValuePair(Of TKey, TValue)).IsReadOnly
    parameters: []
    return:
      type: System.Boolean
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  id: System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IReadOnlyDictionary<TKey, TValue>.Keys
  name.vb: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Keys
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1190
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: IEnumerable<TKey> IReadOnlyDictionary<TKey, TValue>.Keys { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys As IEnumerable(Of TKey) Implements IReadOnlyDictionary(Of TKey, TValue).Keys
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{TKey}}
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  id: System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IReadOnlyDictionary<TKey, TValue>.Values
  name.vb: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Values
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1213
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: IEnumerable<TValue> IReadOnlyDictionary<TKey, TValue>.Values { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values As IEnumerable(Of TValue) Implements IReadOnlyDictionary(Of TKey, TValue).Values
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{TValue}}
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1571
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets a value indicating whether access to the @'System.Collections.ICollection' is synchronized with the SyncRoot.
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
      description: true if access to the @'System.Collections.ICollection' is synchronized (thread safe); otherwise, false. For @'System.Collections.Concurrent.ConcurrentDictionary`2' this property always returns false.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1581
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets an object that can be used to synchronize access to the @'System.Collections.ICollection'. This property is not supported.
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
      description: Always returns null.
  exceptions:
  - type: System.NotSupportedException
    description: This property is not supported.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize
  id: System#Collections#IDictionary#IsFixedSize
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IDictionary.IsFixedSize
  name.vb: System.Collections.IDictionary.IsFixedSize
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.IsFixedSize
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.IsFixedSize
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1381
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets a value indicating whether the @'System.Collections.Generic.IDictionary`2' has a fixed size.
  syntax:
    content: bool IDictionary.IsFixedSize { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.IsFixedSize As Boolean Implements IDictionary.IsFixedSize
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Collections.Generic.IDictionary`2' has a fixed size; otherwise, false. For @'System.Collections.Concurrent.ConcurrentDictionary`2', this property always returns false.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly
  id: System#Collections#IDictionary#IsReadOnly
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IDictionary.IsReadOnly
  name.vb: System.Collections.IDictionary.IsReadOnly
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.IsReadOnly
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.IsReadOnly
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1394
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets a value indicating whether the @'System.Collections.Generic.IDictionary`2' is read-only.
  syntax:
    content: bool IDictionary.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.IsReadOnly As Boolean Implements IDictionary.IsReadOnly
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Collections.Generic.IDictionary`2' is read-only; otherwise, false. For @'System.Collections.Concurrent.ConcurrentDictionary`2', this property always returns false.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)
  id: System#Collections#IDictionary#Item(System.Object)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IDictionary.Item[Object]
  name.vb: System.Collections.IDictionary.Item(Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Item[System.Object]
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Item(System.Object)
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1457
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets or sets the value associated with the specified key.
  syntax:
    content: object IDictionary.this[object key] { get; set; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Item(key As Object) As Object Implements IDictionary.this
    parameters:
    - id: key
      type: System.Object
      description: The key of the value to get or set.
    return:
      type: System.Object
      description: The value associated with the specified key, or  null if *key* is not in the dictionary or *key* is of a type that is not assignable to the key type of the @'System.Collections.Concurrent.ConcurrentDictionary`2'.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* is  null.'
  - type: System.ArgumentException
    description: A value is being assigned, and *key* is of a type that is not assignable to the key type or the value type of the @'System.Collections.Concurrent.ConcurrentDictionary`2'.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys
  id: System#Collections#IDictionary#Keys
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IDictionary.Keys
  name.vb: System.Collections.IDictionary.Keys
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Keys
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Keys
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1405
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets an @'System.Collections.ICollection' that contains the keys of the  @'System.Collections.Generic.IDictionary`2'.
  syntax:
    content: ICollection IDictionary.Keys { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Keys As ICollection Implements IDictionary.Keys
    parameters: []
    return:
      type: System.Collections.ICollection
      description: An interface that contains the keys of the @'System.Collections.Generic.IDictionary`2'.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values
  id: System#Collections#IDictionary#Values
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IDictionary.Values
  name.vb: System.Collections.IDictionary.Values
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Values
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Values
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1434
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets an @'System.Collections.ICollection' that contains the values in the @'System.Collections.IDictionary'.
  syntax:
    content: ICollection IDictionary.Values { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Values As ICollection Implements IDictionary.Values
    parameters: []
    return:
      type: System.Collections.ICollection
      description: An interface that contains the values in the @'System.Collections.IDictionary'.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Values
  id: Values
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: Values
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Values
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Values
  type: Property
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1202
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets a collection that contains the values in the @'System.Collections.Generic.Dictionary`2'.
  syntax:
    content: public ICollection<TValue> Values { get; }
    content.vb: Public ReadOnly Property Values As ICollection(Of TValue)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{TValue}}
      description: A collection that contains the values in the @'System.Collections.Generic.Dictionary`2'.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})
  id: AddOrUpdate(`0,`1,System.Func{`0,`1,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: AddOrUpdate(TKey, TValue, Func<TKey, TValue, TValue>)
  name.vb: AddOrUpdate(TKey, TValue, Func(Of TKey, TValue, TValue))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, TValue, System.Func<TKey, TValue, TValue>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).AddOrUpdate(TKey, TValue, System.Func(Of TKey, TValue, TValue))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1068
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Adds a key/value pair to the @'System.Collections.Concurrent.ConcurrentDictionary`2' if the key does not already exist, or updates a key/value pair in the @'System.Collections.Concurrent.ConcurrentDictionary`2' by using the specified function if the key already exists.
  syntax:
    content: public TValue AddOrUpdate(TKey key, TValue addValue, Func<TKey, TValue, TValue> updateValueFactory)
    content.vb: Public Function AddOrUpdate(key As TKey, addValue As TValue, updateValueFactory As Func(Of TKey, TValue, TValue)) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to be added or whose value should be updated
    - id: addValue
      type: '{TValue}'
      description: The value to be added for an absent key
    - id: updateValueFactory
      type: System.Func{{TKey},{TValue},{TValue}}
      description: The function used to generate a new value for an existing key based on the key's existing value
    return:
      type: '{TValue}'
      description: The new value for the key. This will be either be addValue (if the key was absent) or the result of updateValueFactory (if the key was present).
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* or *updateValueFactory* is null.'
  - type: System.OverflowException
    description: The dictionary already contains the maximum number of elements (@'System.Int32.MaxValue').
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})
  id: AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: AddOrUpdate(TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>)
  name.vb: AddOrUpdate(TKey, Func(Of TKey, TValue), Func(Of TKey, TValue, TValue))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, System.Func<TKey, TValue>, System.Func<TKey, TValue, TValue>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).AddOrUpdate(TKey, System.Func(Of TKey, TValue), System.Func(Of TKey, TValue, TValue))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1020
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Uses the specified functions to add a key/value pair to the @'System.Collections.Concurrent.ConcurrentDictionary`2' if the key does not already exist, or to update a key/value pair in the @'System.Collections.Concurrent.ConcurrentDictionary`2' if the key already exists.
  syntax:
    content: public TValue AddOrUpdate(TKey key, Func<TKey, TValue> addValueFactory, Func<TKey, TValue, TValue> updateValueFactory)
    content.vb: Public Function AddOrUpdate(key As TKey, addValueFactory As Func(Of TKey, TValue), updateValueFactory As Func(Of TKey, TValue, TValue)) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to be added or whose value should be updated
    - id: addValueFactory
      type: System.Func{{TKey},{TValue}}
      description: The function used to generate a value for an absent key
    - id: updateValueFactory
      type: System.Func{{TKey},{TValue},{TValue}}
      description: The function used to generate a new value for an existing key based on the key's existing value
    return:
      type: '{TValue}'
      description: The new value for the key. This will be either be the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present).
  exceptions:
  - type: System.ArgumentNullException
    description: '*key*, *addValueFactory*, or *updateValueFactory* is null.'
  - type: System.OverflowException
    description: The dictionary already contains the maximum number of elements (@'System.Int32.MaxValue').
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Clear
  id: Clear
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: Clear()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Clear()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 580
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Removes all keys and values from the @'System.Collections.Concurrent.ConcurrentDictionary`2'.
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ContainsKey(TKey)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ContainsKey(TKey)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 331
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Determines whether the @'System.Collections.Concurrent.ConcurrentDictionary`2' contains the specified key.
  syntax:
    content: public bool ContainsKey(TKey key)
    content.vb: Public Function ContainsKey(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to locate in the @'System.Collections.Concurrent.ConcurrentDictionary`2'.
    return:
      type: System.Boolean
      description: true if the @'System.Collections.Concurrent.ConcurrentDictionary`2' contains an element with the specified key; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* is null.'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.GetEnumerator()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 745
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Returns an enumerator that iterates through the @'System.Collections.Concurrent.ConcurrentDictionary`2'.
  syntax:
    content: public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of KeyValuePair(Of TKey, TValue))
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: An enumerator for the @'System.Collections.Concurrent.ConcurrentDictionary`2'.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)
  id: GetOrAdd(`0,`1)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: GetOrAdd(TKey, TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.GetOrAdd(TKey, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).GetOrAdd(TKey, TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 987
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Adds a key/value pair to the @'System.Collections.Concurrent.ConcurrentDictionary`2' if the key does not already exist.
  syntax:
    content: public TValue GetOrAdd(TKey key, TValue value)
    content.vb: Public Function GetOrAdd(key As TKey, value As TValue) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to add.
    - id: value
      type: '{TValue}'
      description: the value to be added, if the key does not already exist
    return:
      type: '{TValue}'
      description: The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* is null.'
  - type: System.OverflowException
    description: The dictionary already contains the maximum number of elements (@'System.Int32.MaxValue').
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})
  id: GetOrAdd(`0,System.Func{`0,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: GetOrAdd(TKey, Func<TKey, TValue>)
  name.vb: GetOrAdd(TKey, Func(Of TKey, TValue))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.GetOrAdd(TKey, System.Func<TKey, TValue>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).GetOrAdd(TKey, System.Func(Of TKey, TValue))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 960
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Adds a key/value pair to the @'System.Collections.Concurrent.ConcurrentDictionary`2' by using the specified function, if the key does not already exist.
  syntax:
    content: public TValue GetOrAdd(TKey key, Func<TKey, TValue> valueFactory)
    content.vb: Public Function GetOrAdd(key As TKey, valueFactory As Func(Of TKey, TValue)) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to add.
    - id: valueFactory
      type: System.Func{{TKey},{TValue}}
      description: The function used to generate a value for the key
    return:
      type: '{TValue}'
      description: The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value for the key as returned by valueFactory if the key was not in the dictionary.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* or *valueFactory* is null.'
  - type: System.OverflowException
    description: The dictionary already contains the maximum number of elements (@'System.Int32.MaxValue').
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue>)
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair(Of TKey, TValue))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1235
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: void ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue> keyValuePair)
    content.vb: Sub System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(keyValuePair As KeyValuePair(Of TKey, TValue)) Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Add
    parameters:
    - id: keyValuePair
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue>)
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair(Of TKey, TValue))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1249
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: bool ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue> keyValuePair)
    content.vb: Function System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(keyValuePair As KeyValuePair(Of TKey, TValue)) As Boolean Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Contains
    parameters:
    - id: keyValuePair
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
    return:
      type: System.Boolean
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[], Int32)
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair(Of TKey, TValue)(), Int32)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[], System.Int32)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair(Of TKey, TValue)(), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 618
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: void ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int index)
    content.vb: Sub System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(array As KeyValuePair(Of TKey, TValue)(), index As Integer) Implements ICollection(Of KeyValuePair(Of TKey, TValue)).CopyTo
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[]
    - id: index
      type: System.Int32
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue>)
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair(Of TKey, TValue))
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1282
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: bool ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue> keyValuePair)
    content.vb: Function System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(keyValuePair As KeyValuePair(Of TKey, TValue)) As Boolean Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Remove
    parameters:
    - id: keyValuePair
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
    return:
      type: System.Boolean
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)
  id: System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IDictionary<TKey, TValue>.Add(TKey, TValue)
  name.vb: System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey, TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey, TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1147
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: void IDictionary<TKey, TValue>.Add(TKey key, TValue value)
    content.vb: Sub System.Collections.Generic.IDictionary<TKey,TValue>.Add(key As TKey, value As TValue) Implements IDictionary(Of TKey, TValue).Add
    parameters:
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TValue}'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)
  id: System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IDictionary<TKey, TValue>.Remove(TKey)
  name.vb: System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Remove(TKey)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1167
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: bool IDictionary<TKey, TValue>.Remove(TKey key)
    content.vb: Function System.Collections.Generic.IDictionary<TKey,TValue>.Remove(key As TKey) As Boolean Implements IDictionary(Of TKey, TValue).Remove
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: System.Boolean
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ICollection.CopyTo(Array, Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1504
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Copies the elements of the @'System.Collections.ICollection' to an array, starting at the specified array index.
  syntax:
    content: void ICollection.CopyTo(Array array, int index)
    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional array that is the destination of the elements copied from the @'System.Collections.ICollection'. The array must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in *array* at which copying begins.
  exceptions:
  - type: System.ArgumentNullException
    description: '*array* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*index* is less than 0.'
  - type: System.ArgumentException
    description: '*index* is equal to or greater than the length of the *array*. -or-The number of elements in the source @''System.Collections.ICollection'' is greater than the available space from *index* to the end of the destination *array*.'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
  id: System#Collections#IDictionary#Add(System.Object,System.Object)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IDictionary.Add(Object, Object)
  name.vb: System.Collections.IDictionary.Add(Object, Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Add(System.Object, System.Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Add(System.Object, System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1329
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Adds the specified key and value to the dictionary.
  syntax:
    content: void IDictionary.Add(object key, object value)
    content.vb: Sub System.Collections.IDictionary.Add(key As Object, value As Object) Implements IDictionary.Add
    parameters:
    - id: key
      type: System.Object
      description: The object to use as the key.
    - id: value
      type: System.Object
      description: The object to use as the value.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* is null.'
  - type: System.ArgumentException
    description: '*key* is of a type that is not assignable to the key type  of the @''System.Collections.Generic.Dictionary`2''. -or- *value* is of a type that is not assignable to the type of values in the @''System.Collections.Generic.Dictionary`2''. -or-A value with the same key already exists in the @''System.Collections.Generic.Dictionary`2''.'
  - type: System.OverflowException
    description: The dictionary already contains the maximum number of elements (@'System.Int32.MaxValue').
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)
  id: System#Collections#IDictionary#Contains(System.Object)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IDictionary.Contains(Object)
  name.vb: System.Collections.IDictionary.Contains(Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Contains(System.Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Contains(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1357
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets whether the @'System.Collections.Generic.IDictionary`2' contains an element with the specified key.
  syntax:
    content: bool IDictionary.Contains(object key)
    content.vb: Function System.Collections.IDictionary.Contains(key As Object) As Boolean Implements IDictionary.Contains
    parameters:
    - id: key
      type: System.Object
      description: The key to locate in the @'System.Collections.Generic.IDictionary`2'.
    return:
      type: System.Boolean
      description: true if the @'System.Collections.Generic.IDictionary`2' contains an element with the specified key; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* is null.'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator
  id: System#Collections#IDictionary#GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IDictionary.GetEnumerator()
  name.vb: System.Collections.IDictionary.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.GetEnumerator()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1368
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Provides a @'System.Collections.IDictionaryEnumerator' for the @'System.Collections.Generic.IDictionary`2'.
  syntax:
    content: IDictionaryEnumerator IDictionary.GetEnumerator()
    content.vb: Function System.Collections.IDictionary.GetEnumerator As IDictionaryEnumerator Implements IDictionary.GetEnumerator
    return:
      type: System.Collections.IDictionaryEnumerator
      description: A @'System.Collections.IDictionaryEnumerator' for the @'System.Collections.Generic.IDictionary`2'.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)
  id: System#Collections#IDictionary#Remove(System.Object)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IDictionary.Remove(Object)
  name.vb: System.Collections.IDictionary.Remove(Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Remove(System.Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Remove(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1417
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Removes the element with the specified key from the @'System.Collections.IDictionary'.
  syntax:
    content: void IDictionary.Remove(object key)
    content.vb: Sub System.Collections.IDictionary.Remove(key As Object) Implements IDictionary.Remove
    parameters:
    - id: key
      type: System.Object
      description: The key of the element to remove.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* is null.'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1303
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Returns an enumerator that iterates through the @'System.Collections.Concurrent.ConcurrentDictionary`2'.
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: An enumerator for the @'System.Collections.Concurrent.ConcurrentDictionary`2'.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray
  id: ToArray
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: ToArray()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ToArray()
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ToArray()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 655
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Copies the key and value pairs stored in the @'System.Collections.Concurrent.ConcurrentDictionary`2' to a new array.
  syntax:
    content: public KeyValuePair<TKey, TValue>[] ToArray()
    content.vb: Public Function ToArray As KeyValuePair(Of TKey, TValue)()
    return:
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[]
      description: A new array containing a snapshot of key and value pairs copied from the @'System.Collections.Concurrent.ConcurrentDictionary`2'.
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)
  id: TryAdd(`0,`1)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: TryAdd(TKey, TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryAdd(TKey, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).TryAdd(TKey, TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 314
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Attempts to add the specified key and value to the @'System.Collections.Concurrent.ConcurrentDictionary`2'.
  syntax:
    content: public bool TryAdd(TKey key, TValue value)
    content.vb: Public Function TryAdd(key As TKey, value As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to add.
    - id: value
      type: '{TValue}'
      description: The value of the element to add. The value can be  null for reference types.
    return:
      type: System.Boolean
      description: true if the key/value pair was added to the @'System.Collections.Concurrent.ConcurrentDictionary`2' successfully; false if the key already exists.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* is  null.'
  - type: System.OverflowException
    description: The dictionary already contains the maximum number of elements (@'System.Int32.MaxValue').
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: TryGetValue(TKey, out TValue)
  name.vb: TryGetValue(TKey, ByRef TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 440
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Attempts to get the value associated with the specified key from the @'System.Collections.Concurrent.ConcurrentDictionary`2'.
  syntax:
    content: public bool TryGetValue(TKey key, out TValue value)
    content.vb: Public Function TryGetValue(key As TKey, ByRef value As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the value to get.
    - id: value
      type: '{TValue}'
      description: When this method returns, contains the object from the @'System.Collections.Concurrent.ConcurrentDictionary`2' that has the specified key, or the default value of the type if the operation failed.
    return:
      type: System.Boolean
      description: true if the key was found in the @'System.Collections.Concurrent.ConcurrentDictionary`2'; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* is  null.'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)
  id: TryRemove(`0,`1@)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: TryRemove(TKey, out TValue)
  name.vb: TryRemove(TKey, ByRef TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryRemove(TKey, out TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).TryRemove(TKey, ByRef TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 351
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Attempts to remove and return the value that has the specified key from the @'System.Collections.Concurrent.ConcurrentDictionary`2'.
  syntax:
    content: public bool TryRemove(TKey key, out TValue value)
    content.vb: Public Function TryRemove(key As TKey, ByRef value As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to remove and return.
    - id: value
      type: '{TValue}'
      description: When this method returns, contains the object removed from the @'System.Collections.Concurrent.ConcurrentDictionary`2', or the default value of  the TValue type if *key* does not exist.
    return:
      type: System.Boolean
      description: true if the object was removed successfully; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* is  null.'
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)
  id: TryUpdate(`0,`1,`1)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  href: System.Collections.Concurrent.ConcurrentDictionary`2.yml
  name: TryUpdate(TKey, TValue, TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryUpdate(TKey, TValue, TValue)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).TryUpdate(TKey, TValue, TValue)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 489
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Compares the existing value for the specified key with a specified value, and if they are equal, updates the key with a third value.
  syntax:
    content: public bool TryUpdate(TKey key, TValue newValue, TValue comparisonValue)
    content.vb: Public Function TryUpdate(key As TKey, newValue As TValue, comparisonValue As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: The key whose value is compared with *comparisonValue* and possibly replaced.
    - id: newValue
      type: '{TValue}'
      description: The value that replaces the value of the element that has the specified *key* if the comparison results in equality.
    - id: comparisonValue
      type: '{TValue}'
      description: The value that is compared to the value of the element that has the specified *key*.
    return:
      type: System.Boolean
      description: true if the value with *key* was equal to *comparisonValue* and was replaced with *newValue*; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: '*key* is null.'
references:
- uid: System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: System.Collections.Generic.IEnumerable`1.yml
  name: IEnumerable<KeyValuePair<TKey, TValue>>
  name.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue))
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    href: System.Collections.Generic.KeyValuePair`2.yml
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    href: System.Collections.Generic.KeyValuePair`2.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.IEnumerable`1.yml
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TKey>
  name.vb: IEqualityComparer(Of TKey)
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.IEqualityComparer`1.yml
  name: IEqualityComparer<T>
  name.vb: IEqualityComparer(Of T)
  fullName: System.Collections.Generic.IEqualityComparer<T>
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    href: System.Collections.Generic.IEqualityComparer`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    href: System.Collections.Generic.IEqualityComparer`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  href: System.Int32.yml
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  href: System.Boolean.yml
  name: Boolean
  fullName: System.Boolean
- uid: '{TKey}'
  isExternal: false
  name: TKey
  fullName: TKey
- uid: '{TValue}'
  isExternal: false
  name: TValue
  fullName: TValue
- uid: System.Collections.Generic.ICollection{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: System.Collections.Generic.ICollection`1.yml
  name: ICollection<TKey>
  name.vb: ICollection(Of TKey)
  fullName: System.Collections.Generic.ICollection<TKey>
  fullName.vb: System.Collections.Generic.ICollection(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    href: System.Collections.Generic.ICollection`1.yml
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    href: System.Collections.Generic.ICollection`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.ICollection`1.yml
  name: ICollection<T>
  name.vb: ICollection(Of T)
  fullName: System.Collections.Generic.ICollection<T>
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    href: System.Collections.Generic.ICollection`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    href: System.Collections.Generic.ICollection`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: System.Collections.Generic.IEnumerable`1.yml
  name: IEnumerable<TKey>
  name.vb: IEnumerable(Of TKey)
  fullName: System.Collections.Generic.IEnumerable<TKey>
  fullName.vb: System.Collections.Generic.IEnumerable(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TValue}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: System.Collections.Generic.IEnumerable`1.yml
  name: IEnumerable<TValue>
  name.vb: IEnumerable(Of TValue)
  fullName: System.Collections.Generic.IEnumerable<TValue>
  fullName.vb: System.Collections.Generic.IEnumerable(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: <
    fullName: <
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  href: System.Collections.ICollection.yml
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.ICollection{{TValue}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: System.Collections.Generic.ICollection`1.yml
  name: ICollection<TValue>
  name.vb: ICollection(Of TValue)
  fullName: System.Collections.Generic.ICollection<TValue>
  fullName.vb: System.Collections.Generic.ICollection(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    href: System.Collections.Generic.ICollection`1.yml
  - name: <
    fullName: <
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    href: System.Collections.Generic.ICollection`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Func{{TKey},{TValue},{TValue}}
  parent: System
  definition: System.Func`3
  name: Func<TKey, TValue, TValue>
  name.vb: Func(Of TKey, TValue, TValue)
  fullName: System.Func<TKey, TValue, TValue>
  fullName.vb: System.Func(Of TKey, TValue, TValue)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Func`3
  parent: System
  isExternal: false
  href: System.Func`3.yml
  name: Func<T1, T2, TResult>
  name.vb: Func(Of T1, T2, TResult)
  fullName: System.Func<T1, T2, TResult>
  fullName.vb: System.Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    href: System.Func`3.yml
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    href: System.Func`3.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TKey},{TValue}}
  parent: System
  definition: System.Func`2
  name: Func<TKey, TValue>
  name.vb: Func(Of TKey, TValue)
  fullName: System.Func<TKey, TValue>
  fullName.vb: System.Func(Of TKey, TValue)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Func`2
  parent: System
  isExternal: false
  href: System.Func`2.yml
  name: Func<T, TResult>
  name.vb: Func(Of T, TResult)
  fullName: System.Func<T, TResult>
  fullName.vb: System.Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    href: System.Func`2.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValuePair<TKey, TValue>>
  name.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue))
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.IEnumerator`1.yml
  name: IEnumerator<T>
  name.vb: IEnumerator(Of T)
  fullName: System.Collections.Generic.IEnumerator<T>
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    href: System.Collections.Generic.IEnumerator`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    href: System.Collections.Generic.IEnumerator`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<TKey, TValue>
  name.vb: KeyValuePair(Of TKey, TValue)
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.KeyValuePair`2.yml
  name: KeyValuePair<TKey, TValue>
  name.vb: KeyValuePair(Of TKey, TValue)
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    href: System.Collections.Generic.KeyValuePair`2.yml
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    href: System.Collections.Generic.KeyValuePair`2.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[]
  isExternal: true
  name: KeyValuePair<TKey, TValue>[]
  name.vb: KeyValuePair(Of TKey, TValue)()
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>[]
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: ()
    fullName: ()
- uid: System.Array
  parent: System
  isExternal: false
  href: System.Array.yml
  name: Array
  fullName: System.Array
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: false
  href: System.Collections.IDictionaryEnumerator.yml
  name: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  href: System.Collections.IEnumerator.yml
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ArgumentNullException
  isExternal: false
  href: System.ArgumentNullException.yml
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  summary: The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
- uid: System.ArgumentException
  parent: System
  isExternal: false
  href: System.ArgumentException.yml
  name: ArgumentException
  fullName: System.ArgumentException
  summary: The exception that is thrown when one of the arguments provided to a method is not valid.
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  href: System.ArgumentOutOfRangeException.yml
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  summary: The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
- uid: System.OverflowException
  isExternal: false
  href: System.OverflowException.yml
  name: OverflowException
  fullName: System.OverflowException
  summary: The exception that is thrown when an arithmetic, casting, or conversion operation in a checked context results in an overflow.
- uid: System.Collections.Generic.KeyNotFoundException
  isExternal: false
  href: System.Collections.Generic.KeyNotFoundException.yml
  name: KeyNotFoundException
  fullName: System.Collections.Generic.KeyNotFoundException
  summary: The exception that is thrown when the key specified for accessing an element in a collection does not match any key in the collection.
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  href: System.NotSupportedException.yml
  name: NotSupportedException
  fullName: System.NotSupportedException
  summary: The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality.
