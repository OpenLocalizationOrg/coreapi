items:
- uid: System.IObservable`1
  commentId: T:System.IObservable`1
  id: IObservable`1
  parent: System
  children:
  - System.IObservable`1.Subscribe(System.IObserver{`0})
  langs:
  - csharp
  - vb
  name: IObservable<T>
  fullName: System.IObservable<T>
  type: Interface
  source:
    remote:
      path: src/mscorlib/src/System/IObservable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IObservable
    path: src/mscorlib/src/System/IObservable.cs
    startLine: 18
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines a provider for push-based notification.</p>\n"
  example:
  - "\n<p>The following example illustrates the observer design pattern. It defines a <code>Location</code> class that contains latitude and longitude information.</p>System.IObserver.Class#5<p>The <code>LocationTracker</code> class provides the <xref href=\"System.IObservable`1\" data-throw-if-not-resolved=\"false\"></xref> implementation. Its <code>TrackLocation</code> method is passed a nullable <code>Location</code> object that contains the latitude and longitude data. If the <code>Location</code> value is not <strong>null</strong>, the <code>TrackLocation</code> method calls the <xref href=\"System.IObserver`1.OnNext(`0)\" data-throw-if-not-resolved=\"false\"></xref> method of each observer.</p>System.IObserver.Class#6<p>If the <code>Location</code> value is <strong>null</strong>, the <code>TrackLocation</code> method instantiates a <code>LocationUnknownException</code> object, which is shown in the following example. It then calls each observer's <xref href=\"System.IObserver`1.OnError(System.Exception)\" data-throw-if-not-resolved=\"false\"></xref> method and passes it the <code>LocationUnknownException</code> object. Note that <code>LocationUnknownException</code> derives from <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref>, but does not add any new members.</p>System.IObserver.Class#7<p>Observers register to receive notifications from a <code>TrackLocation</code> object by calling its <xref href=\"System.IObservable`1.Subscribe(System.IObserver{`0})\" data-throw-if-not-resolved=\"false\"></xref> method, which assigns a reference to the observer object to a private generic <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> object. The method returns an <code>Unsubscriber</code> object, which is an <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> implementation that enables observers to stop receiving notifications. The <code>LocationTracker</code> class also includes an <code>EndTransmission</code> method. When no further location data is available, the method calls each observer's <xref href=\"System.IObserver`1.OnCompleted\" data-throw-if-not-resolved=\"false\"></xref> method and then clears the internal list of observers.</p><p>In this example, the <code>LocationReporter</code> class provides the <xref href=\"System.IObserver`1\" data-throw-if-not-resolved=\"false\"></xref> implementation. It displays information about the current location to the console. Its constructor includes a <em>name</em> parameter, which enables the <code>LocationReporter</code> instance to identify itself in its string output. It also includes a <code>Subscribe</code> method, which wraps a call to the provider's <xref href=\"System.IObservable`1.Subscribe(System.IObserver{`0})\" data-throw-if-not-resolved=\"false\"></xref> method. This allows the method to assign the returned <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> reference to a private variable. The <code>LocationReporter</code> class also includes an <code>Unsubscribe</code> method, which calls the <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method of the object that is returned by the <xref href=\"System.IObservable`1.Subscribe(System.IObserver{`0})\" data-throw-if-not-resolved=\"false\"></xref> method. The following code defines the <code>LocationReporter</code> class. </p>System.IObserver.Class#8<p>The following code then instantiates the provider and the observer.</p>System.IObserver.Class#9"
  syntax:
    content: public interface IObservable<out T>
    content.vb: Public Interface IObservable(Of Out T)
    typeParameters:
    - id: T
      description: "\n<p>The object that provides notification information.</p>\n"
  seealso:
  - type: System.IObserver`1
    commentId: T:System.IObserver`1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: System.IObservable(Of T)
  name.vb: IObservable(Of T)
  nameWithType: IObservable<T>
  nameWithType.vb: IObservable(Of T)
- uid: System.IObservable`1.Subscribe(System.IObserver{`0})
  commentId: M:System.IObservable`1.Subscribe(System.IObserver{`0})
  id: Subscribe(System.IObserver{`0})
  parent: System.IObservable`1
  langs:
  - csharp
  - vb
  name: Subscribe(IObserver<T>)
  fullName: System.IObservable<T>.Subscribe(System.IObserver<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IObservable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Subscribe
    path: src/mscorlib/src/System/IObservable.cs
    startLine: 20
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Notifies the provider that an observer is to receive notifications.</p>\n"
  example:
  - "\n<p>The following example illustrates the <xref href=\"System.IObservable`1.Subscribe(System.IObserver{`0})\" data-throw-if-not-resolved=\"false\"></xref> method for an application that reports latitude and longitude information. It defines an <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref> collection object that stores references to all observers. It also returns a private class named <code>Unsubscriber</code> that implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface and enables subscribers to stop receiving event notifications.  See the Example section of the <xref href=\"System.IObservable`1\" data-throw-if-not-resolved=\"false\"></xref> topic for the complete example.</p>System.IObserver.Class#13"
  syntax:
    content: IDisposable Subscribe(IObserver<T> observer)
    content.vb: Function Subscribe(observer As IObserver(Of T)) As IDisposable
    parameters:
    - id: observer
      type: System.IObserver{{T}}
      description: "\n<p>The object that is to receive notifications.</p>\n"
    return:
      type: System.IDisposable
      description: "\n<p>A reference to an interface that allows observers to stop receiving notifications before the provider has finished sending them.</p>\n"
  seealso:
  - type: System.IObserver`1
    commentId: T:System.IObserver`1
  fullName.vb: System.IObservable(Of T).Subscribe(System.IObserver(Of T))
  name.vb: Subscribe(IObserver(Of T))
  nameWithType: IObservable<T>.Subscribe(IObserver<T>)
  nameWithType.vb: IObservable(Of T).Subscribe(IObserver(Of T))
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.IObserver{{T}}
  parent: System
  definition: System.IObserver`1
  name: IObserver<T>
  fullName: System.IObserver<T>
  fullname.vb: System.IObserver(Of T)
  name.vb: IObserver(Of T)
  spec.csharp:
  - uid: System.IObserver`1
    name: IObserver
    fullName: System.IObserver
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObserver`1
    name: IObserver
    fullName: System.IObserver
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IObserver<T>
  nameWithType.vb: IObserver(Of T)
  commentId: T:System.IObserver{`0}
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
  nameWithType: IDisposable
  commentId: T:System.IDisposable
- uid: System.IObserver`1
  isExternal: false
  name: IObserver<T>
  fullName: System.IObserver<T>
  fullname.vb: System.IObserver(Of T)
  name.vb: IObserver(Of T)
  spec.csharp:
  - uid: System.IObserver`1
    name: IObserver
    fullName: System.IObserver
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IObserver`1
    name: IObserver
    fullName: System.IObserver
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IObserver<T>
  nameWithType.vb: IObserver(Of T)
  commentId: T:System.IObserver`1
