items:
- uid: System.Net.Security.AuthenticatedStream
  commentId: T:System.Net.Security.AuthenticatedStream
  id: AuthenticatedStream
  parent: System.Net.Security
  children:
  - System.Net.Security.AuthenticatedStream.#ctor(System.IO.Stream,System.Boolean)
  - System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)
  - System.Net.Security.AuthenticatedStream.InnerStream
  - System.Net.Security.AuthenticatedStream.IsAuthenticated
  - System.Net.Security.AuthenticatedStream.IsEncrypted
  - System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated
  - System.Net.Security.AuthenticatedStream.IsServer
  - System.Net.Security.AuthenticatedStream.IsSigned
  - System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
  langs:
  - csharp
  - vb
  name: AuthenticatedStream
  fullName: System.Net.Security.AuthenticatedStream
  type: Class
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/AuthenticatedStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuthenticatedStream
    path: src/System.Net.Security/src/System/Net/SecureProtocols/AuthenticatedStream.cs
    startLine: 9
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: "\n<p>Provides methods for passing credentials across a stream and requesting or performing authentication for client-server applications.</p>\n"
  remarks: "\n<p>This abstract class provides methods and properties that are common to authenticated streams. </p>\n<p>Authenticated streams can provide authentication, data signing, and encryption services that can help maintain the integrity and confidentiality of data transmitted using the <xref href=\"System.Net.Security.AuthenticatedStream.InnerStream\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>The security protocol implemented by a class that derives from <xref href=\"System.Net.Security.AuthenticatedStream\" data-throw-if-not-resolved=\"false\"></xref> together with the security protocols supported on the client and server will determine the security features that are available to an application. The <xref href=\"System.Net.Security.NegotiateStream\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.Security.SslStream\" data-throw-if-not-resolved=\"false\"></xref> classes inherit from <xref href=\"System.Net.Security.AuthenticatedStream\" data-throw-if-not-resolved=\"false\"></xref> and implement the Negotiate and Secure Sockets Layer security protocols, respectively.</p>\n"
  example:
  - "\n<p>The following code example demonstrates displaying the properties of an authenticated stream.</p>NclNegoAsyncClient#6"
  syntax:
    content: 'public abstract class AuthenticatedStream : IO.Stream'
    content.vb: >-
      Public MustInherit Class AuthenticatedStream
          Inherits IO.Stream
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Net.Security.AuthenticatedStream.#ctor(System.IO.Stream,System.Boolean)
  commentId: M:System.Net.Security.AuthenticatedStream.#ctor(System.IO.Stream,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Boolean)'
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  - vb
  name: AuthenticatedStream(IO.Stream, Boolean)
  fullName: System.Net.Security.AuthenticatedStream.AuthenticatedStream(System.IO.Stream, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Security/ref/System.Net.Security.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Security/ref/System.Net.Security.cs
    startLine: 12
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.Security.AuthenticatedStream\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  remarks: "\n<p>When you specify <strong>true</strong> for the <em>leaveStreamOpen</em> parameter, closing the <xref href=\"System.Net.Security.AuthenticatedStream\" data-throw-if-not-resolved=\"false\"></xref> has no effect on the <em>innerStream</em> stream.</p>\n<p>This constructor is provided for implementers of authenticated streams, and can be called only by classes that are derived from <xref href=\"System.Net.Security.AuthenticatedStream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: protected AuthenticatedStream(IO.Stream innerStream, bool leaveInnerStreamOpen)
    content.vb: Protected Sub New(innerStream As IO.Stream, leaveInnerStreamOpen As Boolean)
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "\n<p>A <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object used by the <xref href=\"System.Net.Security.AuthenticatedStream\" data-throw-if-not-resolved=\"false\"></xref>  for sending and receiving data.</p>\n"
    - id: leaveInnerStreamOpen
      type: System.Boolean
      description: "\n<p>A <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> that indicates whether closing this <xref href=\"System.Net.Security.AuthenticatedStream\" data-throw-if-not-resolved=\"false\"></xref>  object also closes <em>innerStream</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>innerStream</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>innerStream</em> is equal to <xref href=\"System.IO.Stream.Null\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Net.Security.AuthenticatedStream.IsAuthenticated
  commentId: P:System.Net.Security.AuthenticatedStream.IsAuthenticated
  id: IsAuthenticated
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  - vb
  name: IsAuthenticated
  fullName: System.Net.Security.AuthenticatedStream.IsAuthenticated
  type: Property
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/AuthenticatedStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAuthenticated
    path: src/System.Net.Security/src/System/Net/SecureProtocols/AuthenticatedStream.cs
    startLine: 75
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: "\n<p>Gets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether authentication was successful.</p>\n"
  remarks: "\n<p>The methods called to perform authentication are defined in the classes that inherit from <xref href=\"System.Net.Security.AuthenticatedStream\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  example:
  - "\n<p>The following code example demonstrates displaying the value of this property.</p>NclNegoAsyncClient#6"
  syntax:
    content: public abstract bool IsAuthenticated { get; }
    content.vb: Public MustOverride ReadOnly Property IsAuthenticated As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if successful authentication occurred; otherwise, <strong>false</strong>. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.Security.AuthenticatedStream.IsEncrypted
  commentId: P:System.Net.Security.AuthenticatedStream.IsEncrypted
  id: IsEncrypted
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  - vb
  name: IsEncrypted
  fullName: System.Net.Security.AuthenticatedStream.IsEncrypted
  type: Property
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/AuthenticatedStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsEncrypted
    path: src/System.Net.Security/src/System/Net/SecureProtocols/AuthenticatedStream.cs
    startLine: 77
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: "\n<p>Gets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether data sent using this <xref href=\"System.Net.Security.AuthenticatedStream\" data-throw-if-not-resolved=\"false\"></xref> is encrypted.</p>\n"
  remarks: "\n<p>Encryption helps to protect the privacy of the data; namely, it helps to ensure that while data is in transit, it cannot be deciphered by third parties.</p>\n"
  example:
  - "\n<p>The following code example demonstrates displaying the value of this property.</p>NclNegoAsyncClient#6"
  syntax:
    content: public abstract bool IsEncrypted { get; }
    content.vb: Public MustOverride ReadOnly Property IsEncrypted As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated
  commentId: P:System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated
  id: IsMutuallyAuthenticated
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  - vb
  name: IsMutuallyAuthenticated
  fullName: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated
  type: Property
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/AuthenticatedStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsMutuallyAuthenticated
    path: src/System.Net.Security/src/System/Net/SecureProtocols/AuthenticatedStream.cs
    startLine: 76
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: "\n<p>Gets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether both server and client have been authenticated.</p>\n"
  remarks: "\n<p>Not all security protocols support mutual authentication. To determine whether mutual authentication is supported by the security protocol implemented in a class that inherits from <xref href=\"System.Net.Security.AuthenticatedStream\" data-throw-if-not-resolved=\"false\"></xref>, check the class documentation.</p>\n"
  example:
  - "\n<p>The following code example demonstrates displaying the value of this property.</p>NclNegoAsyncClient#6"
  syntax:
    content: public abstract bool IsMutuallyAuthenticated { get; }
    content.vb: Public MustOverride ReadOnly Property IsMutuallyAuthenticated As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the client and server have been authenticated; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.Security.AuthenticatedStream.IsServer
  commentId: P:System.Net.Security.AuthenticatedStream.IsServer
  id: IsServer
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  - vb
  name: IsServer
  fullName: System.Net.Security.AuthenticatedStream.IsServer
  type: Property
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/AuthenticatedStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsServer
    path: src/System.Net.Security/src/System/Net/SecureProtocols/AuthenticatedStream.cs
    startLine: 79
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: "\n<p>Gets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the local side of the connection was authenticated as the server.</p>\n"
  remarks: "\n<p>Most security protocols used for client-server authentication define specific behavior and requirements for supplying credentials for authentication based on whether you are the client or the server. </p>\n"
  example:
  - "\n<p>The following code example demonstrates displaying the value of this property.</p>NclNegoAsyncClient#6"
  syntax:
    content: public abstract bool IsServer { get; }
    content.vb: Public MustOverride ReadOnly Property IsServer As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the local endpoint was authenticated as the server side of a client-server authenticated connection; <strong>false</strong> if the local endpoint was authenticated as the client.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.Security.AuthenticatedStream.IsSigned
  commentId: P:System.Net.Security.AuthenticatedStream.IsSigned
  id: IsSigned
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  - vb
  name: IsSigned
  fullName: System.Net.Security.AuthenticatedStream.IsSigned
  type: Property
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/AuthenticatedStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSigned
    path: src/System.Net.Security/src/System/Net/SecureProtocols/AuthenticatedStream.cs
    startLine: 78
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: "\n<p>Gets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the data sent using this stream is signed.</p>\n"
  remarks: "\n<p>Data signing helps to protect the integrity of the data; namely, it helps the recipient determine whether the data has been tampered with while in transit. </p>\n"
  example:
  - "\n<p>The following code example demonstrates displaying the value of this property.</p>NclNegoAsyncClient#6"
  syntax:
    content: public abstract bool IsSigned { get; }
    content.vb: Public MustOverride ReadOnly Property IsSigned As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the data is signed before being transmitted; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
  commentId: P:System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
  id: LeaveInnerStreamOpen
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  - vb
  name: LeaveInnerStreamOpen
  fullName: System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
  type: Property
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/AuthenticatedStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LeaveInnerStreamOpen
    path: src/System.Net.Security/src/System/Net/SecureProtocols/AuthenticatedStream.cs
    startLine: 30
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: "\n<p>Gets whether the stream used by this <xref href=\"System.Net.Security.AuthenticatedStream\" data-throw-if-not-resolved=\"false\"></xref> for sending and receiving data has been left open.</p>\n"
  remarks: "\n<p>When set to <strong>true</strong>, the stream passed to the constructor of this class will not be closed after the instance of this class is closed. When set to <strong>false</strong>, closing the instance of this class will also close the underlined transport stream. The default value of this property is <strong>false</strong>.</p>\n"
  syntax:
    content: public bool LeaveInnerStreamOpen { get; }
    content.vb: Public ReadOnly Property LeaveInnerStreamOpen As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the inner stream has been left open; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Security.AuthenticatedStream.InnerStream
  commentId: P:System.Net.Security.AuthenticatedStream.InnerStream
  id: InnerStream
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  - vb
  name: InnerStream
  fullName: System.Net.Security.AuthenticatedStream.InnerStream
  type: Property
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/AuthenticatedStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InnerStream
    path: src/System.Net.Security/src/System/Net/SecureProtocols/AuthenticatedStream.cs
    startLine: 38
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: "\n<p>Gets the stream used by this <xref href=\"System.Net.Security.AuthenticatedStream\" data-throw-if-not-resolved=\"false\"></xref> for sending and receiving data.</p>\n"
  remarks: "\n<p>Classes that inherit from <xref href=\"System.Net.Security.AuthenticatedStream\" data-throw-if-not-resolved=\"false\"></xref> can use this property to access the stream passed to the <xref href=\"System.Net.Security.AuthenticatedStream.#ctor(System.IO.Stream,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: protected IO.Stream InnerStream { get; }
    content.vb: Protected ReadOnly Property InnerStream As IO.Stream
    parameters: []
    return:
      type: System.IO.Stream
      description: "\n<p>A <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)
  commentId: M:System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/AuthenticatedStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Net.Security/src/System/Net/SecureProtocols/AuthenticatedStream.cs
    startLine: 46
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Net.Security.AuthenticatedStream\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources. </p>\n"
  remarks: "\n<p>This method is called by the public <strong>Dispose()</strong><strong></strong>method and the <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> method. <strong>Dispose()</strong> invokes the protected <strong>Dispose(Boolean)</strong> method with the <em>disposing</em> parameter set to <strong>true</strong>. <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> invokes <strong>Dispose</strong> with <em>disposing</em> set to <strong>false</strong>.</p>\n<p>When the <em>disposing</em> parameter is true, this method releases all resources held by any managed objects that this <xref href=\"System.Net.Security.AuthenticatedStream\" data-throw-if-not-resolved=\"false\"></xref> references. This method invokes the <strong>Dispose()</strong> method of each referenced object.</p>\n"
  example:
  - "\n<p></p>\n"
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\n"
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: System.Net.Security
  isExternal: false
  name: System.Net.Security
  fullName: System.Net.Security
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: IO.Stream
  fullName: System.IO.Stream
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
