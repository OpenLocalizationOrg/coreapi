items:
- uid: System.Lazy`1
  commentId: T:System.Lazy`1
  id: Lazy`1
  parent: System
  children:
  - System.Lazy`1.#ctor
  - System.Lazy`1.#ctor(System.Boolean)
  - System.Lazy`1.#ctor(System.Func{`0})
  - System.Lazy`1.#ctor(System.Func{`0},System.Boolean)
  - System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)
  - System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)
  - System.Lazy`1.IsValueCreated
  - System.Lazy`1.ToString
  - System.Lazy`1.Value
  langs:
  - csharp
  - vb
  name: Lazy<T>
  fullName: System.Lazy<T>
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Lazy.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Lazy
    path: src/mscorlib/src/System/Lazy.cs
    startLine: 48
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Provides support for lazy initialization.</p>\n"
  remarks: "\n<p>Use lazy initialization to defer the creation of a large or resource-intensive object, or the execution of a resource-intensive task, particularly when such creation or execution might not occur during the lifetime of the program.</p>\n<p>To prepare for lazy initialization, you create an instance of <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref>. The type argument of the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> object that you create specifies the type of the object that you want to initialize lazily. The constructor that you use to create the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> object determines the characteristics of the initialization. Lazy initialization occurs the first time the <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property is accessed.</p>\n<p>In most cases, choosing a constructor depends on your answers to two questions: </p>\n<ul><li>\n<p>Will the lazily initialized object be accessed from more than one thread? If so, the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> object might create it on any thread. You can use one of the simple constructors whose default behavior is to create a thread-safe <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> object, so that only one instance of the lazily instantiated object is created no matter how many threads try to access it. To create a <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> object that is not thread safe, you must use a constructor that enables you to specify no thread safety. </p>\n<p>Making the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> object thread safe does not protect the lazily initialized object. If multiple threads can access the lazily initialized object, you must make its properties and methods safe for multithreaded access. </p>\n</li><li>\n<p>Does lazy initialization require a lot of code, or does the lazily initialized object have a default constructor that does everything you need and doesn't throw exceptions? If you need to write initialization code or if exceptions need to be handled, use one of the constructors that takes a factory method. Write your initialization code in the factory method. </p>\n</li></ul>\n<p>The following table shows which constructor to choose, based on these two factors: </p>\n<p>Object will be accessed by </p>\n<p>If no initialization code is required (default constructor), use </p>\n<p>If initialization code is required, use </p>\n<p>You can use a lambda expression to specify the factory method. This keeps all the initialization code in one place. The lambda expression captures the context, including any arguments you pass to the lazily initialized object's constructor. </p>\n<p>Exception caching  When you use factory methods, exceptions are cached. That is, if the factory method throws an exception the first time a thread tries to access the <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> object, the same exception is thrown on every subsequent attempt. This ensures that every call to the <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property produces the same result and avoids subtle errors that might arise if different threads get different results. The <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> stands in for an actual <strong>T</strong> that otherwise would have been initialized at some earlier point, usually during startup. A failure at that earlier point is usually fatal. If there is a potential for a recoverable failure, we recommend that you build the retry logic into the initialization routine (in this case, the factory method), just as you would if you weren’t using lazy initialization.</p>\n<p>Alternative to locking  In certain situations, you might want to avoid the overhead of the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> object's default locking behavior. In rare situations, there might be a potential for deadlocks. In such cases, you can use the <xref href=\"System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)\" data-throw-if-not-resolved=\"false\"></xref> constructor, and specify <xref href=\"System.Threading.LazyThreadSafetyMode.PublicationOnly\" data-throw-if-not-resolved=\"false\"></xref>. This enables the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> object to create a copy of the lazily initialized object on each of several threads if the threads call the <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property simultaneously. The <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> object ensures that all threads use the same instance of the lazily initialized object and discards the instances that are not used. Thus, the cost of reducing the locking overhead is that your program might sometimes create and discard extra copies of an expensive object. In most cases, this is unlikely. The examples for the <xref href=\"System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)\" data-throw-if-not-resolved=\"false\"></xref> constructors demonstrate this behavior. </p>\n<p>When you specify <xref href=\"System.Threading.LazyThreadSafetyMode.PublicationOnly\" data-throw-if-not-resolved=\"false\"></xref>, exceptions are never cached, even if you specify a factory method. </p>\n<p>Equivalent constructors  In addition to enabling the use of <xref href=\"System.Threading.LazyThreadSafetyMode.PublicationOnly\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)\" data-throw-if-not-resolved=\"false\"></xref> constructors can duplicate the functionality of the other constructors. The following table shows the parameter values that produce equivalent behavior. </p>\n<p>To create a <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> object that is</p>\n<p>For constructors that have a <strong>LazyThreadSafetyMode</strong> <em>mode</em> parameter, set <em>mode</em> to</p>\n<p>For constructors that have a Boolean <em>isThreadSafe</em> parameter, set <em>isThreadSafe</em> to</p>\n<p>For constructors with no thread safety parameters</p>\n<p>Other capabilities  For information about the use of <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> with thread-static fields, or as the backing store for properties, see Lazy Initialization.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(false)]

      [DebuggerTypeProxy(typeof (System_LazyDebugView<>))]

      [DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")]

      public class Lazy<T>
    content.vb: >-
      <Serializable>

      <ComVisible(False)>

      <DebuggerTypeProxy(GetType(System_LazyDebugView(Of )))>

      <DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")>

      Public Class Lazy(Of T)
    typeParameters:
    - id: T
      description: "\n<p>The type of object that is being lazily initialized.</p>\n"
  seealso:
  - type: System.Threading.LazyThreadSafetyMode
    commentId: T:System.Threading.LazyThreadSafetyMode
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Lazy(Of T)
  name.vb: Lazy(Of T)
- uid: System.Lazy`1.#ctor
  commentId: M:System.Lazy`1.#ctor
  id: '#ctor'
  parent: System.Lazy`1
  langs:
  - csharp
  - vb
  name: Lazy()
  fullName: System.Lazy<T>.Lazy()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Lazy.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Lazy.cs
    startLine: 120
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> class. When lazy initialization occurs, the default constructor of the target type is used.</p>\n"
  remarks: "\n<p>An instance that is created with this constructor may be used concurrently from multiple threads.</p>\n<p>The thread safety mode of a <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance that is initialized with this constructor is <xref href=\"System.Threading.LazyThreadSafetyMode.ExecutionAndPublication\" data-throw-if-not-resolved=\"false\"></xref>. The thread safety mode describes the behavior when multiple threads try to initialize the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n<p>A <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance that is created with this constructor does not cache exceptions. For more information, see the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref>class or the <xref href=\"System.Threading.LazyThreadSafetyMode\" data-throw-if-not-resolved=\"false\"></xref> enumeration.</p>\n"
  syntax:
    content: public Lazy()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Lazy(Of T).Lazy()
- uid: System.Lazy`1.#ctor(System.Boolean)
  commentId: M:System.Lazy`1.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Lazy`1
  langs:
  - csharp
  - vb
  name: Lazy(Boolean)
  fullName: System.Lazy<T>.Lazy(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Lazy.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Lazy.cs
    startLine: 149
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> class. When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.</p>\n"
  remarks: "\n<p>The thread safety mode of a <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance that is initialized with this constructor is <xref href=\"System.Threading.LazyThreadSafetyMode.ExecutionAndPublication\" data-throw-if-not-resolved=\"false\"></xref> if <em>isThreadSafe</em> is <strong>true</strong>; otherwise, the mode is <xref href=\"System.Threading.LazyThreadSafetyMode.None\" data-throw-if-not-resolved=\"false\"></xref>. The thread safety mode describes the behavior when multiple threads try to initialize the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance. To specify the <xref href=\"System.Threading.LazyThreadSafetyMode.PublicationOnly\" data-throw-if-not-resolved=\"false\"></xref> mode, use the <xref href=\"System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n<p>A <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance that is created with this constructor does not cache exceptions. For more information, see the<xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> class or the <xref href=\"System.Threading.LazyThreadSafetyMode\" data-throw-if-not-resolved=\"false\"></xref> enumeration.</p>\n"
  syntax:
    content: public Lazy(bool isThreadSafe)
    content.vb: Public Sub New(isThreadSafe As Boolean)
    parameters:
    - id: isThreadSafe
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to make this instance usable concurrently by multiple threads; <strong>false</strong> to make the instance usable by only one thread at a time. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Lazy(Of T).Lazy(System.Boolean)
- uid: System.Lazy`1.#ctor(System.Func{`0})
  commentId: M:System.Lazy`1.#ctor(System.Func{`0})
  id: '#ctor(System.Func{`0})'
  parent: System.Lazy`1
  langs:
  - csharp
  - vb
  name: Lazy(Func<T>)
  fullName: System.Lazy<T>.Lazy(System.Func<T>)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Lazy.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Lazy.cs
    startLine: 138
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> class. When lazy initialization occurs, the specified initialization function is used.</p>\n"
  remarks: "\n<p>An instance that is created with this constructor may be used concurrently from multiple threads.</p>\n<p>The thread safety mode of a <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance that is initialized with this constructor is <xref href=\"System.Threading.LazyThreadSafetyMode.ExecutionAndPublication\" data-throw-if-not-resolved=\"false\"></xref>. The thread safety mode describes the behavior when multiple threads try to initialize the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n<p>Exceptions that are thrown by <em>valueFactory</em> are cached. For more information, see the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> class or the <xref href=\"System.Threading.LazyThreadSafetyMode\" data-throw-if-not-resolved=\"false\"></xref> enumeration.</p>\n"
  syntax:
    content: public Lazy(Func<T> valueFactory)
    content.vb: Public Sub New(valueFactory As Func(Of T))
    parameters:
    - id: valueFactory
      type: System.Func{{T}}
      description: "\n<p>The delegate that is invoked to produce the lazily initialized value when it is needed.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>valueFactory</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Lazy(Of T).Lazy(System.Func(Of T))
  name.vb: Lazy(Func(Of T))
- uid: System.Lazy`1.#ctor(System.Func{`0},System.Boolean)
  commentId: M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)
  id: '#ctor(System.Func{`0},System.Boolean)'
  parent: System.Lazy`1
  langs:
  - csharp
  - vb
  name: Lazy(Func<T>, Boolean)
  fullName: System.Lazy<T>.Lazy(System.Func<T>, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Lazy.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Lazy.cs
    startLine: 177
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> class. When lazy initialization occurs, the specified initialization function and initialization mode are used.</p>\n"
  remarks: "\n<p>The thread safety mode of a <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance that is initialized with this constructor is <xref href=\"System.Threading.LazyThreadSafetyMode.ExecutionAndPublication\" data-throw-if-not-resolved=\"false\"></xref> if <em>isThreadSafe</em> is <strong>true</strong>; otherwise, the mode is <xref href=\"System.Threading.LazyThreadSafetyMode.None\" data-throw-if-not-resolved=\"false\"></xref>. The thread safety mode describes the behavior when multiple threads try to initialize the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n<p>To specify the <xref href=\"System.Threading.LazyThreadSafetyMode.PublicationOnly\" data-throw-if-not-resolved=\"false\"></xref> mode, use the <xref href=\"System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n<p>Exceptions that are thrown by <em>valueFactory</em> are cached. For more information, see the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> class or the <xref href=\"System.Threading.LazyThreadSafetyMode\" data-throw-if-not-resolved=\"false\"></xref> enumeration.</p>\n"
  syntax:
    content: public Lazy(Func<T> valueFactory, bool isThreadSafe)
    content.vb: Public Sub New(valueFactory As Func(Of T), isThreadSafe As Boolean)
    parameters:
    - id: valueFactory
      type: System.Func{{T}}
      description: "\n<p>The delegate that is invoked to produce the lazily initialized value when it is needed.</p>\n"
    - id: isThreadSafe
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to make this instance usable concurrently by multiple threads; <strong>false</strong> to make this instance usable by only one thread at a time.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>valueFactory</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Lazy(Of T).Lazy(System.Func(Of T), System.Boolean)
  name.vb: Lazy(Func(Of T), Boolean)
- uid: System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)
  commentId: M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)
  id: '#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)'
  parent: System.Lazy`1
  langs:
  - csharp
  - vb
  name: Lazy(Func<T>, LazyThreadSafetyMode)
  fullName: System.Lazy<T>.Lazy(System.Func<T>, System.Threading.LazyThreadSafetyMode)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Lazy.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Lazy.cs
    startLine: 193
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> class that uses the specified initialization function and thread-safety mode.</p>\n"
  remarks: "\n<p>The thread safety mode of a <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance describes the behavior when multiple threads try to initialize the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n<p>Exceptions that are thrown by <em>valueFactory</em> are cached, unless <em>mode</em> is <xref href=\"System.Threading.LazyThreadSafetyMode.PublicationOnly\" data-throw-if-not-resolved=\"false\"></xref>. For more information, see the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> class or the <xref href=\"System.Threading.LazyThreadSafetyMode\" data-throw-if-not-resolved=\"false\"></xref> enumeration.</p>\n"
  syntax:
    content: public Lazy(Func<T> valueFactory, LazyThreadSafetyMode mode)
    content.vb: Public Sub New(valueFactory As Func(Of T), mode As LazyThreadSafetyMode)
    parameters:
    - id: valueFactory
      type: System.Func{{T}}
      description: "\n<p>The delegate that is invoked to produce the lazily initialized value when it is needed.</p>\n"
    - id: mode
      type: System.Threading.LazyThreadSafetyMode
      description: "\n<p>One of the enumeration values that specifies the thread safety mode. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>mode</em> contains an invalid value. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>valueFactory</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Lazy(Of T).Lazy(System.Func(Of T), System.Threading.LazyThreadSafetyMode)
  name.vb: Lazy(Func(Of T), LazyThreadSafetyMode)
- uid: System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)
  commentId: M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)
  id: '#ctor(System.Threading.LazyThreadSafetyMode)'
  parent: System.Lazy`1
  langs:
  - csharp
  - vb
  name: Lazy(LazyThreadSafetyMode)
  fullName: System.Lazy<T>.Lazy(System.Threading.LazyThreadSafetyMode)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Lazy.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Lazy.cs
    startLine: 160
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> class that uses the default constructor of <em>T</em> and the specified thread-safety mode.</p>\n"
  remarks: "\n<p>The thread safety mode of a <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance describes the behavior when multiple threads try to initialize the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance. </p>\n<p>A <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance that is created with this constructor does not cache exceptions. For more information, see the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> class or the <xref href=\"System.Threading.LazyThreadSafetyMode\" data-throw-if-not-resolved=\"false\"></xref> enumeration.</p>\n"
  syntax:
    content: public Lazy(LazyThreadSafetyMode mode)
    content.vb: Public Sub New(mode As LazyThreadSafetyMode)
    parameters:
    - id: mode
      type: System.Threading.LazyThreadSafetyMode
      description: "\n<p>One of the enumeration values that specifies the thread safety mode. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>mode</em> contains an invalid value. </p>\n"
  seealso:
  - type: System.Threading.LazyThreadSafetyMode
    commentId: T:System.Threading.LazyThreadSafetyMode
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Lazy(Of T).Lazy(System.Threading.LazyThreadSafetyMode)
- uid: System.Lazy`1.IsValueCreated
  commentId: P:System.Lazy`1.IsValueCreated
  id: IsValueCreated
  parent: System.Lazy`1
  langs:
  - csharp
  - vb
  name: IsValueCreated
  fullName: System.Lazy<T>.IsValueCreated
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Lazy.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsValueCreated
    path: src/mscorlib/src/System/Lazy.cs
    startLine: 280
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets a value that indicates whether a value has been created for this <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>When lazy initialization occurs for a <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance, it may result in either a value being created or an exception being thrown. If an exception is thrown, subsequent behavior of the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance depends on whether exception caching is in effect. If the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance was created by using a constructor that does not specify an initialization function, then exception caching is not in effect. A subsequent attempt to initialize the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> might succeed, and after successful initialization the <xref href=\"System.Lazy`1.IsValueCreated\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>true</strong>. If the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance was created with an initialization function (specified by the <em>valueFactory</em> parameter of the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> constructor), then exception caching is controlled by the thread safety mode.</p>\n<ul><li>\n<p>If the mode is <xref href=\"System.Threading.LazyThreadSafetyMode.ExecutionAndPublication\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Threading.LazyThreadSafetyMode.None\" data-throw-if-not-resolved=\"false\"></xref>, there is no second chance to initialize the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance. If an exception occurs and is unhandled in the initialization function, that exception is cached and rethrown on subsequent accesses of the <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref>property. No value is created if an exception is thrown, so in such cases <xref href=\"System.Lazy`1.IsValueCreated\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>.</p>\n</li><li>\n<p>If the mode is <xref href=\"System.Threading.LazyThreadSafetyMode.PublicationOnly\" data-throw-if-not-resolved=\"false\"></xref>, the first thread that succeeds in running the initialization function (or the default constructor) creates the value for the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance. If the initialization function throws an exception on one thread, other threads can still try to initialize the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance. Until the value is created, the <xref href=\"System.Lazy`1.IsValueCreated\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>false</strong>.</p>\n</li></ul>\n"
  syntax:
    content: public bool IsValueCreated { get; }
    content.vb: Public ReadOnly Property IsValueCreated As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a value has been created for this <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Threading.LazyThreadSafetyMode
    commentId: T:System.Threading.LazyThreadSafetyMode
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Lazy(Of T).IsValueCreated
- uid: System.Lazy`1.Value
  commentId: P:System.Lazy`1.Value
  id: Value
  parent: System.Lazy`1
  langs:
  - csharp
  - vb
  name: Value
  fullName: System.Lazy<T>.Value
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Lazy.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Value
    path: src/mscorlib/src/System/Lazy.cs
    startLine: 309
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the lazily initialized value of the current <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Lazy`1.IsValueCreated\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>, accessing the <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property forces initialization.</p>\n<p>In addition to the exceptions that are listed, the <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property can throw any unhandled exception that is thrown by the factory method that was passed to the <em>valueFactory</em> parameter of the <xref href=\"System.Lazy`1.#ctor(System.Func{`0})\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Lazy`1.#ctor(System.Func{`0},System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n"
  syntax:
    content: >-
      [DebuggerBrowsable(DebuggerBrowsableState.Never)]

      public T Value { get; }
    content.vb: >-
      <DebuggerBrowsable(DebuggerBrowsableState.Never)>

      Public ReadOnly Property Value As T
    parameters: []
    return:
      type: '{T}'
      description: "\n<p>The lazily initialized value of the current <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  exceptions:
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: "\n<p>The <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing. </p>\n"
  - type: System.MissingMemberException
    commentId: T:System.MissingMemberException
    description: "\n<p>The <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The initialization function tries to access <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> on this instance. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Lazy(Of T).Value
- uid: System.Lazy`1.ToString
  commentId: M:System.Lazy`1.ToString
  id: ToString
  parent: System.Lazy`1
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Lazy<T>.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Lazy.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Lazy.cs
    startLine: 232
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Creates and returns a string representation of the <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property for this instance.</p>\n"
  remarks: "\n<p>Calling this method does not cause initialization.</p>\n<p>The <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property can be <strong>null</strong> after lazy initialization if the factory method that was specified for the <em>valueFactory</em> parameter of the <xref href=\"System.Lazy`1.#ctor(System.Func{`0})\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Lazy`1.#ctor(System.Func{`0},System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> constructor returns <strong>null</strong>. </p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The result of calling the <xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref> method on the <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property for this instance, if the value has been created (that is, if the <xref href=\"System.Lazy`1.IsValueCreated\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>true</strong>). Otherwise, a string indicating that the value has not been created. </p>\n"
  overridden: System.Object.ToString
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>The <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Lazy(Of T).ToString()
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Func{{T}}
  parent: System
  definition: System.Func`1
  name: Func<T>
  fullName: System.Func<T>
  fullname.vb: System.Func(Of T)
  name.vb: Func(Of T)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Func`1
  parent: System
  isExternal: false
  name: Func<TResult>
  fullName: System.Func<TResult>
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.LazyThreadSafetyMode
  parent: System.Threading
  isExternal: false
  name: LazyThreadSafetyMode
  fullName: System.Threading.LazyThreadSafetyMode
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.MemberAccessException
  parent: System
  isExternal: false
  name: MemberAccessException
  fullName: System.MemberAccessException
- uid: System.MissingMemberException
  parent: System
  isExternal: false
  name: MissingMemberException
  fullName: System.MissingMemberException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.NullReferenceException
  isExternal: false
  name: NullReferenceException
  fullName: System.NullReferenceException
