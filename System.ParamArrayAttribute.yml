items:
- uid: System.ParamArrayAttribute
  commentId: T:System.ParamArrayAttribute
  id: ParamArrayAttribute
  parent: System
  children:
  - System.ParamArrayAttribute.#ctor
  langs:
  - csharp
  - vb
  name: ParamArrayAttribute
  nameWithType: ParamArrayAttribute
  fullName: System.ParamArrayAttribute
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/ParamArrayAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ParamArrayAttribute
    path: src/mscorlib/src/System/ParamArrayAttribute.cs
    startLine: 15
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates that a method will allow a variable number of arguments in its invocation. This class cannot be inherited.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ParamArrayAttribute\" data-throw-if-not-resolved=\"false\"></xref> indicates that a method parameter is a parameter array. A parameter array allows the specification of an unknown number of arguments. A parameter array must be the last parameter in a formal parameter list, and it must be a single-dimension array. When the method is called, a parameter array permits arguments to a method to be specified in either of two ways: </p>\n<ul><li>\n<p>As a single expression of a type that is implicitly convertible to the parameter array type. The parameter array functions as a value parameter.</p>\n</li><li>\n<p>As zero or more arguments, where each argument is an expression of a type that is implictly convertible to the type of the parameter array element.</p>\n</li></ul>\n<p>The example in the next section illustrates both calling conventions.</p>\n<p>Typically, the <xref href=\"System.ParamArrayAttribute\" data-throw-if-not-resolved=\"false\"></xref> is not used directly in code. Instead, individual language keywords, such as <strong>ParamArray</strong> in Visual Basic and <strong>params</strong> in C#, are used as wrappers for the <xref href=\"System.ParamArrayAttribute\" data-throw-if-not-resolved=\"false\"></xref> class. Some languages, such as C#, may even require the use of the language keyword and prohibit the use of <xref href=\"System.ParamArrayAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>During overload resolution, when compilers that support parameter arrays encounter a method overload that does not exist but has one fewer parameter than an overload that includes a parameter array, they will replace the method with the overload that includes the parameter array. For example, a call to the <strong>String.Split()</strong> instance method (which does not exist in the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> class) is resolved as a call to the <xref href=\"System.String.Split(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method. The compiler will also pass an empty array of the required type to the method. This means that the method must always be prepared to handle an array whose length is zero when it processes the elements in the parameter array. The example provides an illustration.</p>\n<p>For more information about using attributes, see Extending Metadata Using Attributes.</p>\n"
  syntax:
    content: >-
      [AttributeUsage(AttributeTargets.Parameter, Inherited = true, AllowMultiple = false)]

      [ComVisible(true)]

      public sealed class ParamArrayAttribute : Attribute, _Attribute
    content.vb: >-
      <AttributeUsage(AttributeTargets.Parameter, Inherited:=True, AllowMultiple:=False)>

      <ComVisible(True)>

      Public NotInheritable Class ParamArrayAttribute
          Inherits Attribute
          Implements _Attribute
  seealso:
  - type: System.Attribute
    commentId: T:System.Attribute
  inheritance:
  - System.Object
  - System.Attribute
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetHashCode
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.AttributeUsageAttribute
    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
    arguments:
    - type: System.AttributeTargets
      value: 2048
    namedArguments:
    - name: Inherited
      type: System.Boolean
      value: true
    - name: AllowMultiple
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.ParamArrayAttribute.#ctor
  commentId: M:System.ParamArrayAttribute.#ctor
  id: '#ctor'
  parent: System.ParamArrayAttribute
  langs:
  - csharp
  - vb
  name: ParamArrayAttribute()
  nameWithType: ParamArrayAttribute.ParamArrayAttribute()
  fullName: System.ParamArrayAttribute.ParamArrayAttribute()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/ParamArrayAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/ParamArrayAttribute.cs
    startLine: 19
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ParamArrayAttribute\" data-throw-if-not-resolved=\"false\"></xref> class with default properties.</p>\n"
  syntax:
    content: public ParamArrayAttribute()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
  commentId: N:System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
  commentId: T:System.Object
- uid: System.Attribute
  parent: System
  isExternal: false
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute
  commentId: T:System.Attribute
- uid: System.Attribute.Equals(System.Object)
  parent: System.Attribute
  isExternal: true
  name: Equals(Object)
  nameWithType: Attribute.Equals(Object)
  fullName: System.Attribute.Equals(System.Object)
  spec.csharp:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    nameWithType: Attribute.Equals
    fullName: System.Attribute.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    nameWithType: Attribute.Equals
    fullName: System.Attribute.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Attribute.Equals(System.Object)
- uid: System.Attribute.GetHashCode
  parent: System.Attribute
  isExternal: false
  name: GetHashCode()
  nameWithType: Attribute.GetHashCode()
  fullName: System.Attribute.GetHashCode()
  spec.csharp:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    nameWithType: Attribute.GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    nameWithType: Attribute.GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Attribute.GetHashCode
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
