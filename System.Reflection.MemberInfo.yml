items:
- uid: System.Reflection.MemberInfo
  commentId: T:System.Reflection.MemberInfo
  id: MemberInfo
  parent: System.Reflection
  children:
  - System.Reflection.MemberInfo.CustomAttributes
  - System.Reflection.MemberInfo.DeclaringType
  - System.Reflection.MemberInfo.Equals(System.Object)
  - System.Reflection.MemberInfo.GetHashCode
  - System.Reflection.MemberInfo.Module
  - System.Reflection.MemberInfo.Name
  langs:
  - csharp
  - vb
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MemberInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MemberInfo
    path: src/mscorlib/src/System/Reflection/MemberInfo.cs
    startLine: 15
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Obtains information about the attributes of a member and provides access to member metadata.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> class is the abstract base class for classes used to obtain information about all members of a class (constructors, events, fields, methods, and properties).</p>\n<p>This class introduces the basic functionality that all members provide.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [ClassInterface(ClassInterfaceType.None)]

      [ComDefaultInterface(typeof (_MemberInfo))]

      [PermissionSet(SecurityAction.InheritanceDemand, Name = "FullTrust")]

      [ComVisible(true)]

      public abstract class MemberInfo : ICustomAttributeProvider, _MemberInfo
    content.vb: >-
      <Serializable>

      <ClassInterface(ClassInterfaceType.None)>

      <ComDefaultInterface(GetType(_MemberInfo))>

      <PermissionSet(SecurityAction.InheritanceDemand, Name:="FullTrust")>

      <ComVisible(True)>

      Public MustInherit Class MemberInfo
          Implements ICustomAttributeProvider, _MemberInfo
  see:
  - type: System.Security.Permissions.SecurityAction.InheritanceDemand
    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Reflection.MemberInfo.CustomAttributes
  commentId: P:System.Reflection.MemberInfo.CustomAttributes
  id: CustomAttributes
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  - vb
  name: CustomAttributes
  nameWithType: MemberInfo.CustomAttributes
  fullName: System.Reflection.MemberInfo.CustomAttributes
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MemberInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CustomAttributes
    path: src/mscorlib/src/System/Reflection/MemberInfo.cs
    startLine: 41
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a collection that contains this member's custom attributes.</p>\n"
  syntax:
    content: public virtual IEnumerable<CustomAttributeData> CustomAttributes { get; }
    content.vb: Public Overridable ReadOnly Property CustomAttributes As IEnumerable(Of CustomAttributeData)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
      description: "\n<p>A collection that contains this member's custom attributes.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.MemberInfo.DeclaringType
  commentId: P:System.Reflection.MemberInfo.DeclaringType
  id: DeclaringType
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  - vb
  name: DeclaringType
  nameWithType: MemberInfo.DeclaringType
  fullName: System.Reflection.MemberInfo.DeclaringType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MemberInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DeclaringType
    path: src/mscorlib/src/System/Reflection/MemberInfo.cs
    startLine: 37
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the class that declares this member.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Reflection.MemberInfo.DeclaringType\" data-throw-if-not-resolved=\"false\"></xref> property retrieves a reference to the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object for the type that declares this member. A member of a type is either declared by the type or inherited from a base type, so the <strong>Type</strong> object returned by the <xref href=\"System.Reflection.MemberInfo.DeclaringType\" data-throw-if-not-resolved=\"false\"></xref> property might not be the same as the <strong>Type</strong> object used to obtain the current <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<ul><li>\n<p>If the <strong>Type</strong> object from which this <strong>MemberInfo</strong> object was obtained did not declare this member, the <xref href=\"System.Reflection.MemberInfo.DeclaringType\" data-throw-if-not-resolved=\"false\"></xref> property will represent one of its base types.</p>\n</li><li>\n<p>If the <strong>MemberInfo</strong> object is a global member (that is, if it was obtained from the <xref href=\"System.Reflection.Module.GetMethods\" data-throw-if-not-resolved=\"false\"></xref> method, which returns global methods on a module), the returned <xref href=\"System.Reflection.MemberInfo.DeclaringType\" data-throw-if-not-resolved=\"false\"></xref> will be <strong>null</strong>.</p>\n</li></ul>\n"
  syntax:
    content: public abstract Type DeclaringType { get; }
    content.vb: Public MustOverride ReadOnly Property DeclaringType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The <strong>Type</strong> object for the class that declares this member.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.MemberInfo.Module
  commentId: P:System.Reflection.MemberInfo.Module
  id: Module
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  - vb
  name: Module
  nameWithType: MemberInfo.Module
  fullName: System.Reflection.MemberInfo.Module
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MemberInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Module
    path: src/mscorlib/src/System/Reflection/MemberInfo.cs
    startLine: 61
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the module in which the type that declares the member represented by the current <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> is defined.</p>\n"
  remarks: "\n<p>This property is provided as a convenience. It is equivalent to using the <xref href=\"System.Reflection.MemberInfo.DeclaringType\" data-throw-if-not-resolved=\"false\"></xref> property to get the type in which the method is declared, and then calling the <xref href=\"System.Type.Module\" data-throw-if-not-resolved=\"false\"></xref> property of the resulting <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual Module Module { get; }
    content.vb: 'Public Overridable ReadOnly Property Module As '
    parameters: []
    return:
      type: System.Reflection.Module
      description: "\n<p>The <xref href=\"System.Reflection.Module\" data-throw-if-not-resolved=\"false\"></xref> in which the type that declares the member represented by the current <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> is defined.</p>\n"
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "\n<p>This method is not implemented.</p>\n"
  seealso:
  - type: System.Reflection.Module
    commentId: T:System.Reflection.Module
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.MemberInfo.Name
  commentId: P:System.Reflection.MemberInfo.Name
  id: Name
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: MemberInfo.Name
  fullName: System.Reflection.MemberInfo.Name
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MemberInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Name
    path: src/mscorlib/src/System/Reflection/MemberInfo.cs
    startLine: 35
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the name of the current member.</p>\n"
  remarks: "\n<p>Only the simple name of the member is returned, not the fully qualified name.</p>\n<p>To get the <xref href=\"System.Reflection.MemberInfo.Name\" data-throw-if-not-resolved=\"false\"></xref> property, get the class <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>. From the <strong>Type</strong>, get the <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> array. From a <strong>MemberInfo</strong> element of the array, obtain the <strong>Name</strong> property.</p>\n"
  syntax:
    content: public abstract string Name { get; }
    content.vb: Public MustOverride ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the name of this member.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.MemberInfo.Equals(System.Object)
  commentId: M:System.Reflection.MemberInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: MemberInfo.Equals(Object)
  fullName: System.Reflection.MemberInfo.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MemberInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Reflection/MemberInfo.cs
    startLine: 111
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>An object to compare with this instance, or <strong>null</strong>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> equals the type and value of this instance; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.MemberInfo.GetHashCode
  commentId: M:System.Reflection.MemberInfo.GetHashCode
  id: GetHashCode
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: MemberInfo.GetHashCode()
  fullName: System.Reflection.MemberInfo.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MemberInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Reflection/MemberInfo.cs
    startLine: 116
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
  commentId: N:System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
  commentId: T:System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
  commentId: N:System
- uid: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<CustomAttributeData>
  nameWithType: IEnumerable<CustomAttributeData>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData>
  nameWithType.vb: IEnumerable(Of CustomAttributeData)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.CustomAttributeData)
  name.vb: IEnumerable(Of CustomAttributeData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.CustomAttributeData
    name: CustomAttributeData
    nameWithType: CustomAttributeData
    fullName: System.Reflection.CustomAttributeData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.CustomAttributeData
    name: CustomAttributeData
    nameWithType: CustomAttributeData
    fullName: System.Reflection.CustomAttributeData
  - name: )
    nameWithType: )
    fullName: )
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  commentId: T:System.Collections.Generic.IEnumerable`1
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  commentId: N:System.Collections.Generic
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
  commentId: T:System.Type
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
  commentId: T:System.Reflection.Module
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
  commentId: T:System.String
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
  commentId: T:System.Boolean
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.GetHashCode
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
  commentId: T:System.Int32
- uid: System.NotImplementedException
  isExternal: false
  name: NotImplementedException
  nameWithType: NotImplementedException
  fullName: System.NotImplementedException
  commentId: T:System.NotImplementedException
