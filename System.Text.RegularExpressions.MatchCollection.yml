items:
- uid: System.Text.RegularExpressions.MatchCollection
  commentId: T:System.Text.RegularExpressions.MatchCollection
  id: MatchCollection
  parent: System.Text.RegularExpressions
  children:
  - System.Text.RegularExpressions.MatchCollection.Count
  - System.Text.RegularExpressions.MatchCollection.GetEnumerator
  - System.Text.RegularExpressions.MatchCollection.Item(System.Int32)
  langs:
  - csharp
  - vb
  name: MatchCollection
  fullName: System.Text.RegularExpressions.MatchCollection
  type: Class
  source:
    remote:
      path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexMatchCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MatchCollection
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexMatchCollection.cs
    startLine: 22
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Represents the set of successful matches found by iteratively applying a regular expression pattern to the input string.</p>\n"
  remarks: "\n<p>The collection is immutable (read-only) and has no public constructor. The <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method returns a <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>The collection contains zero or more <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> objects. If the match is successful, the collection is populated with one <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object for each match found in the input string. If the match is unsuccessful, the collection contains no <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> objects, and its <xref href=\"System.Text.RegularExpressions.MatchCollection.Count\" data-throw-if-not-resolved=\"false\"></xref> property equals zero.</p>\n<p>When applying a regular expression pattern to a particular input string, the regular expression engine uses either of two techniques to build the <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> object:</p>\n<ul><li>\n<p>Direct evaluation. </p>\n<p>The <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> object is populated all at once, with all matches resulting from a particular call to the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. This technique is used when the collection's <xref href=\"System.Text.RegularExpressions.MatchCollection.Count\" data-throw-if-not-resolved=\"false\"></xref> property is accessed. It typically is the more expensive method of populating the collection and entails a greater performance hit.</p>\n</li><li>\n<p>Lazy evaluation. </p>\n<p>The <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> object is populated as needed on a match-by-match basis. It is equivalent to the regular expression engine calling the <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method repeatedly and adding each match to the collection. This technique is used when the collection is accessed through its <xref href=\"System.Text.RegularExpressions.MatchCollection.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method, or when it is accessed using the <strong>foreach</strong> statement (in C#) or the <strong>For Each</strong>...<strong>Next</strong> statement (in Visual Basic).</p>\n</li></ul>\n<p>To iterate through the members of the collection, you should use the collection iteration construct provided by your language (such as <strong>foreach</strong> in C# and <strong>For Each</strong>â€¦<strong>Next</strong> in Visual Basic) instead of retrieving the enumerator that is returned by the <xref href=\"System.Text.RegularExpressions.MatchCollection.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  example:
  - "\n<p>The following example illustrates the use of the <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> class to interrogate a set of <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> instances.</p>Regex_Words#0"
  syntax:
    content: 'public class MatchCollection : Collections.ICollection, Collections.IEnumerable'
    content.vb: >-
      Public Class MatchCollection
          Inherits Collections.ICollection
          Implements Collections.IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerable
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Text.RegularExpressions.MatchCollection.Count
  commentId: P:System.Text.RegularExpressions.MatchCollection.Count
  id: Count
  parent: System.Text.RegularExpressions.MatchCollection
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Text.RegularExpressions.MatchCollection.Count
  type: Property
  source:
    remote:
      path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexMatchCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexMatchCollection.cs
    startLine: 51
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Gets the number of matches.</p>\n"
  remarks: "\n<p>Accessing individual members of the <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> object by retrieving the value of the collection's <xref href=\"System.Text.RegularExpressions.MatchCollection.Count\" data-throw-if-not-resolved=\"false\"></xref> property causes the regular expression engine to populate the collection using direct evaluation. ln contrast, calling the <xref href=\"System.Text.RegularExpressions.MatchCollection.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method (or using the <strong>foreach</strong> statement in C# and the <strong>For Each</strong>...<strong>Next</strong> statement in Visual Basic) causes the regular expression engine to populate the collection on an as needed basis using lazy evaluation. Direct evaluation can be a much more expensive method of building the collection than lazy evaluation.</p>\n<p>Because the <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> object is generally populated by using lazy evaluation, trying to determine the number of elements in the collection before it has been fully populated may throw a <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception. This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a single match exceeds that time-out interval.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Text.RegularExpressions.MatchCollection.Count\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the call to the <xref href=\"System.Text.RegularExpressions.Regex.Matches(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method found any matches. If not, it indicates that no matches were found. Otherwise, it enumerates the matches and displays their value and the position in the input string at which they were found. </p>System.Text.RegularExpressions.MatchCollection.Count#1<p>The regular expression pattern <code>\\d+</code> matches one or more decimal characters in an input string. </p>"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of matches.</p>\n"
  exceptions:
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Text.RegularExpressions.MatchCollection.Item(System.Int32)
  commentId: P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Text.RegularExpressions.MatchCollection
  langs:
  - csharp
  - vb
  name: Item[Int32]
  fullName: System.Text.RegularExpressions.MatchCollection.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexMatchCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexMatchCollection.cs
    startLine: 63
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Gets an individual member of the collection.</p>\n"
  remarks: "\n<p>In C#, the <xref href=\"System.Text.RegularExpressions.MatchCollection.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property is an indexer; it is not explicitly referenced in code, but instead allows the <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> collection to be accessed as if it were an array.</p>\n<p>Typically, individual items in the <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> object are accessed by their index only after the total number of items in the collection has been determined from the <xref href=\"System.Text.RegularExpressions.MatchCollection.Count\" data-throw-if-not-resolved=\"false\"></xref> property. However, accessing the <xref href=\"System.Text.RegularExpressions.MatchCollection.Count\" data-throw-if-not-resolved=\"false\"></xref> property causes the regular expression engine to use direct evaluation to build the collection all at once. This is typically more expensive than iterating the collection using the <xref href=\"System.Text.RegularExpressions.MatchCollection.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method, the C# <strong>foreach</strong> statement, or the Visual Basic <strong>For Each</strong>...<strong>Next</strong> statement.</p>\n<p>Because the <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> object is generally populated by using lazy evaluation, trying to navigate to a specific match may throw a <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception. This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find a specific match exceeds that time-out interval.</p>\n"
  example:
  - "\n<p>The following example parses the first sentence of Nathaniel Hawthorne's House of the Seven Gables and returns a <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> object that contains all words that begin with either an uppercase or lowercase \"h\". The <xref href=\"System.Text.RegularExpressions.MatchCollection.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property is then used to retrieve each word and display it to the console.</p>System.Text.RegularExpressions.MatchCollection.Item#1<p>The example produces the following output:</p><pre><code>Half\nhouse\nhuge</code></pre>"
  syntax:
    content: public virtual Match this[int i] { get; }
    content.vb: Public Overridable ReadOnly Property Item(i As Integer) As Match
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>Index into the <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> collection. </p>\n"
    return:
      type: System.Text.RegularExpressions.Match
      description: "\n<p>The captured substring at position <em>i</em> in the collection.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>i</em> is less than 0 or greater than or equal to <xref href=\"System.Text.RegularExpressions.MatchCollection.Count\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred.</p>\n"
  seealso:
  - type: System.Text.RegularExpressions.MatchCollection.Count
    commentId: P:System.Text.RegularExpressions.MatchCollection.Count
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: System.Text.RegularExpressions.MatchCollection.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Text.RegularExpressions.MatchCollection.GetEnumerator
  commentId: M:System.Text.RegularExpressions.MatchCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Text.RegularExpressions.MatchCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Text.RegularExpressions.MatchCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexMatchCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexMatchCollection.cs
    startLine: 82
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Provides an enumerator that iterates through the collection.</p>\n"
  remarks: "\n<p>Instead of  calling the <xref href=\"System.Text.RegularExpressions.MatchCollection.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve an enumerator that lets you iterate through the <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> objects in the collection, you should use the group iteration construct (such as <strong>foreach</strong> in C# and <strong>For Each</strong>â€¦<strong>Next</strong> in Visual Basic) provided by your programming language.</p>\n<p>Iterating the members of the <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> object using the <xref href=\"System.Text.RegularExpressions.MatchCollection.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method (or the <strong>foreach</strong> statement in C# and the <strong>For Each</strong>...<strong>Next</strong> statement in Visual Basic) causes the regular expression engine to populate the collection on an as needed basis using lazy evaluation. This is analogous to repeatedly calling the <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, and then adding the resulting match to the <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> object. In contrast, the regular expression engine uses direct evaluation to populate the collection all at once when the <xref href=\"System.Text.RegularExpressions.MatchCollection.Count\" data-throw-if-not-resolved=\"false\"></xref> property is accessed. This can be a much more expensive method of building the collection than lazy evaluation. </p>\n<p>Because the <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref> object is generally populated by using lazy evaluation, trying to navigate to the next member of the collection may throw a <xref href=\"System.Text.RegularExpressions.RegexMatchTimeoutException\" data-throw-if-not-resolved=\"false\"></xref> exception. This exception can be thrown if a time-out value for matching operations is in effect, and the attempt to find the next match exceeds that time-out interval.</p>\n"
  syntax:
    content: public Collections.IEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As Collections.IEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An object that contains all <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> objects within the <xref href=\"System.Text.RegularExpressions.MatchCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException
    description: "\n<p>A time-out occurred.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Text.RegularExpressions
  isExternal: false
  name: System.Text.RegularExpressions
  fullName: System.Text.RegularExpressions
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Text.RegularExpressions.Match
  parent: System.Text.RegularExpressions
  isExternal: false
  name: Match
  fullName: System.Text.RegularExpressions.Match
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Text.RegularExpressions.RegexMatchTimeoutException
  isExternal: false
  name: RegexMatchTimeoutException
  fullName: System.Text.RegularExpressions.RegexMatchTimeoutException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
