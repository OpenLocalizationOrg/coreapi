items:
- uid: System.Text.StringBuilder
  commentId: T:System.Text.StringBuilder
  id: StringBuilder
  parent: System.Text
  children:
  - System.Text.StringBuilder.#ctor
  - System.Text.StringBuilder.#ctor(System.Int32)
  - System.Text.StringBuilder.#ctor(System.Int32,System.Int32)
  - System.Text.StringBuilder.#ctor(System.String)
  - System.Text.StringBuilder.#ctor(System.String,System.Int32)
  - System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)
  - System.Text.StringBuilder.Append(System.Boolean)
  - System.Text.StringBuilder.Append(System.Byte)
  - System.Text.StringBuilder.Append(System.Char)
  - System.Text.StringBuilder.Append(System.Char*,System.Int32)
  - System.Text.StringBuilder.Append(System.Char,System.Int32)
  - System.Text.StringBuilder.Append(System.Char[])
  - System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)
  - System.Text.StringBuilder.Append(System.Decimal)
  - System.Text.StringBuilder.Append(System.Double)
  - System.Text.StringBuilder.Append(System.Int16)
  - System.Text.StringBuilder.Append(System.Int32)
  - System.Text.StringBuilder.Append(System.Int64)
  - System.Text.StringBuilder.Append(System.Object)
  - System.Text.StringBuilder.Append(System.SByte)
  - System.Text.StringBuilder.Append(System.Single)
  - System.Text.StringBuilder.Append(System.String)
  - System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)
  - System.Text.StringBuilder.Append(System.UInt16)
  - System.Text.StringBuilder.Append(System.UInt32)
  - System.Text.StringBuilder.Append(System.UInt64)
  - System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)
  - System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)
  - System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)
  - System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])
  - System.Text.StringBuilder.AppendFormat(System.String,System.Object)
  - System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)
  - System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)
  - System.Text.StringBuilder.AppendFormat(System.String,System.Object[])
  - System.Text.StringBuilder.AppendLine
  - System.Text.StringBuilder.AppendLine(System.String)
  - System.Text.StringBuilder.Capacity
  - System.Text.StringBuilder.Chars(System.Int32)
  - System.Text.StringBuilder.Clear
  - System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)
  - System.Text.StringBuilder.EnsureCapacity(System.Int32)
  - System.Text.StringBuilder.Equals(System.Text.StringBuilder)
  - System.Text.StringBuilder.Insert(System.Int32,System.Boolean)
  - System.Text.StringBuilder.Insert(System.Int32,System.Byte)
  - System.Text.StringBuilder.Insert(System.Int32,System.Char)
  - System.Text.StringBuilder.Insert(System.Int32,System.Char[])
  - System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)
  - System.Text.StringBuilder.Insert(System.Int32,System.Decimal)
  - System.Text.StringBuilder.Insert(System.Int32,System.Double)
  - System.Text.StringBuilder.Insert(System.Int32,System.Int16)
  - System.Text.StringBuilder.Insert(System.Int32,System.Int32)
  - System.Text.StringBuilder.Insert(System.Int32,System.Int64)
  - System.Text.StringBuilder.Insert(System.Int32,System.Object)
  - System.Text.StringBuilder.Insert(System.Int32,System.SByte)
  - System.Text.StringBuilder.Insert(System.Int32,System.Single)
  - System.Text.StringBuilder.Insert(System.Int32,System.String)
  - System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)
  - System.Text.StringBuilder.Insert(System.Int32,System.UInt16)
  - System.Text.StringBuilder.Insert(System.Int32,System.UInt32)
  - System.Text.StringBuilder.Insert(System.Int32,System.UInt64)
  - System.Text.StringBuilder.Length
  - System.Text.StringBuilder.MaxCapacity
  - System.Text.StringBuilder.Remove(System.Int32,System.Int32)
  - System.Text.StringBuilder.Replace(System.Char,System.Char)
  - System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)
  - System.Text.StringBuilder.Replace(System.String,System.String)
  - System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)
  - System.Text.StringBuilder.ToString
  - System.Text.StringBuilder.ToString(System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StringBuilder
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 41
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Represents a mutable string of characters. This class cannot be inherited.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/text/stringbuilder.cs#adf60ee46ebd299f\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/text/stringbuilder.cs#adf60ee46ebd299f\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>This class represents a string-like object whose value is a mutable sequence of characters.  </p>\n<p>In this section:</p>\n<ul><li>\n<p>The String and StringBuilder types</p>\n</li><li>\n<p>How StringBuilder works</p>\n</li><li>\n<p>Memory allocation</p>\n</li><li>\n<p>Instantiating a StringBuilder object</p>\n</li><li>\n<p>Calling StringBuilder methods</p>\n</li><li>\n<p>Performing StringBuilder operations</p>\n<ul><li>\n<p>Iterating StringBuilder characters</p>\n</li><li>\n<p>Adding text to a StringBuilder object</p>\n</li><li>\n<p>Deleting text from a StringBuilder object</p>\n</li><li>\n<p>Modifying the text in a StringBuilder object</p>\n</li></ul>\n</li><li>\n<p>Searching the text in a StringBuilder object</p>\n</li><li>\n<p>Converting the StringBuilder object to a string</p>\n</li></ul>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      [Serializable]

      public sealed class StringBuilder : ISerializable
    content.vb: >-
      <ComVisible(True)>

      <Serializable>

      Public NotInheritable Class StringBuilder
          Implements ISerializable
  seealso:
  - type: System.String
    commentId: T:System.String
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Text.StringBuilder.#ctor
  commentId: M:System.Text.StringBuilder.#ctor
  id: '#ctor'
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: StringBuilder()
  nameWithType: StringBuilder.StringBuilder()
  fullName: System.Text.StringBuilder.StringBuilder()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 83
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>The string value of this instance is set to <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and the capacity is set to the implementation-specific default capacity.</p>\n"
  syntax:
    content: public StringBuilder()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.#ctor(System.Int32)
  commentId: M:System.Text.StringBuilder.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: StringBuilder(Int32)
  nameWithType: StringBuilder.StringBuilder(Int32)
  fullName: System.Text.StringBuilder.StringBuilder(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 89
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class using the specified capacity.</p>\n"
  remarks: "\n<p>The <em>capacity</em> parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <xref href=\"System.Text.StringBuilder.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property. If the number of characters to be stored in the current instance exceeds this <em>capacity</em> value, the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object allocates additional memory to store them.</p>\n<p>The string value of this instance is set to <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. If <em>capacity</em> is zero, the implementation-specific default capacity is used.</p>\n"
  syntax:
    content: public StringBuilder(int capacity)
    content.vb: Public Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
      description: "\n<p>The suggested starting size of this instance. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than zero. </p>\n"
  seealso:
  - type: System.Text.StringBuilder.Capacity
    commentId: P:System.Text.StringBuilder.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.#ctor(System.Int32,System.Int32)
  commentId: M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: StringBuilder(Int32, Int32)
  nameWithType: StringBuilder.StringBuilder(Int32, Int32)
  fullName: System.Text.StringBuilder.StringBuilder(System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 154
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class that starts with a specified capacity and can grow to a specified maximum.</p>\n"
  remarks: "\n<p>The <em>capacity</em> parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <xref href=\"System.Text.StringBuilder.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property. If the number of characters to be stored in the current instance exceeds this <em>capacity</em> value, the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object allocates additional memory to store them.</p>\n<p>If <em>capacity</em> is zero, the implementation-specific default capacity is used.</p>\n<p>The <em>maxCapacity</em> property defines the maximum number of characters that the current instance can hold. Its value is assigned to the <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref> property. If the number of characters to be stored in the current instance exceeds this <em>maxCapacity</em> value, the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object does not allocate additional memory, but instead throws an exception. </p>\n"
  syntax:
    content: public StringBuilder(int capacity, int maxCapacity)
    content.vb: Public Sub New(capacity As Integer, maxCapacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
      description: "\n<p>The suggested starting size of the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    - id: maxCapacity
      type: System.Int32
      description: "\n<p>The maximum number of characters the current string can contain. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>maxCapacity</em> is less than one, <em>capacity</em> is less than zero, or <em>capacity</em> is greater than <em>maxCapacity</em>. </p>\n"
  seealso:
  - type: System.Text.StringBuilder.Capacity
    commentId: P:System.Text.StringBuilder.Capacity
  - type: System.Text.StringBuilder.MaxCapacity
    commentId: P:System.Text.StringBuilder.MaxCapacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.#ctor(System.String)
  commentId: M:System.Text.StringBuilder.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: StringBuilder(String)
  nameWithType: StringBuilder.StringBuilder(String)
  fullName: System.Text.StringBuilder.StringBuilder(System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 98
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class using the specified string.</p>\n"
  remarks: "\n<p>If <em>value</em> is <strong>null</strong>, the new <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> will contain the empty string (that is, it contains <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  syntax:
    content: public StringBuilder(string value)
    content.vb: Public Sub New(value As String)
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string used to initialize the value of the instance. If <em>value</em> is <strong>null</strong>, the new <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> will contain the empty string (that is, it contains <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>). </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.#ctor(System.String,System.Int32)
  commentId: M:System.Text.StringBuilder.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: StringBuilder(String, Int32)
  nameWithType: StringBuilder.StringBuilder(String, Int32)
  fullName: System.Text.StringBuilder.StringBuilder(System.String, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 108
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class using the specified string and capacity.</p>\n"
  remarks: "\n<p>The <em>capacity</em> parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <xref href=\"System.Text.StringBuilder.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property. If the number of characters to be stored in the current instance exceeds this <em>capacity</em> value, the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object allocates additional memory to store them.</p>\n<p>If <em>capacity</em> is zero, the implementation-specific default capacity is used.</p>\n"
  syntax:
    content: public StringBuilder(string value, int capacity)
    content.vb: Public Sub New(value As String, capacity As Integer)
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string used to initialize the value of the instance. If <em>value</em> is <strong>null</strong>, the new <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> will contain the empty string (that is, it contains <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>). </p>\n"
    - id: capacity
      type: System.Int32
      description: "\n<p>The suggested starting size of the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than zero. </p>\n"
  seealso:
  - type: System.Text.StringBuilder.Capacity
    commentId: P:System.Text.StringBuilder.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.String,System.Int32,System.Int32,System.Int32)'
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: StringBuilder(String, Int32, Int32, Int32)
  nameWithType: StringBuilder.StringBuilder(String, Int32, Int32, Int32)
  fullName: System.Text.StringBuilder.StringBuilder(System.String, System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 115
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class from the specified substring and capacity.</p>\n"
  remarks: "\n<p>The <em>capacity</em> parameter defines the maximum number of characters that can be stored in the memory allocated by the current instance. Its value is assigned to the <xref href=\"System.Text.StringBuilder.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property. If the number of characters to be stored in the current instance exceeds this <em>capacity</em> value, the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object allocates additional memory to store them.</p>\n<p>If <em>capacity</em> is zero, the implementation-specific default capacity is used.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public StringBuilder(string value, int startIndex, int length, int capacity)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub New(value As String, startIndex As Integer, length As Integer, capacity As Integer)
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string that contains the substring used to initialize the value of this instance. If <em>value</em> is <strong>null</strong>, the new <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> will contain the empty string (that is, it contains <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>). </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The position within <em>value</em> where the substring begins. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of characters in the substring. </p>\n"
    - id: capacity
      type: System.Int32
      description: "\n<p>The suggested starting size of the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> plus <em>length</em> is not a position within <em>value</em>. </p>\n"
  seealso:
  - type: System.Text.StringBuilder.Capacity
    commentId: P:System.Text.StringBuilder.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Capacity
  commentId: P:System.Text.StringBuilder.Capacity
  id: Capacity
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Capacity
  nameWithType: StringBuilder.Capacity
  fullName: System.Text.StringBuilder.Capacity
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Capacity
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 283
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Gets or sets the maximum number of characters that can be contained in the memory allocated by the current instance.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Text.StringBuilder.Capacity\" data-throw-if-not-resolved=\"false\"></xref> does not affect the string value of the current instance. <xref href=\"System.Text.StringBuilder.Capacity\" data-throw-if-not-resolved=\"false\"></xref> can be decreased as long as it is not less than <xref href=\"System.Text.StringBuilder.Length\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> dynamically allocates more space when required and increases <xref href=\"System.Text.StringBuilder.Capacity\" data-throw-if-not-resolved=\"false\"></xref> accordingly. For performance reasons, a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> might allocate more memory than needed. The amount of memory allocated is implementation-specific.</p>\n"
  syntax:
    content: public int Capacity { get; set; }
    content.vb: Public Property Capacity As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The maximum number of characters that can be contained in the memory allocated by the current instance. Its value can range from <xref href=\"System.Text.StringBuilder.Length\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value specified for a set operation is less than the current length of this instance.</p>\n<p>-or- </p>\n<p>The value specified for a set operation is greater than the maximum capacity. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Chars(System.Int32)
  commentId: P:System.Text.StringBuilder.Chars(System.Int32)
  id: Chars(System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Chars[Int32]
  nameWithType: StringBuilder.Chars[Int32]
  fullName: System.Text.StringBuilder.Chars[System.Int32]
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: this[]
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 511
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Gets or sets the character at the specified character position in this instance.</p>\n"
  remarks: "\n<p>The <em>index</em> parameter is the position of a character within the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref>. The first character in the string is at index 0. The length of a string is the number of characters it contains. The last accessible character of a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> instance is at index <xref href=\"System.Text.StringBuilder.Length\" data-throw-if-not-resolved=\"false\"></xref> - 1.</p>\n<p>\n<xref href=\"System.Text.StringBuilder.Chars(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> is the default property of the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class. In C#, it is an indexer. This means that individual characters can be retrieved from the <xref href=\"System.Text.StringBuilder.Chars(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property as shown in the following example, which counts the number of alphabetic, white-space, and punctuation characters in a string.</p>System.Text.StringBuilder.Chars#1"
  syntax:
    content: >-
      [IndexerName("Chars")]

      public char this[int index] { get; set; }
    content.vb: >-
      <IndexerName("Chars")>

      Public Property Chars(index As Integer) As Char
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position of the character. </p>\n"
    return:
      type: System.Char
      description: "\n<p>The Unicode character at position <em>index</em>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the bounds of this instance while setting a character. </p>\n"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the bounds of this instance while getting a character. </p>\n"
  seealso:
  - type: System.String
    commentId: T:System.String
  attributes:
  - type: System.Runtime.CompilerServices.IndexerNameAttribute
    ctor: System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Chars
  nameWithType.vb: StringBuilder.Chars(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Text.StringBuilder.Chars(System.Int32)
  name.vb: Chars(Int32)
- uid: System.Text.StringBuilder.Length
  commentId: P:System.Text.StringBuilder.Length
  id: Length
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: StringBuilder.Length
  fullName: System.Text.StringBuilder.Length
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Length
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 453
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Gets or sets the length of the current <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The length of a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object is defined by its number of <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects. </p>\n<p>Like the<xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> property, the <xref href=\"System.Text.StringBuilder.Length\" data-throw-if-not-resolved=\"false\"></xref> property indicates the length of the current string object. Unlike the <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> property, which is read-only, the <xref href=\"System.Text.StringBuilder.Length\" data-throw-if-not-resolved=\"false\"></xref> property allows you to modify the length of the string stored to the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object.  </p>\n<p>If the specified length is less than the current length, the current <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object is truncated to the specified length. If the specified length is greater than the current length, the end of the string value of the current <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object is padded with the Unicode NULL character (U+0000). </p>\n<p>If the specified length is greater than the current capacity, <xref href=\"System.Text.StringBuilder.Capacity\" data-throw-if-not-resolved=\"false\"></xref> increases so that it is greater than or equal to the specified length.</p>\n"
  syntax:
    content: public int Length { get; set; }
    content.vb: Public Property Length As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The length of this instance.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value specified for a set operation is less than zero or greater than <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.MaxCapacity
  commentId: P:System.Text.StringBuilder.MaxCapacity
  id: MaxCapacity
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: MaxCapacity
  nameWithType: StringBuilder.MaxCapacity
  fullName: System.Text.StringBuilder.MaxCapacity
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MaxCapacity
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 306
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Gets the maximum capacity of this instance.</p>\n"
  remarks: "\n<p>The maximum capacity for this implementation is <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. However, this value is implementation-specific and might be different in other or later implementations. You can explicitly set the maximum capacity of a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object by calling the <xref href=\"System.Text.StringBuilder.#ctor(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor. </p>\n<p>In the.NET Framework 4 and the .NET Framework 4.5, when you instantiate the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object by calling the <xref href=\"System.Text.StringBuilder.#ctor(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor, both the length and the capacity of the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> instance can grow beyond the value of its <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref> property. This can occur particularly when you call the <xref href=\"System.Text.StringBuilder.Append(System.String)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.StringBuilder.AppendFormat(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods to append small strings.</p>\n"
  syntax:
    content: public int MaxCapacity { get; }
    content.vb: Public ReadOnly Property MaxCapacity As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The maximum number of characters this instance can hold.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Text.StringBuilder.Append(System.Boolean)
  commentId: M:System.Text.StringBuilder.Append(System.Boolean)
  id: Append(System.Boolean)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Boolean)
  nameWithType: StringBuilder.Append(Boolean)
  fullName: System.Text.StringBuilder.Append(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 870
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified Boolean value to this instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.StringBuilder.Append(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object, as the following example illustrates.</p>System.Text.StringBuilder.Append#2<p>The <xref href=\"System.Text.StringBuilder.Append(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method calls the <xref href=\"System.Boolean.ToString\" data-throw-if-not-resolved=\"false\"></xref> method to get the string representation of <em>value</em>. The capacity of this instance is adjusted as needed.</p>"
  syntax:
    content: public StringBuilder Append(bool value)
    content.vb: Public Function Append(value As Boolean) As StringBuilder
    parameters:
    - id: value
      type: System.Boolean
      description: "\n<p>The Boolean value to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Boolean
    commentId: T:System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Append(System.Byte)
  commentId: M:System.Text.StringBuilder.Append(System.Byte)
  id: Append(System.Byte)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Byte)
  nameWithType: StringBuilder.Append(Byte)
  fullName: System.Text.StringBuilder.Append(System.Byte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 885
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified 8-bit unsigned integer to this instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.StringBuilder.Append(System.Byte)\" data-throw-if-not-resolved=\"false\"></xref> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object, as the following example illustrates.</p>System.Text.StringBuilder.Append#3<p>The <xref href=\"System.Text.StringBuilder.Append(System.Byte)\" data-throw-if-not-resolved=\"false\"></xref> method calls the <xref href=\"System.Byte.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>  method to get the string representation of <em>value</em> for the current culture. To control the formatting of <em>value</em>, call the <xref href=\"System.Text.StringBuilder.AppendFormat(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p><p>The capacity of this instance is adjusted as needed.</p>"
  syntax:
    content: public StringBuilder Append(byte value)
    content.vb: Public Function Append(value As Byte) As StringBuilder
    parameters:
    - id: value
      type: System.Byte
      description: "\n<p>The value to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Byte
    commentId: T:System.Byte
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Append(System.Char)
  commentId: M:System.Text.StringBuilder.Append(System.Char)
  id: Append(System.Char)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Char)
  nameWithType: StringBuilder.Append(Char)
  fullName: System.Text.StringBuilder.Append(System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 891
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object to this instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.StringBuilder.Append(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object, as the following example illustrates.</p>System.Text.StringBuilder.Append#4<p>The capacity of this instance is adjusted as needed.</p>"
  syntax:
    content: public StringBuilder Append(char value)
    content.vb: Public Function Append(value As Char) As StringBuilder
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The UTF-16-encoded code unit to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Append(System.Char*,System.Int32)
  commentId: M:System.Text.StringBuilder.Append(System.Char*,System.Int32)
  id: Append(System.Char*,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Char*, Int32)
  nameWithType: StringBuilder.Append(Char*, Int32)
  fullName: System.Text.StringBuilder.Append(System.Char*, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1612
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends an array of Unicode characters starting at a specified address to this instance. </p>\n"
  remarks: "\n<p>This method appends <em>valueCount</em> characters starting at address <em>value</em> to the current instance. </p>\n<p>The <xref href=\"System.Text.StringBuilder.Append(System.Char*,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n<p>The capacity of this instance is adjusted as needed. </p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [CLSCompliant(false)]

      public StringBuilder Append(char *value, int valueCount)
    content.vb: >-
      <SecurityCritical>

      <CLSCompliant(False)>

      Public Function Append(value As Char *, valueCount As Integer) As StringBuilder
    parameters:
    - id: value
      type: System.Char*
      description: "\n<p>A pointer to an array of characters. </p>\n"
    - id: valueCount
      type: System.Int32
      description: "\n<p>The number of characters in the array. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>valueCount</em> is less than zero. </p>\n<p>-or-</p>\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>\n<em>value</em> is a null pointer. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Append(System.Char,System.Int32)
  commentId: M:System.Text.StringBuilder.Append(System.Char,System.Int32)
  id: Append(System.Char,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Char, Int32)
  nameWithType: StringBuilder.Append(Char, Int32)
  fullName: System.Text.StringBuilder.Append(System.Char, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 549
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends a specified number of copies of the string representation of a Unicode character to this instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.StringBuilder.Append(System.Char,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object, as the following example illustrates.</p>System.Text.StringBuilder.Append#5<p>The capacity of this instance is adjusted as needed.</p>"
  syntax:
    content: public StringBuilder Append(char value, int repeatCount)
    content.vb: Public Function Append(value As Char, repeatCount As Integer) As StringBuilder
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The character to append. </p>\n"
    - id: repeatCount
      type: System.Int32
      description: "\n<p>The number of times to append <em>value</em>. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>repeatCount</em> is less than zero.</p>\n<p>-or- </p>\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Out of memory.</p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Append(System.Char[])
  commentId: M:System.Text.StringBuilder.Append(System.Char[])
  id: Append(System.Char[])
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Char[])
  nameWithType: StringBuilder.Append(Char[])
  fullName: System.Text.StringBuilder.Append(System.Char[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 978
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of the Unicode characters in a specified array to this instance.</p>\n"
  remarks: "\n<p>This method appends all the characters in the specified array to the current instance in the same order as they appear in <em>value</em>. If <em>value</em> is <strong>null</strong>, no changes are made.</p>\n<p>The <xref href=\"System.Text.StringBuilder.Append(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object, as the following example illustrates.</p>System.Text.StringBuilder.Append#6<p>The capacity of this instance is adjusted as needed.</p>"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public StringBuilder Append(char[] value)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function Append(value As Char()) As StringBuilder
    parameters:
    - id: value
      type: System.Char[]
      description: "\n<p>The array of characters to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType.vb: StringBuilder.Append(Char())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Text.StringBuilder.Append(System.Char())
  name.vb: Append(Char())
- uid: System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)
  id: Append(System.Char[],System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Char[], Int32, Int32)
  nameWithType: StringBuilder.Append(Char[], Int32, Int32)
  fullName: System.Text.StringBuilder.Append(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 581
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified subarray of Unicode characters to this instance.</p>\n"
  remarks: "\n<p>This method appends the specified range of characters in <em>value</em> to the current instance. If <em>value</em> is <strong>null</strong> and <em>startIndex</em> and <em>count</em> are both zero, no changes are made.</p>\n<p>The <xref href=\"System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object, as the following example illustrates.</p>System.Text.StringBuilder.Append#7<p>The capacity of this instance is adjusted as needed.</p>"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public StringBuilder Append(char[] value, int startIndex, int charCount)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function Append(value As Char(), startIndex As Integer, charCount As Integer) As StringBuilder
    parameters:
    - id: value
      type: System.Char[]
      description: "\n<p>A character array. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The starting position in <em>value</em>. </p>\n"
    - id: charCount
      type: System.Int32
      description: "\n<p>The number of characters to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>, and <em>startIndex</em> and <em>charCount</em> are not zero. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>charCount</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> + <em>charCount</em> is greater than the length of <em>value</em>.</p>\n<p>-or- </p>\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  nameWithType.vb: StringBuilder.Append(Char(), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Text.StringBuilder.Append(System.Char(), System.Int32, System.Int32)
  name.vb: Append(Char(), Int32, Int32)
- uid: System.Text.StringBuilder.Append(System.Decimal)
  commentId: M:System.Text.StringBuilder.Append(System.Decimal)
  id: Append(System.Decimal)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Decimal)
  nameWithType: StringBuilder.Append(Decimal)
  fullName: System.Text.StringBuilder.Append(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 936
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified decimal number to this instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.StringBuilder.Append(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object, as the following example illustrates.</p>System.Text.StringBuilder.Append#8<p>The <xref href=\"System.Text.StringBuilder.Append(System.Decimal)\" data-throw-if-not-resolved=\"false\"></xref> method calls the <xref href=\"System.Decimal.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method to get the string representation of <em>value</em> for the current culture. To control the formatting of <em>value</em>, call the <xref href=\"System.Text.StringBuilder.AppendFormat(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p><p>The capacity of this instance is adjusted as needed.</p>"
  syntax:
    content: public StringBuilder Append(decimal value)
    content.vb: Public Function Append(value As Decimal) As StringBuilder
    parameters:
    - id: value
      type: System.Decimal
      description: "\n<p>The value to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Decimal
    commentId: T:System.Decimal
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Append(System.Double)
  commentId: M:System.Text.StringBuilder.Append(System.Double)
  id: Append(System.Double)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Double)
  nameWithType: StringBuilder.Append(Double)
  fullName: System.Text.StringBuilder.Append(System.Double)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 931
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified double-precision floating-point number to this instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.StringBuilder.Append(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object, as the following example illustrates.</p>System.Text.StringBuilder.Append#9<p>The <xref href=\"System.Text.StringBuilder.Append(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method calls the <xref href=\"System.Double.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method to get the string representation of <em>value</em> for the current culture. To control the formatting of <em>value</em>, call the <xref href=\"System.Text.StringBuilder.AppendFormat(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p><p>The capacity of this instance is adjusted as needed.</p>"
  syntax:
    content: public StringBuilder Append(double value)
    content.vb: Public Function Append(value As Double) As StringBuilder
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>The value to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Double
    commentId: T:System.Double
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Append(System.Int16)
  commentId: M:System.Text.StringBuilder.Append(System.Int16)
  id: Append(System.Int16)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Int16)
  nameWithType: StringBuilder.Append(Int16)
  fullName: System.Text.StringBuilder.Append(System.Int16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 903
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified 16-bit signed integer to this instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.StringBuilder.Append(System.Int16)\" data-throw-if-not-resolved=\"false\"></xref> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object, as the following example illustrates.</p>System.Text.StringBuilder.Append#10<p>The <xref href=\"System.Text.StringBuilder.Append(System.Int16)\" data-throw-if-not-resolved=\"false\"></xref> method calls the <xref href=\"System.Int16.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method to get the string representation of <em>value</em> for the current culture. To control the formatting of <em>value</em>, call the <xref href=\"System.Text.StringBuilder.AppendFormat(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p><p>The capacity of this instance is adjusted as needed.</p>"
  syntax:
    content: public StringBuilder Append(short value)
    content.vb: Public Function Append(value As Short) As StringBuilder
    parameters:
    - id: value
      type: System.Int16
      description: "\n<p>The value to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Int16
    commentId: T:System.Int16
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Append(System.Int32)
  commentId: M:System.Text.StringBuilder.Append(System.Int32)
  id: Append(System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Int32)
  nameWithType: StringBuilder.Append(Int32)
  fullName: System.Text.StringBuilder.Append(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 910
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified 32-bit signed integer to this instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.StringBuilder.Append(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object, as the following example illustrates.</p>System.Text.StringBuilder.Append#11<p>The <xref href=\"System.Text.StringBuilder.Append(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method calls the <xref href=\"System.Int32.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method to get the string representation of <em>value</em> for the current culture. To control the formatting of <em>value</em>, call the <xref href=\"System.Text.StringBuilder.AppendFormat(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p><p>The capacity of this instance is adjusted as needed.</p>"
  syntax:
    content: public StringBuilder Append(int value)
    content.vb: Public Function Append(value As Integer) As StringBuilder
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The value to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Append(System.Int64)
  commentId: M:System.Text.StringBuilder.Append(System.Int64)
  id: Append(System.Int64)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Int64)
  nameWithType: StringBuilder.Append(Int64)
  fullName: System.Text.StringBuilder.Append(System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 917
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified 64-bit signed integer to this instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.StringBuilder.Append(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object, as the following example illustrates.</p>System.Text.StringBuilder.Append#12<p>The <xref href=\"System.Text.StringBuilder.Append(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method calls the <xref href=\"System.Int64.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>  to get the string representation of <em>value</em> for the current culture. To control the formatting of <em>value</em>, call the <xref href=\"System.Text.StringBuilder.AppendFormat(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p><p>The capacity of this instance is adjusted as needed.</p>"
  syntax:
    content: public StringBuilder Append(long value)
    content.vb: Public Function Append(value As Long) As StringBuilder
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The value to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Int64
    commentId: T:System.Int64
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Append(System.Object)
  commentId: M:System.Text.StringBuilder.Append(System.Object)
  id: Append(System.Object)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Object)
  nameWithType: StringBuilder.Append(Object)
  fullName: System.Text.StringBuilder.Append(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 967
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified object to this instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.StringBuilder.Append(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object, as the following example illustrates. It defines a <code>Dog</code> class, creates a <code>Dog</code> object, and makes three calls to the <xref href=\"System.Text.StringBuilder.Append(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method to create a string that contains the dog's name and breed.</p>System.Text.Stringbuilder.Append#18<p>The <xref href=\"System.Text.StringBuilder.Append(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method calls the <xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref> method to get the string representation of <em>value</em>. If <em>value</em> is <strong>null</strong>, no changes are made to the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object.</p><p>The capacity of this instance is adjusted as needed.</p>"
  syntax:
    content: public StringBuilder Append(object value)
    content.vb: Public Function Append(value As Object) As StringBuilder
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The object to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Object
    commentId: T:System.Object
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Append(System.SByte)
  commentId: M:System.Text.StringBuilder.Append(System.SByte)
  id: Append(System.SByte)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(SByte)
  nameWithType: StringBuilder.Append(SByte)
  fullName: System.Text.StringBuilder.Append(System.SByte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 877
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified 8-bit signed integer to this instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.StringBuilder.Append(System.SByte)\" data-throw-if-not-resolved=\"false\"></xref> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object, as the following example illustrates.</p>System.Text.StringBuilder.Append#13<p>The <xref href=\"System.Text.StringBuilder.Append(System.SByte)\" data-throw-if-not-resolved=\"false\"></xref> method calls the <xref href=\"System.SByte.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method  to get the string representation of <em>value</em> for the current culture. To control the formatting of <em>value</em>, call the <xref href=\"System.Text.StringBuilder.AppendFormat(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p><p>The capacity of this instance is adjusted as needed.</p>"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public StringBuilder Append(sbyte value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function Append(value As SByte) As StringBuilder
    parameters:
    - id: value
      type: System.SByte
      description: "\n<p>The value to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.SByte
    commentId: T:System.SByte
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Append(System.Single)
  commentId: M:System.Text.StringBuilder.Append(System.Single)
  id: Append(System.Single)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Single)
  nameWithType: StringBuilder.Append(Single)
  fullName: System.Text.StringBuilder.Append(System.Single)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 924
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified single-precision floating-point number to this instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.StringBuilder.Append(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object, as the following example illustrates.</p>System.Text.StringBuilder.Append#14<p>The <xref href=\"System.Text.StringBuilder.Append(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method calls the <xref href=\"System.Single.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method to get the string representation of <em>value</em> for the current culture. To control the formatting of <em>value</em>, call the <xref href=\"System.Text.StringBuilder.AppendFormat(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p><p>The capacity of this instance is adjusted as needed.</p>"
  syntax:
    content: public StringBuilder Append(float value)
    content.vb: Public Function Append(value As Single) As StringBuilder
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>The value to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Single
    commentId: T:System.Single
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Append(System.String)
  commentId: M:System.Text.StringBuilder.Append(System.String)
  id: Append(System.String)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(String)
  nameWithType: StringBuilder.Append(String)
  fullName: System.Text.StringBuilder.Append(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 614
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends a copy of the specified string to this instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.StringBuilder.Append(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object, as the following example illustrates.</p>System.Text.StringBuilder.Append#2<p>If <em>value</em> is <strong>null</strong>, no changes are made.</p><p>The capacity of this instance is adjusted as needed.</p>"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public StringBuilder Append(string value)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function Append(value As String) As StringBuilder
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)
  commentId: M:System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)
  id: Append(System.String,System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(String, Int32, Int32)
  nameWithType: StringBuilder.Append(String, Int32, Int32)
  fullName: System.Text.StringBuilder.Append(System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 671
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends a copy of a specified substring to this instance.</p>\n"
  remarks: "\n<p>This method appends the specified range of characters in <em>value</em> to the current instance. If <em>value</em> is <strong>null</strong> and <em>startIndex</em> and <em>count</em> are both zero, no changes are made.</p>\n<p>The <xref href=\"System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object, as the following example illustrates.</p>System.Text.StringBuilder.Append#19<p>The capacity of this instance is adjusted as needed.</p>"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public StringBuilder Append(string value, int startIndex, int count)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function Append(value As String, startIndex As Integer, count As Integer) As StringBuilder
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string that contains the substring to append. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The starting position of the substring within <em>value</em>. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of characters in <em>value</em> to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>, and <em>startIndex</em> and <em>count</em> are not zero. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> + <em>count</em> is greater than the length of <em>value</em>.</p>\n<p>-or- </p>\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Append(System.UInt16)
  commentId: M:System.Text.StringBuilder.Append(System.UInt16)
  id: Append(System.UInt16)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(UInt16)
  nameWithType: StringBuilder.Append(UInt16)
  fullName: System.Text.StringBuilder.Append(System.UInt16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 943
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified 16-bit unsigned integer to this instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.StringBuilder.Append(System.UInt16)\" data-throw-if-not-resolved=\"false\"></xref> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object, as the following example illustrates.</p>System.Text.StringBuilder.Append#15<p>The <xref href=\"System.Text.StringBuilder.Append(System.UInt16)\" data-throw-if-not-resolved=\"false\"></xref> method calls the <xref href=\"System.UInt16.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method to get the string representation of <em>value</em>. To control the formatting of <em>value</em>, call the <xref href=\"System.Text.StringBuilder.AppendFormat(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p><p>The capacity of this instance is adjusted as needed.</p>"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public StringBuilder Append(ushort value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function Append(value As UShort) As StringBuilder
    parameters:
    - id: value
      type: System.UInt16
      description: "\n<p>The value to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.UInt16
    commentId: T:System.UInt16
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Append(System.UInt32)
  commentId: M:System.Text.StringBuilder.Append(System.UInt32)
  id: Append(System.UInt32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(UInt32)
  nameWithType: StringBuilder.Append(UInt32)
  fullName: System.Text.StringBuilder.Append(System.UInt32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 951
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified 32-bit unsigned integer to this instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.StringBuilder.Append(System.UInt32)\" data-throw-if-not-resolved=\"false\"></xref> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object, as the following example illustrates.</p>System.Text.StringBuilder.Append#16<p>The <xref href=\"System.Text.StringBuilder.Append(System.UInt32)\" data-throw-if-not-resolved=\"false\"></xref> calls the <xref href=\"System.UInt32.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method to get the string representation of <em>value</em> for the current culture. To control the formatting of <em>value</em>, call the <xref href=\"System.Text.StringBuilder.AppendFormat(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p><p>The capacity of this instance is adjusted as needed.</p>"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public StringBuilder Append(uint value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function Append(value As UInteger) As StringBuilder
    parameters:
    - id: value
      type: System.UInt32
      description: "\n<p>The value to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.UInt32
    commentId: T:System.UInt32
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Append(System.UInt64)
  commentId: M:System.Text.StringBuilder.Append(System.UInt64)
  id: Append(System.UInt64)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(UInt64)
  nameWithType: StringBuilder.Append(UInt64)
  fullName: System.Text.StringBuilder.Append(System.UInt64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 959
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified 64-bit unsigned integer to this instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.StringBuilder.Append(System.UInt64)\" data-throw-if-not-resolved=\"false\"></xref> method modifies the existing instance of this class; it does not return a new class instance. Because of this, you can call a method or property on the existing reference and you do not have to assign the return value to a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object, as the following example illustrates.</p>System.Text.StringBuilder.Append#17<p>The <xref href=\"System.Text.StringBuilder.Append(System.UInt64)\" data-throw-if-not-resolved=\"false\"></xref> method calls the <xref href=\"System.UInt64.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method to get the string representation of <em>value</em> for the current culture. To control the formatting of <em>value</em>, call the <xref href=\"System.Text.StringBuilder.AppendFormat(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p><p>The capacity of this instance is adjusted as needed.</p>"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public StringBuilder Append(ulong value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function Append(value As ULong) As StringBuilder
    parameters:
    - id: value
      type: System.UInt64
      description: "\n<p>The value to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.UInt64
    commentId: T:System.UInt64
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)
  commentId: M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)
  id: AppendFormat(System.IFormatProvider,System.String,System.Object)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: AppendFormat(IFormatProvider, String, Object)
  nameWithType: StringBuilder.AppendFormat(IFormatProvider, String, Object)
  fullName: System.Text.StringBuilder.AppendFormat(System.IFormatProvider, System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendFormat
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1252
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument using a specified format provider. </p>\n"
  remarks: "\n<p>This method uses the  composite formatting feature of the .NET Framework to convert the value of <em>arg0</em> to its text representation and embed that representation in the current <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n<p>The <em>format</em> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items. The index of each format item must be zero (0) since this method includes an argument list with a single argument. The formatting process replaces each format item with the string representation of <em>arg0</em>. </p>\n<p>The syntax of a format item is as follows:</p>\n<p>{index[,length][:formatString]}</p>\n<p>Elements in square brackets are optional. The following table describes each element.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>index</p>\n</td><td>\n<p>The zero-based position in the parameter list of the object to be formatted. If the object specified by index is <strong>null</strong>, the format item is replaced by <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. In this case, since the <xref href=\"System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method has a single argument in the argument list, the value of index must always be 0. If it is not, a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n</td></tr><tr><td>\n<p>,length</p>\n</td><td>\n<p>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</p>\n</td></tr><tr><td>\n<p>:formatString</p>\n</td><td>\n<p>A standard or custom format string that is supported by the parameter.</p>\n</td></tr></tbody></table>\n<p>For the standard and custom format strings used with date and time values, see Standard Date and Time Format Strings and Custom Date and Time Format Strings. For the standard and custom format strings used with numeric values, see Standard Numeric Format Strings and Custom Numeric Format Strings. For the standard format strings used with enumerations, see Enumeration Format Strings.</p>\n<p>The <em>provider</em> parameter specifies an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation that can provide formatting information for the objects in <em>args</em>. <em>provider</em> can be any of the following:</p>\n<ul><li>\n<p>A <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides culture-specific formatting information. </p>\n</li><li>\n<p>A <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides culture-specific formatting information for <em>arg0</em> if it is a numeric value. </p>\n</li><li>\n<p>A <xref href=\"System.Globalization.DateTimeFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides culture-specific formatting information for <em>arg0</em> if it is a date and time value. </p>\n</li><li>\n<p>A custom <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation that provides formatting information for <em>arg0</em>. Typically, such an implementation also implements the <xref href=\"System.ICustomFormatter\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n</li></ul>\n<p>If the <em>provider</em> parameter is <strong>null</strong>, formatting information is obtained from the current culture.</p>\n<p>\n<em>arg0</em> represents the object to be formatted. Each format item in <em>format</em> is replaced with the string representation of <em>arg0</em>. If the format item includes <em>formatString</em> and <em>arg0</em> implements the <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> interface, then <strong>arg0.ToString(formatString, provider)</strong> defines the formatting. Otherwise, <strong>arg0.ToString()</strong> defines the formatting.</p>\n"
  syntax:
    content: public StringBuilder AppendFormat(IFormatProvider provider, string format, object arg0)
    content.vb: Public Function AppendFormat(provider As IFormatProvider, format As String, arg0 As Object) As StringBuilder
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks). </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The object to format. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <em>format</em> in which any format specification is replaced by the string representation of <em>arg0</em>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid. </p>\n<p>-or-</p>\n<p>The index of a format item is less than 0 (zero), or greater than or equal to one (1). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)
  commentId: M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)
  id: AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: AppendFormat(IFormatProvider, String, Object, Object)
  nameWithType: StringBuilder.AppendFormat(IFormatProvider, String, Object, Object)
  fullName: System.Text.StringBuilder.AppendFormat(System.IFormatProvider, System.String, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendFormat
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1257
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments using a specified format provider.</p>\n"
  remarks: "\n<p>This method uses the composite formatting feature of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n<p>The <em>format</em> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.</p>\n<p>The syntax of a format item is as follows:</p>\n<p>{index[,length][:formatString]}</p>\n<p>Elements in square brackets are optional. The following table describes each element.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>index</p>\n</td><td>\n<p>The zero-based position in the parameter list of the object to be formatted. If the object specified by index is <strong>null</strong>, the format item is replaced by <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. If there is no parameter in the index position, a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n</td></tr><tr><td>\n<p>,length</p>\n</td><td>\n<p>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</p>\n</td></tr><tr><td>\n<p>:formatString</p>\n</td><td>\n<p>A standard or custom format string that is supported by the parameter.</p>\n</td></tr></tbody></table>\n<p>For the standard and custom format strings used with date and time values, see Standard Date and Time Format Strings and Custom Date and Time Format Strings. For the standard and custom format strings used with numeric values, see Standard Numeric Format Strings and Custom Numeric Format Strings. For the standard format strings used with enumerations, see Enumeration Format Strings.</p>\n<p>The <em>provider</em> parameter specifies an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation that can provide formatting information for <em>arg0</em> and <em>arg1</em>. <em>provider</em> can be any of the following:</p>\n<ul><li>\n<p>A <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides culture-specific formatting information.</p>\n</li><li>\n<p>A <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides culture-specific formatting information for <em>arg0</em> or <em>arg1</em> if they are numeric values.</p>\n</li><li>\n<p>A <xref href=\"System.Globalization.DateTimeFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides culture-specific formatting information for <em>arg0</em> or <em>arg1</em> if they are date and time values. </p>\n</li><li>\n<p>A custom <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation that provides formatting information for <em>arg0</em> and <em>arg1</em>. Typically, such an implementation also implements the <xref href=\"System.ICustomFormatter\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n</li></ul>\n<p>If the <em>provider</em> parameter is <strong>null</strong>, format provider information is obtained from the current culture.</p>\n<p>\n<em>arg0</em> and <em>arg1</em> represent the objects to be formatted. Each format item in <em>format</em> is replaced with the string representation of the object that has the corresponding index. If the format item includes <em>formatString</em> and the corresponding argument implements the <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> interface, then the argument's <strong>ToString(formatString, provider)</strong> method defines the formatting. Otherwise, the argument's <strong>ToString()</strong> method defines the formatting. </p>\n"
  syntax:
    content: public StringBuilder AppendFormat(IFormatProvider provider, string format, object arg0, object arg1)
    content.vb: Public Function AppendFormat(provider As IFormatProvider, format As String, arg0 As Object, arg1 As Object) As StringBuilder
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks). </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to format. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to format. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <em>format</em> where any format specification is replaced by the string representation of the corresponding object argument. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid. </p>\n<p>-or-</p>\n<p>The index of a format item is less than 0 (zero), or greater than or equal to 2 (two). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)
  commentId: M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)
  id: AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: AppendFormat(IFormatProvider, String, Object, Object, Object)
  nameWithType: StringBuilder.AppendFormat(IFormatProvider, String, Object, Object, Object)
  fullName: System.Text.StringBuilder.AppendFormat(System.IFormatProvider, System.String, System.Object, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendFormat
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1262
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments using a specified format provider.</p>\n"
  remarks: "\n<p>This method uses the composite formatting feature of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n<p>The <em>format</em> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.</p>\n<p>The syntax of a format item is as follows:</p>\n<p>{index[,length][:formatString]}</p>\n<p>Elements in square brackets are optional. The following table describes each element.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>index</p>\n</td><td>\n<p>The zero-based position in the parameter list of the object to be formatted. If the object specified by index is <strong>null</strong>, the format item is replaced by <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. If there is no parameter in the index position, a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n</td></tr><tr><td>\n<p>,length</p>\n</td><td>\n<p>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</p>\n</td></tr><tr><td>\n<p>:formatString</p>\n</td><td>\n<p>A standard or custom format string that is supported by the parameter.</p>\n</td></tr></tbody></table>\n<p>For the standard and custom format strings used with date and time values, see Standard Date and Time Format Strings and Custom Date and Time Format Strings. For the standard and custom format strings used with numeric values, see Standard Numeric Format Strings and Custom Numeric Format Strings. For the standard format strings used with enumerations, see Enumeration Format Strings.</p>\n<p>The <em>provider</em> parameter specifies an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation that can provide formatting information for <em>arg0</em> and <em>arg1</em>. <em>provider</em> can be any of the following:</p>\n<ul><li>\n<p>A <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides culture-specific formatting information.</p>\n</li><li>\n<p>A <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides culture-specific formatting information for <em>arg0</em> or <em>arg1</em> if they are numeric values.</p>\n</li><li>\n<p>A <xref href=\"System.Globalization.DateTimeFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides culture-specific formatting information for <em>arg0</em>, <em>arg1</em>, or <em>arg2</em> if they are date and time values. </p>\n</li><li>\n<p>A custom <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation that provides formatting information for <em>arg0</em>,  <em>arg1</em>, and <em>arg2</em>. Typically, such an implementation also implements the <xref href=\"System.ICustomFormatter\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n</li></ul>\n<p>If the <em>provider</em> parameter is <strong>null</strong>, format provider information is obtained from the current culture.</p>\n<p>\n<em>arg0</em>, <em>arg1</em>, and <em>arg2</em> represent the objects to be formatted. Each format item in <em>format</em> is replaced with the string representation of the object that has the corresponding index. If the format item includes <em>formatString</em> and the corresponding argument implements the <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> interface, then the argument's <strong>ToString(formatString, provider)</strong> method defines the formatting. Otherwise, the argument's <strong>ToString()</strong> method defines the formatting. </p>\n"
  syntax:
    content: public StringBuilder AppendFormat(IFormatProvider provider, string format, object arg0, object arg1, object arg2)
    content.vb: Public Function AppendFormat(provider As IFormatProvider, format As String, arg0 As Object, arg1 As Object, arg2 As Object) As StringBuilder
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks). </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to format. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to format. </p>\n"
    - id: arg2
      type: System.Object
      description: "\n<p>The third object to format. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <em>format</em> where any format specification is replaced by the string representation of the corresponding object argument. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid. </p>\n<p>-or-</p>\n<p>The index of a format item is less than 0 (zero), or greater than or equal to 3 (three). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])
  commentId: M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])
  id: AppendFormat(System.IFormatProvider,System.String,System.Object[])
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: AppendFormat(IFormatProvider, String, Object[])
  nameWithType: StringBuilder.AppendFormat(IFormatProvider, String, Object[])
  fullName: System.Text.StringBuilder.AppendFormat(System.IFormatProvider, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendFormat
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1267
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array using a specified format provider.</p>\n"
  remarks: "\n<p>This method uses the composite formatting feature of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n<p>The <em>format</em> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.</p>\n<p>The syntax of a format item is as follows:</p>\n<p>{index[,length][:formatString]}</p>\n<p>Elements in square brackets are optional. The following table describes each element.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>index</p>\n</td><td>\n<p>The zero-based position in the parameter list of the object to be formatted. If the object specified by index is <strong>null</strong>, the format item is replaced by <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. If there is no parameter in the index position, a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n</td></tr><tr><td>\n<p>,length</p>\n</td><td>\n<p>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</p>\n</td></tr><tr><td>\n<p>:formatString</p>\n</td><td>\n<p>A standard or custom format string that is supported by the parameter.</p>\n</td></tr></tbody></table>\n<p>For the standard and custom format strings used with date and time values, see Standard Date and Time Format Strings and Custom Date and Time Format Strings. For the standard and custom format strings used with numeric values, see Standard Numeric Format Strings and Custom Numeric Format Strings. For the standard format strings used with enumerations, see Enumeration Format Strings.</p>\n<p>The <em>provider</em> parameter specifies an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation that can provide formatting information for the objects in <em>args</em>. <em>provider</em> can be any of the following:</p>\n<ul><li>\n<p>A <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides culture-specific formatting information.</p>\n</li><li>\n<p>A <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides culture-specific formatting information for numeric values in <em>args</em>.</p>\n</li><li>\n<p>A <xref href=\"System.Globalization.DateTimeFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides culture-specific formatting information for date and time values in <em>args</em>.</p>\n</li><li>\n<p>A custom <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation that provides formatting information for one or more of the objects in <em>args</em>. Typically, such an implementation also implements the <xref href=\"System.ICustomFormatter\" data-throw-if-not-resolved=\"false\"></xref> interface. The second example in the next section illustrates an <xref href=\"System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> method call with a custom <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation.</p>\n</li></ul>\n<p>If the <em>provider</em> parameter is <strong>null</strong>, format provider information is obtained from the current culture.</p>\n<p>\n<em>args</em> represents the objects to be formatted. Each format item in <em>format</em> is replaced with the string representation of the corresponding object in <em>args</em>. If the format item includes <em>formatString</em> and the corresponding object in <em>args</em> implements the <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> interface, then <strong>args[index].ToString(formatString, provider)</strong> defines the formatting. Otherwise, <strong>args[index].ToString()</strong> defines the formatting.</p>\n"
  syntax:
    content: public StringBuilder AppendFormat(IFormatProvider provider, string format, params object[] args)
    content.vb: Public Function AppendFormat(provider As IFormatProvider, format As String, ParamArray args As Object()) As StringBuilder
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks). </p>\n"
    - id: args
      type: System.Object[]
      description: "\n<p>An array of objects to format.</p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <em>format</em> where any format specification is replaced by the string representation of the corresponding object argument. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid. </p>\n<p>-or-</p>\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the length of the <em>args</em> array.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType.vb: StringBuilder.AppendFormat(IFormatProvider, String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Text.StringBuilder.AppendFormat(System.IFormatProvider, System.String, System.Object())
  name.vb: AppendFormat(IFormatProvider, String, Object())
- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object)
  commentId: M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)
  id: AppendFormat(System.String,System.Object)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: AppendFormat(String, Object)
  nameWithType: StringBuilder.AppendFormat(String, Object)
  fullName: System.Text.StringBuilder.AppendFormat(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendFormat
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1224
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.</p>\n"
  remarks: "\n<p>This method uses the composite formatting feature of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>The <em>format</em> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items. The index of the format items must be 0, to correspond to <em>arg0</em>, the single object in the parameter list of this method. The formatting process replaces each format item with the string representation of <em>arg0</em>.</p>\n<p>The syntax of a format item is as follows:</p>\n<p>{index[,length][:formatString]}</p>\n<p>Elements in square brackets are optional. The following table describes each element.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>index</p>\n</td><td>\n<p>The zero-based position in the parameter list of the object to be formatted. If the object specified by index is <strong>null</strong>, the format item is replaced by <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. If there is no parameter in the index position, a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n</td></tr><tr><td>\n<p>,length</p>\n</td><td>\n<p>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</p>\n</td></tr><tr><td>\n<p>:formatString</p>\n</td><td>\n<p>A standard or custom format string that is supported by the parameter.</p>\n</td></tr></tbody></table>\n<p>For the standard and custom format strings used with date and time values, see Standard Date and Time Format Strings and Custom Date and Time Format Strings. For the standard and custom format strings used with numeric values, see Standard Numeric Format Strings and Custom Numeric Format Strings. For the standard format strings used with enumerations, see Enumeration Format Strings.</p>\n<p>\n<em>arg0</em> represents the object to be formatted. Each format item in <em>format</em> is replaced with the string representation of <em>arg0</em>. If the format item includes <em>formatString</em> and <em>arg0</em> implements the <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> interface, then <strong>arg0.ToString(formatString, null)</strong> defines the formatting. Otherwise, <strong>arg0.ToString()</strong> defines the formatting.</p>\n<p>If the string assigned to <em>format</em> is \"Thank you for your donation of {0:####} cans of food to our charitable organization.\" and <em>arg0</em> is an integer with the value 10, the return value will be \"Thank you for your donation of 10 cans of food to our charitable organization.\" </p>\n"
  syntax:
    content: public StringBuilder AppendFormat(string format, object arg0)
    content.vb: Public Function AppendFormat(format As String, arg0 As Object) As StringBuilder
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks). </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>An object to format. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance with <em>format</em> appended. Each format item in <em>format</em> is replaced by the string representation of <em>arg0</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid. </p>\n<p>-or-</p>\n<p>The index of a format item is less than 0 (zero), or greater than or equal to 1.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)
  commentId: M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)
  id: AppendFormat(System.String,System.Object,System.Object)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: AppendFormat(String, Object, Object)
  nameWithType: StringBuilder.AppendFormat(String, Object, Object)
  fullName: System.Text.StringBuilder.AppendFormat(System.String, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendFormat
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1229
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments.</p>\n"
  remarks: "\n<p>This method uses the composite formatting feature of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n<p>The <em>format</em> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to <em>arg0</em> and <em>arg1</em>, the two objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.</p>\n<p>The syntax of a format item is as follows:</p>\n<p>{index[,length][:formatString]}</p>\n<p>Elements in square brackets are optional. The following table describes each element.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>index</p>\n</td><td>\n<p>The zero-based position in the parameter list of the object to be formatted. If the object specified by index is <strong>null</strong>, the format item is replaced by <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. If there is no parameter in the index position, a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n</td></tr><tr><td>\n<p>,length</p>\n</td><td>\n<p>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</p>\n</td></tr><tr><td>\n<p>:formatString</p>\n</td><td>\n<p>A standard or custom format string that is supported by the parameter. </p>\n</td></tr></tbody></table>\n<p>For the standard and custom format strings used with date and time values, see Standard Date and Time Format Strings and Custom Date and Time Format Strings. For the standard and custom format strings used with numeric values, see Standard Numeric Format Strings and Custom Numeric Format Strings. For the standard format strings used with enumerations, see Enumeration Format Strings.</p>\n<p>\n<em>arg0</em> and <em>arg1</em> represent the objects to be formatted. Each format item in <em>format</em> is replaced with the string representation of either <em>arg0</em> or <em>arg1</em>. If the format item includes <em>formatString</em> and the corresponding object implements the <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> interface, then <strong>arg</strong>x<strong>.ToString(formatString, provider)</strong> defines the formatting, where x is the index of the argument. Otherwise, <strong>arg</strong>x<strong>.ToString()</strong> defines the formatting.</p>\n<p>If the string assigned to <em>format</em> is \"Thank you for your donation of {0:####} cans of food to our charitable organization.\" and <em>arg0</em> is an integer with the value 10, the return value will be \"Thank you for your donation of 10 cans of food to our charitable organization.\" </p>\n"
  syntax:
    content: public StringBuilder AppendFormat(string format, object arg0, object arg1)
    content.vb: Public Function AppendFormat(format As String, arg0 As Object, arg1 As Object) As StringBuilder
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks). </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to format. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to format. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance with <em>format</em> appended. Each format item in <em>format</em> is replaced by the string representation of the corresponding object argument.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid.</p>\n<p>-or-</p>\n<p>The index of a format item is less than 0 (zero), or greater than or equal to 2. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)
  commentId: M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)
  id: AppendFormat(System.String,System.Object,System.Object,System.Object)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: AppendFormat(String, Object, Object, Object)
  nameWithType: StringBuilder.AppendFormat(String, Object, Object, Object)
  fullName: System.Text.StringBuilder.AppendFormat(System.String, System.Object, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendFormat
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1234
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments.</p>\n"
  remarks: "\n<p>This method uses the composite formatting feature of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>The <em>format</em> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to <em>arg0</em> through <em>arg2</em>, the objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.</p>\n<p>The syntax of a format item is as follows:</p>\n<p>{index[,length][:formatString]}</p>\n<p>Elements in square brackets are optional. The following table describes each element.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>index</p>\n</td><td>\n<p>The zero-based position in the parameter list of the object to be formatted. If the object specified by index is <strong>null</strong>, the format item is replaced by <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. If there is no parameter in the index position, a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n</td></tr><tr><td>\n<p>,length</p>\n</td><td>\n<p>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</p>\n</td></tr><tr><td>\n<p>:formatString</p>\n</td><td>\n<p>A standard or custom format string that is supported by the parameter.</p>\n</td></tr></tbody></table>\n<p>For the standard and custom format strings used with date and time values, see Standard Date and Time Format Strings and Custom Date and Time Format Strings. For the standard and custom format strings used with numeric values, see Standard Numeric Format Strings and Custom Numeric Format Strings. For the standard format strings used with enumerations, see Enumeration Format Strings.</p>\n<p>\n<em>arg0</em>, <em>arg1</em>, and <em>arg2</em> represent the objects to be formatted. Each format item in <em>format</em> is replaced with the string representation of either <em>arg0</em>, <em>arg1</em>, or <em>arg2</em>, depending on the index of the format item. If the format item includes <em>formatString</em> and the corresponding object in <em>args</em> implements the <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> interface, then <strong>arg</strong>x<strong>.ToString(formatString, null)</strong> defines the formatting, where x is the index of the argument. Otherwise, <strong>arg</strong>x<strong>.ToString()</strong> defines the formatting.</p>\n<p>If the string assigned to <em>format</em> is \"Thank you for your donation of {0:####} cans of food to our charitable organization.\" and <em>arg0</em> is an integer with the value 10, the return value will be \"Thank you for your donation of 10 cans of food to our charitable organization.\" </p>\n"
  syntax:
    content: public StringBuilder AppendFormat(string format, object arg0, object arg1, object arg2)
    content.vb: Public Function AppendFormat(format As String, arg0 As Object, arg1 As Object, arg2 As Object) As StringBuilder
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks). </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to format. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to format. </p>\n"
    - id: arg2
      type: System.Object
      description: "\n<p>The third object to format. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance with <em>format</em> appended. Each format item in <em>format</em> is replaced by the string representation of the corresponding object argument.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid.</p>\n<p>-or-</p>\n<p>The index of a format item is less than 0 (zero), or greater than or equal to 3.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object[])
  commentId: M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])
  id: AppendFormat(System.String,System.Object[])
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: AppendFormat(String, Object[])
  nameWithType: StringBuilder.AppendFormat(String, Object[])
  fullName: System.Text.StringBuilder.AppendFormat(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendFormat
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1239
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array.</p>\n"
  remarks: "\n<p>This method uses the composite formatting feature of the .NET Framework to convert the value of an object to its text representation and embed that representation in the current <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n<p>The <em>format</em> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to objects in the parameter list of this method. The formatting process replaces each format item with the string representation of the corresponding object.</p>\n<p>The syntax of a format item is as follows:</p>\n<p>{index[,length][:formatString]}</p>\n<p>Elements in square brackets are optional. The following table describes each element.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>index</p>\n</td><td>\n<p>The zero-based position in the parameter list of the object to be formatted. If the object specified by index is <strong>null</strong>, the format item is replaced by <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. If there is no parameter in the index position, a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n</td></tr><tr><td>\n<p>,length</p>\n</td><td>\n<p>The minimum number of characters in the string representation of the parameter. If positive, the parameter is right-aligned; if negative, it is left-aligned.</p>\n</td></tr><tr><td>\n<p>:formatString</p>\n</td><td>\n<p>A standard or custom format string that is supported by the parameter.</p>\n</td></tr></tbody></table>\n<p>For the standard and custom format strings used with date and time values, see Standard Date and Time Format Strings and Custom Date and Time Format Strings. For the standard and custom format strings used with numeric values, see Standard Numeric Format Strings and Custom Numeric Format Strings. For the standard format strings used with enumerations, see Enumeration Format Strings.</p>\n<p>\n<em>args</em> represents the objects to be formatted. Each format item in <em>format</em> is replaced with the string representation of the corresponding object in <em>args</em>. If the format item includes <em>formatString</em> and the corresponding object in <em>args</em> implements the <xref href=\"System.IFormattable\" data-throw-if-not-resolved=\"false\"></xref> interface, then <strong>args[index].ToString(formatString, provider)</strong> defines the formatting. Otherwise, <strong>args[index].ToString()</strong> defines the formatting.</p>\n<p>If the string assigned to <em>format</em> is \"Thank you for your donation of {0:####} cans of food to our charitable organization.\" and <em>arg0</em> is an integer with the value 10, the return value will be \"Thank you for your donation of 10 cans of food to our charitable organization.\" </p>\n"
  syntax:
    content: public StringBuilder AppendFormat(string format, params object[] args)
    content.vb: Public Function AppendFormat(format As String, ParamArray args As Object()) As StringBuilder
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks). </p>\n"
    - id: args
      type: System.Object[]
      description: "\n<p>An array of objects to format. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance with <em>format</em> appended. Each format item in <em>format</em> is replaced by the string representation of the corresponding object argument.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> or <em>args</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid. </p>\n<p>-or-</p>\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the length of the <em>args</em> array.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType.vb: StringBuilder.AppendFormat(String, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Text.StringBuilder.AppendFormat(System.String, System.Object())
  name.vb: AppendFormat(String, Object())
- uid: System.Text.StringBuilder.AppendLine
  commentId: M:System.Text.StringBuilder.AppendLine
  id: AppendLine
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: AppendLine()
  nameWithType: StringBuilder.AppendLine()
  fullName: System.Text.StringBuilder.AppendLine()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendLine
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 706
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the default line terminator to the end of the current <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The default line terminator is the current value of the <xref href=\"System.Environment.NewLine\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The capacity of this instance is adjusted as needed.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public StringBuilder AppendLine()
    content.vb: >-
      <ComVisible(False)>

      Public Function AppendLine As StringBuilder
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.AppendLine(System.String)
  commentId: M:System.Text.StringBuilder.AppendLine(System.String)
  id: AppendLine(System.String)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: AppendLine(String)
  nameWithType: StringBuilder.AppendLine(String)
  fullName: System.Text.StringBuilder.AppendLine(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendLine
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 712
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends a copy of the specified string followed by the default line terminator to the end of the current <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The default line terminator is the current value of the <xref href=\"System.Environment.NewLine\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The capacity of this instance is adjusted as needed.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public StringBuilder AppendLine(string value)
    content.vb: >-
      <ComVisible(False)>

      Public Function AppendLine(value As String) As StringBuilder
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Clear
  commentId: M:System.Text.StringBuilder.Clear
  id: Clear
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: StringBuilder.Clear()
  fullName: System.Text.StringBuilder.Clear()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Clear
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 444
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Removes all characters from the current <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Text.StringBuilder.Clear\" data-throw-if-not-resolved=\"false\"></xref> is a convenience method that is equivalent to setting the <xref href=\"System.Text.StringBuilder.Length\" data-throw-if-not-resolved=\"false\"></xref> property of the current instance to 0 (zero).</p>\n<p>Calling the <xref href=\"System.Text.StringBuilder.Clear\" data-throw-if-not-resolved=\"false\"></xref> method does not modify the current instance's <xref href=\"System.Text.StringBuilder.Capacity\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public StringBuilder Clear()
    content.vb: Public Function Clear As StringBuilder
    return:
      type: System.Text.StringBuilder
      description: "\n<p>An object whose <xref href=\"System.Text.StringBuilder.Length\" data-throw-if-not-resolved=\"false\"></xref> is 0 (zero).</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)
  commentId: M:System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)
  id: CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: CopyTo(Int32, Char[], Int32, Int32)
  nameWithType: StringBuilder.CopyTo(Int32, Char[], Int32, Int32)
  fullName: System.Text.StringBuilder.CopyTo(System.Int32, System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CopyTo
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 719
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Copies the characters from a specified segment of this instance to a specified segment of a destination <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> array.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is intended to be used in the rare situation when you need to efficiently copy successive sections of a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object to an array. The array should be a fixed size, preallocated, reusable, and possibly globally accessible. </p>\n<p>For example, your application could populate a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object with a large number of characters then use the <xref href=\"System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to copy small, successive pieces of the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object to an array where the pieces are processed. When all the data in the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object is processed, the size of the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object is set to zero and the cycle is repeated.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      [SecuritySafeCritical]

      public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count)
    content.vb: >-
      <ComVisible(False)>

      <SecuritySafeCritical>

      Public Sub CopyTo(sourceIndex As Integer, destination As Char(), destinationIndex As Integer, count As Integer)
    parameters:
    - id: sourceIndex
      type: System.Int32
      description: "\n<p>The starting position in this instance where characters will be copied from. The index is zero-based.</p>\n"
    - id: destination
      type: System.Char[]
      description: "\n<p>The array where characters will be copied.</p>\n"
    - id: destinationIndex
      type: System.Int32
      description: "\n<p>The starting position in <em>destination</em> where characters will be copied. The index is zero-based.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of characters to be copied.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>destination</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>sourceIndex</em>, <em>destinationIndex</em>, or <em>count</em>, is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>sourceIndex</em> is greater than the length of this instance.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>sourceIndex</em> + <em>count</em> is greater than the length of this instance.</p>\n<p>-or-</p>\n<p>\n<em>destinationIndex</em> + <em>count</em> is greater than the length of <em>destination</em>.</p>\n"
  nameWithType.vb: StringBuilder.CopyTo(Int32, Char(), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Text.StringBuilder.CopyTo(System.Int32, System.Char(), System.Int32, System.Int32)
  name.vb: CopyTo(Int32, Char(), Int32, Int32)
- uid: System.Text.StringBuilder.EnsureCapacity(System.Int32)
  commentId: M:System.Text.StringBuilder.EnsureCapacity(System.Int32)
  id: EnsureCapacity(System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: EnsureCapacity(Int32)
  nameWithType: StringBuilder.EnsureCapacity(Int32)
  fullName: System.Text.StringBuilder.EnsureCapacity(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EnsureCapacity
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 315
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Ensures that the capacity of this instance of <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> is at least the specified value.</p>\n"
  remarks: "\n<p>If the current capacity is less than the <em>capacity</em> parameter, memory for this instance is reallocated to hold at least <em>capacity</em> number of characters; otherwise, no memory is changed.</p>\n"
  syntax:
    content: public int EnsureCapacity(int capacity)
    content.vb: Public Function EnsureCapacity(capacity As Integer) As Integer
    parameters:
    - id: capacity
      type: System.Int32
      description: "\n<p>The minimum capacity to ensure. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The new capacity of this instance.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than zero.</p>\n<p>-or- </p>\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Equals(System.Text.StringBuilder)
  commentId: M:System.Text.StringBuilder.Equals(System.Text.StringBuilder)
  id: Equals(System.Text.StringBuilder)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Equals(StringBuilder)
  nameWithType: StringBuilder.Equals(StringBuilder)
  fullName: System.Text.StringBuilder.Equals(System.Text.StringBuilder)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1440
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Returns a value indicating whether this instance is equal to a specified object.</p>\n"
  syntax:
    content: public bool Equals(StringBuilder sb)
    content.vb: Public Function Equals(sb As StringBuilder) As Boolean
    parameters:
    - id: sb
      type: System.Text.StringBuilder
      description: "\n<p>An object to compare with this instance, or <strong>null</strong>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this instance and <em>sb</em> have equal string, <xref href=\"System.Text.StringBuilder.Capacity\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref> values; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Boolean)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Boolean)
  id: Insert(System.Int32,System.Boolean)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, Boolean)
  nameWithType: StringBuilder.Insert(Int32, Boolean)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1024
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a Boolean value into this instance at the specified character position.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Boolean.ToString\" data-throw-if-not-resolved=\"false\"></xref> is used to get a string representation of <em>value</em>. Existing characters are shifted to make room for the new text. The capacity is adjusted as needed.</p>\n"
  syntax:
    content: public StringBuilder Insert(int index, bool value)
    content.vb: Public Function Insert(index As Integer, value As Boolean) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.Boolean
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance.</p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Boolean
    commentId: T:System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Byte)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Byte)
  id: Insert(System.Int32,System.Byte)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, Byte)
  nameWithType: StringBuilder.Insert(Int32, Byte)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Byte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1045
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a specified 8-bit unsigned integer into this instance at the specified character position.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Byte.ToString\" data-throw-if-not-resolved=\"false\"></xref> is used to get a string representation of <em>value</em>. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n"
  syntax:
    content: public StringBuilder Insert(int index, byte value)
    content.vb: Public Function Insert(index As Integer, value As Byte) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.Byte
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Byte
    commentId: T:System.Byte
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Char)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Char)
  id: Insert(System.Int32,System.Char)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, Char)
  nameWithType: StringBuilder.Insert(Int32, Char)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1064
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a specified Unicode character into this instance at the specified character position.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Char.ToString\" data-throw-if-not-resolved=\"false\"></xref> is used to get a string representation of <em>value</em>. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public StringBuilder Insert(int index, char value)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function Insert(index As Integer, value As Char) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.Char
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance.</p>\n<p>-or- </p>\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Char[])
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Char[])
  id: Insert(System.Int32,System.Char[])
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, Char[])
  nameWithType: StringBuilder.Insert(Int32, Char[])
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Char[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1079
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a specified array of Unicode characters into this instance at the specified character position.</p>\n"
  remarks: "\n<p>Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n<p>If <em>value</em> is <strong>null</strong>, the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> is not changed.</p>\n"
  syntax:
    content: public StringBuilder Insert(int index, char[] value)
    content.vb: Public Function Insert(index As Integer, value As Char()) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.Char[]
      description: "\n<p>The character array to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance.</p>\n<p>-or- </p>\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType.vb: StringBuilder.Insert(Int32, Char())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Text.StringBuilder.Insert(System.Int32, System.Char())
  name.vb: Insert(Int32, Char())
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)
  id: Insert(System.Int32,System.Char[],System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, Char[], Int32, Int32)
  nameWithType: StringBuilder.Insert(Int32, Char[], Int32, Int32)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1095
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a specified subarray of Unicode characters into this instance at the specified character position.</p>\n"
  remarks: "\n<p>Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public StringBuilder Insert(int index, char[] value, int startIndex, int charCount)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function Insert(index As Integer, value As Char(), startIndex As Integer, charCount As Integer) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.Char[]
      description: "\n<p>A character array. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The starting index within <em>value</em>. </p>\n"
    - id: charCount
      type: System.Int32
      description: "\n<p>The number of characters to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>, and <em>startIndex</em> and <em>charCount</em> are not zero. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em>, <em>startIndex</em>, or <em>charCount</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> is greater than the length of this instance.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> plus <em>charCount</em> is not a position within <em>value</em>.</p>\n<p>-or- </p>\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType.vb: StringBuilder.Insert(Int32, Char(), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Text.StringBuilder.Insert(System.Int32, System.Char(), System.Int32, System.Int32)
  name.vb: Insert(Int32, Char(), Int32, Int32)
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Decimal)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Decimal)
  id: Insert(System.Int32,System.Decimal)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, Decimal)
  nameWithType: StringBuilder.Insert(Int32, Decimal)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1176
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a decimal number into this instance at the specified character position.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Decimal.ToString\" data-throw-if-not-resolved=\"false\"></xref> is used to get a string representation of <em>value</em>. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n"
  syntax:
    content: public StringBuilder Insert(int index, decimal value)
    content.vb: Public Function Insert(index As Integer, value As Decimal) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.Decimal
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Decimal
    commentId: T:System.Decimal
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Double)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Double)
  id: Insert(System.Int32,System.Double)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, Double)
  nameWithType: StringBuilder.Insert(Int32, Double)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Double)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1171
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a double-precision floating-point number into this instance at the specified character position.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Double.ToString\" data-throw-if-not-resolved=\"false\"></xref> is used to get a string representation of <em>value</em>. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n"
  syntax:
    content: public StringBuilder Insert(int index, double value)
    content.vb: Public Function Insert(index As Integer, value As Double) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.Double
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Double
    commentId: T:System.Double
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Int16)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Int16)
  id: Insert(System.Int32,System.Int16)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, Int16)
  nameWithType: StringBuilder.Insert(Int32, Int16)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Int16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1055
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a specified 16-bit signed integer into this instance at the specified character position.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Int16.ToString\" data-throw-if-not-resolved=\"false\"></xref> is used to get a string representation of <em>value</em>. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n"
  syntax:
    content: public StringBuilder Insert(int index, short value)
    content.vb: Public Function Insert(index As Integer, value As Short) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.Int16
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Int16
    commentId: T:System.Int16
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Int32)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Int32)
  id: Insert(System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, Int32)
  nameWithType: StringBuilder.Insert(Int32, Int32)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1141
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a specified 32-bit signed integer into this instance at the specified character position.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Int32.ToString\" data-throw-if-not-resolved=\"false\"></xref> is used to get a string representation of <em>value</em>. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n"
  syntax:
    content: public StringBuilder Insert(int index, int value)
    content.vb: Public Function Insert(index As Integer, value As Integer) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.Int32
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Int64)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Int64)
  id: Insert(System.Int32,System.Int64)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, Int64)
  nameWithType: StringBuilder.Insert(Int32, Int64)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1151
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a 64-bit signed integer into this instance at the specified character position.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Int64.ToString\" data-throw-if-not-resolved=\"false\"></xref> is used to get a string representation of <em>value</em>. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n"
  syntax:
    content: public StringBuilder Insert(int index, long value)
    content.vb: Public Function Insert(index As Integer, value As Long) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.Int64
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Int64
    commentId: T:System.Int64
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Object)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Object)
  id: Insert(System.Int32,System.Object)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, Object)
  nameWithType: StringBuilder.Insert(Int32, Object)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1216
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of an object into this instance at the specified character position.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref> is used to get a string representation of <em>value</em>. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n<p>If <em>value</em> is <strong>null</strong>, the value of this instance is unchanged.</p>\n"
  syntax:
    content: public StringBuilder Insert(int index, object value)
    content.vb: Public Function Insert(index As Integer, value As Object) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The object to insert, or <strong>null</strong>. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Object
    commentId: T:System.Object
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Insert(System.Int32,System.SByte)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.SByte)
  id: Insert(System.Int32,System.SByte)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, SByte)
  nameWithType: StringBuilder.Insert(Int32, SByte)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.SByte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1034
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a specified 8-bit signed integer into this instance at the specified character position.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.SByte.ToString\" data-throw-if-not-resolved=\"false\"></xref> is used to get a string representation of <em>value</em>. Existing characters are shifted to make room for the new text. The capacity is adjusted as needed.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public StringBuilder Insert(int index, sbyte value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function Insert(index As Integer, value As SByte) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.SByte
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.SByte
    commentId: T:System.SByte
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Single)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Single)
  id: Insert(System.Int32,System.Single)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, Single)
  nameWithType: StringBuilder.Insert(Int32, Single)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Single)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1161
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a single-precision floating point number into this instance at the specified character position.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Single.ToString\" data-throw-if-not-resolved=\"false\"></xref> is used to get a string representation of <em>value</em>. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n"
  syntax:
    content: public StringBuilder Insert(int index, float value)
    content.vb: Public Function Insert(index As Integer, value As Single) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.Single
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Single
    commentId: T:System.Single
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Insert(System.Int32,System.String)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.String)
  id: Insert(System.Int32,System.String)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, String)
  nameWithType: StringBuilder.Insert(Int32, String)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1001
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts a string into this instance at the specified character position.</p>\n"
  remarks: "\n<p>Existing characters are shifted to make room for the new text. The capacity is adjusted as needed.</p>\n<p>This instance of <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> is not changed if <em>value</em> is <strong>null</strong>, or <em>value</em> is not <strong>null</strong> but its length is zero.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public StringBuilder Insert(int index, string value)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function Insert(index As Integer, value As String) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the current length of this instance. </p>\n<p>-or-</p>\n<p>The current length of this <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object plus the length of <em>value</em> exceeds <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)
  id: Insert(System.Int32,System.String,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, String, Int32)
  nameWithType: StringBuilder.Insert(Int32, String, Int32)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 784
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts one or more copies of a specified string into this instance at the specified character position.</p>\n"
  remarks: "\n<p>Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n<p>This <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object is not changed if <em>value</em> is <strong>null</strong>, <em>value</em> is not <strong>null</strong> but its length is zero, or <em>count</em> is zero.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public StringBuilder Insert(int index, string value, int count)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function Insert(index As Integer, value As String, count As Integer) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to insert. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of times to insert <em>value</em>. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after insertion has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the current length of this instance.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>The current length of this <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object plus the length of <em>value</em> times <em>count</em> exceeds <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Insert(System.Int32,System.UInt16)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.UInt16)
  id: Insert(System.Int32,System.UInt16)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, UInt16)
  nameWithType: StringBuilder.Insert(Int32, UInt16)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.UInt16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1185
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a 16-bit unsigned integer into this instance at the specified character position.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.UInt16.ToString\" data-throw-if-not-resolved=\"false\"></xref> is used to get a string representation of <em>value</em>. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public StringBuilder Insert(int index, ushort value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function Insert(index As Integer, value As UShort) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.UInt16
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.UInt16
    commentId: T:System.UInt16
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Insert(System.Int32,System.UInt32)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.UInt32)
  id: Insert(System.Int32,System.UInt32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, UInt32)
  nameWithType: StringBuilder.Insert(Int32, UInt32)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.UInt32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1195
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a 32-bit unsigned integer into this instance at the specified character position.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.UInt32.ToString\" data-throw-if-not-resolved=\"false\"></xref> is used to get a string representation of <em>value</em>. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public StringBuilder Insert(int index, uint value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function Insert(index As Integer, value As UInteger) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.UInt32
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.UInt32
    commentId: T:System.UInt32
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Insert(System.Int32,System.UInt64)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.UInt64)
  id: Insert(System.Int32,System.UInt64)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, UInt64)
  nameWithType: StringBuilder.Insert(Int32, UInt64)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.UInt64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1205
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a 64-bit unsigned integer into this instance at the specified character position.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.UInt64.ToString\" data-throw-if-not-resolved=\"false\"></xref> is used to get a string representation of <em>value</em>. Existing characters are shifted to make room for the new text. The capacity of this instance is adjusted as needed.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public StringBuilder Insert(int index, ulong value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function Insert(index As Integer, value As ULong) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.UInt64
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.UInt64
    commentId: T:System.UInt64
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Remove(System.Int32,System.Int32)
  commentId: M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)
  id: Remove(System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Remove(Int32, Int32)
  nameWithType: StringBuilder.Remove(Int32, Int32)
  fullName: System.Text.StringBuilder.Remove(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Remove
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 830
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Removes the specified range of characters from this instance.</p>\n"
  remarks: "\n<p>The current method removes the specified range of characters from the current instance. The characters at (<em>startIndex</em> + <em>length</em>) are moved to <em>startIndex</em>, and the string value of the current instance is shortened by <em>length</em>. The capacity of the current instance is unaffected.</p>\n<p>The <xref href=\"System.Text.StringBuilder.Remove(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method modifies the value of the current <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> instance and returns that instance. It does not create and return a new <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n<p></p>\n"
  syntax:
    content: public StringBuilder Remove(int startIndex, int length)
    content.vb: Public Function Remove(startIndex As Integer, length As Integer) As StringBuilder
    parameters:
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based position in this instance where removal begins. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of characters to remove. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the excise operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>If <em>startIndex</em> or <em>length</em> is less than zero, or <em>startIndex</em> + <em>length</em> is greater than the length of this instance. </p>\n"
  seealso:
  - type: System.Text.StringBuilder.Replace(System.String,System.String)
    commentId: M:System.Text.StringBuilder.Replace(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Replace(System.Char,System.Char)
  commentId: M:System.Text.StringBuilder.Replace(System.Char,System.Char)
  id: Replace(System.Char,System.Char)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Replace(Char, Char)
  nameWithType: StringBuilder.Replace(Char, Char)
  fullName: System.Text.StringBuilder.Replace(System.Char, System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Replace
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1570
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Replaces all occurrences of a specified character in this instance with another specified character.</p>\n"
  remarks: "\n<p>This method performs an ordinal, case-sensitive comparison to identify occurrences of <em>oldChar</em> in the current instance. The size of the current <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> instance is unchanged after the replacement. </p>\n"
  syntax:
    content: public StringBuilder Replace(char oldChar, char newChar)
    content.vb: Public Function Replace(oldChar As Char, newChar As Char) As StringBuilder
    parameters:
    - id: oldChar
      type: System.Char
      description: "\n<p>The character to replace. </p>\n"
    - id: newChar
      type: System.Char
      description: "\n<p>The character that replaces <em>oldChar</em>. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance with <em>oldChar</em> replaced by <em>newChar</em>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)
  commentId: M:System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)
  id: Replace(System.Char,System.Char,System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Replace(Char, Char, Int32, Int32)
  nameWithType: StringBuilder.Replace(Char, Char, Int32, Int32)
  fullName: System.Text.StringBuilder.Replace(System.Char, System.Char, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Replace
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1573
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Replaces, within a substring of this instance, all occurrences of a specified character with another specified character.</p>\n"
  remarks: "\n<p>This method performs an ordinal, case-sensitive comparison to identify occurrences of <em>oldChar</em> in the current instance. The size of the current <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object is unchanged after the replacement. </p>\n"
  syntax:
    content: public StringBuilder Replace(char oldChar, char newChar, int startIndex, int count)
    content.vb: Public Function Replace(oldChar As Char, newChar As Char, startIndex As Integer, count As Integer) As StringBuilder
    parameters:
    - id: oldChar
      type: System.Char
      description: "\n<p>The character to replace. </p>\n"
    - id: newChar
      type: System.Char
      description: "\n<p>The character that replaces <em>oldChar</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The position in this instance where the substring begins. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The length of the substring. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance with <em>oldChar</em> replaced by <em>newChar</em> in the range from <em>startIndex</em> to <em>startIndex</em> + <em>count</em> -1.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> + <em>count</em> is greater than the length of the value of this instance.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> or <em>count</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Replace(System.String,System.String)
  commentId: M:System.Text.StringBuilder.Replace(System.String,System.String)
  id: Replace(System.String,System.String)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Replace(String, String)
  nameWithType: StringBuilder.Replace(String, String)
  fullName: System.Text.StringBuilder.Replace(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Replace
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1435
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Replaces all occurrences of a specified string in this instance with another specified string.</p>\n"
  remarks: "\n<p>This method performs an ordinal, case-sensitive comparison to identify occurrences of <em>oldValue</em> in the current instance. If <em>newValue</em> is <strong>null</strong>or<xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, all occurrences of <em>oldValue</em> are removed. </p>\n"
  syntax:
    content: public StringBuilder Replace(string oldValue, string newValue)
    content.vb: Public Function Replace(oldValue As String, newValue As String) As StringBuilder
    parameters:
    - id: oldValue
      type: System.String
      description: "\n<p>The string to replace. </p>\n"
    - id: newValue
      type: System.String
      description: "\n<p>The string that replaces <em>oldValue</em>, or <strong>null</strong>. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance with all instances of <em>oldValue</em> replaced by <em>newValue</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>oldValue</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The length of <em>oldValue</em> is zero. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Text.StringBuilder.Remove(System.Int32,System.Int32)
    commentId: M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)
  commentId: M:System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)
  id: Replace(System.String,System.String,System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Replace(String, String, Int32, Int32)
  nameWithType: StringBuilder.Replace(String, String, Int32, Int32)
  fullName: System.Text.StringBuilder.Replace(System.String, System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Replace
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1485
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Replaces, within a substring of this instance, all occurrences of a specified string with another specified string.</p>\n"
  remarks: "\n<p>This method performs an ordinal, case-sensitive comparison to identify occurrences of <em>oldValue</em> in the specified substring. If <em>newValue</em> is <strong>null</strong>or<xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, all occurrences of <em>oldValue</em> are removed. </p>\n"
  syntax:
    content: public StringBuilder Replace(string oldValue, string newValue, int startIndex, int count)
    content.vb: Public Function Replace(oldValue As String, newValue As String, startIndex As Integer, count As Integer) As StringBuilder
    parameters:
    - id: oldValue
      type: System.String
      description: "\n<p>The string to replace. </p>\n"
    - id: newValue
      type: System.String
      description: "\n<p>The string that replaces <em>oldValue</em>, or <strong>null</strong>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The position in this instance where the substring begins. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The length of the substring. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance with all instances of <em>oldValue</em> replaced by <em>newValue</em> in the range from <em>startIndex</em> to <em>startIndex</em> + <em>count</em> - 1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>oldValue</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The length of <em>oldValue</em> is zero. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> or <em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> plus <em>count</em> indicates a character position not within this instance.</p>\n<p>-or- </p>\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Text.StringBuilder.Remove(System.Int32,System.Int32)
    commentId: M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.StringBuilder.ToString
  commentId: M:System.Text.StringBuilder.ToString
  id: ToString
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: StringBuilder.ToString()
  fullName: System.Text.StringBuilder.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 326
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Converts the value of this instance to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>You must call the <xref href=\"System.Text.StringBuilder.ToString\" data-throw-if-not-resolved=\"false\"></xref> method to convert the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object before you can pass the string represented by the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object to a method that has a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> parameter or display it in the user interface.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override string ToString()
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A string whose value is the same as this instance.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.StringBuilder.ToString(System.Int32,System.Int32)
  commentId: M:System.Text.StringBuilder.ToString(System.Int32,System.Int32)
  id: ToString(System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: ToString(Int32, Int32)
  nameWithType: StringBuilder.ToString(Int32, Int32)
  fullName: System.Text.StringBuilder.ToString(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 369
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Converts the value of a substring of this instance to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>You must call the <xref href=\"System.Text.StringBuilder.ToString\" data-throw-if-not-resolved=\"false\"></xref> method to convert the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object before you can pass the string represented by the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object to a method that has a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> parameter or display it in the user interface.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public string ToString(int startIndex, int length)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function ToString(startIndex As Integer, length As Integer) As String
    parameters:
    - id: startIndex
      type: System.Int32
      description: "\n<p>The starting position of the substring in this instance. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The length of the substring. </p>\n"
    return:
      type: System.String
      description: "\n<p>A string whose value is the same as the specified substring of this instance.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> or <em>length</em> is less than zero.</p>\n<p>-or- </p>\n<p>The sum of <em>startIndex</em> and <em>length</em> is greater than the length of the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Text
  isExternal: false
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
  commentId: N:System.Text
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
  commentId: T:System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
  commentId: N:System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
  commentId: T:System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
  commentId: T:System.String
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
  commentId: T:System.Char
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
  commentId: T:System.Boolean
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  nameWithType: StringBuilder
  fullName: System.Text.StringBuilder
  commentId: T:System.Text.StringBuilder
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
  commentId: T:System.Byte
- uid: System.Char*
  name: Char*
  nameWithType: Char*
  fullName: System.Char*
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: System.Char[]
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  nameWithType.vb: Char()
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
  commentId: T:System.Decimal
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
  commentId: T:System.Double
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
  commentId: T:System.Int16
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
  commentId: T:System.Int64
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
  commentId: T:System.SByte
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
  commentId: T:System.Single
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
  commentId: T:System.UInt16
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
  commentId: T:System.UInt32
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
  commentId: T:System.UInt64
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
  commentId: T:System.IFormatProvider
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.ToString
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.IndexOutOfRangeException
  isExternal: false
  name: IndexOutOfRangeException
  nameWithType: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
  commentId: T:System.IndexOutOfRangeException
- uid: System.NullReferenceException
  isExternal: false
  name: NullReferenceException
  nameWithType: NullReferenceException
  fullName: System.NullReferenceException
  commentId: T:System.NullReferenceException
- uid: System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  nameWithType: OutOfMemoryException
  fullName: System.OutOfMemoryException
  commentId: T:System.OutOfMemoryException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  nameWithType: FormatException
  fullName: System.FormatException
  commentId: T:System.FormatException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
  commentId: T:System.ArgumentException
