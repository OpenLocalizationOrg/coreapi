items:
- uid: System.Reflection.CustomAttributeTypedArgument
  commentId: T:System.Reflection.CustomAttributeTypedArgument
  id: CustomAttributeTypedArgument
  parent: System.Reflection
  children:
  - System.Reflection.CustomAttributeTypedArgument.ArgumentType
  - System.Reflection.CustomAttributeTypedArgument.Value
  langs:
  - csharp
  - vb
  name: CustomAttributeTypedArgument
  fullName: System.Reflection.CustomAttributeTypedArgument
  type: Struct
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CustomAttributeTypedArgument
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 674
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Represents an argument of a custom attribute in the reflection-only context, or an element of an array argument.</p>\n"
  remarks: "\n<p>Code that is being examined in the reflection-only context cannot be executed, so it is not always possible to examine custom attributes by creating instances of them and then examining their properties, using methods like <see cref=\"Overload:System.Attribute.GetCustomAttributes\"></see>, <see cref=\"Overload:System.Reflection.MemberInfo.GetCustomAttributes\"></see>, and so on. If the code for the attribute type itself is loaded into the reflection-only context, it cannot be executed. </p>\n<p>The <xref href=\"System.Reflection.CustomAttributeNamedArgument\" data-throw-if-not-resolved=\"false\"></xref> structure is used by the <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> class to provide access to the type and value of a positional argument specified for a custom attribute instance, without executing the attribute constructor. It also provides access to the type and value of a named argument without executing the code of the corresponding property of the custom attribute type. </p>\n<p>The types and values of all the positional and named arguments of an attribute instance are provided by <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> structures. The positional attributes returned by the <xref href=\"System.Reflection.CustomAttributeData.ConstructorArguments\" data-throw-if-not-resolved=\"false\"></xref> property are directly represented by <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> structures, but the named arguments returned by the <xref href=\"System.Reflection.CustomAttributeData.NamedArguments\" data-throw-if-not-resolved=\"false\"></xref> property are represented by <xref href=\"System.Reflection.CustomAttributeNamedArgument\" data-throw-if-not-resolved=\"false\"></xref> structures; to get the <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> structure for a named argument, use the <xref href=\"System.Reflection.CustomAttributeNamedArgument.TypedValue\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If an argument is an array of values, the <xref href=\"System.Reflection.CustomAttributeTypedArgument.Value\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> that represents the argument returns a generic <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> objects. Each <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> object in the collection represents the corresponding element of the array. </p>\n<p>To create instances of the <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> class, use the <strong>static</strong><see cref=\"Overload:System.Reflection.CustomAttributeData.GetCustomAttributes\"></see> factory method.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public struct CustomAttributeTypedArgument
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public Structure CustomAttributeTypedArgument
  seealso:
  - type: System.Reflection.CustomAttributeData
    commentId: T:System.Reflection.CustomAttributeData
  - type: System.Reflection.CustomAttributeNamedArgument
    commentId: T:System.Reflection.CustomAttributeNamedArgument
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Reflection.CustomAttributeTypedArgument.ArgumentType
  commentId: P:System.Reflection.CustomAttributeTypedArgument.ArgumentType
  id: ArgumentType
  parent: System.Reflection.CustomAttributeTypedArgument
  langs:
  - csharp
  - vb
  name: ArgumentType
  fullName: System.Reflection.CustomAttributeTypedArgument.ArgumentType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ArgumentType
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 958
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the type of the argument or of the array argument element.</p>\n"
  remarks: "\n<p>For simple arguments or for elements of array arguments, this property identifies the actual type of the value returned by the <xref href=\"System.Reflection.CustomAttributeTypedArgument.Value\" data-throw-if-not-resolved=\"false\"></xref> property. For array arguments, this property returns the array type, but the <xref href=\"System.Reflection.CustomAttributeTypedArgument.Value\" data-throw-if-not-resolved=\"false\"></xref> property returns a <code>ReadOnlyCollection<CustomAttributeTypedArgument></code> (<code>ReadOnlyCollection(Of CustomAttributeTypedArgument)</code> in Visual Basic) in which each element of the collection represents the corresponding element of the array argument. </p>\n"
  syntax:
    content: public Type ArgumentType { get; }
    content.vb: Public ReadOnly Property ArgumentType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object representing the type of the argument or of the array element.</p>\n"
  seealso:
  - type: System.Reflection.CustomAttributeTypedArgument.Value
    commentId: P:System.Reflection.CustomAttributeTypedArgument.Value
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.CustomAttributeTypedArgument.Value
  commentId: P:System.Reflection.CustomAttributeTypedArgument.Value
  id: Value
  parent: System.Reflection.CustomAttributeTypedArgument
  langs:
  - csharp
  - vb
  name: Value
  fullName: System.Reflection.CustomAttributeTypedArgument.Value
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Value
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 965
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the value of the argument for a simple argument or for an element of an array argument; gets a collection of values for an array argument.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> represents an array argument, this property returns a <code>ReadOnlyCollection<CustomAttributeTypedArgument></code> (<code>ReadOnlyCollection(Of CustomAttributeTypedArgument)</code> in Visual Basic). Each element of the collection represents the corresponding element of the array argument.</p>\n<p>The type of the value can be obtained by using the <xref href=\"System.Reflection.CustomAttributeTypedArgument.ArgumentType\" data-throw-if-not-resolved=\"false\"></xref> property. <xref href=\"System.Reflection.CustomAttributeTypedArgument.ArgumentType\" data-throw-if-not-resolved=\"false\"></xref> gets the actual type of the value returned by the <xref href=\"System.Reflection.CustomAttributeTypedArgument.Value\" data-throw-if-not-resolved=\"false\"></xref> property for simple arguments or for elements of array arguments. It returns the array type for array arguments. </p>\n"
  syntax:
    content: public object Value { get; }
    content.vb: Public ReadOnly Property Value As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>An object that represents the value of the argument or element, or a generic <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> objects that represent the values of an array-type argument.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  fullName: System.ValueType
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
