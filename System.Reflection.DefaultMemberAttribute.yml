items:
- uid: System.Reflection.DefaultMemberAttribute
  commentId: T:System.Reflection.DefaultMemberAttribute
  id: DefaultMemberAttribute
  parent: System.Reflection
  children:
  - System.Reflection.DefaultMemberAttribute.#ctor(System.String)
  - System.Reflection.DefaultMemberAttribute.MemberName
  langs:
  - csharp
  - vb
  name: DefaultMemberAttribute
  nameWithType: DefaultMemberAttribute
  fullName: System.Reflection.DefaultMemberAttribute
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/DefaultMemberAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefaultMemberAttribute
    path: src/mscorlib/src/System/Reflection/DefaultMemberAttribute.cs
    startLine: 19
  assemblies:
  - System.Runtime
  namespace: System.Reflection
  summary: "\n<p>Defines the member of a type that is the default member used by <xref href=\"System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  remarks: "\n<p>A property is imported as an indexer (default indexed property in Visual Basic) if the property has arguments and if the name of the property or one of its accessors matches the name specified by the <xref href=\"System.Reflection.DefaultMemberAttribute\" data-throw-if-not-resolved=\"false\"></xref>. If the <xref href=\"System.Reflection.DefaultMemberAttribute\" data-throw-if-not-resolved=\"false\"></xref> is not present on the containing type, then the type does not have an indexer. The C# compiler emits the <xref href=\"System.Reflection.DefaultMemberAttribute\" data-throw-if-not-resolved=\"false\"></xref> on any type containing an indexer. In C# it is an error to manually attribute a type with the <xref href=\"System.Reflection.DefaultMemberAttribute\" data-throw-if-not-resolved=\"false\"></xref> if the type also declares an indexer.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Interface)]

      [ComVisible(true)]

      public sealed class DefaultMemberAttribute : Attribute, _Attribute
    content.vb: >-
      <Serializable>

      <AttributeUsage(AttributeTargets.Class Or AttributeTargets.Struct Or AttributeTargets.Interface)>

      <ComVisible(True)>

      Public NotInheritable Class DefaultMemberAttribute
          Inherits Attribute
          Implements _Attribute
  inheritance:
  - System.Object
  - System.Attribute
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetHashCode
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.AttributeUsageAttribute
    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
    arguments:
    - type: System.AttributeTargets
      value: 1036
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Reflection.DefaultMemberAttribute.#ctor(System.String)
  commentId: M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Reflection.DefaultMemberAttribute
  langs:
  - csharp
  - vb
  name: DefaultMemberAttribute(String)
  nameWithType: DefaultMemberAttribute.DefaultMemberAttribute(String)
  fullName: System.Reflection.DefaultMemberAttribute.DefaultMemberAttribute(System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/DefaultMemberAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/DefaultMemberAttribute.cs
    startLine: 28
  assemblies:
  - System.Runtime
  namespace: System.Reflection
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Reflection.DefaultMemberAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public DefaultMemberAttribute(string memberName)
    content.vb: Public Sub New(memberName As String)
    parameters:
    - id: memberName
      type: System.String
      description: "\n<p>A <strong>String</strong> containing the name of the member to invoke. This may be a constructor, method, property, or field. A suitable invocation attribute must be specified when the member is invoked. The default member of a class can be specified by passing an empty <strong>String</strong> as the name of the member.</p>\n<p>The default member of a type is marked with the <strong>DefaultMemberAttribute</strong> custom attribute or marked in COM in the usual way. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.DefaultMemberAttribute.MemberName
  commentId: P:System.Reflection.DefaultMemberAttribute.MemberName
  id: MemberName
  parent: System.Reflection.DefaultMemberAttribute
  langs:
  - csharp
  - vb
  name: MemberName
  nameWithType: DefaultMemberAttribute.MemberName
  fullName: System.Reflection.DefaultMemberAttribute.MemberName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/DefaultMemberAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MemberName
    path: src/mscorlib/src/System/Reflection/DefaultMemberAttribute.cs
    startLine: 35
  assemblies:
  - System.Runtime
  namespace: System.Reflection
  summary: "\n<p>Gets the name from the attribute.</p>\n"
  remarks: "\n<p>There is no set accessor because the name must be provided to the constructor. The name is not optional.</p>\n"
  syntax:
    content: public string MemberName { get; }
    content.vb: Public ReadOnly Property MemberName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A string representing the member name.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
  commentId: N:System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
  commentId: T:System.Object
- uid: System.Attribute
  parent: System
  isExternal: false
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute
  commentId: T:System.Attribute
- uid: System.Attribute.Equals(System.Object)
  parent: System.Attribute
  isExternal: true
  name: Equals(Object)
  nameWithType: Attribute.Equals(Object)
  fullName: System.Attribute.Equals(System.Object)
  spec.csharp:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    nameWithType: Attribute.Equals
    fullName: System.Attribute.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    nameWithType: Attribute.Equals
    fullName: System.Attribute.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Attribute.Equals(System.Object)
- uid: System.Attribute.GetHashCode
  parent: System.Attribute
  isExternal: false
  name: GetHashCode()
  nameWithType: Attribute.GetHashCode()
  fullName: System.Attribute.GetHashCode()
  spec.csharp:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    nameWithType: Attribute.GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    nameWithType: Attribute.GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Attribute.GetHashCode
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
  commentId: N:System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
  commentId: T:System.String
