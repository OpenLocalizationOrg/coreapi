items:
- uid: System.Collections.Specialized.StringCollection
  commentId: T:System.Collections.Specialized.StringCollection
  id: StringCollection
  parent: System.Collections.Specialized
  children:
  - System.Collections.Specialized.StringCollection.#ctor
  - System.Collections.Specialized.StringCollection.Add(System.String)
  - System.Collections.Specialized.StringCollection.AddRange(System.String[])
  - System.Collections.Specialized.StringCollection.Clear
  - System.Collections.Specialized.StringCollection.Contains(System.String)
  - System.Collections.Specialized.StringCollection.CopyTo(System.String[],System.Int32)
  - System.Collections.Specialized.StringCollection.Count
  - System.Collections.Specialized.StringCollection.GetEnumerator
  - System.Collections.Specialized.StringCollection.IndexOf(System.String)
  - System.Collections.Specialized.StringCollection.Insert(System.Int32,System.String)
  - System.Collections.Specialized.StringCollection.IsReadOnly
  - System.Collections.Specialized.StringCollection.IsSynchronized
  - System.Collections.Specialized.StringCollection.Item(System.Int32)
  - System.Collections.Specialized.StringCollection.Remove(System.String)
  - System.Collections.Specialized.StringCollection.RemoveAt(System.Int32)
  - System.Collections.Specialized.StringCollection.SyncRoot
  langs:
  - csharp
  - vb
  name: StringCollection
  fullName: System.Collections.Specialized.StringCollection
  type: Class
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StringCollection
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
    startLine: 10
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Represents a collection of strings.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid value and allows duplicate elements.</p>\n<p>String comparisons are case-sensitive.</p>\n<p>Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.</p>\n"
  example:
  - "\n<p>The following code example demonstrates several of the properties and methods of <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.StringCollection2#1"
  syntax:
    content: 'public class StringCollection : ICollection, IEnumerable, IList'
    content.vb: >-
      Public Class StringCollection
          Inherits ICollection
          Implements IEnumerable, IList
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerable
  - System.Collections.IList
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Collections.Specialized.StringCollection.#ctor
  commentId: M:System.Collections.Specialized.StringCollection.#ctor
  id: '#ctor'
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  - vb
  name: StringCollection()
  fullName: System.Collections.Specialized.StringCollection.StringCollection()
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/ref/System.Collections.Specialized.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/ref/System.Collections.Specialized.cs
    startLine: 180
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  remarks: "\n<p>This constructor is an O(1) operation.</p>\n"
  syntax:
    content: public StringCollection()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.StringCollection.Count
  commentId: P:System.Collections.Specialized.StringCollection.Count
  id: Count
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.Specialized.StringCollection.Count
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
    startLine: 33
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets the number of strings contained in the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example copies a <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref> to an array.</p>System.Collections.Specialized.StringCollectionCopyTo#1"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of strings contained in the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.StringCollection.IsReadOnly
  commentId: P:System.Collections.Specialized.StringCollection.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  - vb
  name: IsReadOnly
  fullName: System.Collections.Specialized.StringCollection.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsReadOnly
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
    startLine: 137
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref> implements the <xref href=\"System.Collections.Specialized.StringCollection.IsReadOnly\" data-throw-if-not-resolved=\"false\"></xref> property because it is required by the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</p>\n<p>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</p>\n<p>A <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref> instance is always writable.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: public bool IsReadOnly { get; }
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>This property always returns <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.StringCollection.IsSynchronized
  commentId: P:System.Collections.Specialized.StringCollection.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  - vb
  name: IsSynchronized
  fullName: System.Collections.Specialized.StringCollection.IsSynchronized
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSynchronized
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
    startLine: 150
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets a value indicating whether access to the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref> is synchronized (thread safe).</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref> implements the <xref href=\"System.Collections.Specialized.StringCollection.IsSynchronized\" data-throw-if-not-resolved=\"false\"></xref> property because it is required by the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n<p>The following code example shows how to lock the collection using the <xref href=\"System.Collections.Specialized.StringCollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> during the entire enumeration:</p>System.Collections.Specialized.StringCollection2#2<p>Retrieving the value of this property is an O(1) operation.</p>"
  syntax:
    content: public bool IsSynchronized { get; }
    content.vb: Public ReadOnly Property IsSynchronized As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>This property always returns <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Collections.Specialized.StringCollection.SyncRoot
    commentId: P:System.Collections.Specialized.StringCollection.SyncRoot
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.StringCollection.Item(System.Int32)
  commentId: P:System.Collections.Specialized.StringCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  - vb
  name: Item[Int32]
  fullName: System.Collections.Specialized.StringCollection.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
    startLine: 17
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets or sets the element at the specified index.</p>\n"
  remarks: "\n<p>This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[index]</code>.</p>\n<p>\n<xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid value and allows duplicate elements.</p>\n<p>The C# language uses the  keyword to define the indexers instead of implementing the <xref href=\"System.Collections.Specialized.StringCollection.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property. Visual Basic implements <xref href=\"System.Collections.Specialized.StringCollection.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> as a default property, which provides the same indexing functionality.</p>\n<p>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</p>\n"
  syntax:
    content: public string this[int index] { get; set; }
    content.vb: Public Property Item(index As Integer) As String
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the entry to get or set. </p>\n"
    return:
      type: System.String
      description: "\n<p>The element at the specified index.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> is equal to or greater than <xref href=\"System.Collections.Specialized.StringCollection.Count\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Collections.Specialized.StringCollection.Count
    commentId: P:System.Collections.Specialized.StringCollection.Count
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Specialized.StringCollection.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Collections.Specialized.StringCollection.SyncRoot
  commentId: P:System.Collections.Specialized.StringCollection.SyncRoot
  id: SyncRoot
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  - vb
  name: SyncRoot
  fullName: System.Collections.Specialized.StringCollection.SyncRoot
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SyncRoot
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
    startLine: 178
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Derived classes can provide their own synchronized version of the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.Collections.Specialized.StringCollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> property. The synchronizing code must perform operations on the <xref href=\"System.Collections.Specialized.StringCollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>, not directly on the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n<p>The following code example shows how to lock the collection using the <xref href=\"System.Collections.Specialized.StringCollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> during the entire enumeration:</p>System.Collections.Specialized.StringCollection2#2<p>Retrieving the value of this property is an O(1) operation.</p>"
  syntax:
    content: public object SyncRoot { get; }
    content.vb: Public ReadOnly Property SyncRoot As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>An object that can be used to synchronize access to the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Specialized.StringCollection.IsSynchronized
    commentId: P:System.Collections.Specialized.StringCollection.IsSynchronized
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.StringCollection.Add(System.String)
  commentId: M:System.Collections.Specialized.StringCollection.Add(System.String)
  id: Add(System.String)
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  - vb
  name: Add(String)
  fullName: System.Collections.Specialized.StringCollection.Add(System.String)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
    startLine: 62
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Adds a string to the end of the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid value and allows duplicate elements.</p>\n<p>If <xref href=\"System.Collections.Specialized.StringCollection.Count\" data-throw-if-not-resolved=\"false\"></xref> is less than the capacity, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Specialized.StringCollection.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example adds new elements to the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.StringCollectionAdd#1"
  syntax:
    content: public int Add(string value)
    content.vb: Public Function Add(value As String) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to add to the end of the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index at which the new element is inserted.</p>\n"
  seealso:
  - type: System.Collections.Specialized.StringCollection.AddRange(System.String[])
    commentId: M:System.Collections.Specialized.StringCollection.AddRange(System.String[])
  - type: System.Collections.Specialized.StringCollection.IsReadOnly
    commentId: P:System.Collections.Specialized.StringCollection.IsReadOnly
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.StringCollection.AddRange(System.String[])
  commentId: M:System.Collections.Specialized.StringCollection.AddRange(System.String[])
  id: AddRange(System.String[])
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  - vb
  name: AddRange(String[])
  fullName: System.Collections.Specialized.StringCollection.AddRange(System.String[])
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddRange
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
    startLine: 70
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Copies the elements of a string array to the end of the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid value and allows duplicate elements.</p>\n<p>If the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref> can accommodate the new elements without increasing the capacity, this method is an O(<em>n</em>) operation, where <em>n</em> is the number of elements to be added. If the capacity needs to be increased to accommodate the new elements, this method becomes an O(<em>n</em> + <em>m</em>) operation, where <em>n</em> is the number of elements to be added and <em>m</em> is <xref href=\"System.Collections.Specialized.StringCollection.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example adds new elements to the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.StringCollectionAdd#1"
  syntax:
    content: public void AddRange(string[] value)
    content.vb: Public Sub AddRange(value As String())
    parameters:
    - id: value
      type: System.String[]
      description: "\n<p>An array of strings to add to the end of the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>. The array itself can not be <strong>null</strong> but it can contain elements that are <strong>null</strong>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Collections.Specialized.StringCollection.Add(System.String)
    commentId: M:System.Collections.Specialized.StringCollection.Add(System.String)
  - type: System.Collections.Specialized.StringCollection.IsReadOnly
    commentId: P:System.Collections.Specialized.StringCollection.IsReadOnly
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Specialized.StringCollection.AddRange(System.String())
  name.vb: AddRange(String())
- uid: System.Collections.Specialized.StringCollection.Clear
  commentId: M:System.Collections.Specialized.StringCollection.Clear
  id: Clear
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.Specialized.StringCollection.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
    startLine: 83
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Removes all the strings from the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Specialized.StringCollection.Count\" data-throw-if-not-resolved=\"false\"></xref> is set to zero, and references to other objects from elements of the collection are also released.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Specialized.StringCollection.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example removes elements from the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.StringCollectionRemove#1"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  seealso:
  - type: System.Collections.Specialized.StringCollection.Count
    commentId: P:System.Collections.Specialized.StringCollection.Count
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.StringCollection.Contains(System.String)
  commentId: M:System.Collections.Specialized.StringCollection.Contains(System.String)
  id: Contains(System.String)
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  - vb
  name: Contains(String)
  fullName: System.Collections.Specialized.StringCollection.Contains(System.String)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
    startLine: 93
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Determines whether the specified string is in the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Specialized.StringCollection.Contains(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method can confirm the existence of a string before performing further operations.</p>\n<p>This method determines equality by calling <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>. String comparisons are case-sensitive.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Specialized.StringCollection.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>item</em> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>item</em> parameter on the objects in the collection.</p>\n"
  example:
  - "\n<p>The following code example searches the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref> for an element.</p>System.Collections.Specialized.StringCollectionContains#1"
  syntax:
    content: public bool Contains(string value)
    content.vb: Public Function Contains(value As String) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to locate in the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value</em> is found in the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Collections.Specialized.StringCollection.IndexOf(System.String)
    commentId: M:System.Collections.Specialized.StringCollection.IndexOf(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.StringCollection.CopyTo(System.String[],System.Int32)
  commentId: M:System.Collections.Specialized.StringCollection.CopyTo(System.String[],System.Int32)
  id: CopyTo(System.String[],System.Int32)
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  - vb
  name: CopyTo(String[], Int32)
  fullName: System.Collections.Specialized.StringCollection.CopyTo(System.String[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
    startLine: 102
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Copies the entire <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref> values to a one-dimensional array of strings, starting at the specified index of the target array.</p>\n"
  remarks: "\n<p>The specified array must be of a compatible type.</p>\n<p>The elements are copied to the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> in the same order in which the enumerator of the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref> iterates through the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Specialized.StringCollection.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example copies a <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref> to an array.</p>System.Collections.Specialized.StringCollectionCopyTo#1"
  syntax:
    content: public void CopyTo(string[] array, int index)
    content.vb: Public Sub CopyTo(array As String(), index As Integer)
    parameters:
    - id: array
      type: System.String[]
      description: "\n<p>The one-dimensional array of strings that is the destination of the elements copied from <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> must have zero-based indexing. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index in <em>array</em> at which copying begins. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n<p>-or- </p>\n<p>The number of elements in the source <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The type of the source <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\n"
  seealso:
  - type: System.Array
    commentId: T:System.Array
  - type: System.Collections.Specialized.StringCollection.GetEnumerator
    commentId: M:System.Collections.Specialized.StringCollection.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Specialized.StringCollection.CopyTo(System.String(), System.Int32)
  name.vb: CopyTo(String(), Int32)
- uid: System.Collections.Specialized.StringCollection.GetEnumerator
  commentId: M:System.Collections.Specialized.StringCollection.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.Specialized.StringCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
    startLine: 111
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Returns a <xref href=\"System.Collections.Specialized.StringEnumerator\" data-throw-if-not-resolved=\"false\"></xref> that iterates through the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>[Visual Basic, C#]</p>\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. <xref href=\"System.Collections.Specialized.StringEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> also brings the enumerator back to this position.  At this position, <xref href=\"System.Collections.Specialized.StringEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. Therefore, you must call <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.Specialized.StringEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.Specialized.StringEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.Specialized.StringEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.Specialized.StringEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.Specialized.StringEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. To set <xref href=\"System.Collections.Specialized.StringEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.Specialized.StringEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: public StringEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As StringEnumerator
    return:
      type: System.Collections.Specialized.StringEnumerator
      description: "\n<p>A <xref href=\"System.Collections.Specialized.StringEnumerator\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Specialized.StringEnumerator
    commentId: T:System.Collections.Specialized.StringEnumerator
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.StringCollection.IndexOf(System.String)
  commentId: M:System.Collections.Specialized.StringCollection.IndexOf(System.String)
  id: IndexOf(System.String)
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  - vb
  name: IndexOf(String)
  fullName: System.Collections.Specialized.StringCollection.IndexOf(System.String)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
    startLine: 120
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Searches for the specified string and returns the zero-based index of the first occurrence within the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method determines equality by calling <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>. String comparisons are case-sensitive.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Specialized.StringCollection.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>item</em> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>item</em> parameter on the objects in the collection.</p>\n"
  example:
  - "\n<p>The following code example searches the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref> for an element.</p>System.Collections.Specialized.StringCollectionContains#1"
  syntax:
    content: public int IndexOf(string value)
    content.vb: Public Function IndexOf(value As String) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to locate. The value can be <strong>null</strong>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em> in the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>, if found; otherwise, -1.</p>\n"
  seealso:
  - type: System.Collections.Specialized.StringCollection.Contains(System.String)
    commentId: M:System.Collections.Specialized.StringCollection.Contains(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.StringCollection.Insert(System.Int32,System.String)
  commentId: M:System.Collections.Specialized.StringCollection.Insert(System.Int32,System.String)
  id: Insert(System.Int32,System.String)
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  - vb
  name: Insert(Int32, String)
  fullName: System.Collections.Specialized.StringCollection.Insert(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Insert
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
    startLine: 129
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Inserts a string into the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref> at the specified index.</p>\n"
  remarks: "\n<p>Duplicate strings are allowed in <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If <em>index</em> is equal to <xref href=\"System.Collections.Specialized.StringCollection.Count\" data-throw-if-not-resolved=\"false\"></xref>, <em>value</em> is added to the end of <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Specialized.StringCollection.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example adds new elements to the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.StringCollectionAdd#1"
  syntax:
    content: public void Insert(int index, string value)
    content.vb: Public Sub Insert(index As Integer, value As String)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index at which <em>value</em> is inserted. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to insert. The value can be <strong>null</strong>. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> greater than <xref href=\"System.Collections.Specialized.StringCollection.Count\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Collections.Specialized.StringCollection.Count
    commentId: P:System.Collections.Specialized.StringCollection.Count
  - type: System.Collections.Specialized.StringCollection.Add(System.String)
    commentId: M:System.Collections.Specialized.StringCollection.Add(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.StringCollection.Remove(System.String)
  commentId: M:System.Collections.Specialized.StringCollection.Remove(System.String)
  id: Remove(System.String)
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  - vb
  name: Remove(String)
  fullName: System.Collections.Specialized.StringCollection.Remove(System.String)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
    startLine: 162
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Removes the first occurrence of a specific string from the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Duplicate strings are allowed in <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>. Only the first occurrence is removed. To remove all occurrences of the specified string, use <code>RemoveAt(IndexOf(value))</code> repeatedly while <xref href=\"System.Collections.Specialized.StringCollection.IndexOf(System.String)\" data-throw-if-not-resolved=\"false\"></xref> does not return -1.</p>\n<p>If the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref> does not contain the specified object, the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref> remains unchanged. No exception is thrown.</p>\n<p>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</p>\n<p>This method determines equality by calling <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>. String comparisons are case-sensitive.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Specialized.StringCollection.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example removes elements from the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.StringCollectionRemove#1"
  syntax:
    content: public void Remove(string value)
    content.vb: Public Sub Remove(value As String)
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to remove from the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.StringCollection.RemoveAt(System.Int32)
  commentId: M:System.Collections.Specialized.StringCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.Specialized.StringCollection
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  fullName: System.Collections.Specialized.StringCollection.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAt
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
    startLine: 170
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Removes the string at the specified index of the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Specialized.StringCollection.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example removes elements from the <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.StringCollectionRemove#1"
  syntax:
    content: public void RemoveAt(int index)
    content.vb: Public Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the string to remove. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> is equal to or greater than <xref href=\"System.Collections.Specialized.StringCollection.Count\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Collections.Specialized
  isExternal: false
  name: System.Collections.Specialized
  fullName: System.Collections.Specialized
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  fullName: System.Collections.IList
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.String[]
  isExternal: false
  name: String[]
  fullName: System.String[]
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
  - name: ()
    fullName: ()
- uid: System.Collections.Specialized.StringEnumerator
  parent: System.Collections.Specialized
  isExternal: false
  name: StringEnumerator
  fullName: System.Collections.Specialized.StringEnumerator
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
