items:
- uid: System.Func`1
  commentId: T:System.Func`1
  id: Func`1
  parent: System
  children: []
  langs:
  - csharp
  - vb
  name: Func<TResult>
  fullName: System.Func<TResult>
  type: Delegate
  source:
    remote:
      path: src/mscorlib/src/System/Action.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Func
    path: src/mscorlib/src/System/Action.cs
    startLine: 43
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Encapsulates a method that has no parameters and returns a value of the type specified by the <em>TResult</em> parameter.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use a delegate that takes no parameters. This code creates a generic class named <code>LazyValue</code> that has a field of type <xref href=\"System.Func`1\" data-throw-if-not-resolved=\"false\"></xref>. This delegate field can store a reference to any function that returns a value of the type that corresponds to the type parameter of the <code>LazyValue</code> object. The <code>LazyValue</code> type also has a <code>Value</code> property that executes the function (if it has not already been executed) and returns the resulting value.</p>\n<p>The example creates two methods and instantiates two <code>LazyValue</code> objects with lambda expressions that call these methods. The lambda expressions do not take parameters because they just need to call a method. As the output shows, the two methods are executed only when the value of each <code>LazyValue</code> object is retrieved.</p>System.Func~1#5"
  syntax:
    content: >-
      [TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")]

      public delegate TResult Func<out TResult>();
    content.vb: >-
      <TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")>

      Public Delegate Function Func(Of Out TResult) As TResult
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the return value of the method that this delegate encapsulates.</p>\n"
    return:
      type: '{TResult}'
      description: "\n<p>The return value of the method that this delegate encapsulates.</p>\n"
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  nameWithType: Func<TResult>
  extensionMethods:
  - System.Delegate.System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  nameWithType.vb: Func(Of TResult)
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Delegate.System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  parent: System.Reflection.RuntimeReflectionExtensions
  definition: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  name: GetMethodInfo()
  fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo()
  spec.csharp:
  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
    name: GetMethodInfo
    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
    name: GetMethodInfo
    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: RuntimeReflectionExtensions.GetMethodInfo()
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
- uid: '{TResult}'
  definition: TResult
  name: TResult
  fullName: TResult
  nameWithType: TResult
  commentId: '!:TResult'
- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  isExternal: true
  name: GetMethodInfo(Delegate)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  spec.csharp:
  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
    name: GetMethodInfo
    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  - name: (
    fullName: (
  - uid: System.Delegate
    name: Delegate
    fullName: System.Delegate
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
    name: GetMethodInfo
    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  - name: (
    fullName: (
  - uid: System.Delegate
    name: Delegate
    fullName: System.Delegate
    isExternal: true
  - name: )
    fullName: )
  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
- uid: System.Reflection.RuntimeReflectionExtensions
  parent: System.Reflection
  isExternal: false
  name: RuntimeReflectionExtensions
  fullName: System.Reflection.RuntimeReflectionExtensions
  nameWithType: RuntimeReflectionExtensions
  commentId: T:System.Reflection.RuntimeReflectionExtensions
- uid: TResult
  isExternal: false
  name: TResult
  fullName: TResult
  nameWithType: TResult
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
  nameWithType: System.Reflection
  commentId: N:System.Reflection
