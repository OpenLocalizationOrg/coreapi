items:
- uid: System.ComponentModel.ReadOnlyAttribute
  commentId: T:System.ComponentModel.ReadOnlyAttribute
  id: ReadOnlyAttribute
  parent: System.ComponentModel
  children:
  - System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)
  - System.ComponentModel.ReadOnlyAttribute.Default
  - System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)
  - System.ComponentModel.ReadOnlyAttribute.GetHashCode
  - System.ComponentModel.ReadOnlyAttribute.IsReadOnly
  - System.ComponentModel.ReadOnlyAttribute.No
  - System.ComponentModel.ReadOnlyAttribute.Yes
  langs:
  - csharp
  - vb
  name: ReadOnlyAttribute
  fullName: System.ComponentModel.ReadOnlyAttribute
  type: Class
  source:
    remote:
      path: src/System.ComponentModel.Primitives/src/System/ComponentModel/ReadOnlyAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadOnlyAttribute
    path: src/System.ComponentModel.Primitives/src/System/ComponentModel/ReadOnlyAttribute.cs
    startLine: 10
  assemblies:
  - System.ComponentModel.Primitives
  namespace: System.ComponentModel
  summary: "\n<p>Specifies whether the property this attribute is bound to is read-only or read/write. This class cannot be inherited</p>\n"
  remarks: "\n<p>Members that are marked with the <xref href=\"System.ComponentModel.ReadOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref> set to <strong>true</strong> or that do not have a <strong>Set</strong> method cannot be changed. Members that do not have this attribute or that are marked with the <xref href=\"System.ComponentModel.ReadOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref> set to <strong>false</strong> are read/write, and they can be changed. The default is <xref href=\"System.ComponentModel.ReadOnlyAttribute.No\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> class enforces the <xref href=\"System.ComponentModel.ReadOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref> in the design environment and at run time. When you mark a property with the <xref href=\"System.ComponentModel.ReadOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref> set to <strong>true</strong>, the value of this attribute is set to the constant member <xref href=\"System.ComponentModel.ReadOnlyAttribute.Yes\" data-throw-if-not-resolved=\"false\"></xref>. For a property marked with the <xref href=\"System.ComponentModel.ReadOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref> set to <strong>false</strong>, the value is <xref href=\"System.ComponentModel.ReadOnlyAttribute.No\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as <xref href=\"System.ComponentModel.ReadOnlyAttribute.Yes\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.ComponentModel.ReadOnlyAttribute.No\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For more information, see Extending Metadata Using Attributes.</p>\n"
  example:
  - "\n<p>The following code example marks a property as read-only.</p>Classic ReadOnlyAttribute Example#1<p>The next code example shows how to check the value of the <xref href=\"System.ComponentModel.ReadOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref> for <code>MyProperty</code>. First, the code gets a <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> with all the properties for the object. Next, it indexes into the <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> to get <code>MyProperty</code>. Then it returns the attributes for this property and saves them in the attributes variable.</p><p>The example presents two different ways of checking the value of the <xref href=\"System.ComponentModel.ReadOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref>. In the second code fragment, the example calls the <xref href=\"System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. In the last code fragment, the example uses the <xref href=\"System.ComponentModel.ReadOnlyAttribute.IsReadOnly\" data-throw-if-not-resolved=\"false\"></xref> property to check the value.</p>Classic ReadOnlyAttribute Example#2<p>If you marked a class with the <xref href=\"System.ComponentModel.ReadOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref>, use the following code example to check the value.</p>Classic ReadOnlyAttribute Example#3"
  syntax:
    content: 'public sealed class ReadOnlyAttribute : Attribute'
    content.vb: >-
      Public NotInheritable Class ReadOnlyAttribute
          Inherits Attribute
  seealso:
  - type: System.Attribute
    commentId: T:System.Attribute
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - type: System.ComponentModel.AttributeCollection
    commentId: T:System.ComponentModel.AttributeCollection
  - type: System.ComponentModel.PropertyDescriptorCollection
    commentId: T:System.ComponentModel.PropertyDescriptorCollection
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.ComponentModel.ReadOnlyAttribute.Default
  commentId: F:System.ComponentModel.ReadOnlyAttribute.Default
  id: Default
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  - vb
  name: Default
  fullName: System.ComponentModel.ReadOnlyAttribute.Default
  type: Field
  source:
    remote:
      path: src/System.ComponentModel.Primitives/src/System/ComponentModel/ReadOnlyAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Default
    path: src/System.ComponentModel.Primitives/src/System/ComponentModel/ReadOnlyAttribute.cs
    startLine: 36
  assemblies:
  - System.ComponentModel.Primitives
  namespace: System.ComponentModel
  summary: "\n<p>Specifies the default value for the <xref href=\"System.ComponentModel.ReadOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref>, which is <xref href=\"System.ComponentModel.ReadOnlyAttribute.No\" data-throw-if-not-resolved=\"false\"></xref> (that is, the property this attribute is bound to is read/write). This <strong>static</strong> field is read-only.</p>\n"
  remarks: "\n<p>When you mark a property with this value, this attribute is set to the constant member <xref href=\"System.ComponentModel.ReadOnlyAttribute.No\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <xref href=\"System.ComponentModel.ReadOnlyAttribute.No\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static readonly ReadOnlyAttribute Default
    content.vb: Public Shared ReadOnly Default As ReadOnlyAttribute
    return:
      type: System.ComponentModel.ReadOnlyAttribute
  seealso:
  - type: System.ComponentModel.ReadOnlyAttribute
    commentId: T:System.ComponentModel.ReadOnlyAttribute
  - type: System.ComponentModel.ReadOnlyAttribute.Yes
    commentId: F:System.ComponentModel.ReadOnlyAttribute.Yes
  - type: System.ComponentModel.ReadOnlyAttribute.No
    commentId: F:System.ComponentModel.ReadOnlyAttribute.No
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.ComponentModel.ReadOnlyAttribute.No
  commentId: F:System.ComponentModel.ReadOnlyAttribute.No
  id: No
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  - vb
  name: No
  fullName: System.ComponentModel.ReadOnlyAttribute.No
  type: Field
  source:
    remote:
      path: src/System.ComponentModel.Primitives/src/System/ComponentModel/ReadOnlyAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: No
    path: src/System.ComponentModel.Primitives/src/System/ComponentModel/ReadOnlyAttribute.cs
    startLine: 28
  assemblies:
  - System.ComponentModel.Primitives
  namespace: System.ComponentModel
  summary: "\n<p>Specifies that the property this attribute is bound to is read/write and can be modified. This <strong>static</strong> field is read-only.</p>\n"
  remarks: "\n<p>This field is the default setting for this attribute.</p>\n<p>When you mark a property with the <xref href=\"System.ComponentModel.ReadOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref> set to <strong>false</strong>, the value of this attribute is set to the constant member <xref href=\"System.ComponentModel.ReadOnlyAttribute.No\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <xref href=\"System.ComponentModel.ReadOnlyAttribute.No\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static readonly ReadOnlyAttribute No
    content.vb: Public Shared ReadOnly No As ReadOnlyAttribute
    return:
      type: System.ComponentModel.ReadOnlyAttribute
  seealso:
  - type: System.ComponentModel.ReadOnlyAttribute
    commentId: T:System.ComponentModel.ReadOnlyAttribute
  - type: System.ComponentModel.ReadOnlyAttribute.Yes
    commentId: F:System.ComponentModel.ReadOnlyAttribute.Yes
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.ComponentModel.ReadOnlyAttribute.Yes
  commentId: F:System.ComponentModel.ReadOnlyAttribute.Yes
  id: Yes
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  - vb
  name: Yes
  fullName: System.ComponentModel.ReadOnlyAttribute.Yes
  type: Field
  source:
    remote:
      path: src/System.ComponentModel.Primitives/src/System/ComponentModel/ReadOnlyAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Yes
    path: src/System.ComponentModel.Primitives/src/System/ComponentModel/ReadOnlyAttribute.cs
    startLine: 20
  assemblies:
  - System.ComponentModel.Primitives
  namespace: System.ComponentModel
  summary: "\n<p>Specifies that the property this attribute is bound to is read-only and cannot be modified in the server explorer. This <strong>static</strong> field is read-only.</p>\n"
  remarks: "\n<p>When you mark a property with the <xref href=\"System.ComponentModel.ReadOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref> set to <strong>true</strong>, the value of this attribute is set to the constant member <xref href=\"System.ComponentModel.ReadOnlyAttribute.Yes\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <xref href=\"System.ComponentModel.ReadOnlyAttribute.Yes\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static readonly ReadOnlyAttribute Yes
    content.vb: Public Shared ReadOnly Yes As ReadOnlyAttribute
    return:
      type: System.ComponentModel.ReadOnlyAttribute
  seealso:
  - type: System.ComponentModel.ReadOnlyAttribute
    commentId: T:System.ComponentModel.ReadOnlyAttribute
  - type: System.ComponentModel.ReadOnlyAttribute.No
    commentId: F:System.ComponentModel.ReadOnlyAttribute.No
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)
  commentId: M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  - vb
  name: ReadOnlyAttribute(Boolean)
  fullName: System.ComponentModel.ReadOnlyAttribute.ReadOnlyAttribute(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.Primitives/src/System/ComponentModel/ReadOnlyAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.Primitives/src/System/ComponentModel/ReadOnlyAttribute.cs
    startLine: 43
  assemblies:
  - System.ComponentModel.Primitives
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.ReadOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>Members that are marked with the <xref href=\"System.ComponentModel.ReadOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref> set to <strong>true</strong> or that do not have a <strong>Set</strong> method cannot be changed. Members that do not have this attribute or that are marked with the <xref href=\"System.ComponentModel.ReadOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref> set to <strong>false</strong> are read/write, and they can be changed. The default is <xref href=\"System.ComponentModel.ReadOnlyAttribute.No\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>When you mark a property with the <xref href=\"System.ComponentModel.ReadOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref> set to <strong>true</strong>, the value of this attribute is set to the constant member <xref href=\"System.ComponentModel.ReadOnlyAttribute.Yes\" data-throw-if-not-resolved=\"false\"></xref>. For a property marked with the <xref href=\"System.ComponentModel.ReadOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref> set to <strong>false</strong>, the value is <xref href=\"System.ComponentModel.ReadOnlyAttribute.No\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as <xref href=\"System.ComponentModel.ReadOnlyAttribute.Yes\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.ComponentModel.ReadOnlyAttribute.No\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example marks a property as read-only. This code creates a new <xref href=\"System.ComponentModel.ReadOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref>, sets its value to <xref href=\"System.ComponentModel.ReadOnlyAttribute.Yes\" data-throw-if-not-resolved=\"false\"></xref>, and binds it to the property.</p>Classic ReadOnlyAttribute.ReadOnlyAttribute Example#1"
  syntax:
    content: public ReadOnlyAttribute(bool isReadOnly)
    content.vb: Public Sub New(isReadOnly As Boolean)
    parameters:
    - id: isReadOnly
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to show that the property this attribute is bound to is read-only; <strong>false</strong> to show that the property is read/write. </p>\n"
  seealso:
  - type: System.ComponentModel.ReadOnlyAttribute
    commentId: T:System.ComponentModel.ReadOnlyAttribute
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.ReadOnlyAttribute.IsReadOnly
  commentId: P:System.ComponentModel.ReadOnlyAttribute.IsReadOnly
  id: IsReadOnly
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  - vb
  name: IsReadOnly
  fullName: System.ComponentModel.ReadOnlyAttribute.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.Primitives/src/System/ComponentModel/ReadOnlyAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsReadOnly
    path: src/System.ComponentModel.Primitives/src/System/ComponentModel/ReadOnlyAttribute.cs
    startLine: 54
  assemblies:
  - System.ComponentModel.Primitives
  namespace: System.ComponentModel
  summary: "\n<p>Gets a value indicating whether the property this attribute is bound to is read-only.</p>\n"
  example:
  - "\n<p>The following code example checks to see whether <code>MyProperty</code> is read-only. First, the code gets the attributes for <code>MyProperty</code> by doing the following: </p>\n<ul><li>\n<p>Retrieving a <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> with all the properties for the object.</p>\n</li><li>\n<p>Indexing into the <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> to get <code>MyProperty</code>.</p>\n</li><li>\n<p>Saving the attributes for this property in the attributes variable.</p>\n</li></ul>\n<p>Then the code sets <code>myAttribute</code> to the value of the <xref href=\"System.ComponentModel.ReadOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref> in the <xref href=\"System.ComponentModel.AttributeCollection\" data-throw-if-not-resolved=\"false\"></xref> and checks whether the property is read-only.</p>Classic ReadOnlyAttribute.IsReadOnly Example#1"
  syntax:
    content: public bool IsReadOnly { get; }
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the property this attribute is bound to is read-only; <strong>false</strong> if the property is read/write.</p>\n"
  seealso:
  - type: System.ComponentModel.ReadOnlyAttribute
    commentId: T:System.ComponentModel.ReadOnlyAttribute
  - type: System.Attribute
    commentId: T:System.Attribute
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - type: System.ComponentModel.AttributeCollection
    commentId: T:System.ComponentModel.AttributeCollection
  - type: System.ComponentModel.PropertyDescriptorCollection
    commentId: T:System.ComponentModel.PropertyDescriptorCollection
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)
  commentId: M:System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.Primitives/src/System/ComponentModel/ReadOnlyAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.ComponentModel.Primitives/src/System/ComponentModel/ReadOnlyAttribute.cs
    startLine: 59
  assemblies:
  - System.ComponentModel.Primitives
  namespace: System.ComponentModel
  summary: "\n<p>Indicates whether this instance and a specified object are equal.</p>\n"
  syntax:
    content: public override bool Equals(object value)
    content.vb: Public Overrides Function Equals(value As Object) As Boolean
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>Another object to compare to. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value</em> is equal to this instance; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.ComponentModel.ReadOnlyAttribute.GetHashCode
  commentId: M:System.ComponentModel.ReadOnlyAttribute.GetHashCode
  id: GetHashCode
  parent: System.ComponentModel.ReadOnlyAttribute
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.ComponentModel.ReadOnlyAttribute.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.Primitives/src/System/ComponentModel/ReadOnlyAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.ComponentModel.Primitives/src/System/ComponentModel/ReadOnlyAttribute.cs
    startLine: 75
  assemblies:
  - System.ComponentModel.Primitives
  namespace: System.ComponentModel
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A hash code for the current <xref href=\"System.ComponentModel.ReadOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.ComponentModel
  isExternal: false
  name: System.ComponentModel
  fullName: System.ComponentModel
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.ComponentModel.ReadOnlyAttribute
  parent: System.ComponentModel
  isExternal: false
  name: ReadOnlyAttribute
  fullName: System.ComponentModel.ReadOnlyAttribute
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
