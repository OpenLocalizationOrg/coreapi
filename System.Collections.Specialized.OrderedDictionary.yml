items:
- uid: System.Collections.Specialized.OrderedDictionary
  commentId: T:System.Collections.Specialized.OrderedDictionary
  id: OrderedDictionary
  parent: System.Collections.Specialized
  children:
  - System.Collections.Specialized.OrderedDictionary.#ctor
  - System.Collections.Specialized.OrderedDictionary.#ctor(System.Collections.IEqualityComparer)
  - System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32)
  - System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32,System.Collections.IEqualityComparer)
  - System.Collections.Specialized.OrderedDictionary.Add(System.Object,System.Object)
  - System.Collections.Specialized.OrderedDictionary.AsReadOnly
  - System.Collections.Specialized.OrderedDictionary.Clear
  - System.Collections.Specialized.OrderedDictionary.Contains(System.Object)
  - System.Collections.Specialized.OrderedDictionary.CopyTo(System.Array,System.Int32)
  - System.Collections.Specialized.OrderedDictionary.Count
  - System.Collections.Specialized.OrderedDictionary.GetEnumerator
  - System.Collections.Specialized.OrderedDictionary.Insert(System.Int32,System.Object,System.Object)
  - System.Collections.Specialized.OrderedDictionary.IsReadOnly
  - System.Collections.Specialized.OrderedDictionary.Item(System.Int32)
  - System.Collections.Specialized.OrderedDictionary.Item(System.Object)
  - System.Collections.Specialized.OrderedDictionary.Keys
  - System.Collections.Specialized.OrderedDictionary.Remove(System.Object)
  - System.Collections.Specialized.OrderedDictionary.RemoveAt(System.Int32)
  - System.Collections.Specialized.OrderedDictionary.Values
  langs:
  - csharp
  - vb
  name: OrderedDictionary
  fullName: System.Collections.Specialized.OrderedDictionary
  type: Class
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderedDictionary
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 18
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Represents a collection of key/value pairs that are accessible by the key or index.</p>\n"
  remarks: "\n<p>Each element is a key/value pair stored in a <xref href=\"System.Collections.DictionaryEntry\" data-throw-if-not-resolved=\"false\"></xref> object. A key cannot be <strong>null</strong>, but a value can be. </p>\n<p>The elements of an <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> are not sorted by the key, unlike the elements of a <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class. You can access elements either by the key or by the index.</p>\n<p>The <strong>foreach</strong> statement of the C# language (<strong>For Each</strong> in Visual Basic) returns objects that are of the type of each element in the collection. Since each element of the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref href=\"System.Collections.DictionaryEntry\" data-throw-if-not-resolved=\"false\"></xref>. The following code shows C#, Visual Basic and C++ syntax.</p>System.Collections.Specialized.OrderedDictionary1#06<p>The <strong>foreach</strong> statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</p>"
  example:
  - "\n<p>The following code example demonstrates the creation, population and modification of an <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection, as well as two techniques to display the contents of the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref>: one using the <xref href=\"System.Collections.Specialized.OrderedDictionary.Keys\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Specialized.OrderedDictionary.Values\" data-throw-if-not-resolved=\"false\"></xref> properties and the other creating an enumerator through the <xref href=\"System.Collections.Specialized.OrderedDictionary.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Collections.Specialized.OrderedDictionary1#00"
  syntax:
    content: 'public class OrderedDictionary : ICollection, IOrderedDictionary, ICollection, IDictionary, IEnumerable'
    content.vb: >-
      Public Class OrderedDictionary
          Inherits ICollection
          Implements IOrderedDictionary, ICollection, IDictionary, IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Specialized.IOrderedDictionary
  - System.Collections.ICollection
  - System.Collections.IDictionary
  - System.Collections.IEnumerable
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Collections.Specialized.OrderedDictionary.#ctor
  commentId: M:System.Collections.Specialized.OrderedDictionary.#ctor
  id: '#ctor'
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: OrderedDictionary()
  fullName: System.Collections.Specialized.OrderedDictionary.OrderedDictionary()
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 27
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>The comparer determines whether two keys are equal. Every key in a <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection must be unique. The default comparer is the key's implementation of <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the creation and population of an <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection. This code is part of a larger code example that can be viewed at <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.OrderedDictionary1#01"
  syntax:
    content: public OrderedDictionary()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.OrderedDictionary.#ctor(System.Collections.IEqualityComparer)
  commentId: M:System.Collections.Specialized.OrderedDictionary.#ctor(System.Collections.IEqualityComparer)
  id: '#ctor(System.Collections.IEqualityComparer)'
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: OrderedDictionary(IEqualityComparer)
  fullName: System.Collections.Specialized.OrderedDictionary.OrderedDictionary(System.Collections.IEqualityComparer)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/ref/System.Collections.Specialized.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/ref/System.Collections.Specialized.cs
    startLine: 155
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> class using the specified comparer.</p>\n"
  remarks: "\n<p>The comparer determines whether two keys are equal. Every key in a <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection must be unique. The default comparer is the key's implementation of <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The custom comparer enables such scenarios as doing lookups with case-insensitive strings.</p>\n"
  example:
  - 
  syntax:
    content: public OrderedDictionary(IEqualityComparer comparer)
    content.vb: Public Sub New(comparer As IEqualityComparer)
    parameters:
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: "\n<p>The <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> to use to determine whether two keys are equal.</p>\n<p>-or- </p>\n<p>\n<strong>null</strong> to use the default comparer, which is each key's implementation of <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32)
  commentId: M:System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: OrderedDictionary(Int32)
  fullName: System.Collections.Specialized.OrderedDictionary.OrderedDictionary(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 31
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> class using the specified initial capacity.</p>\n"
  remarks: "\n<p>The comparer determines whether two keys are equal. Every key in a <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection must be unique. The default comparer is the key's implementation of <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public OrderedDictionary(int capacity)
    content.vb: Public Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
      description: "\n<p>The initial number of elements that the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection can contain.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32,System.Collections.IEqualityComparer)
  commentId: M:System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32,System.Collections.IEqualityComparer)
  id: '#ctor(System.Int32,System.Collections.IEqualityComparer)'
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: OrderedDictionary(Int32, IEqualityComparer)
  fullName: System.Collections.Specialized.OrderedDictionary.OrderedDictionary(System.Int32, System.Collections.IEqualityComparer)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/ref/System.Collections.Specialized.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/ref/System.Collections.Specialized.cs
    startLine: 157
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> class using the specified initial capacity and comparer.</p>\n"
  remarks: "\n<p>The comparer determines whether two keys are equal. Every key in a <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection must be unique. The default comparer is the key's implementation of <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The custom comparer enables such scenarios as doing lookups with case-insensitive strings.</p>\n"
  example:
  - 
  syntax:
    content: public OrderedDictionary(int capacity, IEqualityComparer comparer)
    content.vb: Public Sub New(capacity As Integer, comparer As IEqualityComparer)
    parameters:
    - id: capacity
      type: System.Int32
      description: "\n<p>The initial number of elements that the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection can contain.</p>\n"
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: "\n<p>The <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> to use to determine whether two keys are equal.</p>\n<p>-or- </p>\n<p>\n<strong>null</strong> to use the default comparer, which is each key's implementation of <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.OrderedDictionary.Count
  commentId: P:System.Collections.Specialized.OrderedDictionary.Count
  id: Count
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.Specialized.OrderedDictionary.Count
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 59
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets the number of key/values pairs contained in the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the modification of an <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection. In this example, the <xref href=\"System.Collections.Specialized.OrderedDictionary.Count\" data-throw-if-not-resolved=\"false\"></xref> property is used to remove the last item in the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref>. This code is part of a larger code example that can be viewed at <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.OrderedDictionary1#02"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of key/value pairs contained in the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.OrderedDictionary.IsReadOnly
  commentId: P:System.Collections.Specialized.OrderedDictionary.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: IsReadOnly
  fullName: System.Collections.Specialized.OrderedDictionary.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsReadOnly
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 81
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection is read-only.</p>\n"
  remarks: "\n<p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</p>\n<p>A collection that is read-only is simply a collection with a wrapper that prevents modification of the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the modification of an <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection. In this example, the <xref href=\"System.Collections.Specialized.OrderedDictionary.IsReadOnly\" data-throw-if-not-resolved=\"false\"></xref> property is used to determine whether the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> can be modified. This code is part of a larger code example that can be viewed at <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.OrderedDictionary1#02"
  syntax:
    content: public bool IsReadOnly { get; }
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection is read-only; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.OrderedDictionary.Item(System.Int32)
  commentId: P:System.Collections.Specialized.OrderedDictionary.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: Item[Int32]
  fullName: System.Collections.Specialized.OrderedDictionary.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 153
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets or sets the value at the specified index.</p>\n"
  remarks: "\n<p>This property allows you to access a specific element in the collection by using the following syntax: <code>myCollection[index]</code>.</p>\n<p>The C# language uses the  keyword to define the indexers instead of implementing the <xref href=\"System.Collections.Specialized.OrderedDictionary.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property. Visual Basic implements <xref href=\"System.Collections.Specialized.OrderedDictionary.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> as a default property, which provides the same indexing functionality.</p>\n"
  example:
  - 
  syntax:
    content: public object this[int index] { get; set; }
    content.vb: Public Property Item(index As Integer) As Object
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the value to get or set.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The value of the item at the specified index. </p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The property is being set and the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection is read-only.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>index</em> is equal to or greater than <xref href=\"System.Collections.Specialized.OrderedDictionary.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Specialized.OrderedDictionary.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Collections.Specialized.OrderedDictionary.Item(System.Object)
  commentId: P:System.Collections.Specialized.OrderedDictionary.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: Item[Object]
  fullName: System.Collections.Specialized.OrderedDictionary.Item[System.Object]
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 178
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets or sets the value with the specified key.</p>\n"
  remarks: "\n<p>This property allows you to access a specific element in the collection by using the following syntax: <code>myCollection[key]</code>.</p>\n<p>You can also use the <xref href=\"System.Collections.Specialized.OrderedDictionary.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property to add new elements by setting the value of a key that does not exist in the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection (for example, <code>myCollection[\"myNonexistentKey\"] = myValue</code>). However, if the specified key already exists in the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref>, setting the <xref href=\"System.Collections.Specialized.OrderedDictionary.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property overwrites the old value. In contrast, the <xref href=\"System.Collections.Specialized.OrderedDictionary.Add(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method does not modify existing elements.</p>\n<p>A key cannot be <strong>null</strong>, but a value can be. To distinguish between <strong>null</strong> that is returned because the specified key is not found and <strong>null</strong> that is returned because the value of the specified key is <strong>null</strong>, use the <xref href=\"System.Collections.Hashtable.Contains(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to determine if the key exists in the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the modification of an <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection. In this example, the <xref href=\"System.Collections.Specialized.OrderedDictionary.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property is used to modify the dictionary entry with the key <code>\"testKey2\"</code>. This code is part of a larger code example that can be viewed at <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.OrderedDictionary1#02"
  syntax:
    content: public object this[object key] { get; set; }
    content.vb: Public Property Item(key As Object) As Object
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key of the value to get or set.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The value associated with the specified key. If the specified key is not found, attempting to get it returns <strong>null</strong>, and attempting to set it creates a new element using the specified key.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The property is being set and the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection is read-only.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Specialized.OrderedDictionary.Item(System.Object)
  name.vb: Item(Object)
- uid: System.Collections.Specialized.OrderedDictionary.Keys
  commentId: P:System.Collections.Specialized.OrderedDictionary.Keys
  id: Keys
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: Keys
  fullName: System.Collections.Specialized.OrderedDictionary.Keys
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Keys
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 103
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object containing the keys in the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  remarks: "\n<p>The returned <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object is not a static copy; instead, the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> refers back to the keys in the original <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection. Therefore, changes to the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> continue to be reflected in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the creation and population of an <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection, and then prints the contents to the console. In this example, the <xref href=\"System.Collections.Specialized.OrderedDictionary.Keys\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Specialized.OrderedDictionary.Values\" data-throw-if-not-resolved=\"false\"></xref> properties are passed to a method that displays the contents. This code is part of a larger code example that can be viewed at <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.OrderedDictionary1#01System.Collections.Specialized.OrderedDictionary1#04"
  syntax:
    content: public ICollection Keys { get; }
    content.vb: Public ReadOnly Property Keys As ICollection
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "\n<p>An <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object containing the keys in the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.OrderedDictionary.Values
  commentId: P:System.Collections.Specialized.OrderedDictionary.Values
  id: Values
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: Values
  fullName: System.Collections.Specialized.OrderedDictionary.Values
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Values
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 205
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object containing the values in the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  remarks: "\n<p>The returned <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object is not a static copy; instead, the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> refers back to the values in the original <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection. Therefore, changes to the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> continue to be reflected in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the creation and population of an <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection, and then prints the contents to the console. In this example, the <xref href=\"System.Collections.Specialized.OrderedDictionary.Keys\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Specialized.OrderedDictionary.Values\" data-throw-if-not-resolved=\"false\"></xref> properties are passed to a method that displays the contents. This code is part of a larger code example that can be viewed at <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.OrderedDictionary1#01System.Collections.Specialized.OrderedDictionary1#04"
  syntax:
    content: public ICollection Values { get; }
    content.vb: Public ReadOnly Property Values As ICollection
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "\n<p>An <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object containing the values in the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.OrderedDictionary.Add(System.Object,System.Object)
  commentId: M:System.Collections.Specialized.OrderedDictionary.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: Add(Object, Object)
  fullName: System.Collections.Specialized.OrderedDictionary.Add(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 216
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Adds an entry with the specified key and value into the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection with the lowest available index.</p>\n"
  remarks: "\n<p>A key cannot be <strong>null</strong>, but a value can be.</p>\n<p>You can also use the <xref href=\"System.Collections.Specialized.OrderedDictionary.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property to add new elements by setting the value of a key that does not exist in the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection; however, if the specified key already exists in the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref>, setting the <xref href=\"System.Collections.Specialized.OrderedDictionary.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property overwrites the old value. In contrast, the <xref href=\"System.Collections.Specialized.OrderedDictionary.Add(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method does not modify existing elements.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the creation and population of an <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection. This code is part of a larger code example that can be viewed at <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.OrderedDictionary1#01"
  syntax:
    content: public void Add(object key, object value)
    content.vb: Public Sub Add(key As Object, value As Object)
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key of the entry to add.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value of the entry to add. This value can be <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection is read-only.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.OrderedDictionary.AsReadOnly
  commentId: M:System.Collections.Specialized.OrderedDictionary.AsReadOnly
  id: AsReadOnly
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: AsReadOnly()
  fullName: System.Collections.Specialized.OrderedDictionary.AsReadOnly()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsReadOnly
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 242
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Returns a read-only copy of the current <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Specialized.OrderedDictionary.AsReadOnly\" data-throw-if-not-resolved=\"false\"></xref> method creates a read-only wrapper around the current <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection. Changes made to the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection are reflected in the read-only copy.</p>\n"
  syntax:
    content: public OrderedDictionary AsReadOnly()
    content.vb: Public Function AsReadOnly As OrderedDictionary
    return:
      type: System.Collections.Specialized.OrderedDictionary
      description: "\n<p>A read-only copy of the current <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.OrderedDictionary.Clear
  commentId: M:System.Collections.Specialized.OrderedDictionary.Clear
  id: Clear
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.Specialized.OrderedDictionary.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 229
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Removes all elements from the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  remarks: "\n<p>After calling the <xref href=\"System.Collections.Specialized.OrderedDictionary.Clear\" data-throw-if-not-resolved=\"false\"></xref> method, the <xref href=\"System.Collections.Specialized.OrderedDictionary.Count\" data-throw-if-not-resolved=\"false\"></xref> property is set to zero and references to other objects from elements of the collection are also released. The capacity is not changed as a result of calling this method.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the modification of an <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection. In this example, the <xref href=\"System.Collections.Specialized.OrderedDictionary.Clear\" data-throw-if-not-resolved=\"false\"></xref> method is used to empty the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref>, and then the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> is repopulated. This code is part of a larger code example that can be viewed at <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.OrderedDictionary1#03"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection is read-only.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.OrderedDictionary.Contains(System.Object)
  commentId: M:System.Collections.Specialized.OrderedDictionary.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: Contains(Object)
  fullName: System.Collections.Specialized.OrderedDictionary.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 250
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Determines whether the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection contains a specific key.</p>\n"
  remarks: "\n<p>Using the <xref href=\"System.Collections.Specialized.OrderedDictionary.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property can return a null value if the key does not exist or if the key is <strong>null</strong>. Use the <xref href=\"System.Collections.Specialized.OrderedDictionary.Contains(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to determine if a specific key exists in the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>item</em> to determine whether <em>item</em> exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>item</em> parameter on the objects in the collection.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the modification of an <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection. In this example, the <xref href=\"System.Collections.Specialized.OrderedDictionary.Contains(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method is used to determine if an entry exists before attempting to remove it. This code is part of a larger code example that can be viewed at <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.OrderedDictionary1#02"
  syntax:
    content: public bool Contains(object key)
    content.vb: Public Function Contains(key As Object) As Boolean
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key to locate in the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection contains an element with the specified key; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.OrderedDictionary.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Specialized.OrderedDictionary.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: CopyTo(Array, Int32)
  fullName: System.Collections.Specialized.OrderedDictionary.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/ref/System.Collections.Specialized.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections.Specialized/ref/System.Collections.Specialized.cs
    startLine: 171
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Copies the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> elements to a one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> object at the specified index.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Specialized.OrderedDictionary.CopyTo(System.Array,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is not guaranteed to preserve the order of the elements in the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  example:
  - 
  syntax:
    content: public void CopyTo(Array array, int index)
    content.vb: Public Sub CopyTo(array As Array, index As Integer)
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> object that is the destination of the <xref href=\"System.Collections.DictionaryEntry\" data-throw-if-not-resolved=\"false\"></xref> objects copied from <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection. The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> must have zero-based indexing.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.OrderedDictionary.GetEnumerator
  commentId: M:System.Collections.Specialized.OrderedDictionary.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.Specialized.OrderedDictionary.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 346
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Returns an <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object that iterates through the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  remarks: "\n<p>[Visual Basic, C#]</p>\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <strong>foreach</strong> is recommended instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. </p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.Collections.Specialized.OrderedDictionary.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method to display the contents of the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection to the console. In this example, the <xref href=\"System.Collections.Specialized.OrderedDictionary.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method is used to obtain an <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object that is passed to a method that displays the contents. This code is part of a larger code example that can be viewed at <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.OrderedDictionary1#03System.Collections.Specialized.OrderedDictionary1#05"
  syntax:
    content: public virtual IDictionaryEnumerator GetEnumerator()
    content.vb: Public Overridable Function GetEnumerator As IDictionaryEnumerator
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "\n<p>An <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object for the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  implements:
  - System.Collections.Specialized.IOrderedDictionary.GetEnumerator
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Specialized.OrderedDictionary.Insert(System.Int32,System.Object,System.Object)
  commentId: M:System.Collections.Specialized.OrderedDictionary.Insert(System.Int32,System.Object,System.Object)
  id: Insert(System.Int32,System.Object,System.Object)
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: Insert(Int32, Object, Object)
  fullName: System.Collections.Specialized.OrderedDictionary.Insert(System.Int32, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Insert
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 289
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Inserts a new entry into the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection with the specified key and value at the specified index.</p>\n"
  remarks: "\n<p>If the <em>index</em> parameter is equal to the number of entries in the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection, the <em>key</em> and <em>value</em> parameters are appended to the end of the collection.</p>\n<p>Entries that follow the insertion point move down to accommodate the new entry and the indexes of the moved entries are also updated.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the modification of an <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection. In this example, the <xref href=\"System.Collections.Specialized.OrderedDictionary.Insert(System.Int32,System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method is used to add a new entry to the beginning of the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref>, moving the rest of the entries down. This code is part of a larger code example that can be viewed at <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.OrderedDictionary1#02"
  syntax:
    content: public void Insert(int index, object key, object value)
    content.vb: Public Sub Insert(index As Integer, key As Object, value As Object)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index at which the element should be inserted.</p>\n"
    - id: key
      type: System.Object
      description: "\n<p>The key of the entry to add.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value of the entry to add. The value can be <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is out of range.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This collection is read-only.</p>\n"
  implements:
  - System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.OrderedDictionary.Remove(System.Object)
  commentId: M:System.Collections.Specialized.OrderedDictionary.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: Remove(Object)
  fullName: System.Collections.Specialized.OrderedDictionary.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 324
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Removes the entry with the specified key from the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  remarks: "\n<p>The entries that follow the removed entry move up to occupy the vacated spot and the indexes of the entries that move are also updated.</p>\n<p>If the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection does not contain an entry with the specified key, the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> remains unchanged and no exception is thrown.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the modification of an <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection. In this example, the <xref href=\"System.Collections.Specialized.OrderedDictionary.Remove(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method is used to remove the entry with the key <code>\"keyToDelete\"</code> from the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref>. This code is part of a larger code example that can be viewed at <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.OrderedDictionary1#02"
  syntax:
    content: public void Remove(object key)
    content.vb: Public Sub Remove(key As Object)
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key of the entry to remove.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection is read-only.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.OrderedDictionary.RemoveAt(System.Int32)
  commentId: M:System.Collections.Specialized.OrderedDictionary.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.Specialized.OrderedDictionary
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  fullName: System.Collections.Specialized.OrderedDictionary.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAt
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/OrderedDictionary.cs
    startLine: 306
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Removes the entry at the specified index from the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  remarks: "\n<p>The entries that follow the removed entry move up to occupy the vacated spot and the indexes of the entries that move are also updated.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the modification of an <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection. In this example, the <xref href=\"System.Collections.Specialized.OrderedDictionary.RemoveAt(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used with the <xref href=\"System.Collections.Specialized.OrderedDictionary.Count\" data-throw-if-not-resolved=\"false\"></xref> property to remove the last entry from the <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref>. This code is part of a larger code example that can be viewed at <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.OrderedDictionary1#02"
  syntax:
    content: public void RemoveAt(int index)
    content.vb: Public Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the entry to remove.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.Specialized.OrderedDictionary\" data-throw-if-not-resolved=\"false\"></xref> collection is read-only.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>- or -</p>\n<p>\n<em>index</em> is equal to or greater than <xref href=\"System.Collections.Specialized.OrderedDictionary.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Collections.Specialized
  isExternal: false
  name: System.Collections.Specialized
  fullName: System.Collections.Specialized
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Specialized.IOrderedDictionary
  parent: System.Collections.Specialized
  isExternal: false
  name: IOrderedDictionary
  fullName: System.Collections.Specialized.IOrderedDictionary
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: false
  name: Collections.IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: true
  name: Item[Int32]
  fullName: System.Collections.Specialized.IOrderedDictionary.Item[System.Int32]
  fullname.vb: System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
    name: Item
    fullName: System.Collections.Specialized.IOrderedDictionary.Item
  - name: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
    name: Item
    fullName: System.Collections.Specialized.IOrderedDictionary.Item
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Specialized.OrderedDictionary
  parent: System.Collections.Specialized
  isExternal: false
  name: OrderedDictionary
  fullName: System.Collections.Specialized.OrderedDictionary
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.Collections.Specialized.IOrderedDictionary.GetEnumerator
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.Specialized.IOrderedDictionary.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Specialized.IOrderedDictionary.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Specialized.IOrderedDictionary.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Specialized.IOrderedDictionary.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Specialized.IOrderedDictionary.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: false
  name: Collections.IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: true
  name: Insert(Int32, Object, Object)
  fullName: System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32, System.Object, System.Object)
  spec.csharp:
  - uid: System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)
    name: Insert
    fullName: System.Collections.Specialized.IOrderedDictionary.Insert
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)
    name: Insert
    fullName: System.Collections.Specialized.IOrderedDictionary.Insert
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: true
  name: RemoveAt(Int32)
  fullName: System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
    name: RemoveAt
    fullName: System.Collections.Specialized.IOrderedDictionary.RemoveAt
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
    name: RemoveAt
    fullName: System.Collections.Specialized.IOrderedDictionary.RemoveAt
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
