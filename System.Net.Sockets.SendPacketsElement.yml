items:
- uid: System.Net.Sockets.SendPacketsElement
  id: SendPacketsElement
  parent: System.Net.Sockets
  children:
  - System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[])
  - System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[],System.Int32,System.Int32)
  - System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)
  - System.Net.Sockets.SendPacketsElement.#ctor(System.String)
  - System.Net.Sockets.SendPacketsElement.#ctor(System.String,System.Int32,System.Int32)
  - System.Net.Sockets.SendPacketsElement.#ctor(System.String,System.Int32,System.Int32,System.Boolean)
  - System.Net.Sockets.SendPacketsElement.Buffer
  - System.Net.Sockets.SendPacketsElement.Count
  - System.Net.Sockets.SendPacketsElement.EndOfPacket
  - System.Net.Sockets.SendPacketsElement.FilePath
  - System.Net.Sockets.SendPacketsElement.Offset
  href: System.Net.Sockets.SendPacketsElement.yml
  name: SendPacketsElement
  fullName: System.Net.Sockets.SendPacketsElement
  type: Class
  source:
    remote: &o0
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://vicancy@github.com/dotnet/corefx.git
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 143
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Represents an element in a @'System.Net.Sockets.SendPacketsElement' array.
  syntax:
    content: public class SendPacketsElement
    content.vb: Public Class SendPacketsElement
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Net.Sockets.SendPacketsElement
  href: System.Net.Sockets.SendPacketsElement.yml
  name: SendPacketsElement(Byte[])
  name.vb: SendPacketsElement(Byte())
  fullName: System.Net.Sockets.SendPacketsElement.SendPacketsElement(System.Byte[])
  fullName.vb: System.Net.Sockets.SendPacketsElement.SendPacketsElement(System.Byte())
  type: Constructor
  source:
    remote: *o0
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 145
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Initializes a new instance of the @'System.Net.Sockets.SendPacketsElement' class using the specified buffer.
  syntax:
    content: public SendPacketsElement(byte[] buffer)
    content.vb: Public Sub New(buffer As Byte())
    parameters:
    - id: buffer
      type: System.Byte[]
      description: A byte array of data to send using the @'System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)' method.
  exceptions:
  - type: System.ArgumentNullException
    description: The *buffer* parameter cannot be null
- uid: System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[],System.Int32,System.Int32)
  id: '#ctor(System.Byte[],System.Int32,System.Int32)'
  parent: System.Net.Sockets.SendPacketsElement
  href: System.Net.Sockets.SendPacketsElement.yml
  name: SendPacketsElement(Byte[], Int32, Int32)
  name.vb: SendPacketsElement(Byte(), Int32, Int32)
  fullName: System.Net.Sockets.SendPacketsElement.SendPacketsElement(System.Byte[], System.Int32, System.Int32)
  fullName.vb: System.Net.Sockets.SendPacketsElement.SendPacketsElement(System.Byte(), System.Int32, System.Int32)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 146
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Initializes a new instance of the @'System.Net.Sockets.SendPacketsElement' class using the specified buffer, buffer offset, and count.
  syntax:
    content: public SendPacketsElement(byte[] buffer, int offset, int count)
    content.vb: Public Sub New(buffer As Byte(), offset As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: A byte array of data to send using the @'System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)' method.
    - id: offset
      type: System.Int32
      description: The offset, in bytes, from the beginning of the *buffer* to the location in the *buffer* to start sending the data specified in the *buffer* parameter.
    - id: count
      type: System.Int32
      description: The number of bytes to send starting from the *offset* parameter. If *count* is zero, no bytes are sent.
  exceptions:
  - type: System.ArgumentNullException
    description: The *buffer* parameter cannot be null
  - type: System.ArgumentOutOfRangeException
    description: The *offset* and *count* parameters must be greater than or equal to zero. The *offset* and *count* must be less than the size of the buffer
- uid: System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)
  id: '#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)'
  parent: System.Net.Sockets.SendPacketsElement
  href: System.Net.Sockets.SendPacketsElement.yml
  name: SendPacketsElement(Byte[], Int32, Int32, Boolean)
  name.vb: SendPacketsElement(Byte(), Int32, Int32, Boolean)
  fullName: System.Net.Sockets.SendPacketsElement.SendPacketsElement(System.Byte[], System.Int32, System.Int32, System.Boolean)
  fullName.vb: System.Net.Sockets.SendPacketsElement.SendPacketsElement(System.Byte(), System.Int32, System.Int32, System.Boolean)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 147
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Initializes a new instance of the @'System.Net.Sockets.SendPacketsElement' class using the specified buffer, buffer offset, and count with an option to combine this element with the next element in a single send request from the sockets layer to the transport.
  syntax:
    content: public SendPacketsElement(byte[] buffer, int offset, int count, bool endOfPacket)
    content.vb: Public Sub New(buffer As Byte(), offset As Integer, count As Integer, endOfPacket As Boolean)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: A byte array of data to send using the @'System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)' method.
    - id: offset
      type: System.Int32
      description: The offset, in bytes, from the beginning of the *buffer* to the location in the *buffer* to start sending the data specified in the *buffer* parameter.
    - id: count
      type: System.Int32
      description: The number bytes to send starting from the *offset* parameter. If *count* is zero, no bytes are sent.
    - id: endOfPacket
      type: System.Boolean
      description: A Boolean value that specifies that this element should not be combined with the next element in a single send request from the sockets layer to the transport. This flag is used for granular control of the content of each message on a datagram or message-oriented socket.
  exceptions:
  - type: System.ArgumentNullException
    description: The *buffer* parameter cannot be null
  - type: System.ArgumentOutOfRangeException
    description: The *offset* and *count* parameters must be greater than or equal to zero. The *offset* and *count* must be less than the size of the buffer
- uid: System.Net.Sockets.SendPacketsElement.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Net.Sockets.SendPacketsElement
  href: System.Net.Sockets.SendPacketsElement.yml
  name: SendPacketsElement(String)
  fullName: System.Net.Sockets.SendPacketsElement.SendPacketsElement(System.String)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 148
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Initializes a new instance of the @'System.Net.Sockets.SendPacketsElement' class using the specified file.
  syntax:
    content: public SendPacketsElement(string filepath)
    content.vb: Public Sub New(filepath As String)
    parameters:
    - id: filepath
      type: System.String
      description: The filename of the file to be transmitted using the @'System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)' method.
  exceptions:
  - type: System.ArgumentNullException
    description: The *filepath* parameter cannot be null
- uid: System.Net.Sockets.SendPacketsElement.#ctor(System.String,System.Int32,System.Int32)
  id: '#ctor(System.String,System.Int32,System.Int32)'
  parent: System.Net.Sockets.SendPacketsElement
  href: System.Net.Sockets.SendPacketsElement.yml
  name: SendPacketsElement(String, Int32, Int32)
  fullName: System.Net.Sockets.SendPacketsElement.SendPacketsElement(System.String, System.Int32, System.Int32)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 149
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Initializes a new instance of the @'System.Net.Sockets.SendPacketsElement' class using the specified filename path, offset, and count.
  syntax:
    content: public SendPacketsElement(string filepath, int offset, int count)
    content.vb: Public Sub New(filepath As String, offset As Integer, count As Integer)
    parameters:
    - id: filepath
      type: System.String
      description: The filename of the file to be transmitted using the @'System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)' method.
    - id: offset
      type: System.Int32
      description: The offset, in bytes, from the beginning of the file to the location in the file to start sending the file specified in the *filepath* parameter.
    - id: count
      type: System.Int32
      description: The number of bytes to send starting from the *offset* parameter. If *count* is zero, the entire file is sent.
  exceptions:
  - type: System.ArgumentNullException
    description: The *filepath* parameter cannot be null
  - type: System.ArgumentOutOfRangeException
    description: The *offset* and *count* parameters must be greater than or equal to zero. The *offset* and *count* must be less than the size of the file indicated by the *filepath* parameter.
- uid: System.Net.Sockets.SendPacketsElement.#ctor(System.String,System.Int32,System.Int32,System.Boolean)
  id: '#ctor(System.String,System.Int32,System.Int32,System.Boolean)'
  parent: System.Net.Sockets.SendPacketsElement
  href: System.Net.Sockets.SendPacketsElement.yml
  name: SendPacketsElement(String, Int32, Int32, Boolean)
  fullName: System.Net.Sockets.SendPacketsElement.SendPacketsElement(System.String, System.Int32, System.Int32, System.Boolean)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 150
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Initializes a new instance of the @'System.Net.Sockets.SendPacketsElement' class using the specified filename path, buffer offset, and count with an option to combine this element with the next element in a single send request from the sockets layer to the transport.
  syntax:
    content: public SendPacketsElement(string filepath, int offset, int count, bool endOfPacket)
    content.vb: Public Sub New(filepath As String, offset As Integer, count As Integer, endOfPacket As Boolean)
    parameters:
    - id: filepath
      type: System.String
      description: The filename of the file to be transmitted using the @'System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)' method.
    - id: offset
      type: System.Int32
      description: The offset, in bytes, from the beginning of the file to the location in the file to start sending the file specified in the *filepath* parameter.
    - id: count
      type: System.Int32
      description: The number of bytes to send starting from the *offset* parameter. If *count* is zero, the entire file is sent.
    - id: endOfPacket
      type: System.Boolean
      description: A Boolean value that specifies that this element should not be combined with the next element in a single send request from the sockets layer to the transport. This flag is used for granular control of the content of each message on a datagram or message-oriented socket.
  exceptions:
  - type: System.ArgumentNullException
    description: The *filepath* parameter cannot be null
  - type: System.ArgumentOutOfRangeException
    description: The *offset* and *count* parameters must be greater than or equal to zero. The *offset* and *count* must be less than the size of the file indicated by the *filepath* parameter.
- uid: System.Net.Sockets.SendPacketsElement.Buffer
  id: Buffer
  parent: System.Net.Sockets.SendPacketsElement
  href: System.Net.Sockets.SendPacketsElement.yml
  name: Buffer
  fullName: System.Net.Sockets.SendPacketsElement.Buffer
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 151
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets the buffer to be sent if the @'System.Net.Sockets.SendPacketsElement' class was initialized with a *buffer* parameter.
  syntax:
    content: public byte[] Buffer { get; }
    content.vb: Public ReadOnly Property Buffer As Byte()
    parameters: []
    return:
      type: System.Byte[]
      description: The byte buffer to send if the @'System.Net.Sockets.SendPacketsElement' class was initialized with a *buffer* parameter.
- uid: System.Net.Sockets.SendPacketsElement.Count
  id: Count
  parent: System.Net.Sockets.SendPacketsElement
  href: System.Net.Sockets.SendPacketsElement.yml
  name: Count
  fullName: System.Net.Sockets.SendPacketsElement.Count
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 152
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets the count of bytes to be sent.
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: The count of bytes to send if the @'System.Net.Sockets.SendPacketsElement' class was initialized with a *count* parameter.
- uid: System.Net.Sockets.SendPacketsElement.EndOfPacket
  id: EndOfPacket
  parent: System.Net.Sockets.SendPacketsElement
  href: System.Net.Sockets.SendPacketsElement.yml
  name: EndOfPacket
  fullName: System.Net.Sockets.SendPacketsElement.EndOfPacket
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 153
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets a Boolean value that indicates if this element should not be combined with the next element in a single send request from the sockets layer to the transport.
  syntax:
    content: public bool EndOfPacket { get; }
    content.vb: Public ReadOnly Property EndOfPacket As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: A Boolean value that indicates if this element should not be combined with the next element in a single send request.
- uid: System.Net.Sockets.SendPacketsElement.FilePath
  id: FilePath
  parent: System.Net.Sockets.SendPacketsElement
  href: System.Net.Sockets.SendPacketsElement.yml
  name: FilePath
  fullName: System.Net.Sockets.SendPacketsElement.FilePath
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 154
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets the filename of the file to send if the @'System.Net.Sockets.SendPacketsElement' class was initialized with a *filepath* parameter.
  syntax:
    content: public string FilePath { get; }
    content.vb: Public ReadOnly Property FilePath As String
    parameters: []
    return:
      type: System.String
      description: The filename of the file to send if the @'System.Net.Sockets.SendPacketsElement' class was initialized with a *filepath* parameter.
- uid: System.Net.Sockets.SendPacketsElement.Offset
  id: Offset
  parent: System.Net.Sockets.SendPacketsElement
  href: System.Net.Sockets.SendPacketsElement.yml
  name: Offset
  fullName: System.Net.Sockets.SendPacketsElement.Offset
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 155
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets the offset, in bytes, from the beginning of the data buffer or file to the location in the buffer or file to start sending the data.
  syntax:
    content: public int Offset { get; }
    content.vb: Public ReadOnly Property Offset As Integer
    parameters: []
    return:
      type: System.Int32
      description: The offset, in bytes, from the beginning of the data buffer or file to the location in the buffer or file to start sending the data.
references:
- uid: System.Net.Sockets
  isExternal: false
  name: System.Net.Sockets
  fullName: System.Net.Sockets
  type: Namespace
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
  type: Class
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
  type: Namespace
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  name.vb: Byte()
  fullName: System.Byte[]
  fullName.vb: System.Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  href: System.Int32.yml
  name: Int32
  fullName: System.Int32
  type: Struct
- uid: System.Boolean
  parent: System
  isExternal: false
  href: System.Boolean.yml
  name: Boolean
  fullName: System.Boolean
  type: Struct
- uid: System.String
  parent: System
  isExternal: false
  href: System.String.yml
  name: String
  fullName: System.String
  type: Class
- uid: System.ArgumentNullException
  isExternal: false
  href: System.ArgumentNullException.yml
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  type: Class
  summary: The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  href: System.ArgumentOutOfRangeException.yml
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  type: Class
