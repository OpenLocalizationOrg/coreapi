items:
- uid: System.Collections.IStructuralEquatable
  commentId: T:System.Collections.IStructuralEquatable
  id: IStructuralEquatable
  parent: System.Collections
  children:
  - System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  - System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  langs:
  - csharp
  - vb
  name: IStructuralEquatable
  fullName: System.Collections.IStructuralEquatable
  type: Interface
  source:
    remote:
      path: src/mscorlib/src/System/Collections/IStructuralEquatable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IStructuralEquatable
    path: src/mscorlib/src/System/Collections/IStructuralEquatable.cs
    startLine: 5
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Defines methods to support the comparison of objects for structural equality. </p>\n"
  example:
  - "\n<p>The default equality comparer, <strong>EqualityComparer<Object>.Default.Equals</strong>, considers two <strong>NaN</strong> values to be equal. However, in some cases, you may want the comparison of <strong>NaN</strong> values for equality to return <strong>false</strong>, which indicates that the values cannot be compared. The following example defines a <code>NanComparer</code> class that implements the <xref href=\"System.Collections.IStructuralEquatable\" data-throw-if-not-resolved=\"false\"></xref> interface. It compares two <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> or two <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values by using the equality operator. It passes values of any other type to the default equality comparer.</p>System.Collections.IStructuralEquatable#1<p>The following example creates two identical 3-tuple objects whose components consist of three <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values. The value of the second component is <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref>. The example then calls the <xref href=\"System.Tuple`3.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method, and it calls the <xref href=\"System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\" data-throw-if-not-resolved=\"false\"></xref> method three times. The first time, it passes the default equality comparer that is returned by the <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> property. The second time, it passes the default equality comparer that is returned by the <xref href=\"System.Collections.StructuralComparisons.StructuralEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> property. The third time, it passes the custom <code>NanComparer</code> object. As the output from the example shows, the first three method calls return <strong>true</strong>, whereas the fourth call returns <strong>false</strong>. </p>System.Collections.IStructuralEquatable#2"
  syntax:
    content: public interface IStructuralEquatable
    content.vb: Public Interface IStructuralEquatable
  seealso:
  - type: System.Collections.IEqualityComparer
    commentId: T:System.Collections.IEqualityComparer
  - type: System.Collections.IStructuralComparable
    commentId: T:System.Collections.IStructuralComparable
  - type: System.Collections.StructuralComparisons.StructuralEqualityComparer
    commentId: P:System.Collections.StructuralComparisons.StructuralEqualityComparer
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  nameWithType: IStructuralEquatable
- uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  commentId: M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  id: Equals(System.Object,System.Collections.IEqualityComparer)
  parent: System.Collections.IStructuralEquatable
  langs:
  - csharp
  - vb
  name: Equals(Object, IEqualityComparer)
  fullName: System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/IStructuralEquatable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Collections/IStructuralEquatable.cs
    startLine: 6
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Determines whether an object is structurally equal to the current instance.</p>\n"
  example:
  - "\n<p>The default equality comparer, <strong>EqualityComparer<Object>.Default.Equals</strong>, considers two <strong>NaN</strong> values to be equal. However, in some cases, you may want the comparison of <strong>NaN</strong> values for equality to return <strong>false</strong>, which indicates that the values cannot be compared. The following example defines a <code>NanComparer</code> class that implements the <xref href=\"System.Collections.IStructuralEquatable\" data-throw-if-not-resolved=\"false\"></xref> interface. It compares two <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> or two <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values by using the equality operator. It passes values of any other type to the default equality comparer.</p>System.Collections.IStructuralEquatable#1<p>The following example creates two identical 3-tuple objects whose components consist of three <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values. The value of the second component is <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref>. The example then calls the <xref href=\"System.Tuple`3.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method, and it calls the <xref href=\"System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\" data-throw-if-not-resolved=\"false\"></xref> method three times. The first time, it passes the default equality comparer that is returned by the <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> property. The second time, it passes the default equality comparer that is returned by the <xref href=\"System.Collections.StructuralComparisons.StructuralEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> property. The third time, it passes the custom <code>NanComparer</code> object. As the output from the example shows, the first three method calls return <strong>true</strong>, whereas the fourth call returns <strong>false</strong>. </p>System.Collections.IStructuralEquatable#2"
  syntax:
    content: bool Equals(object other, IEqualityComparer comparer)
    content.vb: Function Equals(other As Object, comparer As IEqualityComparer) As Boolean
    parameters:
    - id: other
      type: System.Object
      description: "\n<p>The object to compare with the current instance.</p>\n"
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: "\n<p>An object that determines whether the current instance and <em>other</em> are equal. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two objects are equal; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Collections.StructuralComparisons.StructuralEqualityComparer
    commentId: P:System.Collections.StructuralComparisons.StructuralEqualityComparer
  nameWithType: IStructuralEquatable.Equals(Object, IEqualityComparer)
- uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  commentId: M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  id: GetHashCode(System.Collections.IEqualityComparer)
  parent: System.Collections.IStructuralEquatable
  langs:
  - csharp
  - vb
  name: GetHashCode(IEqualityComparer)
  fullName: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/IStructuralEquatable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Collections/IStructuralEquatable.cs
    startLine: 7
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Returns a hash code for the current instance.</p>\n"
  example:
  - 
  syntax:
    content: int GetHashCode(IEqualityComparer comparer)
    content.vb: Function GetHashCode(comparer As IEqualityComparer) As Integer
    parameters:
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: "\n<p>An object that computes the hash code of the current object.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The hash code for the current instance.</p>\n"
  nameWithType: IStructuralEquatable.GetHashCode(IEqualityComparer)
references:
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
  nameWithType: System.Collections
  commentId: N:System.Collections
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: false
  name: IEqualityComparer
  fullName: System.Collections.IEqualityComparer
  nameWithType: IEqualityComparer
  commentId: T:System.Collections.IEqualityComparer
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
