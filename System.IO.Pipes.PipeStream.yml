items:
- uid: System.IO.Pipes.PipeStream
  commentId: T:System.IO.Pipes.PipeStream
  id: PipeStream
  parent: System.IO.Pipes
  children:
  - System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)
  - System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)
  - System.IO.Pipes.PipeStream.CanRead
  - System.IO.Pipes.PipeStream.CanSeek
  - System.IO.Pipes.PipeStream.CanWrite
  - System.IO.Pipes.PipeStream.Dispose(System.Boolean)
  - System.IO.Pipes.PipeStream.Flush
  - System.IO.Pipes.PipeStream.InBufferSize
  - System.IO.Pipes.PipeStream.IsAsync
  - System.IO.Pipes.PipeStream.IsConnected
  - System.IO.Pipes.PipeStream.IsMessageComplete
  - System.IO.Pipes.PipeStream.Length
  - System.IO.Pipes.PipeStream.OutBufferSize
  - System.IO.Pipes.PipeStream.Position
  - System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.IO.Pipes.PipeStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.Pipes.PipeStream.ReadByte
  - System.IO.Pipes.PipeStream.ReadMode
  - System.IO.Pipes.PipeStream.SafePipeHandle
  - System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.IO.Pipes.PipeStream.SetLength(System.Int64)
  - System.IO.Pipes.PipeStream.TransmissionMode
  - System.IO.Pipes.PipeStream.WaitForPipeDrain
  - System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.IO.Pipes.PipeStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.Pipes.PipeStream.WriteByte(System.Byte)
  langs:
  - csharp
  - vb
  name: PipeStream
  fullName: System.IO.Pipes.PipeStream
  type: Class
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PipeStream
    path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.Windows.cs
    startLine: 14
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Exposes a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object around a pipe, which supports both anonymous and named pipes.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Pipes.PipeStream\" data-throw-if-not-resolved=\"false\"></xref> class provides the base class for named and anonymous pipes operations in the .NET Framework. Use the <xref href=\"System.IO.Pipes.NamedPipeServerStream\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.Pipes.NamedPipeClientStream\" data-throw-if-not-resolved=\"false\"></xref> classes for named pipe operations. Use the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\" data-throw-if-not-resolved=\"false\"></xref> classes for anonymous pipe operations.</p>\n<p>For more information about pipes, see Pipe Operations in the .NET Framework. For an example of anonymous pipes, see How to: Use Anonymous Pipes for Local Interprocess Communication. For an example of named pipes, see How to: Use Named Pipes for Network Interprocess Communication.</p>\n"
  example:
  - 
  syntax:
    content: 'public abstract class PipeStream : Stream'
    content.vb: >-
      Public MustInherit Class PipeStream
          Inherits Stream
  see:
  - type: System.Security.Permissions.SecurityAction.InheritanceDemand
    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)
  commentId: M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)
  id: '#ctor(System.IO.Pipes.PipeDirection,System.Int32)'
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: PipeStream(PipeDirection, Int32)
  fullName: System.IO.Pipes.PipeStream.PipeStream(System.IO.Pipes.PipeDirection, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
    startLine: 33
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.Pipes.PipeStream\" data-throw-if-not-resolved=\"false\"></xref> class using the specified <xref href=\"System.IO.Pipes.PipeDirection\" data-throw-if-not-resolved=\"false\"></xref> value and buffer size.</p>\n"
  remarks: "\n<p>This constructor uses a pipe transmission mode of <xref href=\"System.IO.Pipes.PipeTransmissionMode.Byte\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: protected PipeStream(PipeDirection direction, int bufferSize)
    content.vb: Protected Sub New(direction As PipeDirection, bufferSize As Integer)
    parameters:
    - id: direction
      type: System.IO.Pipes.PipeDirection
      description: "\n<p>One of the <xref href=\"System.IO.Pipes.PipeDirection\" data-throw-if-not-resolved=\"false\"></xref> values that indicates the direction of the pipe object.</p>\n"
    - id: bufferSize
      type: System.Int32
      description: "\n<p>A positive <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value greater than or equal to 0 that indicates the buffer size.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>direction</em> is not a valid <xref href=\"System.IO.Pipes.PipeDirection\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n<p>-or-</p>\n<p>\n<em>bufferSize</em> is less than 0.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)
  commentId: M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)
  id: '#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)'
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: PipeStream(PipeDirection, PipeTransmissionMode, Int32)
  fullName: System.IO.Pipes.PipeStream.PipeStream(System.IO.Pipes.PipeDirection, System.IO.Pipes.PipeTransmissionMode, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
    startLine: 47
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.Pipes.PipeStream\" data-throw-if-not-resolved=\"false\"></xref> class using the specified <xref href=\"System.IO.Pipes.PipeDirection\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.Pipes.PipeTransmissionMode\" data-throw-if-not-resolved=\"false\"></xref>, and buffer size.</p>\n"
  example:
  - 
  syntax:
    content: protected PipeStream(PipeDirection direction, PipeTransmissionMode transmissionMode, int outBufferSize)
    content.vb: Protected Sub New(direction As PipeDirection, transmissionMode As PipeTransmissionMode, outBufferSize As Integer)
    parameters:
    - id: direction
      type: System.IO.Pipes.PipeDirection
      description: "\n<p>One of the <xref href=\"System.IO.Pipes.PipeDirection\" data-throw-if-not-resolved=\"false\"></xref> values that indicates the direction of the pipe object.</p>\n"
    - id: transmissionMode
      type: System.IO.Pipes.PipeTransmissionMode
      description: "\n<p>One of the <xref href=\"System.IO.Pipes.PipeTransmissionMode\" data-throw-if-not-resolved=\"false\"></xref> values that indicates the transmission mode of the pipe object.</p>\n"
    - id: outBufferSize
      type: System.Int32
      description: "\n<p>A positive <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value greater than or equal to 0 that indicates the buffer size.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>direction</em> is not a valid <xref href=\"System.IO.Pipes.PipeDirection\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n<p>-or-</p>\n<p>\n<em>transmissionMode</em> is not a valid <xref href=\"System.IO.Pipes.PipeTransmissionMode\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n<p>-or-</p>\n<p>\n<em>bufferSize</em> is less than 0.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.IO.Pipes.PipeStream.CanRead
  commentId: P:System.IO.Pipes.PipeStream.CanRead
  id: CanRead
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: CanRead
  fullName: System.IO.Pipes.PipeStream.CanRead
  type: Property
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanRead
    path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
    startLine: 396
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Gets a value indicating whether the current stream supports read operations.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.IO.Pipes.PipeStream\" data-throw-if-not-resolved=\"false\"></xref> object is closed, this property returns <strong>false</strong>.</p>\n"
  example:
  - 
  syntax:
    content: public override bool CanRead { get; }
    content.vb: Public Overrides ReadOnly Property CanRead As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the stream supports read operations; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.Pipes.PipeStream.CanSeek
  commentId: P:System.IO.Pipes.PipeStream.CanSeek
  id: CanSeek
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: CanSeek
  fullName: System.IO.Pipes.PipeStream.CanSeek
  type: Property
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanSeek
    path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
    startLine: 414
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Gets a value indicating whether the current stream supports seek operations.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.IO.Pipes.PipeStream\" data-throw-if-not-resolved=\"false\"></xref> object is closed, this property returns <strong>false</strong>.</p>\n"
  example:
  - 
  syntax:
    content: public override bool CanSeek { get; }
    content.vb: Public Overrides ReadOnly Property CanSeek As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>false</strong> in all cases.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.Pipes.PipeStream.CanWrite
  commentId: P:System.IO.Pipes.PipeStream.CanWrite
  id: CanWrite
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: CanWrite
  fullName: System.IO.Pipes.PipeStream.CanWrite
  type: Property
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanWrite
    path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
    startLine: 405
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Gets a value indicating whether the current stream supports write operations.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.IO.Pipes.PipeStream\" data-throw-if-not-resolved=\"false\"></xref> object is closed, this property returns <strong>false</strong>.</p>\n"
  example:
  - 
  syntax:
    content: public override bool CanWrite { get; }
    content.vb: Public Overrides ReadOnly Property CanWrite As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the stream supports write operations; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.Pipes.PipeStream.InBufferSize
  commentId: P:System.IO.Pipes.PipeStream.InBufferSize
  id: InBufferSize
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: InBufferSize
  fullName: System.IO.Pipes.PipeStream.InBufferSize
  type: Property
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InBufferSize
    path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.Windows.cs
    startLine: 236
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Gets the size, in bytes, of the inbound buffer for a pipe.</p>\n"
  remarks: "\n<p>If <xref href=\"System.IO.Pipes.PipeStream.InBufferSize\" data-throw-if-not-resolved=\"false\"></xref> is 0, the buffer size is allocated as needed.</p>\n"
  example:
  - 
  syntax:
    content: public virtual int InBufferSize { get; }
    content.vb: Public Overridable ReadOnly Property InBufferSize As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>An integer value that represents the inbound buffer size, in bytes.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream is unreadable.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The pipe is waiting to connect.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The pipe is broken or another I/O error occurred.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.IO.Pipes.PipeStream.IsAsync
  commentId: P:System.IO.Pipes.PipeStream.IsAsync
  id: IsAsync
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: IsAsync
  fullName: System.IO.Pipes.PipeStream.IsAsync
  type: Property
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAsync
    path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
    startLine: 310
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Gets a value indicating whether a <xref href=\"System.IO.Pipes.PipeStream\" data-throw-if-not-resolved=\"false\"></xref> object was opened asynchronously or synchronously.</p>\n"
  remarks: "\n<p>This property enables your code to use the <xref href=\"System.IO.Pipes.PipeStream.SafePipeHandle\" data-throw-if-not-resolved=\"false\"></xref> property correctly.</p>\n"
  example:
  - 
  syntax:
    content: public bool IsAsync { get; }
    content.vb: Public ReadOnly Property IsAsync As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.IO.Pipes.PipeStream\" data-throw-if-not-resolved=\"false\"></xref> object was opened asynchronously; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.Pipes.PipeStream.IsConnected
  commentId: P:System.IO.Pipes.PipeStream.IsConnected
  id: IsConnected
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: IsConnected
  fullName: System.IO.Pipes.PipeStream.IsConnected
  type: Property
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsConnected
    path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
    startLine: 298
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Gets or sets a value indicating whether a <xref href=\"System.IO.Pipes.PipeStream\" data-throw-if-not-resolved=\"false\"></xref> object is connected.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Pipes.PipeStream.IsConnected\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>true</strong> only if the <xref href=\"System.IO.Pipes.PipeStream\" data-throw-if-not-resolved=\"false\"></xref> object is connected. If this property returns <strong>false</strong>, the pipe may be waiting to connect, or may be disconnected, closed, or broken.</p>\n"
  example:
  - 
  syntax:
    content: public bool IsConnected { get; protected set; }
    content.vb: Public Property IsConnected As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.IO.Pipes.PipeStream\" data-throw-if-not-resolved=\"false\"></xref> object is connected; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - protected set
  modifiers.vb:
  - Public
  - Get
  - Protected Set
- uid: System.IO.Pipes.PipeStream.IsMessageComplete
  commentId: P:System.IO.Pipes.PipeStream.IsMessageComplete
  id: IsMessageComplete
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: IsMessageComplete
  fullName: System.IO.Pipes.PipeStream.IsMessageComplete
  type: Property
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsMessageComplete
    path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
    startLine: 317
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Gets a value indicating whether there is more data in the message returned from the most recent read operation.</p>\n"
  remarks: "\n<p>This property is relevant if the pipe's <xref href=\"System.IO.Pipes.PipeStream.ReadMode\" data-throw-if-not-resolved=\"false\"></xref> property was set to <xref href=\"System.IO.Pipes.PipeTransmissionMode.Message\" data-throw-if-not-resolved=\"false\"></xref> by the most recent call to <xref href=\"System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public bool IsMessageComplete { get; }
    content.vb: Public ReadOnly Property IsMessageComplete As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if there are no more characters to read in the message; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The pipe is not connected.</p>\n<p>-or-</p>\n<p>The pipe handle has not been set.</p>\n<p>-or-</p>\n<p>The pipe's <xref href=\"System.IO.Pipes.PipeStream.ReadMode\" data-throw-if-not-resolved=\"false\"></xref> property value is not <xref href=\"System.IO.Pipes.PipeTransmissionMode.Message\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The pipe is closed.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.Pipes.PipeStream.Length
  commentId: P:System.IO.Pipes.PipeStream.Length
  id: Length
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: Length
  fullName: System.IO.Pipes.PipeStream.Length
  type: Property
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Length
    path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
    startLine: 423
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Gets the length of a stream, in bytes.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Pipes.PipeStream\" data-throw-if-not-resolved=\"false\"></xref> class does not support the <xref href=\"System.IO.Pipes.PipeStream.Length\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - 
  syntax:
    content: public override long Length { get; }
    content.vb: Public Overrides ReadOnly Property Length As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>0 in all cases.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Always thrown.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.Pipes.PipeStream.OutBufferSize
  commentId: P:System.IO.Pipes.PipeStream.OutBufferSize
  id: OutBufferSize
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: OutBufferSize
  fullName: System.IO.Pipes.PipeStream.OutBufferSize
  type: Property
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OutBufferSize
    path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.Windows.cs
    startLine: 262
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Gets the size, in bytes, of the outbound buffer for a pipe.</p>\n"
  remarks: "\n<p>If <xref href=\"System.IO.Pipes.PipeStream.OutBufferSize\" data-throw-if-not-resolved=\"false\"></xref> is 0, the buffer size is allocated as needed.</p>\n"
  example:
  - 
  syntax:
    content: public virtual int OutBufferSize { get; }
    content.vb: Public Overridable ReadOnly Property OutBufferSize As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The outbound buffer size, in bytes.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream is unwriteable.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The pipe is waiting to connect.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The pipe is broken or another I/O error occurred.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.IO.Pipes.PipeStream.Position
  commentId: P:System.IO.Pipes.PipeStream.Position
  id: Position
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: Position
  fullName: System.IO.Pipes.PipeStream.Position
  type: Property
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Position
    path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
    startLine: 431
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Gets or sets the current position of the current stream.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Pipes.PipeStream\" data-throw-if-not-resolved=\"false\"></xref> class does not support the <xref href=\"System.IO.Pipes.PipeStream.Position\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - 
  syntax:
    content: public override long Position { get; set; }
    content.vb: Public Overrides Property Position As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>0 in all cases.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Always thrown.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.Pipes.PipeStream.ReadMode
  commentId: P:System.IO.Pipes.PipeStream.ReadMode
  id: ReadMode
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: ReadMode
  fullName: System.IO.Pipes.PipeStream.ReadMode
  type: Property
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadMode
    path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.Windows.cs
    startLine: 291
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Gets or sets the reading mode for a <xref href=\"System.IO.Pipes.PipeStream\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>Anonymous pipes do not support <xref href=\"System.IO.Pipes.PipeTransmissionMode.Message\" data-throw-if-not-resolved=\"false\"></xref> mode message transmission.</p>\n"
  example:
  - 
  syntax:
    content: public virtual PipeTransmissionMode ReadMode { get; set; }
    content.vb: Public Overridable Property ReadMode As PipeTransmissionMode
    parameters: []
    return:
      type: System.IO.Pipes.PipeTransmissionMode
      description: "\n<p>One of the <xref href=\"System.IO.Pipes.PipeTransmissionMode\" data-throw-if-not-resolved=\"false\"></xref> values that indicates how the <xref href=\"System.IO.Pipes.PipeStream\" data-throw-if-not-resolved=\"false\"></xref> object reads from the pipe.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The supplied value is not a valid <xref href=\"System.IO.Pipes.PipeTransmissionMode\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The supplied value is not a supported <xref href=\"System.IO.Pipes.PipeTransmissionMode\" data-throw-if-not-resolved=\"false\"></xref> value for this pipe stream.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The handle has not been set.</p>\n<p>-or-</p>\n<p>The pipe is waiting to connect with a named client.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The pipe is broken or an I/O error occurred with a named client.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.Pipes.PipeStream.SafePipeHandle
  commentId: P:System.IO.Pipes.PipeStream.SafePipeHandle
  id: SafePipeHandle
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: SafePipeHandle
  fullName: System.IO.Pipes.PipeStream.SafePipeHandle
  type: Property
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SafePipeHandle
    path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
    startLine: 359
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Gets the safe handle for the local end of the pipe that the current <xref href=\"System.IO.Pipes.PipeStream\" data-throw-if-not-resolved=\"false\"></xref> object encapsulates.</p>\n"
  example:
  - 
  syntax:
    content: public SafePipeHandle SafePipeHandle { get; }
    content.vb: Public ReadOnly Property SafePipeHandle As SafePipeHandle
    parameters: []
    return:
      type: Microsoft.Win32.SafeHandles.SafePipeHandle
      description: "\n<p>A <xref href=\"Microsoft.Win32.SafeHandles.SafePipeHandle\" data-throw-if-not-resolved=\"false\"></xref> object for the pipe that is encapsulated by the current <xref href=\"System.IO.Pipes.PipeStream\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The pipe handle has not been set.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The pipe is closed.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.Pipes.PipeStream.TransmissionMode
  commentId: P:System.IO.Pipes.PipeStream.TransmissionMode
  id: TransmissionMode
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: TransmissionMode
  fullName: System.IO.Pipes.PipeStream.TransmissionMode
  type: Property
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TransmissionMode
    path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.Windows.cs
    startLine: 202
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Gets the pipe transmission mode supported by the current pipe.</p>\n"
  remarks: "\n<p>Anonymous pipes do not support <xref href=\"System.IO.Pipes.PipeTransmissionMode.Message\" data-throw-if-not-resolved=\"false\"></xref> mode message transmission.</p>\n"
  example:
  - 
  syntax:
    content: public virtual PipeTransmissionMode TransmissionMode { get; }
    content.vb: Public Overridable ReadOnly Property TransmissionMode As PipeTransmissionMode
    parameters: []
    return:
      type: System.IO.Pipes.PipeTransmissionMode
      description: "\n<p>One of the <xref href=\"System.IO.Pipes.PipeTransmissionMode\" data-throw-if-not-resolved=\"false\"></xref> values that indicates the transmission mode supported by the current pipe.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The pipe is closed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The handle has not been set.</p>\n<p>-or-</p>\n<p>The pipe is waiting to connect in an anonymous client/server operation or with a named client. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The pipe is broken or another I/O error occurred.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.IO.Pipes.PipeStream.Dispose(System.Boolean)
  commentId: M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.IO.Pipes.PipeStream.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
    startLine: 271
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.IO.Pipes.PipeStream\" data-throw-if-not-resolved=\"false\"></xref> class and optionally releases the managed resources.</p>\n"
  remarks: "\n<p>This method is called by the public <xref href=\"System.ComponentModel.Component.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method and the <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> method. <xref href=\"System.ComponentModel.Component.Dispose\" data-throw-if-not-resolved=\"false\"></xref> invokes the protected <xref href=\"System.IO.Pipes.PipeStream.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method with the <em>disposing</em> parameter set to <strong>true</strong>. <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> invokes <xref href=\"System.IO.Pipes.PipeStream.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> with <em>disposing</em> set to <strong>false</strong>. When the disposing parameter is <strong>true</strong>, this method releases all resources held by any managed objects that this <xref href=\"System.IO.Pipes.PipeStream\" data-throw-if-not-resolved=\"false\"></xref> object references. This method invokes the <xref href=\"System.IO.Pipes.PipeStream.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method of each referenced object.</p>\n"
  example:
  - 
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\n"
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.IO.Pipes.PipeStream.Flush
  commentId: M:System.IO.Pipes.PipeStream.Flush
  id: Flush
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: Flush()
  fullName: System.IO.Pipes.PipeStream.Flush()
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Flush
    path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
    startLine: 261
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Clears the buffer for the current stream and causes any buffered data to be written to the underlying device.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Pipes.PipeStream.Flush\" data-throw-if-not-resolved=\"false\"></xref> method is not supported in the <xref href=\"System.IO.Pipes.PipeStream\" data-throw-if-not-resolved=\"false\"></xref> class and does nothing when it is called.</p>\n"
  example:
  - 
  syntax:
    content: public override void Flush()
    content.vb: Public Overrides Sub Flush
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The pipe is closed.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The pipe does not support write operations.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The pipe is broken or another I/O error occurred.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: Read(Byte[], Int32, Int32)
  fullName: System.IO.Pipes.PipeStream.Read(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Read
    path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
    startLine: 113
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Reads a block of bytes from a stream and writes the data to a specified buffer.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.IO.Pipes.PipeStream.CanRead\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the current <xref href=\"System.IO.Pipes.PipeStream\" data-throw-if-not-resolved=\"false\"></xref> object supports read operations.</p>\n<p>Calling the <xref href=\"System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method blocks until <em>count</em> bytes are read or the end of the stream is reached. For asynchronous read operations, see <xref href=\"System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates an anonymous pipe client and pipe server. The pipe server uses the <xref href=\"System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to read a series of bytes from the pipe client as a validation code. Both the pipe client and the pipe server are part of the same example. The server portion of the example creates a client process and passes it an anonymous pipe handle as an argument.</p>System.IO.Pipes.PipeStream#1"
  syntax:
    content: public override int Read(byte[] buffer, int offset, int count)
    content.vb: Public Overrides Function Read(buffer As Byte(), offset As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>When this method returns, contains the specified byte array with the values between <em>offset</em> and (<em>offset</em> + <em>count</em> - 1) replaced by the bytes read from the current source.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The byte offset in the <em>buffer</em> array at which the bytes that are read will be placed.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to read.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The total number of bytes that are read into <em>buffer</em>. This might be less than the number of bytes requested if that number of bytes is not currently available, or 0 if the end of the stream is reached.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> is less than 0.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is less than 0.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>count</em> is greater than the number of bytes available in <em>buffer</em>.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The pipe is closed.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The pipe does not support read operations.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The pipe is disconnected, waiting to connect, or the handle has not been set.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>Any I/O error occurred.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.Pipes.PipeStream.Read(System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Byte(), Int32, Int32)
- uid: System.IO.Pipes.PipeStream.ReadByte
  commentId: M:System.IO.Pipes.PipeStream.ReadByte
  id: ReadByte
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: ReadByte()
  fullName: System.IO.Pipes.PipeStream.ReadByte()
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadByte
    path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
    startLine: 242
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Reads a byte from a pipe.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.IO.Pipes.PipeStream.CanRead\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the current <xref href=\"System.IO.Pipes.PipeStream\" data-throw-if-not-resolved=\"false\"></xref> object supports read operations.</p>\n"
  example:
  - 
  syntax:
    content: public override int ReadByte()
    content.vb: Public Overrides Function ReadByte As Integer
    return:
      type: System.Int32
      description: "\n<p>The byte, cast to <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, or -1 indicates the end of the stream (the pipe has been closed).</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The pipe is closed.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The pipe does not support read operations.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The pipe is disconnected, waiting to connect, or the handle has not been set.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>Any I/O error occurred.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)
  commentId: M:System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: Seek(Int64, SeekOrigin)
  fullName: System.IO.Pipes.PipeStream.Seek(System.Int64, System.IO.SeekOrigin)
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes/ref/System.IO.Pipes.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Seek
    path: src/System.IO.Pipes/ref/System.IO.Pipes.cs
    startLine: 109
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Sets the current position of the current stream to the specified value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)\" data-throw-if-not-resolved=\"false\"></xref> method is not supported in pipes and raises a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> when it is called.</p>\n"
  example:
  - 
  syntax:
    content: public override long Seek(long offset, SeekOrigin origin)
    content.vb: Public Overrides Function Seek(offset As Long, origin As SeekOrigin) As Long
    parameters:
    - id: offset
      type: System.Int64
      description: "\n<p>The point, relative to <em>origin</em>, to begin seeking from.</p>\n"
    - id: origin
      type: System.IO.SeekOrigin
      description: "\n<p>Specifies the beginning, the end, or the current position as a reference point for <em>offset</em>, using a value of type <xref href=\"System.IO.SeekOrigin\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The new position in the stream.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.Pipes.PipeStream.SetLength(System.Int64)
  commentId: M:System.IO.Pipes.PipeStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: SetLength(Int64)
  fullName: System.IO.Pipes.PipeStream.SetLength(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetLength
    path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
    startLine: 443
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Sets the length of the current stream to the specified value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Pipes.PipeStream\" data-throw-if-not-resolved=\"false\"></xref> class does not support the <xref href=\"System.IO.Pipes.PipeStream.SetLength(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: public override void SetLength(long value)
    content.vb: Public Overrides Sub SetLength(value As Long)
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The new length of the stream.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.Pipes.PipeStream.WaitForPipeDrain
  commentId: M:System.IO.Pipes.PipeStream.WaitForPipeDrain
  id: WaitForPipeDrain
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: WaitForPipeDrain()
  fullName: System.IO.Pipes.PipeStream.WaitForPipeDrain()
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WaitForPipeDrain
    path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.Windows.cs
    startLine: 184
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Waits for the other end of the pipe to read all sent bytes.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Pipes.PipeStream.WaitForPipeDrain\" data-throw-if-not-resolved=\"false\"></xref> method blocks until the other end of the pipe has read all sent bytes.</p>\n"
  example:
  - 
  syntax:
    content: public void WaitForPipeDrain()
    content.vb: Public Sub WaitForPipeDrain
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The pipe is closed.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The pipe does not support write operations.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The pipe is broken or another I/O error occurred.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: Write(Byte[], Int32, Int32)
  fullName: System.IO.Pipes.PipeStream.Write(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
    startLine: 161
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Writes a block of bytes to the current stream using data from a buffer.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.IO.Pipes.PipeStream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the current <xref href=\"System.IO.Pipes.PipeStream\" data-throw-if-not-resolved=\"false\"></xref> object supports write operations.</p>\n<p>Calling the <xref href=\"System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method blocks until <em>count</em> bytes are read or the end of the stream is reached. For asynchronous read operations, see <xref href=\"System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public override void Write(byte[] buffer, int offset, int count)
    content.vb: Public Overrides Sub Write(buffer As Byte(), offset As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer that contains data to write to the pipe.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The zero-based byte offset in <em>buffer</em> at which to begin copying bytes to the current stream.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to write to the current stream.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> is less than 0.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is less than 0.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>count</em> is greater than the number of bytes available in <em>buffer</em>.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The pipe is closed.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The pipe does not support write operations.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The pipe is broken or another I/O error occurred.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.Pipes.PipeStream.Write(System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), Int32, Int32)
- uid: System.IO.Pipes.PipeStream.WriteByte(System.Byte)
  commentId: M:System.IO.Pipes.PipeStream.WriteByte(System.Byte)
  id: WriteByte(System.Byte)
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: WriteByte(Byte)
  fullName: System.IO.Pipes.PipeStream.WriteByte(System.Byte)
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteByte
    path: src/System.IO.Pipes/src/System/IO/Pipes/PipeStream.cs
    startLine: 251
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Writes a byte to the current stream.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.IO.Pipes.PipeStream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether the current <xref href=\"System.IO.Pipes.PipeStream\" data-throw-if-not-resolved=\"false\"></xref> object supports write operations.</p>\n"
  example:
  - 
  syntax:
    content: public override void WriteByte(byte value)
    content.vb: Public Overrides Sub WriteByte(value As Byte)
    parameters:
    - id: value
      type: System.Byte
      description: "\n<p>The byte to write to the stream.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The pipe is closed.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The pipe does not support write operations.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The pipe is disconnected, waiting to connect, or the handle has not been set.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The pipe is broken or another I/O error occurred.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.Pipes.PipeStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.Pipes.PipeStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: ReadAsync(Byte[], Int32, Int32, Threading.CancellationToken)
  fullName: System.IO.Pipes.PipeStream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes/ref/System.IO.Pipes.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadAsync
    path: src/System.IO.Pipes/ref/System.IO.Pipes.Manual.cs
    startLine: 20
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  syntax:
    content: public override Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function ReadAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.Pipes.PipeStream.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadAsync(Byte(), Int32, Int32, Threading.CancellationToken)
- uid: System.IO.Pipes.PipeStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.Pipes.PipeStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Pipes.PipeStream
  langs:
  - csharp
  - vb
  name: WriteAsync(Byte[], Int32, Int32, Threading.CancellationToken)
  fullName: System.IO.Pipes.PipeStream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes/ref/System.IO.Pipes.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteAsync
    path: src/System.IO.Pipes/ref/System.IO.Pipes.Manual.cs
    startLine: 21
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  syntax:
    content: public override Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function WriteAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task
    parameters:
    - id: buffer
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.Pipes.PipeStream.WriteAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: WriteAsync(Byte(), Int32, Int32, Threading.CancellationToken)
references:
- uid: System.IO.Pipes
  isExternal: false
  name: System.IO.Pipes
  fullName: System.IO.Pipes
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IO.Pipes.PipeDirection
  parent: System.IO.Pipes
  isExternal: false
  name: PipeDirection
  fullName: System.IO.Pipes.PipeDirection
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.IO.Pipes.PipeTransmissionMode
  parent: System.IO.Pipes
  isExternal: false
  name: PipeTransmissionMode
  fullName: System.IO.Pipes.PipeTransmissionMode
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: Microsoft.Win32.SafeHandles.SafePipeHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafePipeHandle
  fullName: Microsoft.Win32.SafeHandles.SafePipeHandle
- uid: Microsoft.Win32.SafeHandles
  isExternal: false
  name: Microsoft.Win32.SafeHandles
  fullName: Microsoft.Win32.SafeHandles
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: false
  name: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: Threading.CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Int32}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Threading.Tasks.Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task<>
  fullName: System.Threading.Tasks.Task<>
  fullname.vb: System.Threading.Tasks.Task(Of )
  name.vb: Threading.Tasks.Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task
  fullName: System.Threading.Tasks.Task
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
