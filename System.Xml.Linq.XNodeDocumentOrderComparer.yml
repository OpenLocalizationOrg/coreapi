items:
- uid: System.Xml.Linq.XNodeDocumentOrderComparer
  commentId: T:System.Xml.Linq.XNodeDocumentOrderComparer
  id: XNodeDocumentOrderComparer
  parent: System.Xml.Linq
  children:
  - System.Xml.Linq.XNodeDocumentOrderComparer.#ctor
  - System.Xml.Linq.XNodeDocumentOrderComparer.Compare(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
  langs:
  - csharp
  - vb
  name: XNodeDocumentOrderComparer
  fullName: System.Xml.Linq.XNodeDocumentOrderComparer
  type: Class
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XNodeDocumentOrderComparer
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 374
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Contains functionality to compare nodes for their document order. This class cannot be inherited. </p>\n"
  remarks: "\n<p>This class implements IComparer and IComparer<XNode>. </p>\n<p>We recommend that instead of using this class directly, you use the <xref href=\"System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method. This class is used internally by that method.</p>\n"
  example:
  - 
  syntax:
    content: 'public sealed class XNodeDocumentOrderComparer : Collections.Generic.IComparer<XNode>, Collections.IComparer'
    content.vb: >-
      Public NotInheritable Class XNodeDocumentOrderComparer
          Inherits Collections.Generic.IComparer(Of XNode)
          Implements Collections.IComparer
  inheritance:
  - System.Object
  implements:
  - System.Collections.IComparer
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Xml.Linq.XNodeDocumentOrderComparer.#ctor
  commentId: M:System.Xml.Linq.XNodeDocumentOrderComparer.#ctor
  id: '#ctor'
  parent: System.Xml.Linq.XNodeDocumentOrderComparer
  langs:
  - csharp
  - vb
  name: XNodeDocumentOrderComparer()
  fullName: System.Xml.Linq.XNodeDocumentOrderComparer.XNodeDocumentOrderComparer()
  type: Constructor
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 376
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.Linq.XNodeDocumentOrderComparer\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  remarks: "\n<p>We recommend that instead of using this class directly, you use the <xref href=\"System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method. This class is used internally by that method.</p>\n"
  example:
  - "\n<p>The following example uses of this class to compare the document order for two nodes.</p>\n<pre><code class=\"c#\">XElement xmlTree = new XElement(\"Root\",\nnew XText(\"Text content.\"),\nnew XElement(\"Child1\", \"child1 content\"),\nnew XElement(\"Child2\", \"child2 content\"),\nnew XElement(\"Child3\", \"child3 content\"),\nnew XText(\"More text content.\"),\nnew XElement(\"Child4\", \"child4 content\"),\nnew XElement(\"Child5\", \"child5 content\")\n);\nXElement child3 = xmlTree.Element(\"Child3\");\nXElement child5 = xmlTree.Element(\"Child5\");\nXNodeDocumentOrderComparer documentOrderComparer = new XNodeDocumentOrderComparer();\nint val = documentOrderComparer.Compare(child3, child5);\nif (val == 0)\nConsole.WriteLine(\"Child3 is same as Child5\");\nelse if (val < 0)\nConsole.WriteLine(\"Child3 is before Child5\");\nelse\nConsole.WriteLine(\"Child3 is after Child5\");</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Child3 is before Child5</code></pre>\n"
  syntax:
    content: public XNodeDocumentOrderComparer()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XNodeDocumentOrderComparer.Compare(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
  commentId: M:System.Xml.Linq.XNodeDocumentOrderComparer.Compare(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
  id: Compare(System.Xml.Linq.XNode,System.Xml.Linq.XNode)
  parent: System.Xml.Linq.XNodeDocumentOrderComparer
  langs:
  - csharp
  - vb
  name: Compare(XNode, XNode)
  fullName: System.Xml.Linq.XNodeDocumentOrderComparer.Compare(System.Xml.Linq.XNode, System.Xml.Linq.XNode)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Compare
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 377
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Compares two nodes to determine their relative document order.</p>\n"
  remarks: "\n<p>We recommend that instead of using this class directly, you use the <xref href=\"System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})\" data-throw-if-not-resolved=\"false\"></xref> method. This class is used internally by that method.</p>\n"
  example:
  - "\n<p>The following example uses this class to compare document order for two nodes.</p>\n<pre><code class=\"c#\">XElement xmlTree = new XElement(\"Root\",\nnew XText(\"Text content.\"),\nnew XElement(\"Child1\", \"child1 content\"),\nnew XElement(\"Child2\", \"child2 content\"),\nnew XElement(\"Child3\", \"child3 content\"),\nnew XText(\"More text content.\"),\nnew XElement(\"Child4\", \"child4 content\"),\nnew XElement(\"Child5\", \"child5 content\")\n);\nXElement child3 = xmlTree.Element(\"Child3\");\nXElement child5 = xmlTree.Element(\"Child5\");\nXNodeDocumentOrderComparer documentOrderComparer = new XNodeDocumentOrderComparer();\nint val = documentOrderComparer.Compare(child3, child5);\nif (val == 0)\nConsole.WriteLine(\"Child3 is same as Child5\");\nelse if (val < 0)\nConsole.WriteLine(\"Child3 is before Child5\");\nelse\nConsole.WriteLine(\"Child3 is after Child5\");</code></pre>\n<p>This example produces the following output:</p>\n<pre><code>Child3 is before Child5</code></pre>\n"
  syntax:
    content: public int Compare(XNode x, XNode y)
    content.vb: Public Function Compare(x As XNode, y As XNode) As Integer
    parameters:
    - id: x
      type: System.Xml.Linq.XNode
      description: "\n<p>The first <xref href=\"System.Xml.Linq.XNode\" data-throw-if-not-resolved=\"false\"></xref> to compare.</p>\n"
    - id: y
      type: System.Xml.Linq.XNode
      description: "\n<p>The second <xref href=\"System.Xml.Linq.XNode\" data-throw-if-not-resolved=\"false\"></xref> to compare.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>An <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that contains 0 if the nodes are equal; -1 if <em>x</em> is before <em>y</em>; 1 if <em>x</em> is after <em>y</em>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The two nodes do not share a common ancestor.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Xml.Linq
  isExternal: false
  name: System.Xml.Linq
  fullName: System.Xml.Linq
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: Collections.IComparer
  fullName: System.Collections.IComparer
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Xml.Linq.XNode
  parent: System.Xml.Linq
  isExternal: false
  name: XNode
  fullName: System.Xml.Linq.XNode
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
