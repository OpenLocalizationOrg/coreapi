items:
- uid: System.IO.DirectoryInfo
  id: DirectoryInfo
  parent: System.IO
  children:
  - System.IO.DirectoryInfo.#ctor(System.String)
  - System.IO.DirectoryInfo.Create
  - System.IO.DirectoryInfo.CreateSubdirectory(System.String)
  - System.IO.DirectoryInfo.Delete
  - System.IO.DirectoryInfo.Delete(System.Boolean)
  - System.IO.DirectoryInfo.EnumerateDirectories
  - System.IO.DirectoryInfo.EnumerateDirectories(System.String)
  - System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.EnumerateFiles
  - System.IO.DirectoryInfo.EnumerateFiles(System.String)
  - System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.EnumerateFileSystemInfos
  - System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)
  - System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.Exists
  - System.IO.DirectoryInfo.GetDirectories
  - System.IO.DirectoryInfo.GetDirectories(System.String)
  - System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.GetFiles
  - System.IO.DirectoryInfo.GetFiles(System.String)
  - System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.GetFileSystemInfos
  - System.IO.DirectoryInfo.GetFileSystemInfos(System.String)
  - System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)
  - System.IO.DirectoryInfo.MoveTo(System.String)
  - System.IO.DirectoryInfo.Name
  - System.IO.DirectoryInfo.Parent
  - System.IO.DirectoryInfo.Root
  - System.IO.DirectoryInfo.ToString
  href: System.IO.DirectoryInfo.yml
  name: DirectoryInfo
  fullName: System.IO.DirectoryInfo
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/IO/DirectoryInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 33
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.To browse the .NET Framework source code for this type, see the Reference Source.
  syntax:
    content: 'public sealed class DirectoryInfo : FileSystemInfo'
    content.vb: Public NotInheritable Class DirectoryInfo Inherits FileSystemInfo
  inheritance:
  - System.Object
  - System.IO.FileSystemInfo
  inheritedMembers:
  - System.IO.FileSystemInfo.FullPath
  - System.IO.FileSystemInfo.OriginalPath
  - System.IO.FileSystemInfo.Attributes
  - System.IO.FileSystemInfo.CreationTime
  - System.IO.FileSystemInfo.CreationTimeUtc
  - System.IO.FileSystemInfo.Extension
  - System.IO.FileSystemInfo.FullName
  - System.IO.FileSystemInfo.LastAccessTime
  - System.IO.FileSystemInfo.LastAccessTimeUtc
  - System.IO.FileSystemInfo.LastWriteTime
  - System.IO.FileSystemInfo.LastWriteTimeUtc
  - System.IO.FileSystemInfo.Refresh
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.IO.DirectoryInfo.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: DirectoryInfo(String)
  fullName: System.IO.DirectoryInfo.DirectoryInfo(System.String)
  type: Constructor
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 61
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Initializes a new instance of the @'System.IO.DirectoryInfo' class on the specified path.
  syntax:
    content: public DirectoryInfo(string path)
    content.vb: Public Sub New(path As String)
    parameters:
    - id: path
      type: System.String
      description: A string specifying the path on which to create the DirectoryInfo.
  exceptions:
  - type: System.ArgumentNullException
    description: '*path* is null.'
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
  - type: System.ArgumentException
    description: '*path* contains invalid characters such as ", <, >, or |.'
  - type: System.IO.PathTooLongException
    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.
- uid: System.IO.DirectoryInfo.Exists
  id: Exists
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: Exists
  fullName: System.IO.DirectoryInfo.Exists
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 239
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Gets a value indicating whether the directory exists.
  syntax:
    content: public override bool Exists { get; }
    content.vb: Public Overrides ReadOnly Property Exists As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the directory exists; otherwise, false.
  overridden: System.IO.FileSystemInfo.Exists
- uid: System.IO.DirectoryInfo.Name
  id: Name
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: Name
  fullName: System.IO.DirectoryInfo.Name
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 126
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Gets the name of this @'System.IO.DirectoryInfo' instance.
  syntax:
    content: public override string Name { get; }
    content.vb: Public Overrides ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: The directory name.
  overridden: System.IO.FileSystemInfo.Name
- uid: System.IO.DirectoryInfo.Parent
  id: Parent
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: Parent
  fullName: System.IO.DirectoryInfo.Parent
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 139
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Gets the parent directory of a specified subdirectory.
  syntax:
    content: public DirectoryInfo Parent { get; }
    content.vb: Public ReadOnly Property Parent As DirectoryInfo
    parameters: []
    return:
      type: System.IO.DirectoryInfo
      description: The parent directory, or null if the path is null or if the file path denotes a root (such as "\", "C:", or * "\\server\share").
  exceptions:
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
- uid: System.IO.DirectoryInfo.Root
  id: Root
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: Root
  fullName: System.IO.DirectoryInfo.Root
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 515
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Gets the root portion of the directory.
  syntax:
    content: public DirectoryInfo Root { get; }
    content.vb: Public ReadOnly Property Root As DirectoryInfo
    parameters: []
    return:
      type: System.IO.DirectoryInfo
      description: An object that represents the root of the directory.
  exceptions:
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
- uid: System.IO.DirectoryInfo.Create
  id: Create
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: Create()
  fullName: System.IO.DirectoryInfo.Create()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 222
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Creates a directory.
  syntax:
    content: public void Create()
    content.vb: Public Sub Create
  exceptions:
  - type: System.IO.IOException
    description: The directory cannot be created.
- uid: System.IO.DirectoryInfo.CreateSubdirectory(System.String)
  id: CreateSubdirectory(System.String)
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: CreateSubdirectory(String)
  fullName: System.IO.DirectoryInfo.CreateSubdirectory(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 164
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the @'System.IO.DirectoryInfo' class.
  syntax:
    content: public DirectoryInfo CreateSubdirectory(string path)
    content.vb: Public Function CreateSubdirectory(path As String) As DirectoryInfo
    parameters:
    - id: path
      type: System.String
      description: The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.
    return:
      type: System.IO.DirectoryInfo
      description: The last directory specified in *path*.
  exceptions:
  - type: System.ArgumentException
    description: '*path* does not specify a valid file path or contains invalid DirectoryInfo characters.'
  - type: System.ArgumentNullException
    description: '*path* is null.'
  - type: System.IO.DirectoryNotFoundException
    description: The specified path is invalid, such as being on an unmapped drive.
  - type: System.IO.IOException
    description: The subdirectory cannot be created.-or- A file or directory already has the name specified by *path*.
  - type: System.IO.PathTooLongException
    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.
  - type: System.Security.SecurityException
    description: The caller does not have code access permission to create the directory.-or-The caller does not have code access permission to read the directory described by the returned @'System.IO.DirectoryInfo' object.  This can occur when the *path* parameter describes an existing directory.
  - type: System.NotSupportedException
    description: '*path* contains a colon character (:) that is not part of a drive label ("C:\").'
- uid: System.IO.DirectoryInfo.Delete
  id: Delete
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: Delete()
  fullName: System.IO.DirectoryInfo.Delete()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 606
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Deletes this @'System.IO.DirectoryInfo' if it is empty.
  syntax:
    content: public override void Delete()
    content.vb: Public Overrides Sub Delete
  overridden: System.IO.FileSystemInfo.Delete
  exceptions:
  - type: System.UnauthorizedAccessException
    description: The directory contains a read-only file.
  - type: System.IO.DirectoryNotFoundException
    description: The directory described by this @'System.IO.DirectoryInfo' object does not exist or could not be found.
  - type: System.IO.IOException
    description: 'The directory is not empty. -or-The directory is the application''s current working directory.-or-There is an open handle on the directory, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories. For more information, see How to: Enumerate Directories and Files.'
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
- uid: System.IO.DirectoryInfo.Delete(System.Boolean)
  id: Delete(System.Boolean)
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: Delete(Boolean)
  fullName: System.IO.DirectoryInfo.Delete(System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 612
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Deletes this instance of a @'System.IO.DirectoryInfo', specifying whether to delete subdirectories and files.
  syntax:
    content: public void Delete(bool recursive)
    content.vb: Public Sub Delete(recursive As Boolean)
    parameters:
    - id: recursive
      type: System.Boolean
      description: true to delete this directory, its subdirectories, and all files; otherwise, false.
  exceptions:
  - type: System.UnauthorizedAccessException
    description: The directory contains a read-only file.
  - type: System.IO.DirectoryNotFoundException
    description: The directory described by this @'System.IO.DirectoryInfo' object does not exist or could not be found.
  - type: System.IO.IOException
    description: 'The directory is read-only.-or- The directory contains one or more files or subdirectories and *recursive* is false.-or-The directory is the application''s current working directory. -or-There is an open handle on the directory or on one of its files, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files.'
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
- uid: System.IO.DirectoryInfo.EnumerateDirectories
  id: EnumerateDirectories
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: EnumerateDirectories()
  fullName: System.IO.DirectoryInfo.EnumerateDirectories()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 406
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Returns an enumerable collection of directory information in the current directory.
  syntax:
    content: public IEnumerable<DirectoryInfo> EnumerateDirectories()
    content.vb: Public Function EnumerateDirectories As IEnumerable(Of DirectoryInfo)
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}
      description: An enumerable collection of directories in the current directory.
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    description: The path encapsulated in the @'System.IO.DirectoryInfo' object is invalid (for example, it is on an unmapped drive).
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String)
  id: EnumerateDirectories(System.String)
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: EnumerateDirectories(String)
  fullName: System.IO.DirectoryInfo.EnumerateDirectories(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 411
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Returns an enumerable collection of directory information that matches a specified search pattern.
  syntax:
    content: public IEnumerable<DirectoryInfo> EnumerateDirectories(string searchPattern)
    content.vb: Public Function EnumerateDirectories(searchPattern As String) As IEnumerable(Of DirectoryInfo)
    parameters:
    - id: searchPattern
      type: System.String
      description: The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}
      description: An enumerable collection of directories that matches *searchPattern*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*searchPattern* is null.'
  - type: System.IO.DirectoryNotFoundException
    description: The path encapsulated in the @'System.IO.DirectoryInfo' object is invalid (for example, it is on an unmapped drive).
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
- uid: System.IO.DirectoryInfo.EnumerateDirectories(System.String,System.IO.SearchOption)
  id: EnumerateDirectories(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: EnumerateDirectories(String, SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateDirectories(System.String, System.IO.SearchOption)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 420
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Returns an enumerable collection of directory information that matches a specified search pattern and search subdirectory option.
  syntax:
    content: public IEnumerable<DirectoryInfo> EnumerateDirectories(string searchPattern, SearchOption searchOption)
    content.vb: Public Function EnumerateDirectories(searchPattern As String, searchOption As SearchOption) As IEnumerable(Of DirectoryInfo)
    parameters:
    - id: searchPattern
      type: System.String
      description: The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.
    - id: searchOption
      type: System.IO.SearchOption
      description: One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is @'System.IO.SearchOption.TopDirectoryOnly'.
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}
      description: An enumerable collection of directories that matches *searchPattern* and *searchOption*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*searchPattern* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*searchOption* is not a valid @''System.IO.SearchOption'' value.'
  - type: System.IO.DirectoryNotFoundException
    description: The path encapsulated in the @'System.IO.DirectoryInfo' object is invalid (for example, it is on an unmapped drive).
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
- uid: System.IO.DirectoryInfo.EnumerateFiles
  id: EnumerateFiles
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: EnumerateFiles()
  fullName: System.IO.DirectoryInfo.EnumerateFiles()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 439
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Returns an enumerable collection of file information in the current directory.
  syntax:
    content: public IEnumerable<FileInfo> EnumerateFiles()
    content.vb: Public Function EnumerateFiles As IEnumerable(Of FileInfo)
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}
      description: An enumerable collection of the files in the current directory.
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    description: The path encapsulated in the @'System.IO.DirectoryInfo' object is invalid (for example, it is on an unmapped drive).
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String)
  id: EnumerateFiles(System.String)
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: EnumerateFiles(String)
  fullName: System.IO.DirectoryInfo.EnumerateFiles(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 444
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Returns an enumerable collection of file information that matches a search pattern.
  syntax:
    content: public IEnumerable<FileInfo> EnumerateFiles(string searchPattern)
    content.vb: Public Function EnumerateFiles(searchPattern As String) As IEnumerable(Of FileInfo)
    parameters:
    - id: searchPattern
      type: System.String
      description: The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}
      description: An enumerable collection of files that matches *searchPattern*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*searchPattern* is null.'
  - type: System.IO.DirectoryNotFoundException
    description: The path encapsulated in the @'System.IO.DirectoryInfo' object is invalid, (for example, it is on an unmapped drive).
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
- uid: System.IO.DirectoryInfo.EnumerateFiles(System.String,System.IO.SearchOption)
  id: EnumerateFiles(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: EnumerateFiles(String, SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateFiles(System.String, System.IO.SearchOption)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 453
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Returns an enumerable collection of file information that matches a specified search pattern and search subdirectory option.
  syntax:
    content: public IEnumerable<FileInfo> EnumerateFiles(string searchPattern, SearchOption searchOption)
    content.vb: Public Function EnumerateFiles(searchPattern As String, searchOption As SearchOption) As IEnumerable(Of FileInfo)
    parameters:
    - id: searchPattern
      type: System.String
      description: The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.
    - id: searchOption
      type: System.IO.SearchOption
      description: One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is @'System.IO.SearchOption.TopDirectoryOnly'.
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileInfo}
      description: An enumerable collection of files that matches *searchPattern* and *searchOption*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*searchPattern* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*searchOption* is not a valid @''System.IO.SearchOption'' value.'
  - type: System.IO.DirectoryNotFoundException
    description: The path encapsulated in the @'System.IO.DirectoryInfo' object is invalid (for example, it is on an unmapped drive).
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos
  id: EnumerateFileSystemInfos
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: EnumerateFileSystemInfos()
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 472
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Returns an enumerable collection of file system information in the current directory.
  syntax:
    content: public IEnumerable<FileSystemInfo> EnumerateFileSystemInfos()
    content.vb: Public Function EnumerateFileSystemInfos As IEnumerable(Of FileSystemInfo)
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}
      description: An enumerable collection of file system information in the current directory.
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    description: The path encapsulated in the @'System.IO.DirectoryInfo' object is invalid (for example, it is on an unmapped drive).
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)
  id: EnumerateFileSystemInfos(System.String)
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: EnumerateFileSystemInfos(String)
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 477
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Returns an enumerable collection of file system information that matches a specified search pattern.
  syntax:
    content: public IEnumerable<FileSystemInfo> EnumerateFileSystemInfos(string searchPattern)
    content.vb: Public Function EnumerateFileSystemInfos(searchPattern As String) As IEnumerable(Of FileSystemInfo)
    parameters:
    - id: searchPattern
      type: System.String
      description: The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}
      description: An enumerable collection of file system information objects that matches *searchPattern*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*searchPattern* is null.'
  - type: System.IO.DirectoryNotFoundException
    description: The path encapsulated in the @'System.IO.DirectoryInfo' object is invalid (for example, it is on an unmapped drive).
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
- uid: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String,System.IO.SearchOption)
  id: EnumerateFileSystemInfos(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: EnumerateFileSystemInfos(String, SearchOption)
  fullName: System.IO.DirectoryInfo.EnumerateFileSystemInfos(System.String, System.IO.SearchOption)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 486
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Returns an enumerable collection of file system information that matches a specified search pattern and search subdirectory option.
  syntax:
    content: public IEnumerable<FileSystemInfo> EnumerateFileSystemInfos(string searchPattern, SearchOption searchOption)
    content.vb: Public Function EnumerateFileSystemInfos(searchPattern As String, searchOption As SearchOption) As IEnumerable(Of FileSystemInfo)
    parameters:
    - id: searchPattern
      type: System.String
      description: The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.
    - id: searchOption
      type: System.IO.SearchOption
      description: One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is @'System.IO.SearchOption.TopDirectoryOnly'.
    return:
      type: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}
      description: An enumerable collection of file system information objects that matches *searchPattern* and *searchOption*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*searchPattern* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*searchOption* is not a valid @''System.IO.SearchOption'' value.'
  - type: System.IO.DirectoryNotFoundException
    description: The path encapsulated in the @'System.IO.DirectoryInfo' object is invalid (for example, it is on an unmapped drive).
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
- uid: System.IO.DirectoryInfo.GetDirectories
  id: GetDirectories
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: GetDirectories()
  fullName: System.IO.DirectoryInfo.GetDirectories()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 319
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Returns the subdirectories of the current directory.
  syntax:
    content: public DirectoryInfo[] GetDirectories()
    content.vb: Public Function GetDirectories As DirectoryInfo()
    return:
      type: System.IO.DirectoryInfo[]
      description: An array of @'System.IO.DirectoryInfo' objects.
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    description: The path encapsulated in the @'System.IO.DirectoryInfo' object is invalid, such as being on an unmapped drive.
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
  - type: System.UnauthorizedAccessException
    description: The caller does not have the required permission.
- uid: System.IO.DirectoryInfo.GetDirectories(System.String)
  id: GetDirectories(System.String)
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: GetDirectories(String)
  fullName: System.IO.DirectoryInfo.GetDirectories(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 370
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Returns an array of directories in the current @'System.IO.DirectoryInfo' matching the given search criteria.
  syntax:
    content: public DirectoryInfo[] GetDirectories(string searchPattern)
    content.vb: Public Function GetDirectories(searchPattern As String) As DirectoryInfo()
    parameters:
    - id: searchPattern
      type: System.String
      description: The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.
    return:
      type: System.IO.DirectoryInfo[]
      description: An array of type DirectoryInfo matching *searchPattern*.
  exceptions:
  - type: System.ArgumentException
    description: '*searchPattern *contains one or more invalid characters defined by the @''System.IO.Path.GetInvalidPathChars'' method.'
  - type: System.ArgumentNullException
    description: '*searchPattern* is null.'
  - type: System.IO.DirectoryNotFoundException
    description: The path encapsulated in the DirectoryInfo object is invalid (for example, it is on an unmapped drive).
  - type: System.UnauthorizedAccessException
    description: The caller does not have the required permission.
- uid: System.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)
  id: GetDirectories(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: GetDirectories(String, SearchOption)
  fullName: System.IO.DirectoryInfo.GetDirectories(System.String, System.IO.SearchOption)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 382
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Returns an array of directories in the current @'System.IO.DirectoryInfo' matching the given search criteria and using a value to determine whether to search subdirectories.
  syntax:
    content: public DirectoryInfo[] GetDirectories(string searchPattern, SearchOption searchOption)
    content.vb: Public Function GetDirectories(searchPattern As String, searchOption As SearchOption) As DirectoryInfo()
    parameters:
    - id: searchPattern
      type: System.String
      description: The search string to match against the names of directories.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.
    - id: searchOption
      type: System.IO.SearchOption
      description: One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.
    return:
      type: System.IO.DirectoryInfo[]
      description: An array of type DirectoryInfo matching *searchPattern*.
  exceptions:
  - type: System.ArgumentException
    description: '*searchPattern *contains one or more invalid characters defined by the @''System.IO.Path.GetInvalidPathChars'' method.'
  - type: System.ArgumentNullException
    description: '*searchPattern* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*searchOption* is not a valid @''System.IO.SearchOption'' value.'
  - type: System.IO.DirectoryNotFoundException
    description: The path encapsulated in the DirectoryInfo object is invalid (for example, it is on an unmapped drive).
  - type: System.UnauthorizedAccessException
    description: The caller does not have the required permission.
- uid: System.IO.DirectoryInfo.GetFiles
  id: GetFiles
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: GetFiles()
  fullName: System.IO.DirectoryInfo.GetFiles()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 313
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Returns a file list from the current directory.
  syntax:
    content: public FileInfo[] GetFiles()
    content.vb: Public Function GetFiles As FileInfo()
    return:
      type: System.IO.FileInfo[]
      description: An array of type @'System.IO.FileInfo'.
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    description: The path is invalid, such as being on an unmapped drive.
- uid: System.IO.DirectoryInfo.GetFiles(System.String)
  id: GetFiles(System.String)
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: GetFiles(String)
  fullName: System.IO.DirectoryInfo.GetFiles(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 278
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Returns a file list from the current directory matching the given search pattern.
  syntax:
    content: public FileInfo[] GetFiles(string searchPattern)
    content.vb: Public Function GetFiles(searchPattern As String) As FileInfo()
    parameters:
    - id: searchPattern
      type: System.String
      description: The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.
    return:
      type: System.IO.FileInfo[]
      description: An array of type @'System.IO.FileInfo'.
  exceptions:
  - type: System.ArgumentException
    description: '*searchPattern *contains one or more invalid characters defined by the @''System.IO.Path.GetInvalidPathChars'' method.'
  - type: System.ArgumentNullException
    description: '*searchPattern* is null.'
  - type: System.IO.DirectoryNotFoundException
    description: The path is invalid (for example, it is on an unmapped drive).
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
- uid: System.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)
  id: GetFiles(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: GetFiles(String, SearchOption)
  fullName: System.IO.DirectoryInfo.GetFiles(System.String, System.IO.SearchOption)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 289
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Returns a file list from the current directory matching the given search pattern and using a value to determine whether to search subdirectories.
  syntax:
    content: public FileInfo[] GetFiles(string searchPattern, SearchOption searchOption)
    content.vb: Public Function GetFiles(searchPattern As String, searchOption As SearchOption) As FileInfo()
    parameters:
    - id: searchPattern
      type: System.String
      description: The search string to match against the names of files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.
    - id: searchOption
      type: System.IO.SearchOption
      description: One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories.
    return:
      type: System.IO.FileInfo[]
      description: An array of type @'System.IO.FileInfo'.
  exceptions:
  - type: System.ArgumentException
    description: '*searchPattern *contains one or more invalid characters defined by the @''System.IO.Path.GetInvalidPathChars'' method.'
  - type: System.ArgumentNullException
    description: '*searchPattern* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*searchOption* is not a valid @''System.IO.SearchOption'' value.'
  - type: System.IO.DirectoryNotFoundException
    description: The path is invalid (for example, it is on an unmapped drive).
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
- uid: System.IO.DirectoryInfo.GetFileSystemInfos
  id: GetFileSystemInfos
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: GetFileSystemInfos()
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 362
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Returns an array of strongly typed @'System.IO.FileSystemInfo' entries representing all the files and subdirectories in a directory.
  syntax:
    content: public FileSystemInfo[] GetFileSystemInfos()
    content.vb: Public Function GetFileSystemInfos As FileSystemInfo()
    return:
      type: System.IO.FileSystemInfo[]
      description: An array of strongly typed @'System.IO.FileSystemInfo' entries.
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    description: The path is invalid (for example, it is on an unmapped drive).
- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String)
  id: GetFileSystemInfos(System.String)
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: GetFileSystemInfos(String)
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 326
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Retrieves an array of strongly typed @'System.IO.FileSystemInfo' objects representing the files and subdirectories that match the specified search criteria.
  syntax:
    content: public FileSystemInfo[] GetFileSystemInfos(string searchPattern)
    content.vb: Public Function GetFileSystemInfos(searchPattern As String) As FileSystemInfo()
    parameters:
    - id: searchPattern
      type: System.String
      description: The search string to match against the names of directories and files.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.
    return:
      type: System.IO.FileSystemInfo[]
      description: An array of strongly typed FileSystemInfo objects matching the search criteria.
  exceptions:
  - type: System.ArgumentException
    description: '*searchPattern *contains one or more invalid characters defined by the @''System.IO.Path.GetInvalidPathChars'' method.'
  - type: System.ArgumentNullException
    description: '*searchPattern* is null.'
  - type: System.IO.DirectoryNotFoundException
    description: The specified path is invalid (for example, it is on an unmapped drive).
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
- uid: System.IO.DirectoryInfo.GetFileSystemInfos(System.String,System.IO.SearchOption)
  id: GetFileSystemInfos(System.String,System.IO.SearchOption)
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: GetFileSystemInfos(String, SearchOption)
  fullName: System.IO.DirectoryInfo.GetFileSystemInfos(System.String, System.IO.SearchOption)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 337
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Retrieves an array of @'System.IO.FileSystemInfo' objects that represent the files and subdirectories matching the specified search criteria.
  syntax:
    content: public FileSystemInfo[] GetFileSystemInfos(string searchPattern, SearchOption searchOption)
    content.vb: Public Function GetFileSystemInfos(searchPattern As String, searchOption As SearchOption) As FileSystemInfo()
    parameters:
    - id: searchPattern
      type: System.String
      description: The search string to match against the names of directories and filesa.  This parameter can contain a combination of valid literal path and wildcard (* and ?) characters (see Remarks), but doesn't support regular expressions. The default pattern is "*", which returns all files.
    - id: searchOption
      type: System.IO.SearchOption
      description: One of the enumeration values that specifies whether the search operation should include only the current directory or all subdirectories. The default value is @'System.IO.SearchOption.TopDirectoryOnly'.
    return:
      type: System.IO.FileSystemInfo[]
      description: An array of file system entries that match the search criteria.
  exceptions:
  - type: System.ArgumentException
    description: '*searchPattern *contains one or more invalid characters defined by the @''System.IO.Path.GetInvalidPathChars'' method.'
  - type: System.ArgumentNullException
    description: '*searchPattern* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*searchOption* is not a valid @''System.IO.SearchOption'' value.'
  - type: System.IO.DirectoryNotFoundException
    description: The specified path is invalid (for example, it is on an unmapped drive).
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
- uid: System.IO.DirectoryInfo.MoveTo(System.String)
  id: MoveTo(System.String)
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: MoveTo(String)
  fullName: System.IO.DirectoryInfo.MoveTo(System.String)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 534
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Moves a @'System.IO.DirectoryInfo' instance and its contents to a new path.
  syntax:
    content: public void MoveTo(string destDirName)
    content.vb: Public Sub MoveTo(destDirName As String)
    parameters:
    - id: destDirName
      type: System.String
      description: The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory.
  exceptions:
  - type: System.ArgumentNullException
    description: '*destDirName* is null.'
  - type: System.ArgumentException
    description: '*destDirName* is an empty string (''''").'
  - type: System.IO.IOException
    description: An attempt was made to move a directory to a different volume. -or-*destDirName* already exists.-or-You are not authorized to access this path.-or- The directory being moved and the destination directory have the same name.
  - type: System.Security.SecurityException
    description: The caller does not have the required permission.
  - type: System.IO.DirectoryNotFoundException
    description: The destination directory cannot be found.
- uid: System.IO.DirectoryInfo.ToString
  id: ToString
  parent: System.IO.DirectoryInfo
  href: System.IO.DirectoryInfo.yml
  name: ToString()
  fullName: System.IO.DirectoryInfo.ToString()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/IO/DirectoryInfo.cs
    startLine: 619
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: Returns the original path that was passed by the user.
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: Returns the original path that was passed by the user.
  overridden: System.Object.ToString
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
- uid: System.IO.FileSystemInfo
  parent: System.IO
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: FileSystemInfo
  fullName: System.IO.FileSystemInfo
- uid: System.IO.FileSystemInfo.FullPath
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: FullPath
  fullName: System.IO.FileSystemInfo.FullPath
- uid: System.IO.FileSystemInfo.OriginalPath
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: OriginalPath
  fullName: System.IO.FileSystemInfo.OriginalPath
- uid: System.IO.FileSystemInfo.Attributes
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: Attributes
  fullName: System.IO.FileSystemInfo.Attributes
- uid: System.IO.FileSystemInfo.CreationTime
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: CreationTime
  fullName: System.IO.FileSystemInfo.CreationTime
- uid: System.IO.FileSystemInfo.CreationTimeUtc
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: CreationTimeUtc
  fullName: System.IO.FileSystemInfo.CreationTimeUtc
- uid: System.IO.FileSystemInfo.Extension
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: Extension
  fullName: System.IO.FileSystemInfo.Extension
- uid: System.IO.FileSystemInfo.FullName
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: FullName
  fullName: System.IO.FileSystemInfo.FullName
- uid: System.IO.FileSystemInfo.LastAccessTime
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: LastAccessTime
  fullName: System.IO.FileSystemInfo.LastAccessTime
- uid: System.IO.FileSystemInfo.LastAccessTimeUtc
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: LastAccessTimeUtc
  fullName: System.IO.FileSystemInfo.LastAccessTimeUtc
- uid: System.IO.FileSystemInfo.LastWriteTime
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: LastWriteTime
  fullName: System.IO.FileSystemInfo.LastWriteTime
- uid: System.IO.FileSystemInfo.LastWriteTimeUtc
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: LastWriteTimeUtc
  fullName: System.IO.FileSystemInfo.LastWriteTimeUtc
- uid: System.IO.FileSystemInfo.Refresh
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: Refresh()
  fullName: System.IO.FileSystemInfo.Refresh()
  spec.csharp:
  - uid: System.IO.FileSystemInfo.Refresh
    name: Refresh
    fullName: System.IO.FileSystemInfo.Refresh
    href: System.IO.FileSystemInfo.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.FileSystemInfo.Refresh
    name: Refresh
    fullName: System.IO.FileSystemInfo.Refresh
    href: System.IO.FileSystemInfo.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  href: System.String.yml
  name: String
  fullName: System.String
- uid: System.IO.FileSystemInfo.Exists
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: Exists
  fullName: System.IO.FileSystemInfo.Exists
- uid: System.Boolean
  parent: System
  isExternal: false
  href: System.Boolean.yml
  name: Boolean
  fullName: System.Boolean
- uid: System.IO.FileSystemInfo.Name
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: Name
  fullName: System.IO.FileSystemInfo.Name
- uid: System.IO.DirectoryInfo
  parent: System.IO
  isExternal: false
  href: System.IO.DirectoryInfo.yml
  name: DirectoryInfo
  fullName: System.IO.DirectoryInfo
- uid: System.IO.FileSystemInfo.Delete
  parent: System.IO.FileSystemInfo
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: Delete()
  fullName: System.IO.FileSystemInfo.Delete()
  spec.csharp:
  - uid: System.IO.FileSystemInfo.Delete
    name: Delete
    fullName: System.IO.FileSystemInfo.Delete
    href: System.IO.FileSystemInfo.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.FileSystemInfo.Delete
    name: Delete
    fullName: System.IO.FileSystemInfo.Delete
    href: System.IO.FileSystemInfo.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: System.IO.DirectoryInfo.yml
  name: IEnumerable<DirectoryInfo>
  name.vb: IEnumerable(Of DirectoryInfo)
  fullName: System.Collections.Generic.IEnumerable<System.IO.DirectoryInfo>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.IO.DirectoryInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.IO.DirectoryInfo
    name: DirectoryInfo
    fullName: System.IO.DirectoryInfo
    href: System.IO.DirectoryInfo.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.IO.DirectoryInfo
    name: DirectoryInfo
    fullName: System.IO.DirectoryInfo
    href: System.IO.DirectoryInfo.yml
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.IEnumerable`1.yml
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.IO.SearchOption
  parent: System.IO
  isExternal: false
  href: System.IO.SearchOption.yml
  name: SearchOption
  fullName: System.IO.SearchOption
- uid: System.Collections.Generic.IEnumerable{System.IO.FileInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: System.IO.FileInfo.yml
  name: IEnumerable<FileInfo>
  name.vb: IEnumerable(Of FileInfo)
  fullName: System.Collections.Generic.IEnumerable<System.IO.FileInfo>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.IO.FileInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.IO.FileInfo
    name: FileInfo
    fullName: System.IO.FileInfo
    href: System.IO.FileInfo.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.IO.FileInfo
    name: FileInfo
    fullName: System.IO.FileInfo
    href: System.IO.FileInfo.yml
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.IO.FileSystemInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: System.IO.FileSystemInfo.yml
  name: IEnumerable<FileSystemInfo>
  name.vb: IEnumerable(Of FileSystemInfo)
  fullName: System.Collections.Generic.IEnumerable<System.IO.FileSystemInfo>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.IO.FileSystemInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.IO.FileSystemInfo
    name: FileSystemInfo
    fullName: System.IO.FileSystemInfo
    href: System.IO.FileSystemInfo.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.IO.FileSystemInfo
    name: FileSystemInfo
    fullName: System.IO.FileSystemInfo
    href: System.IO.FileSystemInfo.yml
  - name: )
    fullName: )
- uid: System.IO.DirectoryInfo[]
  isExternal: false
  href: System.IO.DirectoryInfo.yml
  name: DirectoryInfo[]
  name.vb: DirectoryInfo()
  fullName: System.IO.DirectoryInfo[]
  fullName.vb: System.IO.DirectoryInfo()
  spec.csharp:
  - uid: System.IO.DirectoryInfo
    name: DirectoryInfo
    fullName: System.IO.DirectoryInfo
    href: System.IO.DirectoryInfo.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.IO.DirectoryInfo
    name: DirectoryInfo
    fullName: System.IO.DirectoryInfo
    href: System.IO.DirectoryInfo.yml
  - name: ()
    fullName: ()
- uid: System.IO.FileInfo[]
  isExternal: false
  href: System.IO.FileInfo.yml
  name: FileInfo[]
  name.vb: FileInfo()
  fullName: System.IO.FileInfo[]
  fullName.vb: System.IO.FileInfo()
  spec.csharp:
  - uid: System.IO.FileInfo
    name: FileInfo
    fullName: System.IO.FileInfo
    href: System.IO.FileInfo.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.IO.FileInfo
    name: FileInfo
    fullName: System.IO.FileInfo
    href: System.IO.FileInfo.yml
  - name: ()
    fullName: ()
- uid: System.IO.FileSystemInfo[]
  isExternal: false
  href: System.IO.FileSystemInfo.yml
  name: FileSystemInfo[]
  name.vb: FileSystemInfo()
  fullName: System.IO.FileSystemInfo[]
  fullName.vb: System.IO.FileSystemInfo()
  spec.csharp:
  - uid: System.IO.FileSystemInfo
    name: FileSystemInfo
    fullName: System.IO.FileSystemInfo
    href: System.IO.FileSystemInfo.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.IO.FileSystemInfo
    name: FileSystemInfo
    fullName: System.IO.FileSystemInfo
    href: System.IO.FileSystemInfo.yml
  - name: ()
    fullName: ()
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  href: System.ArgumentNullException.yml
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  summary: The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
- uid: System.Security.SecurityException
  isExternal: false
  href: System.Security.SecurityException.yml
  name: SecurityException
  fullName: System.Security.SecurityException
  summary: The exception that is thrown when a security error is detected.
- uid: System.ArgumentException
  parent: System
  isExternal: false
  href: System.ArgumentException.yml
  name: ArgumentException
  fullName: System.ArgumentException
  summary: The exception that is thrown when one of the arguments provided to a method is not valid.
- uid: System.IO.PathTooLongException
  isExternal: false
  href: System.IO.PathTooLongException.yml
  name: PathTooLongException
  fullName: System.IO.PathTooLongException
  summary: The exception that is thrown when a path or file name is longer than the system-defined maximum length.
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  href: System.IO.IOException.yml
  name: IOException
  fullName: System.IO.IOException
  summary: The exception that is thrown when an I/O error occurs.
- uid: System.IO.DirectoryNotFoundException
  isExternal: false
  href: System.IO.DirectoryNotFoundException.yml
  name: DirectoryNotFoundException
  fullName: System.IO.DirectoryNotFoundException
  summary: The exception that is thrown when part of a file or directory cannot be found.
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  href: System.NotSupportedException.yml
  name: NotSupportedException
  fullName: System.NotSupportedException
  summary: The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality.
- uid: System.UnauthorizedAccessException
  parent: System
  isExternal: false
  href: System.UnauthorizedAccessException.yml
  name: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
  summary: The exception that is thrown when the operating system denies access because of an I/O error or a specific type of security error.
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  href: System.ArgumentOutOfRangeException.yml
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  summary: The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
