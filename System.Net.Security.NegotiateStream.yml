items:
- uid: System.Net.Security.NegotiateStream
  id: NegotiateStream
  parent: System.Net.Security
  children:
  - System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)
  - System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,System.String)
  - System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  - System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  - System.Net.Security.NegotiateStream.CanRead
  - System.Net.Security.NegotiateStream.CanSeek
  - System.Net.Security.NegotiateStream.CanTimeout
  - System.Net.Security.NegotiateStream.CanWrite
  - System.Net.Security.NegotiateStream.Flush
  - System.Net.Security.NegotiateStream.ImpersonationLevel
  - System.Net.Security.NegotiateStream.IsAuthenticated
  - System.Net.Security.NegotiateStream.IsEncrypted
  - System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  - System.Net.Security.NegotiateStream.IsServer
  - System.Net.Security.NegotiateStream.IsSigned
  - System.Net.Security.NegotiateStream.Length
  - System.Net.Security.NegotiateStream.Position
  - System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.Net.Security.NegotiateStream.ReadTimeout
  - System.Net.Security.NegotiateStream.RemoteIdentity
  - System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.Net.Security.NegotiateStream.SetLength(System.Int64)
  - System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.Net.Security.NegotiateStream.WriteTimeout
  href: System.Net.Security.NegotiateStream.yml
  name: NegotiateStream
  fullName: System.Net.Security.NegotiateStream
  type: Class
  source:
    remote:
      path: src/System.Net.Security/src/System/Net/SecureProtocols/InternalNegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Net.Security/src/System/Net/SecureProtocols/InternalNegotiateStream.cs
    startLine: 13
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Provides a stream that uses the Negotiate security protocol to authenticate the client, and optionally the server, in client-server communication.
  syntax:
    content: 'public class NegotiateStream : AuthenticatedStream'
    content.vb: Public Class NegotiateStream Inherits AuthenticatedStream
  inheritance:
  - System.Object
  - System.Net.Security.AuthenticatedStream
  inheritedMembers:
  - System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
  - System.Net.Security.AuthenticatedStream.InnerStream
  - System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: NegotiateStream(IO.Stream)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(System.IO.Stream)
  type: Constructor
  source:
    remote: &o0
      path: src/System.Net.Security/ref/System.Net.Security.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Net.Security/ref/System.Net.Security.cs
    startLine: 30
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Initializes a new instance of the @'System.Net.Security.NegotiateStream' class using the specified @'System.IO.Stream'.
  syntax:
    content: public NegotiateStream(IO.Stream innerStream)
    content.vb: Public Sub New(innerStream As IO.Stream)
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: A @'System.IO.Stream' object used by the @'System.Net.Security.NegotiateStream' for sending and receiving data.
- uid: System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Boolean)'
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: NegotiateStream(IO.Stream, Boolean)
  fullName: System.Net.Security.NegotiateStream.NegotiateStream(System.IO.Stream, System.Boolean)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Net.Security/ref/System.Net.Security.cs
    startLine: 31
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Initializes a new instance of the @'System.Net.Security.NegotiateStream' class using the specified @'System.IO.Stream' and stream closure behavior.
  syntax:
    content: public NegotiateStream(IO.Stream innerStream, bool leaveInnerStreamOpen)
    content.vb: Public Sub New(innerStream As IO.Stream, leaveInnerStreamOpen As Boolean)
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: A @'System.IO.Stream' object used by the @'System.Net.Security.NegotiateStream' for sending and receiving data.
    - id: leaveInnerStreamOpen
      type: System.Boolean
      description: true to indicate that closing this @'System.Net.Security.NegotiateStream' has no effect on *innerstream*; false to indicate that closing this @'System.Net.Security.NegotiateStream' also closes *innerStream*. See the Remarks section for more information.
  exceptions:
  - type: System.ArgumentNullException
    description: '*innerStream* is null.- or -*innerStream* is equal to @''System.IO.Stream.Null''.'
- uid: System.Net.Security.NegotiateStream.CanRead
  id: CanRead
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: CanRead
  fullName: System.Net.Security.NegotiateStream.CanRead
  type: Property
  source:
    remote: &o1
      path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 350
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Gets a @'System.Boolean' value that indicates whether the underlying stream is readable.
  syntax:
    content: public override bool CanRead { get; }
    content.vb: Public Overrides ReadOnly Property CanRead As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if authentication has occurred and the underlying stream is readable; otherwise, false.
- uid: System.Net.Security.NegotiateStream.CanSeek
  id: CanSeek
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: CanSeek
  fullName: System.Net.Security.NegotiateStream.CanSeek
  type: Property
  source:
    remote: *o1
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 342
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Gets a @'System.Boolean' value that indicates whether the underlying stream is seekable.
  syntax:
    content: public override bool CanSeek { get; }
    content.vb: Public Overrides ReadOnly Property CanSeek As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: This property always returns false.
- uid: System.Net.Security.NegotiateStream.CanTimeout
  id: CanTimeout
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: CanTimeout
  fullName: System.Net.Security.NegotiateStream.CanTimeout
  type: Property
  source:
    remote: *o1
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 358
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Gets a @'System.Boolean' value that indicates whether the underlying stream supports time-outs.
  syntax:
    content: public override bool CanTimeout { get; }
    content.vb: Public Overrides ReadOnly Property CanTimeout As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the underlying stream supports time-outs; otherwise, false.
- uid: System.Net.Security.NegotiateStream.CanWrite
  id: CanWrite
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: CanWrite
  fullName: System.Net.Security.NegotiateStream.CanWrite
  type: Property
  source:
    remote: *o1
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 366
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Gets a @'System.Boolean' value that indicates whether the underlying stream is writable.
  syntax:
    content: public override bool CanWrite { get; }
    content.vb: Public Overrides ReadOnly Property CanWrite As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if authentication has occurred and the underlying stream is writable; otherwise, false.
- uid: System.Net.Security.NegotiateStream.ImpersonationLevel
  id: ImpersonationLevel
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: ImpersonationLevel
  fullName: System.Net.Security.NegotiateStream.ImpersonationLevel
  type: Property
  source:
    remote: *o1
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 303
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Gets a value that indicates how the server can use the client's credentials.
  syntax:
    content: public virtual Principal.TokenImpersonationLevel ImpersonationLevel { get; }
    content.vb: Public Overridable ReadOnly Property ImpersonationLevel As Principal.TokenImpersonationLevel
    parameters: []
    return:
      type: System.Security.Principal.TokenImpersonationLevel
      description: One of the @'System.Security.Principal.TokenImpersonationLevel' values.
  exceptions:
  - type: System.InvalidOperationException
    description: Authentication failed or has not occurred.
- uid: System.Net.Security.NegotiateStream.IsAuthenticated
  id: IsAuthenticated
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: IsAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsAuthenticated
  type: Property
  source:
    remote: *o1
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 228
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Gets a @'System.Boolean' value that indicates whether authentication was successful.
  syntax:
    content: public override bool IsAuthenticated { get; }
    content.vb: Public Overrides ReadOnly Property IsAuthenticated As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if successful authentication occurred; otherwise, false.
  overridden: System.Net.Security.AuthenticatedStream.IsAuthenticated
- uid: System.Net.Security.NegotiateStream.IsEncrypted
  id: IsEncrypted
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: IsEncrypted
  fullName: System.Net.Security.NegotiateStream.IsEncrypted
  type: Property
  source:
    remote: *o1
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 258
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Gets a @'System.Boolean' value that indicates whether this @'System.Net.Security.NegotiateStream' uses data encryption.
  syntax:
    content: public override bool IsEncrypted { get; }
    content.vb: Public Overrides ReadOnly Property IsEncrypted As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise, false.
  overridden: System.Net.Security.AuthenticatedStream.IsEncrypted
- uid: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  id: IsMutuallyAuthenticated
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: IsMutuallyAuthenticated
  fullName: System.Net.Security.NegotiateStream.IsMutuallyAuthenticated
  type: Property
  source:
    remote: *o1
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 243
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Gets a @'System.Boolean' value that indicates whether both the server and the client have been authenticated.
  syntax:
    content: public override bool IsMutuallyAuthenticated { get; }
    content.vb: Public Overrides ReadOnly Property IsMutuallyAuthenticated As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the server has been authenticated; otherwise, false.
  overridden: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated
- uid: System.Net.Security.NegotiateStream.IsServer
  id: IsServer
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: IsServer
  fullName: System.Net.Security.NegotiateStream.IsServer
  type: Property
  source:
    remote: *o1
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 288
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Gets a @'System.Boolean' value that indicates whether the local side of the connection used by this @'System.Net.Security.NegotiateStream' was authenticated as the server.
  syntax:
    content: public override bool IsServer { get; }
    content.vb: Public Overrides ReadOnly Property IsServer As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the local endpoint was successfully authenticated as the server side of the authenticated connection; otherwise, false.
  overridden: System.Net.Security.AuthenticatedStream.IsServer
- uid: System.Net.Security.NegotiateStream.IsSigned
  id: IsSigned
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: IsSigned
  fullName: System.Net.Security.NegotiateStream.IsSigned
  type: Property
  source:
    remote: *o1
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 273
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Gets a @'System.Boolean' value that indicates whether the data sent using this stream is signed.
  syntax:
    content: public override bool IsSigned { get; }
    content.vb: Public Overrides ReadOnly Property IsSigned As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the data is signed before being transmitted; otherwise, false.
  overridden: System.Net.Security.AuthenticatedStream.IsSigned
- uid: System.Net.Security.NegotiateStream.Length
  id: Length
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: Length
  fullName: System.Net.Security.NegotiateStream.Length
  type: Property
  source:
    remote: *o1
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 398
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Gets the length of the underlying stream.
  syntax:
    content: public override long Length { get; }
    content.vb: Public Overrides ReadOnly Property Length As Long
    parameters: []
    return:
      type: System.Int64
      description: A @'System.Int64' that specifies the length of the underlying stream.
  exceptions:
  - type: System.NotSupportedException
    description: Getting the value of this property is not supported when the underlying stream is a @'System.Net.Sockets.NetworkStream'.
- uid: System.Net.Security.NegotiateStream.Position
  id: Position
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: Position
  fullName: System.Net.Security.NegotiateStream.Position
  type: Property
  source:
    remote: *o1
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 406
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Gets or sets the current position in the underlying stream.
  syntax:
    content: public override long Position { get; set; }
    content.vb: Public Overrides Property Position As Long
    parameters: []
    return:
      type: System.Int64
      description: A @'System.Int64' that specifies the current position in the underlying stream.
  exceptions:
  - type: System.NotSupportedException
    description: Setting this property is not supported.- or -Getting the value of this property is not supported when the underlying stream is a @'System.Net.Sockets.NetworkStream'.
- uid: System.Net.Security.NegotiateStream.ReadTimeout
  id: ReadTimeout
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: ReadTimeout
  fullName: System.Net.Security.NegotiateStream.ReadTimeout
  type: Property
  source:
    remote: *o1
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 374
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Gets or sets the amount of time a read operation blocks waiting for data.
  syntax:
    content: public override int ReadTimeout { get; set; }
    content.vb: Public Overrides Property ReadTimeout As Integer
    parameters: []
    return:
      type: System.Int32
      description: A @'System.Int32' that specifies the amount of time that will elapse before a read operation fails.
- uid: System.Net.Security.NegotiateStream.RemoteIdentity
  id: RemoteIdentity
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: RemoteIdentity
  fullName: System.Net.Security.NegotiateStream.RemoteIdentity
  type: Property
  source:
    remote: *o1
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 318
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Gets information about the identity of the remote party sharing this authenticated stream.
  syntax:
    content: public virtual Principal.IIdentity RemoteIdentity { get; }
    content.vb: Public Overridable ReadOnly Property RemoteIdentity As Principal.IIdentity
    parameters: []
    return:
      type: System.Security.Principal.IIdentity
      description: An @'System.Security.Principal.IIdentity' object that describes the identity of the remote endpoint.
  exceptions:
  - type: System.InvalidOperationException
    description: Authentication failed or has not occurred.
- uid: System.Net.Security.NegotiateStream.WriteTimeout
  id: WriteTimeout
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: WriteTimeout
  fullName: System.Net.Security.NegotiateStream.WriteTimeout
  type: Property
  source:
    remote: *o1
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 386
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Gets or sets the amount of time a write operation blocks waiting for data.
  syntax:
    content: public override int WriteTimeout { get; set; }
    content.vb: Public Overrides Property WriteTimeout As Integer
    parameters: []
    return:
      type: System.Int32
      description: A @'System.Int32' that specifies the amount of time that will elapse before a write operation fails.
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync
  id: AuthenticateAsClientAsync
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: AuthenticateAsClientAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync()
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 174
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.
  syntax:
    content: public virtual Threading.Tasks.Task AuthenticateAsClientAsync()
    content.vb: Public Overridable Function AuthenticateAsClientAsync As Threading.Tasks.Task
    return:
      type: System.Threading.Tasks.Task
      description: Returns @'System.Threading.Tasks.Task'The task object representing the asynchronous operation.
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    description: The authentication failed. You can use this object to retry the authentication.
  - type: System.Security.Authentication.InvalidCredentialException
    description: The authentication failed. You can use this object to retry the authentication.
  - type: System.ObjectDisposedException
    description: This object has been closed.
  - type: System.InvalidOperationException
    description: Authentication has already occurred.- or -This stream was used previously to attempt authentication as the server. You cannot use the stream to retry authentication as the client.
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,System.String)
  id: AuthenticateAsClientAsync(NetworkCredential,System.String)
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: AuthenticateAsClientAsync(NetworkCredential, String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential, System.String)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 179
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public virtual Threading.Tasks.Task AuthenticateAsClientAsync(NetworkCredential credential, string targetName)
    content.vb: Public Overridable Function AuthenticateAsClientAsync(credential As NetworkCredential, targetName As String) As Threading.Tasks.Task
    parameters:
    - id: credential
      type: NetworkCredential
    - id: targetName
      type: System.String
    return:
      type: System.Threading.Tasks.Task
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  id: AuthenticateAsClientAsync(NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: AuthenticateAsClientAsync(NetworkCredential, ChannelBinding, String)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential, System.Security.Authentication.ExtendedProtection.ChannelBinding, System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Security/ref/System.Net.Security.cs
    startLine: 49
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public virtual Threading.Tasks.Task AuthenticateAsClientAsync(NetworkCredential credential, ChannelBinding binding, string targetName)
    content.vb: Public Overridable Function AuthenticateAsClientAsync(credential As NetworkCredential, binding As ChannelBinding, targetName As String) As Threading.Tasks.Task
    parameters:
    - id: credential
      type: NetworkCredential
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
    - id: targetName
      type: System.String
    return:
      type: System.Threading.Tasks.Task
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClientAsync(NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: AuthenticateAsClientAsync(NetworkCredential, String, ProtectionLevel, Principal.TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential, System.String, System.Net.Security.ProtectionLevel, System.Security.Principal.TokenImpersonationLevel)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Security/ref/System.Net.Security.cs
    startLine: 50
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public virtual Threading.Tasks.Task AuthenticateAsClientAsync(NetworkCredential credential, string targetName, ProtectionLevel requiredProtectionLevel, Principal.TokenImpersonationLevel allowedImpersonationLevel)
    content.vb: Public Overridable Function AuthenticateAsClientAsync(credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As Principal.TokenImpersonationLevel) As Threading.Tasks.Task
    parameters:
    - id: credential
      type: NetworkCredential
    - id: targetName
      type: System.String
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
    return:
      type: System.Threading.Tasks.Task
- uid: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsClientAsync(NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: AuthenticateAsClientAsync(NetworkCredential, ChannelBinding, String, ProtectionLevel, Principal.TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(NetworkCredential, System.Security.Authentication.ExtendedProtection.ChannelBinding, System.String, System.Net.Security.ProtectionLevel, System.Security.Principal.TokenImpersonationLevel)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Security/ref/System.Net.Security.cs
    startLine: 51
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public virtual Threading.Tasks.Task AuthenticateAsClientAsync(NetworkCredential credential, ChannelBinding binding, string targetName, ProtectionLevel requiredProtectionLevel, Principal.TokenImpersonationLevel allowedImpersonationLevel)
    content.vb: Public Overridable Function AuthenticateAsClientAsync(credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As Principal.TokenImpersonationLevel) As Threading.Tasks.Task
    parameters:
    - id: credential
      type: NetworkCredential
    - id: binding
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
    - id: targetName
      type: System.String
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
    - id: allowedImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
    return:
      type: System.Threading.Tasks.Task
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync
  id: AuthenticateAsServerAsync
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: AuthenticateAsServerAsync()
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync()
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 205
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.
  syntax:
    content: public virtual Threading.Tasks.Task AuthenticateAsServerAsync()
    content.vb: Public Overridable Function AuthenticateAsServerAsync As Threading.Tasks.Task
    return:
      type: System.Threading.Tasks.Task
      description: Returns @'System.Threading.Tasks.Task'The task object representing the asynchronous operation.
  exceptions:
  - type: System.Security.Authentication.AuthenticationException
    description: The authentication failed. You can use this object to retry the authentication.
  - type: System.Security.Authentication.InvalidCredentialException
    description: The authentication failed. You can use this object to retry the authentication.
  - type: System.ObjectDisposedException
    description: This object has been closed.
  - type: System.NotSupportedException
    description: Windows 95 and Windows 98 are not supported.
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  id: AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: AuthenticateAsServerAsync(ExtendedProtectionPolicy)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 210
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation. The authentication process uses the specified extended protection policy.
  syntax:
    content: public virtual Threading.Tasks.Task AuthenticateAsServerAsync(ExtendedProtectionPolicy policy)
    content.vb: Public Overridable Function AuthenticateAsServerAsync(policy As ExtendedProtectionPolicy) As Threading.Tasks.Task
    parameters:
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
      description: The @'System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy' that is used for extended protection.
    return:
      type: System.Threading.Tasks.Task
      description: Returns @'System.Threading.Tasks.Task'The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentException
    description: The @'System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding' and @'System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames' on the extended protection policy passed in the *policy* parameter are both null.
  - type: System.Security.Authentication.AuthenticationException
    description: The authentication failed. You can use this object to retry the authentication.
  - type: System.Security.Authentication.InvalidCredentialException
    description: The authentication failed. You can use this object to retry the authentication.
  - type: System.NotSupportedException
    description: Windows 95 and Windows 98 are not supported.
  - type: System.ObjectDisposedException
    description: This object has been closed.
  - type: System.PlatformNotSupportedException
    description: The *policy* parameter was set to @'System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always' on a platform that does not support extended protection.
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServerAsync(NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: AuthenticateAsServerAsync(NetworkCredential, ProtectionLevel, Principal.TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential, System.Net.Security.ProtectionLevel, System.Security.Principal.TokenImpersonationLevel)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Security/ref/System.Net.Security.cs
    startLine: 54
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public virtual Threading.Tasks.Task AuthenticateAsServerAsync(NetworkCredential credential, ProtectionLevel requiredProtectionLevel, Principal.TokenImpersonationLevel requiredImpersonationLevel)
    content.vb: Public Overridable Function AuthenticateAsServerAsync(credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As Principal.TokenImpersonationLevel) As Threading.Tasks.Task
    parameters:
    - id: credential
      type: NetworkCredential
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
    return:
      type: System.Threading.Tasks.Task
- uid: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  id: AuthenticateAsServerAsync(NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: AuthenticateAsServerAsync(NetworkCredential, ExtendedProtectionPolicy, ProtectionLevel, Principal.TokenImpersonationLevel)
  fullName: System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(NetworkCredential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy, System.Net.Security.ProtectionLevel, System.Security.Principal.TokenImpersonationLevel)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Security/ref/System.Net.Security.cs
    startLine: 55
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  syntax:
    content: public virtual Threading.Tasks.Task AuthenticateAsServerAsync(NetworkCredential credential, ExtendedProtectionPolicy policy, ProtectionLevel requiredProtectionLevel, Principal.TokenImpersonationLevel requiredImpersonationLevel)
    content.vb: Public Overridable Function AuthenticateAsServerAsync(credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As Principal.TokenImpersonationLevel) As Threading.Tasks.Task
    parameters:
    - id: credential
      type: NetworkCredential
    - id: policy
      type: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
    - id: requiredProtectionLevel
      type: System.Net.Security.ProtectionLevel
    - id: requiredImpersonationLevel
      type: System.Security.Principal.TokenImpersonationLevel
    return:
      type: System.Threading.Tasks.Task
- uid: System.Net.Security.NegotiateStream.Flush
  id: Flush
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: Flush()
  fullName: System.Net.Security.NegotiateStream.Flush()
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 428
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Causes any buffered data to be written to the underlying device.
  syntax:
    content: public override void Flush()
    content.vb: Public Overrides Sub Flush
- uid: System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: Read(Byte[], Int32, Int32)
  name.vb: Read(Byte(), Int32, Int32)
  fullName: System.Net.Security.NegotiateStream.Read(System.Byte[], System.Int32, System.Int32)
  fullName.vb: System.Net.Security.NegotiateStream.Read(System.Byte(), System.Int32, System.Int32)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 459
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Reads data from this stream and stores it in the specified array.
  syntax:
    content: public override int Read(byte[] buffer, int offset, int count)
    content.vb: Public Overrides Function Read(buffer As Byte(), offset As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: A @'System.Byte' array that receives the bytes read from the stream.
    - id: offset
      type: System.Int32
      description: A @'System.Int32' containing the zero-based location in *buffer* at which to begin storing the data read from this stream.
    - id: count
      type: System.Int32
      description: A @'System.Int32' containing the maximum number of bytes to read from the stream.
    return:
      type: System.Int32
      description: A @'System.Int32' value that specifies the number of bytes read from the underlying stream. When there is no more data to be read, returns 0.
  exceptions:
  - type: System.IO.IOException
    description: The read operation failed.
  - type: System.InvalidOperationException
    description: Authentication has not occurred.
  - type: System.NotSupportedException
    description: A @'System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)' operation is already in progress.
- uid: System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: Seek(Int64, IO.SeekOrigin)
  fullName: System.Net.Security.NegotiateStream.Seek(System.Int64, System.IO.SeekOrigin)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Security/ref/System.Net.Security.cs
    startLine: 58
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Throws @'System.NotSupportedException'.
  syntax:
    content: public override long Seek(long offset, IO.SeekOrigin origin)
    content.vb: Public Overrides Function Seek(offset As Long, origin As IO.SeekOrigin) As Long
    parameters:
    - id: offset
      type: System.Int64
      description: This value is ignored.
    - id: origin
      type: System.IO.SeekOrigin
      description: This value is ignored.
    return:
      type: System.Int64
      description: Always throws a @'System.NotSupportedException'.
  exceptions:
  - type: System.NotSupportedException
    description: Seeking is not supported on @'System.Net.Security.NegotiateStream'.
- uid: System.Net.Security.NegotiateStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: SetLength(Int64)
  fullName: System.Net.Security.NegotiateStream.SetLength(System.Int64)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 418
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Sets the length of the underlying stream.
  syntax:
    content: public override void SetLength(long value)
    content.vb: Public Overrides Sub SetLength(value As Long)
    parameters:
    - id: value
      type: System.Int64
      description: An @'System.Int64' value that specifies the length of the stream.
- uid: System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Security.NegotiateStream
  href: System.Net.Security.NegotiateStream.yml
  name: Write(Byte[], Int32, Int32)
  name.vb: Write(Byte(), Int32, Int32)
  fullName: System.Net.Security.NegotiateStream.Write(System.Byte[], System.Int32, System.Int32)
  fullName.vb: System.Net.Security.NegotiateStream.Write(System.Byte(), System.Int32, System.Int32)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Security/src/System/Net/SecureProtocols/NegotiateStream.cs
    startLine: 478
  assemblies:
  - System.Net.Security
  namespace: System.Net.Security
  summary: Write the specified number of @'System.Byte's to the underlying stream using the specified buffer and offset.
  syntax:
    content: public override void Write(byte[] buffer, int offset, int count)
    content.vb: Public Overrides Sub Write(buffer As Byte(), offset As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: A @'System.Byte' array that supplies the bytes written to the stream.
    - id: offset
      type: System.Int32
      description: An @'System.Int32' containing the zero-based location in* buffer* at which to begin reading bytes to be written to the stream.
    - id: count
      type: System.Int32
      description: A @'System.Int32' containing the number of bytes to read from *buffer*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.'
  - type: System.ArgumentException
    description: '*offset is less than 0*.- or -*offset* is greater than the length of *buffer*.- or -*offset* plus count is greater than the length of *buffer*.'
  - type: System.IO.IOException
    description: The write operation failed.- or -Encryption is in use, but the data could not be encrypted.
  - type: System.NotSupportedException
    description: There is already a write operation in progress.
  - type: System.ObjectDisposedException
    description: This object has been closed.
  - type: System.InvalidOperationException
    description: Authentication has not occurred.
references:
- uid: System.Net.Security
  isExternal: false
  name: System.Net.Security
  fullName: System.Net.Security
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
- uid: System.Net.Security.AuthenticatedStream
  parent: System.Net.Security
  isExternal: false
  href: System.Net.Security.AuthenticatedStream.yml
  name: AuthenticatedStream
  fullName: System.Net.Security.AuthenticatedStream
- uid: System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  href: System.Net.Security.AuthenticatedStream.yml
  name: LeaveInnerStreamOpen
  fullName: System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
- uid: System.Net.Security.AuthenticatedStream.InnerStream
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  href: System.Net.Security.AuthenticatedStream.yml
  name: InnerStream
  fullName: System.Net.Security.AuthenticatedStream.InnerStream
- uid: System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)
  parent: System.Net.Security.AuthenticatedStream
  isExternal: true
  href: System.Net.Security.AuthenticatedStream.yml
  name: Dispose(Boolean)
  fullName: System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Net.Security.AuthenticatedStream.Dispose
    href: System.Net.Security.AuthenticatedStream.yml
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Net.Security.AuthenticatedStream.Dispose
    href: System.Net.Security.AuthenticatedStream.yml
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  href: System.IO.Stream.yml
  name: IO.Stream
  fullName: System.IO.Stream
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Boolean
  parent: System
  isExternal: false
  href: System.Boolean.yml
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.Principal.TokenImpersonationLevel
  parent: System.Security.Principal
  isExternal: false
  href: System.Security.Principal.TokenImpersonationLevel.yml
  name: Principal.TokenImpersonationLevel
  fullName: System.Security.Principal.TokenImpersonationLevel
- uid: System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.Net.Security.AuthenticatedStream.IsAuthenticated
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  href: System.Net.Security.AuthenticatedStream.yml
  name: IsAuthenticated
  fullName: System.Net.Security.AuthenticatedStream.IsAuthenticated
- uid: System.Net.Security.AuthenticatedStream.IsEncrypted
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  href: System.Net.Security.AuthenticatedStream.yml
  name: IsEncrypted
  fullName: System.Net.Security.AuthenticatedStream.IsEncrypted
- uid: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  href: System.Net.Security.AuthenticatedStream.yml
  name: IsMutuallyAuthenticated
  fullName: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated
- uid: System.Net.Security.AuthenticatedStream.IsServer
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  href: System.Net.Security.AuthenticatedStream.yml
  name: IsServer
  fullName: System.Net.Security.AuthenticatedStream.IsServer
- uid: System.Net.Security.AuthenticatedStream.IsSigned
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  href: System.Net.Security.AuthenticatedStream.yml
  name: IsSigned
  fullName: System.Net.Security.AuthenticatedStream.IsSigned
- uid: System.Int64
  parent: System
  isExternal: false
  href: System.Int64.yml
  name: Int64
  fullName: System.Int64
- uid: System.Int32
  parent: System
  isExternal: false
  href: System.Int32.yml
  name: Int32
  fullName: System.Int32
- uid: System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: false
  href: System.Security.Principal.IIdentity.yml
  name: Principal.IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.Task.yml
  name: Threading.Tasks.Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: NetworkCredential
  isExternal: true
  name: NetworkCredential
  fullName: NetworkCredential
- uid: System.String
  parent: System
  isExternal: false
  href: System.String.yml
  name: String
  fullName: System.String
- uid: System.Security.Authentication.ExtendedProtection.ChannelBinding
  parent: System.Security.Authentication.ExtendedProtection
  isExternal: false
  href: System.Security.Authentication.ExtendedProtection.ChannelBinding.yml
  name: ChannelBinding
  fullName: System.Security.Authentication.ExtendedProtection.ChannelBinding
- uid: System.Security.Authentication.ExtendedProtection
  isExternal: false
  name: System.Security.Authentication.ExtendedProtection
  fullName: System.Security.Authentication.ExtendedProtection
- uid: System.Net.Security.ProtectionLevel
  parent: System.Net.Security
  isExternal: false
  href: System.Net.Security.ProtectionLevel.yml
  name: ProtectionLevel
  fullName: System.Net.Security.ProtectionLevel
- uid: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
  parent: System.Security.Authentication.ExtendedProtection
  isExternal: false
  href: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.yml
  name: ExtendedProtectionPolicy
  fullName: System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy
- uid: System.Byte[]
  isExternal: false
  href: System.Byte.yml
  name: Byte[]
  name.vb: Byte()
  fullName: System.Byte[]
  fullName.vb: System.Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    href: System.Byte.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    href: System.Byte.yml
  - name: ()
    fullName: ()
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: false
  href: System.IO.SeekOrigin.yml
  name: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.ArgumentNullException
  isExternal: false
  href: System.ArgumentNullException.yml
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  summary: The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  href: System.InvalidOperationException.yml
  name: InvalidOperationException
  fullName: System.InvalidOperationException
  summary: The exception that is thrown when a method call is invalid for the object's current state.
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  href: System.NotSupportedException.yml
  name: NotSupportedException
  fullName: System.NotSupportedException
  summary: The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality.
- uid: System.Security.Authentication.AuthenticationException
  isExternal: false
  href: System.Security.Authentication.AuthenticationException.yml
  name: AuthenticationException
  fullName: System.Security.Authentication.AuthenticationException
  summary: The exception that is thrown when authentication fails for an authentication stream.
- uid: System.Security.Authentication.InvalidCredentialException
- uid: System.ObjectDisposedException
  isExternal: false
  href: System.ObjectDisposedException.yml
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
  summary: The exception that is thrown when an operation is performed on a disposed object.
- uid: System.ArgumentException
  parent: System
  isExternal: false
  href: System.ArgumentException.yml
  name: ArgumentException
  fullName: System.ArgumentException
  summary: The exception that is thrown when one of the arguments provided to a method is not valid.
- uid: System.PlatformNotSupportedException
  isExternal: false
  href: System.PlatformNotSupportedException.yml
  name: PlatformNotSupportedException
  fullName: System.PlatformNotSupportedException
  summary: The exception that is thrown when a feature does not run on a particular platform.
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  href: System.IO.IOException.yml
  name: IOException
  fullName: System.IO.IOException
  summary: The exception that is thrown when an I/O error occurs.
