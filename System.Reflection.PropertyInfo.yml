items:
- uid: System.Reflection.PropertyInfo
  id: PropertyInfo
  parent: System.Reflection
  children:
  - System.Reflection.PropertyInfo.Attributes
  - System.Reflection.PropertyInfo.CanRead
  - System.Reflection.PropertyInfo.CanWrite
  - System.Reflection.PropertyInfo.Equals(System.Object)
  - System.Reflection.PropertyInfo.GetConstantValue
  - System.Reflection.PropertyInfo.GetHashCode
  - System.Reflection.PropertyInfo.GetIndexParameters
  - System.Reflection.PropertyInfo.GetMethod
  - System.Reflection.PropertyInfo.GetValue(System.Object)
  - System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])
  - System.Reflection.PropertyInfo.IsSpecialName
  - System.Reflection.PropertyInfo.PropertyType
  - System.Reflection.PropertyInfo.SetMethod
  - System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)
  - System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])
  href: System.Reflection.PropertyInfo.yml
  name: PropertyInfo
  fullName: System.Reflection.PropertyInfo
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 20
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Discovers the attributes of a property and provides access to property metadata.
  syntax:
    content: 'public abstract class PropertyInfo : MemberInfo'
    content.vb: Public MustInherit Class PropertyInfo Inherits MemberInfo
  inheritance:
  - System.Object
  - System.Reflection.MemberInfo
  inheritedMembers:
  - System.Reflection.MemberInfo.CustomAttributes
  - System.Reflection.MemberInfo.DeclaringType
  - System.Reflection.MemberInfo.Module
  - System.Reflection.MemberInfo.Name
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Reflection.PropertyInfo.Attributes
  id: Attributes
  parent: System.Reflection.PropertyInfo
  href: System.Reflection.PropertyInfo.yml
  name: Attributes
  fullName: System.Reflection.PropertyInfo.Attributes
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 90
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets the attributes for this property.
  syntax:
    content: public abstract PropertyAttributes Attributes { get; }
    content.vb: Public MustOverride ReadOnly Property Attributes As PropertyAttributes
    parameters: []
    return:
      type: System.Reflection.PropertyAttributes
      description: Attributes of this property.
- uid: System.Reflection.PropertyInfo.CanRead
  id: CanRead
  parent: System.Reflection.PropertyInfo
  href: System.Reflection.PropertyInfo.yml
  name: CanRead
  fullName: System.Reflection.PropertyInfo.CanRead
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 92
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a value indicating whether the property can be read.
  syntax:
    content: public abstract bool CanRead { get; }
    content.vb: Public MustOverride ReadOnly Property CanRead As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if this property can be read; otherwise, false.
- uid: System.Reflection.PropertyInfo.CanWrite
  id: CanWrite
  parent: System.Reflection.PropertyInfo
  href: System.Reflection.PropertyInfo.yml
  name: CanWrite
  fullName: System.Reflection.PropertyInfo.CanWrite
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 94
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a value indicating whether the property can be written to.
  syntax:
    content: public abstract bool CanWrite { get; }
    content.vb: Public MustOverride ReadOnly Property CanWrite As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if this property can be written to; otherwise, false.
- uid: System.Reflection.PropertyInfo.GetMethod
  id: GetMethod
  parent: System.Reflection.PropertyInfo
  href: System.Reflection.PropertyInfo.yml
  name: GetMethod
  fullName: System.Reflection.PropertyInfo.GetMethod
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 134
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets the get accessor for this property.
  syntax:
    content: public virtual MethodInfo GetMethod { get; }
    content.vb: Public Overridable ReadOnly Property GetMethod As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: The get accessor for this property.
- uid: System.Reflection.PropertyInfo.IsSpecialName
  id: IsSpecialName
  parent: System.Reflection.PropertyInfo
  href: System.Reflection.PropertyInfo.yml
  name: IsSpecialName
  fullName: System.Reflection.PropertyInfo.IsSpecialName
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 154
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a value indicating whether the property is the special name.
  syntax:
    content: public bool IsSpecialName { get; }
    content.vb: Public ReadOnly Property IsSpecialName As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if this property is the special name; otherwise, false.
- uid: System.Reflection.PropertyInfo.PropertyType
  id: PropertyType
  parent: System.Reflection.PropertyInfo
  href: System.Reflection.PropertyInfo.yml
  name: PropertyType
  fullName: System.Reflection.PropertyInfo.PropertyType
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 78
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets the type of this property.
  syntax:
    content: public abstract Type PropertyType { get; }
    content.vb: Public MustOverride ReadOnly Property PropertyType As Type
    parameters: []
    return:
      type: System.Type
      description: The type of this property.
- uid: System.Reflection.PropertyInfo.SetMethod
  id: SetMethod
  parent: System.Reflection.PropertyInfo
  href: System.Reflection.PropertyInfo.yml
  name: SetMethod
  fullName: System.Reflection.PropertyInfo.SetMethod
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 142
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets the set accessor for this property.
  syntax:
    content: public virtual MethodInfo SetMethod { get; }
    content.vb: Public Overridable ReadOnly Property SetMethod As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: The set accessor for this property, or null if the property is read-only.
- uid: System.Reflection.PropertyInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.PropertyInfo
  href: System.Reflection.PropertyInfo.yml
  name: Equals(Object)
  fullName: System.Reflection.PropertyInfo.Equals(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 53
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns a value that indicates whether this instance is equal to a specified object.
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with this instance, or null.
    return:
      type: System.Boolean
      description: true if *obj* equals the type and value of this instance; otherwise, false.
  overridden: System.Reflection.MemberInfo.Equals(System.Object)
- uid: System.Reflection.PropertyInfo.GetConstantValue
  id: GetConstantValue
  parent: System.Reflection.PropertyInfo
  href: System.Reflection.PropertyInfo.yml
  name: GetConstantValue()
  fullName: System.Reflection.PropertyInfo.GetConstantValue()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 68
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns a literal value associated with the property by a compiler.
  syntax:
    content: public virtual object GetConstantValue()
    content.vb: Public Overridable Function GetConstantValue As Object
    return:
      type: System.Object
      description: An @'System.Object' that contains the literal value associated with the property. If the literal value is a class type with an element value of zero, the return value is null.
  exceptions:
  - type: System.InvalidOperationException
    description: The Constant table in unmanaged metadata does not contain a constant value for the current property.
  - type: System.FormatException
    description: The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification, Metadata.
- uid: System.Reflection.PropertyInfo.GetHashCode
  id: GetHashCode
  parent: System.Reflection.PropertyInfo
  href: System.Reflection.PropertyInfo.yml
  name: GetHashCode()
  fullName: System.Reflection.PropertyInfo.GetHashCode()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 58
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns the hash code for this instance.
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  overridden: System.Reflection.MemberInfo.GetHashCode
- uid: System.Reflection.PropertyInfo.GetIndexParameters
  id: GetIndexParameters
  parent: System.Reflection.PropertyInfo
  href: System.Reflection.PropertyInfo.yml
  name: GetIndexParameters()
  fullName: System.Reflection.PropertyInfo.GetIndexParameters()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 88
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: When overridden in a derived class, returns an array of all the index parameters for the property.
  syntax:
    content: public abstract ParameterInfo[] GetIndexParameters()
    content.vb: Public MustOverride Function GetIndexParameters As ParameterInfo()
    return:
      type: System.Reflection.ParameterInfo[]
      description: An array of type ParameterInfo containing the parameters for the indexes. If the property is not indexed, the array has 0 (zero) elements.
- uid: System.Reflection.PropertyInfo.GetValue(System.Object)
  id: GetValue(System.Object)
  parent: System.Reflection.PropertyInfo
  href: System.Reflection.PropertyInfo.yml
  name: GetValue(Object)
  fullName: System.Reflection.PropertyInfo.GetValue(System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 96
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns the property value of a specified object.
  syntax:
    content: public object GetValue(object obj)
    content.vb: Public Function GetValue(obj As Object) As Object
    parameters:
    - id: obj
      type: System.Object
      description: The object whose property value will be returned.
    return:
      type: System.Object
      description: The property value of the specified object.
- uid: System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])
  id: GetValue(System.Object,System.Object[])
  parent: System.Reflection.PropertyInfo
  href: System.Reflection.PropertyInfo.yml
  name: GetValue(Object, Object[])
  name.vb: GetValue(Object, Object())
  fullName: System.Reflection.PropertyInfo.GetValue(System.Object, System.Object[])
  fullName.vb: System.Reflection.PropertyInfo.GetValue(System.Object, System.Object())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 103
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns the property value of a specified object with optional index values for indexed properties.
  syntax:
    content: public virtual object GetValue(object obj, object[] index)
    content.vb: Public Overridable Function GetValue(obj As Object, index As Object()) As Object
    parameters:
    - id: obj
      type: System.Object
      description: The object whose property value will be returned.
    - id: index
      type: System.Object[]
      description: Optional index values for indexed properties. The indexes of indexed properties are zero-based. This value should be null for non-indexed properties.
    return:
      type: System.Object
      description: The property value of the specified object.
  exceptions:
  - type: System.ArgumentException
    description: The *index* array does not contain the type of arguments needed.-or- The property's get accessor is not found.
  - type: System.Reflection.TargetException
    description: In the .NET for Windows Store apps or the Portable Class Library, catch @'System.Exception' instead.The object does not match the target type, or a property is an instance property but *obj* is null.
  - type: System.Reflection.TargetParameterCountException
    description: The number of parameters in *index* does not match the number of parameters the indexed property takes.
  - type: System.MethodAccessException
    description: In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, @'System.MemberAccessException', instead.There was an illegal attempt to access a private or protected method inside a class.
  - type: System.Reflection.TargetInvocationException
    description: An error occurred while retrieving the property value. For example, an index value specified for an indexed property is out of range. The @'System.Exception.InnerException' property indicates the reason for the error.
- uid: System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)
  id: SetValue(System.Object,System.Object)
  parent: System.Reflection.PropertyInfo
  href: System.Reflection.PropertyInfo.yml
  name: SetValue(Object, Object)
  fullName: System.Reflection.PropertyInfo.SetValue(System.Object, System.Object)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 112
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Sets the property value of a specified object.
  syntax:
    content: public void SetValue(object obj, object value)
    content.vb: Public Sub SetValue(obj As Object, value As Object)
    parameters:
    - id: obj
      type: System.Object
      description: The object whose property value will be set.
    - id: value
      type: System.Object
      description: The new property value.
  exceptions:
  - type: System.ArgumentException
    description: The property's set accessor is not found. -or-*value* cannot be converted to the type of @'System.Reflection.PropertyInfo.PropertyType'.
  - type: System.Reflection.TargetException
    description: In the .NET for Windows Store apps or the Portable Class Library, catch @'System.Exception' instead.The type of *obj* does not match the target type, or a property is an instance property but *obj* is null.
  - type: System.MethodAccessException
    description: In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, @'System.MemberAccessException', instead. There was an illegal attempt to access a private or protected method inside a class.
  - type: System.Reflection.TargetInvocationException
    description: An error occurred while setting the property value. The @'System.Exception.InnerException' property indicates the reason for the error.
- uid: System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])
  id: SetValue(System.Object,System.Object,System.Object[])
  parent: System.Reflection.PropertyInfo
  href: System.Reflection.PropertyInfo.yml
  name: SetValue(Object, Object, Object[])
  name.vb: SetValue(Object, Object, Object())
  fullName: System.Reflection.PropertyInfo.SetValue(System.Object, System.Object, System.Object[])
  fullName.vb: System.Reflection.PropertyInfo.SetValue(System.Object, System.Object, System.Object())
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 119
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Sets the property value of a specified object with optional index values for index properties.
  syntax:
    content: public virtual void SetValue(object obj, object value, object[] index)
    content.vb: Public Overridable Sub SetValue(obj As Object, value As Object, index As Object())
    parameters:
    - id: obj
      type: System.Object
      description: The object whose property value will be set.
    - id: value
      type: System.Object
      description: The new property value.
    - id: index
      type: System.Object[]
      description: Optional index values for indexed properties. This value should be null for non-indexed properties.
  exceptions:
  - type: System.ArgumentException
    description: The *index* array does not contain the type of arguments needed.-or- The property's set accessor is not found. -or-*value* cannot be converted to the type of @'System.Reflection.PropertyInfo.PropertyType'.
  - type: System.Reflection.TargetException
    description: In the .NET for Windows Store apps or the Portable Class Library, catch @'System.Exception' instead.The object does not match the target type, or a property is an instance property but *obj* is null.
  - type: System.Reflection.TargetParameterCountException
    description: The number of parameters in *index* does not match the number of parameters the indexed property takes.
  - type: System.MethodAccessException
    description: In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, @'System.MemberAccessException', instead.There was an illegal attempt to access a private or protected method inside a class.
  - type: System.Reflection.TargetInvocationException
    description: An error occurred while setting the property value. For example, an index value specified for an indexed property is out of range. The @'System.Exception.InnerException' property indicates the reason for the error.
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.MemberInfo.yml
  name: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection.MemberInfo.CustomAttributes
  parent: System.Reflection.MemberInfo
  isExternal: false
  href: System.Reflection.MemberInfo.yml
  name: CustomAttributes
  fullName: System.Reflection.MemberInfo.CustomAttributes
- uid: System.Reflection.MemberInfo.DeclaringType
  parent: System.Reflection.MemberInfo
  isExternal: false
  href: System.Reflection.MemberInfo.yml
  name: DeclaringType
  fullName: System.Reflection.MemberInfo.DeclaringType
- uid: System.Reflection.MemberInfo.Module
  parent: System.Reflection.MemberInfo
  isExternal: false
  href: System.Reflection.MemberInfo.yml
  name: Module
  fullName: System.Reflection.MemberInfo.Module
- uid: System.Reflection.MemberInfo.Name
  parent: System.Reflection.MemberInfo
  isExternal: false
  href: System.Reflection.MemberInfo.yml
  name: Name
  fullName: System.Reflection.MemberInfo.Name
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Reflection.PropertyAttributes
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.PropertyAttributes.yml
  name: PropertyAttributes
  fullName: System.Reflection.PropertyAttributes
- uid: System.Boolean
  parent: System
  isExternal: false
  href: System.Boolean.yml
  name: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.MethodInfo.yml
  name: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: false
  href: System.Type.yml
  name: Type
  fullName: System.Type
- uid: System.Reflection.MemberInfo.Equals(System.Object)
  parent: System.Reflection.MemberInfo
  isExternal: true
  href: System.Reflection.MemberInfo.yml
  name: Equals(Object)
  fullName: System.Reflection.MemberInfo.Equals(System.Object)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.Equals(System.Object)
    name: Equals
    fullName: System.Reflection.MemberInfo.Equals
    href: System.Reflection.MemberInfo.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.Equals(System.Object)
    name: Equals
    fullName: System.Reflection.MemberInfo.Equals
    href: System.Reflection.MemberInfo.yml
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MemberInfo.GetHashCode
  parent: System.Reflection.MemberInfo
  isExternal: false
  href: System.Reflection.MemberInfo.yml
  name: GetHashCode()
  fullName: System.Reflection.MemberInfo.GetHashCode()
  spec.csharp:
  - uid: System.Reflection.MemberInfo.GetHashCode
    name: GetHashCode
    fullName: System.Reflection.MemberInfo.GetHashCode
    href: System.Reflection.MemberInfo.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.GetHashCode
    name: GetHashCode
    fullName: System.Reflection.MemberInfo.GetHashCode
    href: System.Reflection.MemberInfo.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  href: System.Int32.yml
  name: Int32
  fullName: System.Int32
- uid: System.Reflection.ParameterInfo[]
  isExternal: false
  href: System.Reflection.ParameterInfo.yml
  name: ParameterInfo[]
  name.vb: ParameterInfo()
  fullName: System.Reflection.ParameterInfo[]
  fullName.vb: System.Reflection.ParameterInfo()
  spec.csharp:
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    fullName: System.Reflection.ParameterInfo
    href: System.Reflection.ParameterInfo.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    fullName: System.Reflection.ParameterInfo
    href: System.Reflection.ParameterInfo.yml
  - name: ()
    fullName: ()
- uid: System.Object[]
  isExternal: true
  name: Object[]
  name.vb: Object()
  fullName: System.Object[]
  fullName.vb: System.Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  href: System.InvalidOperationException.yml
  name: InvalidOperationException
  fullName: System.InvalidOperationException
  summary: The exception that is thrown when a method call is invalid for the object's current state.
- uid: System.FormatException
  parent: System
  isExternal: false
  href: System.FormatException.yml
  name: FormatException
  fullName: System.FormatException
  summary: The exception that is thrown when the format of an argument is invalid, or when a composite format string is not well formed.
- uid: System.ArgumentException
  parent: System
  isExternal: false
  href: System.ArgumentException.yml
  name: ArgumentException
  fullName: System.ArgumentException
  summary: The exception that is thrown when one of the arguments provided to a method is not valid.
- uid: System.Reflection.TargetException
- uid: System.Reflection.TargetParameterCountException
  isExternal: false
  href: System.Reflection.TargetParameterCountException.yml
  name: TargetParameterCountException
  fullName: System.Reflection.TargetParameterCountException
  summary: The exception that is thrown when the number of parameters for an invocation does not match the number expected. This class cannot be inherited.
- uid: System.MethodAccessException
  isExternal: false
  href: System.MethodAccessException.yml
  name: MethodAccessException
  fullName: System.MethodAccessException
  summary: The exception that is thrown when there is an invalid attempt to access a method, such as accessing a private method from partially trusted code.
- uid: System.Reflection.TargetInvocationException
  isExternal: false
  href: System.Reflection.TargetInvocationException.yml
  name: TargetInvocationException
  fullName: System.Reflection.TargetInvocationException
  summary: The exception that is thrown by methods invoked through reflection. This class cannot be inherited.
