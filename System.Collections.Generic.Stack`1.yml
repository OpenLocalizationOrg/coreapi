items:
- uid: System.Collections.Generic.Stack`1
  id: Stack`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.Stack`1.#ctor
  - System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.Stack`1.#ctor(System.Int32)
  - System.Collections.Generic.Stack`1.Clear
  - System.Collections.Generic.Stack`1.Contains(`0)
  - System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.Stack`1.Count
  - System.Collections.Generic.Stack`1.GetEnumerator
  - System.Collections.Generic.Stack`1.Peek
  - System.Collections.Generic.Stack`1.Pop
  - System.Collections.Generic.Stack`1.Push(`0)
  - System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.Stack`1.ToArray
  - System.Collections.Generic.Stack`1.TrimExcess
  href: System.Collections.Generic.Stack`1.yml
  name: Stack<T>
  name.vb: Stack(Of T)
  fullName: System.Collections.Generic.Stack<T>
  fullName.vb: System.Collections.Generic.Stack(Of T)
  type: Class
  source:
    remote: &o0
      path: src/System.Collections/src/System/Collections/Generic/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 19
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Represents a variable size last-in-first-out (LIFO) collection of instances of the same specified type.
  syntax:
    content: 'public class Stack<T> : IReadOnlyCollection<T>, IEnumerable<T>, ICollection, IEnumerable'
    content.vb: Public Class Stack(Of T) Implements IReadOnlyCollection(Of T), IEnumerable(Of T), ICollection, IEnumerable
    typeParameters:
    - id: T
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Collections.Generic.Stack`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.Stack`1
  href: System.Collections.Generic.Stack`1.yml
  name: Stack()
  fullName: System.Collections.Generic.Stack<T>.Stack()
  fullName.vb: System.Collections.Generic.Stack(Of T).Stack()
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 33
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the @'System.Collections.Generic.Stack`1' class that is empty and has the default initial capacity.
  syntax:
    content: public Stack()
    content.vb: Public Sub New
- uid: System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.Stack`1
  href: System.Collections.Generic.Stack`1.yml
  name: Stack(IEnumerable<T>)
  name.vb: Stack(IEnumerable(Of T))
  fullName: System.Collections.Generic.Stack<T>.Stack(System.Collections.Generic.IEnumerable<T>)
  fullName.vb: System.Collections.Generic.Stack(Of T).Stack(System.Collections.Generic.IEnumerable(Of T))
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 52
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the @'System.Collections.Generic.Stack`1' class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.
  syntax:
    content: public Stack(IEnumerable<T> collection)
    content.vb: Public Sub New(collection As IEnumerable(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection to copy elements from.
  exceptions:
  - type: System.ArgumentNullException
    description: '*collection* is null.'
- uid: System.Collections.Generic.Stack`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Generic.Stack`1
  href: System.Collections.Generic.Stack`1.yml
  name: Stack(Int32)
  fullName: System.Collections.Generic.Stack<T>.Stack(System.Int32)
  fullName.vb: System.Collections.Generic.Stack(Of T).Stack(System.Int32)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 41
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the @'System.Collections.Generic.Stack`1' class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.
  syntax:
    content: public Stack(int capacity)
    content.vb: Public Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
      description: The initial number of elements that the @'System.Collections.Generic.Stack`1' can contain.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: '*capacity* is less than zero.'
- uid: System.Collections.Generic.Stack`1.Count
  id: Count
  parent: System.Collections.Generic.Stack`1
  href: System.Collections.Generic.Stack`1.yml
  name: Count
  fullName: System.Collections.Generic.Stack<T>.Count
  fullName.vb: System.Collections.Generic.Stack(Of T).Count
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 60
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Gets the number of elements contained in the @'System.Collections.Generic.Stack`1'.
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of elements contained in the @'System.Collections.Generic.Stack`1'.
- uid: System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Generic.Stack`1
  href: System.Collections.Generic.Stack`1.yml
  name: ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Generic.Stack<T>.System.Collections.ICollection.IsSynchronized
  fullName.vb: System.Collections.Generic.Stack(Of T).System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 66
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Gets a value indicating whether access to the @'System.Collections.ICollection' is synchronized (thread safe).
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
      description: true if access to the @'System.Collections.ICollection' is synchronized (thread safe); otherwise, false.  In the default implementation of @'System.Collections.Generic.Stack`1', this property always returns false.
- uid: System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  parent: System.Collections.Generic.Stack`1
  href: System.Collections.Generic.Stack`1.yml
  name: ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Generic.Stack<T>.System.Collections.ICollection.SyncRoot
  fullName.vb: System.Collections.Generic.Stack(Of T).System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 72
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Gets an object that can be used to synchronize access to the @'System.Collections.ICollection'.
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
      description: An object that can be used to synchronize access to the @'System.Collections.ICollection'.  In the default implementation of @'System.Collections.Generic.Stack`1', this property always returns the current instance.
- uid: System.Collections.Generic.Stack`1.Clear
  id: Clear
  parent: System.Collections.Generic.Stack`1
  href: System.Collections.Generic.Stack`1.yml
  name: Clear()
  fullName: System.Collections.Generic.Stack<T>.Clear()
  fullName.vb: System.Collections.Generic.Stack(Of T).Clear()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 86
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Removes all objects from the @'System.Collections.Generic.Stack`1'.
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
- uid: System.Collections.Generic.Stack`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.Stack`1
  href: System.Collections.Generic.Stack`1.yml
  name: Contains(T)
  fullName: System.Collections.Generic.Stack<T>.Contains(T)
  fullName.vb: System.Collections.Generic.Stack(Of T).Contains(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 94
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Determines whether an element is in the @'System.Collections.Generic.Stack`1'.
  syntax:
    content: public bool Contains(T item)
    content.vb: Public Function Contains(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: The object to locate in the @'System.Collections.Generic.Stack`1'. The value can be null for reference types.
    return:
      type: System.Boolean
      description: true if *item* is found in the @'System.Collections.Generic.Stack`1'; otherwise, false.
- uid: System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.Stack`1
  href: System.Collections.Generic.Stack`1.yml
  name: CopyTo(T[], Int32)
  name.vb: CopyTo(T(), Int32)
  fullName: System.Collections.Generic.Stack<T>.CopyTo(T[], System.Int32)
  fullName.vb: System.Collections.Generic.Stack(Of T).CopyTo(T(), System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 116
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Copies the @'System.Collections.Generic.Stack`1' to an existing one-dimensional @'System.Array', starting at the specified array index.
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex)
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional @'System.Array' that is the destination of the elements copied from @'System.Collections.Generic.Stack`1'. The @'System.Array' must have zero-based indexing.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in *array* at which copying begins.
  exceptions:
  - type: System.ArgumentNullException
    description: '*array* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*arrayIndex* is less than zero.'
  - type: System.ArgumentException
    description: The number of elements in the source @'System.Collections.Generic.Stack`1' is greater than the available space from *arrayIndex* to the end of the destination *array*.
- uid: System.Collections.Generic.Stack`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.Stack`1
  href: System.Collections.Generic.Stack`1.yml
  name: GetEnumerator()
  fullName: System.Collections.Generic.Stack<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.Stack(Of T).GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 188
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Returns an enumerator for the @'System.Collections.Generic.Stack`1'.
  syntax:
    content: public Stack<T>.Enumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As Stack(Of T).Enumerator
    return:
      type: System.Collections.Generic.Stack`1.Enumerator
      description: An @'System.Collections.Generic.Stack`1.Enumerator' for the @'System.Collections.Generic.Stack`1'.
- uid: System.Collections.Generic.Stack`1.Peek
  id: Peek
  parent: System.Collections.Generic.Stack`1
  href: System.Collections.Generic.Stack`1.yml
  name: Peek()
  fullName: System.Collections.Generic.Stack<T>.Peek()
  fullName.vb: System.Collections.Generic.Stack(Of T).Peek()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 218
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Returns the object at the top of the @'System.Collections.Generic.Stack`1' without removing it.
  syntax:
    content: public T Peek()
    content.vb: Public Function Peek As T
    return:
      type: '{T}'
      description: The object at the top of the @'System.Collections.Generic.Stack`1'.
  exceptions:
  - type: System.InvalidOperationException
    description: The @'System.Collections.Generic.Stack`1' is empty.
- uid: System.Collections.Generic.Stack`1.Pop
  id: Pop
  parent: System.Collections.Generic.Stack`1
  href: System.Collections.Generic.Stack`1.yml
  name: Pop()
  fullName: System.Collections.Generic.Stack<T>.Pop()
  fullName.vb: System.Collections.Generic.Stack(Of T).Pop()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 228
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Removes and returns the object at the top of the @'System.Collections.Generic.Stack`1'.
  syntax:
    content: public T Pop()
    content.vb: Public Function Pop As T
    return:
      type: '{T}'
      description: The object removed from the top of the @'System.Collections.Generic.Stack`1'.
  exceptions:
  - type: System.InvalidOperationException
    description: The @'System.Collections.Generic.Stack`1' is empty.
- uid: System.Collections.Generic.Stack`1.Push(`0)
  id: Push(`0)
  parent: System.Collections.Generic.Stack`1
  href: System.Collections.Generic.Stack`1.yml
  name: Push(T)
  fullName: System.Collections.Generic.Stack<T>.Push(T)
  fullName.vb: System.Collections.Generic.Stack(Of T).Push(T)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 241
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Inserts an object at the top of the @'System.Collections.Generic.Stack`1'.
  syntax:
    content: public void Push(T item)
    content.vb: Public Sub Push(item As T)
    parameters:
    - id: item
      type: '{T}'
      description: The object to push onto the @'System.Collections.Generic.Stack`1'. The value can be null for reference types.
- uid: System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Generic.Stack`1
  href: System.Collections.Generic.Stack`1.yml
  name: IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.Stack<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullName.vb: System.Collections.Generic.Stack(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 195
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through the collection.
  syntax:
    content: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    content.vb: Function System.Collections.Generic.IEnumerable<T>.GetEnumerator As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
      description: An @'System.Collections.Generic.IEnumerator`1' that can be used to iterate through the collection.
- uid: System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Generic.Stack`1
  href: System.Collections.Generic.Stack`1.yml
  name: ICollection.CopyTo(Array, Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Generic.Stack<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  fullName.vb: System.Collections.Generic.Stack(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 148
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Copies the elements of the @'System.Collections.ICollection' to an @'System.Array', starting at a particular @'System.Array' index.
  syntax:
    content: void ICollection.CopyTo(Array array, int arrayIndex)
    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, arrayIndex As Integer) Implements ICollection.CopyTo
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional @'System.Array' that is the destination of the elements copied from @'System.Collections.ICollection'. The @'System.Array' must have zero-based indexing.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in *array* at which copying begins.
  exceptions:
  - type: System.ArgumentNullException
    description: '*array* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*arrayIndex* is less than zero.'
  - type: System.ArgumentException
    description: '*array* is multidimensional.-or-*array* does not have zero-based indexing.-or-The number of elements in the source @''System.Collections.ICollection'' is greater than the available space from *arrayIndex* to the end of the destination *array*.-or-The type of the source @''System.Collections.ICollection'' cannot be cast automatically to the type of the destination *array*.'
- uid: System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.Stack`1
  href: System.Collections.Generic.Stack`1.yml
  name: IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.Stack<T>.System.Collections.IEnumerable.GetEnumerator()
  fullName.vb: System.Collections.Generic.Stack(Of T).System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 200
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through a collection.
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: An @'System.Collections.IEnumerator' that can be used to iterate through the collection.
- uid: System.Collections.Generic.Stack`1.ToArray
  id: ToArray
  parent: System.Collections.Generic.Stack`1
  href: System.Collections.Generic.Stack`1.yml
  name: ToArray()
  fullName: System.Collections.Generic.Stack<T>.ToArray()
  fullName.vb: System.Collections.Generic.Stack(Of T).ToArray()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 252
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Copies the @'System.Collections.Generic.Stack`1' to a new array.
  syntax:
    content: public T[] ToArray()
    content.vb: Public Function ToArray As T()
    return:
      type: '{T}[]'
      description: A new array containing copies of the elements of the @'System.Collections.Generic.Stack`1'.
- uid: System.Collections.Generic.Stack`1.TrimExcess
  id: TrimExcess
  parent: System.Collections.Generic.Stack`1
  href: System.Collections.Generic.Stack`1.yml
  name: TrimExcess()
  fullName: System.Collections.Generic.Stack<T>.TrimExcess()
  fullName.vb: System.Collections.Generic.Stack(Of T).TrimExcess()
  type: Method
  source:
    remote: *o0
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 205
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Sets the capacity to the actual number of elements in the @'System.Collections.Generic.Stack`1', if that number is less than 90 percent of current capacity.
  syntax:
    content: public void TrimExcess()
    content.vb: Public Sub TrimExcess
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: System.Collections.Generic.IEnumerable`1.yml
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.IEnumerable`1.yml
  name: IEnumerable<T>
  name.vb: IEnumerable(Of T)
  fullName: System.Collections.Generic.IEnumerable<T>
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  href: System.Int32.yml
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  href: System.Boolean.yml
  name: Boolean
  fullName: System.Boolean
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: '{T}[]'
  isExternal: false
  name: T[]
  name.vb: T()
  fullName: T[]
  fullName.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.Stack`1.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.Stack`1.Enumerator.yml
  name: Stack.Enumerator<>
  name.vb: Stack.Enumerator(Of )
  fullName: System.Collections.Generic.Stack.Enumerator<>
  fullName.vb: System.Collections.Generic.Stack.Enumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.Stack`1.Enumerator
    name: Stack.Enumerator
    fullName: System.Collections.Generic.Stack.Enumerator
    href: System.Collections.Generic.Stack`1.Enumerator.yml
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Stack`1.Enumerator
    name: Stack.Enumerator
    fullName: System.Collections.Generic.Stack.Enumerator
    href: System.Collections.Generic.Stack`1.Enumerator.yml
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  href: System.Collections.Generic.IEnumerator`1.yml
  name: IEnumerator<T>
  name.vb: IEnumerator(Of T)
  fullName: System.Collections.Generic.IEnumerator<T>
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    href: System.Collections.Generic.IEnumerator`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    href: System.Collections.Generic.IEnumerator`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.IEnumerator`1.yml
  name: IEnumerator<T>
  name.vb: IEnumerator(Of T)
  fullName: System.Collections.Generic.IEnumerator<T>
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    href: System.Collections.Generic.IEnumerator`1.yml
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    href: System.Collections.Generic.IEnumerator`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Array
  parent: System
  isExternal: false
  href: System.Array.yml
  name: Array
  fullName: System.Array
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  href: System.Collections.IEnumerator.yml
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.ArgumentNullException
  isExternal: false
  href: System.ArgumentNullException.yml
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  summary: The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  href: System.ArgumentOutOfRangeException.yml
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  summary: The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
- uid: System.ArgumentException
  parent: System
  isExternal: false
  href: System.ArgumentException.yml
  name: ArgumentException
  fullName: System.ArgumentException
  summary: The exception that is thrown when one of the arguments provided to a method is not valid.
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  href: System.InvalidOperationException.yml
  name: InvalidOperationException
  fullName: System.InvalidOperationException
  summary: The exception that is thrown when a method call is invalid for the object's current state.
