items:
- uid: System.Net.Sockets.Socket
  id: Socket
  parent: System.Net.Sockets
  children:
  - System.Net.Sockets.Socket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)
  - System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)
  - System.Net.Sockets.Socket.Accept
  - System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.AddressFamily
  - System.Net.Sockets.Socket.Available
  - System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
  - System.Net.Sockets.Socket.Blocking
  - System.Net.Sockets.Socket.CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - System.Net.Sockets.Socket.Connect(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.Socket.Connect(System.Net.IPAddress[],System.Int32)
  - System.Net.Sockets.Socket.Connect(System.String,System.Int32)
  - System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.Connected
  - System.Net.Sockets.Socket.Dispose
  - System.Net.Sockets.Socket.Dispose(System.Boolean)
  - System.Net.Sockets.Socket.DontFragment
  - System.Net.Sockets.Socket.DualMode
  - System.Net.Sockets.Socket.EnableBroadcast
  - System.Net.Sockets.Socket.ExclusiveAddressUse
  - System.Net.Sockets.Socket.Finalize
  - System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)
  - System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  - System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  - System.Net.Sockets.Socket.IOControl(System.Int32,System.Byte[],System.Byte[])
  - System.Net.Sockets.Socket.IOControl(System.Net.Sockets.IOControlCode,System.Byte[],System.Byte[])
  - System.Net.Sockets.Socket.IsBound
  - System.Net.Sockets.Socket.LingerState
  - System.Net.Sockets.Socket.Listen(System.Int32)
  - System.Net.Sockets.Socket.LocalEndPoint
  - System.Net.Sockets.Socket.MulticastLoopback
  - System.Net.Sockets.Socket.NoDelay
  - System.Net.Sockets.Socket.OSSupportsIPv4
  - System.Net.Sockets.Socket.OSSupportsIPv6
  - System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)
  - System.Net.Sockets.Socket.ProtocolType
  - System.Net.Sockets.Socket.Receive(System.Byte[])
  - System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  - System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  - System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  - System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.ReceiveBufferSize
  - System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  - System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  - System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.EndPoint@)
  - System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  - System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)
  - System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.ReceiveTimeout
  - System.Net.Sockets.Socket.RemoteEndPoint
  - System.Net.Sockets.Socket.Select(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Int32)
  - System.Net.Sockets.Socket.Send(System.Byte[])
  - System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  - System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Send(System.Byte[],System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  - System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  - System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.SendBufferSize
  - System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.SendTimeout
  - System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  - System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  - System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.EndPoint)
  - System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  - System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)
  - System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  - System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  - System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)
  - System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
  - System.Net.Sockets.Socket.SocketType
  - System.Net.Sockets.Socket.Ttl
  href: System.Net.Sockets.Socket.yml
  name: Socket
  fullName: System.Net.Sockets.Socket
  type: Class
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.Windows.cs
    startLine: 17
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Implements the Berkeley sockets interface.
  syntax:
    content: 'public class Socket : IDisposable'
    content.vb: Public Class Socket Inherits IDisposable
  inheritance:
  - System.Object
- uid: System.Net.Sockets.Socket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)
  id: '#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)'
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Socket(AddressFamily, SocketType, ProtocolType)
  fullName: System.Net.Sockets.Socket.Socket(System.Net.Sockets.AddressFamily, System.Net.Sockets.SocketType, System.Net.Sockets.ProtocolType)
  type: Constructor
  source:
    remote: &o1
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 157
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Initializes a new instance of the @'System.Net.Sockets.Socket' class using the specified address family, socket type and protocol.
  syntax:
    content: public Socket(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType)
    content.vb: Public Sub New(addressFamily As AddressFamily, socketType As SocketType, protocolType As ProtocolType)
    parameters:
    - id: addressFamily
      type: System.Net.Sockets.AddressFamily
      description: One of the @'System.Net.Sockets.AddressFamily' values.
    - id: socketType
      type: System.Net.Sockets.SocketType
      description: One of the @'System.Net.Sockets.SocketType' values.
    - id: protocolType
      type: System.Net.Sockets.ProtocolType
      description: One of the @'System.Net.Sockets.ProtocolType' values.
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: The combination of *addressFamily*, *socketType*, and *protocolType* results in an invalid socket.
- uid: System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)
  id: '#ctor(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)'
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Socket(SocketType, ProtocolType)
  fullName: System.Net.Sockets.Socket.Socket(System.Net.Sockets.SocketType, System.Net.Sockets.ProtocolType)
  type: Constructor
  source:
    remote: &o0
      path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 80
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Initializes a new instance of the @'System.Net.Sockets.Socket' class using the specified socket type and protocol.
  syntax:
    content: public Socket(SocketType socketType, ProtocolType protocolType)
    content.vb: Public Sub New(socketType As SocketType, protocolType As ProtocolType)
    parameters:
    - id: socketType
      type: System.Net.Sockets.SocketType
      description: One of the @'System.Net.Sockets.SocketType' values.
    - id: protocolType
      type: System.Net.Sockets.ProtocolType
      description: One of the @'System.Net.Sockets.ProtocolType' values.
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: The combination of  *socketType* and *protocolType* results in an invalid socket.
- uid: System.Net.Sockets.Socket.AddressFamily
  id: AddressFamily
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: AddressFamily
  fullName: System.Net.Sockets.Socket.AddressFamily
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 389
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets the address family of the @'System.Net.Sockets.Socket'.
  syntax:
    content: public AddressFamily AddressFamily { get; }
    content.vb: Public ReadOnly Property AddressFamily As AddressFamily
    parameters: []
    return:
      type: System.Net.Sockets.AddressFamily
      description: One of the @'System.Net.Sockets.AddressFamily' values.
- uid: System.Net.Sockets.Socket.Available
  id: Available
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Available
  fullName: System.Net.Sockets.Socket.Available
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 173
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets the amount of data that has been received from the network and is available to be read.
  syntax:
    content: public int Available { get; }
    content.vb: Public ReadOnly Property Available As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of bytes of data received from the network and available to be read.
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.Blocking
  id: Blocking
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Blocking
  fullName: System.Net.Sockets.Socket.Blocking
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 323
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets or sets a value that indicates whether the @'System.Net.Sockets.Socket' is in blocking mode.
  syntax:
    content: public bool Blocking { get; set; }
    content.vb: Public Property Blocking As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Net.Sockets.Socket' will block; otherwise, false. The default is true.
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.Connected
  id: Connected
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Connected
  fullName: System.Net.Sockets.Socket.Connected
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 367
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets a value that indicates whether a @'System.Net.Sockets.Socket' is connected to a remote host as of the last <see cref="Overload:System.Net.Sockets.Socket.Send" /> or <see cref="Overload:System.Net.Sockets.Socket.Receive" /> operation.
  syntax:
    content: public bool Connected { get; }
    content.vb: Public ReadOnly Property Connected As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Net.Sockets.Socket' was connected to a remote resource as of the most recent operation; otherwise, false.
- uid: System.Net.Sockets.Socket.DontFragment
  id: DontFragment
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: DontFragment
  fullName: System.Net.Sockets.Socket.DontFragment
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 583
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets or sets a @'System.Boolean' value that specifies whether the @'System.Net.Sockets.Socket' allows Internet Protocol (IP) datagrams to be fragmented.
  syntax:
    content: public bool DontFragment { get; set; }
    content.vb: Public Property DontFragment As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Net.Sockets.Socket' allows datagram fragmentation; otherwise, false. The default is true.
  exceptions:
  - type: System.NotSupportedException
    description: This property can be set only for sockets in the @'System.Net.Sockets.AddressFamily.InterNetwork' or @'System.Net.Sockets.AddressFamily.InterNetworkV6' families.
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.DualMode
  id: DualMode
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: DualMode
  fullName: System.Net.Sockets.Socket.DualMode
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 662
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets or sets a @'System.Boolean' value that specifies whether the @'System.Net.Sockets.Socket' is a dual-mode socket used for both IPv4 and IPv6.
  syntax:
    content: public bool DualMode { get; set; }
    content.vb: Public Property DualMode As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: Returns @'System.Boolean'.true if the @'System.Net.Sockets.Socket' is a  dual-mode socket; otherwise, false. The default is false.
- uid: System.Net.Sockets.Socket.EnableBroadcast
  id: EnableBroadcast
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: EnableBroadcast
  fullName: System.Net.Sockets.Socket.EnableBroadcast
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 646
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets or sets a @'System.Boolean' value that specifies whether the @'System.Net.Sockets.Socket' can send or receive broadcast packets.
  syntax:
    content: public bool EnableBroadcast { get; set; }
    content.vb: Public Property EnableBroadcast As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Net.Sockets.Socket' allows broadcast packets; otherwise, false. The default is false.
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: This option is valid for a datagram socket only.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.ExclusiveAddressUse
  id: ExclusiveAddressUse
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: ExclusiveAddressUse
  fullName: System.Net.Sockets.Socket.ExclusiveAddressUse
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 423
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets or sets a @'System.Boolean' value that specifies whether the @'System.Net.Sockets.Socket' allows only one process to bind to a port.
  syntax:
    content: public bool ExclusiveAddressUse { get; set; }
    content.vb: Public Property ExclusiveAddressUse As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "true if the @'System.Net.Sockets.Socket' allows only one socket to bind to a specific port; otherwise, false. The default is true for Windows Server 2003 and Windows XP Service Pack 2, and false for all other versions."
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.InvalidOperationException
    description: '@''System.Net.Sockets.Socket.Bind(System.Net.EndPoint)'' has been called for this @''System.Net.Sockets.Socket''.'
- uid: System.Net.Sockets.Socket.IsBound
  id: IsBound
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: IsBound
  fullName: System.Net.Sockets.Socket.IsBound
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 415
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets a value that indicates whether the @'System.Net.Sockets.Socket' is bound to a specific local port.
  syntax:
    content: public bool IsBound { get; }
    content.vb: Public ReadOnly Property IsBound As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Net.Sockets.Socket' is bound to a local port; otherwise, false.
- uid: System.Net.Sockets.Socket.LingerState
  id: LingerState
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: LingerState
  fullName: System.Net.Sockets.Socket.LingerState
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 517
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets or sets a value that specifies whether the @'System.Net.Sockets.Socket' will delay closing a socket in an attempt to send all pending data.
  syntax:
    content: public LingerOption LingerState { get; set; }
    content.vb: Public Property LingerState As LingerOption
    parameters: []
    return:
      type: System.Net.Sockets.LingerOption
      description: A @'System.Net.Sockets.LingerOption' that specifies how to linger while closing a socket.
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.LocalEndPoint
  id: LocalEndPoint
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: LocalEndPoint
  fullName: System.Net.Sockets.Socket.LocalEndPoint
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 210
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets the local endpoint.
  syntax:
    content: public EndPoint LocalEndPoint { get; }
    content.vb: Public ReadOnly Property LocalEndPoint As EndPoint
    parameters: []
    return:
      type: System.Net.EndPoint
      description: The @'System.Net.EndPoint' that the @'System.Net.Sockets.Socket' is using for communications.
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.MulticastLoopback
  id: MulticastLoopback
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: MulticastLoopback
  fullName: System.Net.Sockets.Socket.MulticastLoopback
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 610
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets or sets a value that specifies whether outgoing multicast packets are delivered to the sending application.
  syntax:
    content: public bool MulticastLoopback { get; set; }
    content.vb: Public Property MulticastLoopback As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Net.Sockets.Socket' receives outgoing multicast packets; otherwise, false.
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.NoDelay
  id: NoDelay
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: NoDelay
  fullName: System.Net.Sockets.Socket.NoDelay
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 529
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets or sets a @'System.Boolean' value that specifies whether the stream @'System.Net.Sockets.Socket' is using the Nagle algorithm.
  syntax:
    content: public bool NoDelay { get; set; }
    content.vb: Public Property NoDelay As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: false if the @'System.Net.Sockets.Socket' uses the Nagle algorithm; otherwise, true. The default is false.
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the @'System.Net.Sockets.Socket'. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.OSSupportsIPv4
  id: OSSupportsIPv4
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: OSSupportsIPv4
  fullName: System.Net.Sockets.Socket.OSSupportsIPv4
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 153
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Indicates whether the underlying operating system and network adaptors support Internet Protocol version 4 (IPv4).
  syntax:
    content: public static bool OSSupportsIPv4 { get; }
    content.vb: Public Shared ReadOnly Property OSSupportsIPv4 As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the operating system and network adaptors support the IPv4 protocol; otherwise, false.
- uid: System.Net.Sockets.Socket.OSSupportsIPv6
  id: OSSupportsIPv6
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: OSSupportsIPv6
  fullName: System.Net.Sockets.Socket.OSSupportsIPv6
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 162
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Indicates whether the underlying operating system and network adaptors support Internet Protocol version 6 (IPv6).
  syntax:
    content: public static bool OSSupportsIPv6 { get; }
    content.vb: Public Shared ReadOnly Property OSSupportsIPv6 As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the operating system and network adaptors support the IPv6 protocol; otherwise, false.
- uid: System.Net.Sockets.Socket.ProtocolType
  id: ProtocolType
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: ProtocolType
  fullName: System.Net.Sockets.Socket.ProtocolType
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 407
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets the protocol type of the @'System.Net.Sockets.Socket'.
  syntax:
    content: public ProtocolType ProtocolType { get; }
    content.vb: Public ReadOnly Property ProtocolType As ProtocolType
    parameters: []
    return:
      type: System.Net.Sockets.ProtocolType
      description: One of the @'System.Net.Sockets.ProtocolType' values.
- uid: System.Net.Sockets.Socket.ReceiveBufferSize
  id: ReceiveBufferSize
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: ReceiveBufferSize
  fullName: System.Net.Sockets.Socket.ReceiveBufferSize
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 439
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets or sets a value that specifies the size of the receive buffer of the @'System.Net.Sockets.Socket'.
  syntax:
    content: public int ReceiveBufferSize { get; set; }
    content.vb: Public Property ReceiveBufferSize As Integer
    parameters: []
    return:
      type: System.Int32
      description: An @'System.Int32' that contains the size, in bytes, of the receive buffer. The default is 8192.
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.ArgumentOutOfRangeException
    description: The value specified for a set operation is less than 0.
- uid: System.Net.Sockets.Socket.ReceiveTimeout
  id: ReceiveTimeout
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: ReceiveTimeout
  fullName: System.Net.Sockets.Socket.ReceiveTimeout
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 474
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets or sets a value that specifies the amount of time after which a synchronous <see cref="Overload:System.Net.Sockets.Socket.Receive" /> call will time out.
  syntax:
    content: public int ReceiveTimeout { get; set; }
    content.vb: Public Property ReceiveTimeout As Integer
    parameters: []
    return:
      type: System.Int32
      description: The time-out value, in milliseconds. The default value is 0, which indicates an infinite time-out period. Specifying -1 also indicates an infinite time-out period.
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.ArgumentOutOfRangeException
    description: The value specified for a set operation is less than -1.
- uid: System.Net.Sockets.Socket.RemoteEndPoint
  id: RemoteEndPoint
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: RemoteEndPoint
  fullName: System.Net.Sockets.Socket.RemoteEndPoint
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 257
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets the remote endpoint.
  syntax:
    content: public EndPoint RemoteEndPoint { get; }
    content.vb: Public ReadOnly Property RemoteEndPoint As EndPoint
    parameters: []
    return:
      type: System.Net.EndPoint
      description: The @'System.Net.EndPoint' with which the @'System.Net.Sockets.Socket' is communicating.
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.SendBufferSize
  id: SendBufferSize
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: SendBufferSize
  fullName: System.Net.Sockets.Socket.SendBufferSize
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 456
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets or sets a value that specifies the size of the send buffer of the @'System.Net.Sockets.Socket'.
  syntax:
    content: public int SendBufferSize { get; set; }
    content.vb: Public Property SendBufferSize As Integer
    parameters: []
    return:
      type: System.Int32
      description: An @'System.Int32' that contains the size, in bytes, of the send buffer. The default is 8192.
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.ArgumentOutOfRangeException
    description: The value specified for a set operation is less than 0.
- uid: System.Net.Sockets.Socket.SendTimeout
  id: SendTimeout
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: SendTimeout
  fullName: System.Net.Sockets.Socket.SendTimeout
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 495
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets or sets a value that specifies the amount of time after which a synchronous <see cref="Overload:System.Net.Sockets.Socket.Send" /> call will time out.
  syntax:
    content: public int SendTimeout { get; set; }
    content.vb: Public Property SendTimeout As Integer
    parameters: []
    return:
      type: System.Int32
      description: The time-out value, in milliseconds. If you set the property with a value between 1 and 499, the value will be changed to 500. The default value is 0, which indicates an infinite time-out period. Specifying -1 also indicates an infinite time-out period.
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.ArgumentOutOfRangeException
    description: The value specified for a set operation is less than -1.
- uid: System.Net.Sockets.Socket.SocketType
  id: SocketType
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: SocketType
  fullName: System.Net.Sockets.Socket.SocketType
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 398
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets the type of the @'System.Net.Sockets.Socket'.
  syntax:
    content: public SocketType SocketType { get; }
    content.vb: Public ReadOnly Property SocketType As SocketType
    parameters: []
    return:
      type: System.Net.Sockets.SocketType
      description: One of the @'System.Net.Sockets.SocketType' values.
- uid: System.Net.Sockets.Socket.Ttl
  id: Ttl
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Ttl
  fullName: System.Net.Sockets.Socket.Ttl
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 541
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets or sets a value that specifies the Time To Live (TTL) value of Internet Protocol (IP) packets sent by the @'System.Net.Sockets.Socket'.
  syntax:
    content: public short Ttl { get; set; }
    content.vb: Public Property Ttl As Short
    parameters: []
    return:
      type: System.Int16
      description: The TTL value.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: The TTL value can't be set to a negative number.
  - type: System.NotSupportedException
    description: This property can be set only for sockets in the @'System.Net.Sockets.AddressFamily.InterNetwork' or @'System.Net.Sockets.AddressFamily.InterNetworkV6' families.
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. This error is also returned when an attempt was made to set TTL to a value higher than 255.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.Accept
  id: Accept
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Accept()
  fullName: System.Net.Sockets.Socket.Accept()
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 1138
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Creates a new @'System.Net.Sockets.Socket' for a newly created connection.
  syntax:
    content: public Socket Accept()
    content.vb: Public Function Accept As Socket
    return:
      type: System.Net.Sockets.Socket
      description: A @'System.Net.Sockets.Socket' for a newly created connection.
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.InvalidOperationException
    description: The accepting socket is not listening for connections. You must call @'System.Net.Sockets.Socket.Bind(System.Net.EndPoint)' and @'System.Net.Sockets.Socket.Listen(System.Int32)' before calling @'System.Net.Sockets.Socket.Accept'.
- uid: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: AcceptAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 4290
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Begins an asynchronous operation to accept an incoming connection attempt.
  syntax:
    content: public bool AcceptAsync(SocketAsyncEventArgs e)
    content.vb: Public Function AcceptAsync(e As SocketAsyncEventArgs) As Boolean
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: The @'System.Net.Sockets.SocketAsyncEventArgs' object to use for this asynchronous socket operation.
    return:
      type: System.Boolean
      description: Returns true if the I/O operation is pending. The @'System.Net.Sockets.SocketAsyncEventArgs.Completed' event on the *e* parameter will be raised upon completion of the operation.Returns false if the I/O operation completed synchronously. The @'System.Net.Sockets.SocketAsyncEventArgs.Completed' event on the *e* parameter will not be raised and the *e* object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.
  exceptions:
  - type: System.ArgumentException
    description: An argument is not valid. This exception occurs if the buffer provided is not large enough. The buffer must be at least 2 * (sizeof(SOCKADDR_STORAGE + 16) bytes. This exception also occurs if multiple buffers are specified, the @'System.Net.Sockets.SocketAsyncEventArgs.BufferList' property is not null.
  - type: System.ArgumentOutOfRangeException
    description: An argument is out of range. The exception occurs if the @'System.Net.Sockets.SocketAsyncEventArgs.Count' is less than 0.
  - type: System.InvalidOperationException
    description: An invalid operation was requested. This exception occurs if the accepting @'System.Net.Sockets.Socket' is not listening for connections or the accepted socket is bound. You must call the @'System.Net.Sockets.Socket.Bind(System.Net.EndPoint)' and @'System.Net.Sockets.Socket.Listen(System.Int32)' method before calling the @'System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)' method.This exception also occurs if the socket is already connected or a socket operation was already in progress using the specified *e* parameter.
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.NotSupportedException
    description: Windows XP or later is required for this method.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
  id: Bind(System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Bind(EndPoint)
  fullName: System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 184
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Associates a @'System.Net.Sockets.Socket' with a local endpoint.
  syntax:
    content: public void Bind(EndPoint localEP)
    content.vb: Public Sub Bind(localEP As EndPoint)
    parameters:
    - id: localEP
      type: System.Net.EndPoint
      description: The local @'System.Net.EndPoint' to associate with the @'System.Net.Sockets.Socket'.
  exceptions:
  - type: System.ArgumentNullException
    description: '*localEP* is null.'
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.Security.SecurityException
    description: A caller higher in the call stack does not have permission for the requested operation.
- uid: System.Net.Sockets.Socket.CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: CancelConnectAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 4550
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Cancels an asynchronous request for a remote host connection.
  syntax:
    content: public static void CancelConnectAsync(SocketAsyncEventArgs e)
    content.vb: Public Shared Sub CancelConnectAsync(e As SocketAsyncEventArgs)
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: The @'System.Net.Sockets.SocketAsyncEventArgs' object used to request the connection to the remote host by calling one of the @'System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)' methods.
  exceptions:
  - type: System.ArgumentNullException
    description: The *e* parameter cannot be null and the @'System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint' cannot be null.
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.Security.SecurityException
    description: A caller higher in the call stack does not have permission for the requested operation.
- uid: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  id: Connect(System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Connect(EndPoint)
  fullName: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 186
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Establishes a connection to a remote host.
  syntax:
    content: public void Connect(EndPoint remoteEP)
    content.vb: Public Sub Connect(remoteEP As EndPoint)
    parameters:
    - id: remoteEP
      type: System.Net.EndPoint
      description: An @'System.Net.EndPoint' that represents the remote device.
  exceptions:
  - type: System.ArgumentNullException
    description: '*remoteEP* is null.'
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.Security.SecurityException
    description: A caller higher in the call stack does not have permission for the requested operation.
  - type: System.InvalidOperationException
    description: The @'System.Net.Sockets.Socket' is @'System.Net.Sockets.Socket.Listen(System.Int32)'ing.
- uid: System.Net.Sockets.Socket.Connect(System.Net.IPAddress,System.Int32)
  id: Connect(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Connect(IPAddress, Int32)
  fullName: System.Net.Sockets.Socket.Connect(System.Net.IPAddress, System.Int32)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 187
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Establishes a connection to a remote host. The host is specified by an IP address and a port number.
  syntax:
    content: public void Connect(IPAddress address, int port)
    content.vb: Public Sub Connect(address As IPAddress, port As Integer)
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: The IP address of the remote host.
    - id: port
      type: System.Int32
      description: The port number of the remote host.
  exceptions:
  - type: System.ArgumentNullException
    description: '*address* is null.'
  - type: System.ArgumentOutOfRangeException
    description: The port number is not valid.
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.NotSupportedException
    description: This method is valid for sockets in the @'System.Net.Sockets.AddressFamily.InterNetwork' or @'System.Net.Sockets.AddressFamily.InterNetworkV6' families.
  - type: System.ArgumentException
    description: The length of *address* is zero.
  - type: System.InvalidOperationException
    description: The @'System.Net.Sockets.Socket' is @'System.Net.Sockets.Socket.Listen(System.Int32)'ing.
- uid: System.Net.Sockets.Socket.Connect(System.Net.IPAddress[],System.Int32)
  id: Connect(System.Net.IPAddress[],System.Int32)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Connect(IPAddress[], Int32)
  name.vb: Connect(IPAddress(), Int32)
  fullName: System.Net.Sockets.Socket.Connect(System.Net.IPAddress[], System.Int32)
  fullName.vb: System.Net.Sockets.Socket.Connect(System.Net.IPAddress(), System.Int32)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 188
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Establishes a connection to a remote host. The host is specified by an array of IP addresses and a port number.
  syntax:
    content: public void Connect(IPAddress[] addresses, int port)
    content.vb: Public Sub Connect(addresses As IPAddress(), port As Integer)
    parameters:
    - id: addresses
      type: System.Net.IPAddress[]
      description: The IP addresses of the remote host.
    - id: port
      type: System.Int32
      description: The port number of the remote host.
  exceptions:
  - type: System.ArgumentNullException
    description: '*addresses* is null.'
  - type: System.ArgumentOutOfRangeException
    description: The port number is not valid.
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.NotSupportedException
    description: This method is valid for sockets in the @'System.Net.Sockets.AddressFamily.InterNetwork' or @'System.Net.Sockets.AddressFamily.InterNetworkV6' families.
  - type: System.ArgumentException
    description: The length of *address* is zero.
  - type: System.InvalidOperationException
    description: The @'System.Net.Sockets.Socket' is @'System.Net.Sockets.Socket.Listen(System.Int32)'ing.
- uid: System.Net.Sockets.Socket.Connect(System.String,System.Int32)
  id: Connect(System.String,System.Int32)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Connect(String, Int32)
  fullName: System.Net.Sockets.Socket.Connect(System.String, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 923
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Establishes a connection to a remote host. The host is specified by a host name and a port number.
  syntax:
    content: public void Connect(string host, int port)
    content.vb: Public Sub Connect(host As String, port As Integer)
    parameters:
    - id: host
      type: System.String
      description: The name of the remote host.
    - id: port
      type: System.Int32
      description: The port number of the remote host.
  exceptions:
  - type: System.ArgumentNullException
    description: '*host* is null.'
  - type: System.ArgumentOutOfRangeException
    description: The port number is not valid.
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.NotSupportedException
    description: This method is valid for sockets in the @'System.Net.Sockets.AddressFamily.InterNetwork' or @'System.Net.Sockets.AddressFamily.InterNetworkV6' families.
  - type: System.InvalidOperationException
    description: The @'System.Net.Sockets.Socket' is @'System.Net.Sockets.Socket.Listen(System.Int32)'ing.
- uid: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: ConnectAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 4363
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Begins an asynchronous request for a connection to a remote host.
  syntax:
    content: public bool ConnectAsync(SocketAsyncEventArgs e)
    content.vb: Public Function ConnectAsync(e As SocketAsyncEventArgs) As Boolean
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: The @'System.Net.Sockets.SocketAsyncEventArgs' object to use for this asynchronous socket operation.
    return:
      type: System.Boolean
      description: Returns true if the I/O operation is pending. The @'System.Net.Sockets.SocketAsyncEventArgs.Completed' event on the *e* parameter will be raised upon completion of the operation. Returns false if the I/O operation completed synchronously. In this case, The @'System.Net.Sockets.SocketAsyncEventArgs.Completed' event on the *e* parameter will not be raised and the *e* object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.
  exceptions:
  - type: System.ArgumentException
    description: An argument is not valid. This exception occurs if multiple buffers are specified, the @'System.Net.Sockets.SocketAsyncEventArgs.BufferList' property is not null.
  - type: System.ArgumentNullException
    description: The *e* parameter cannot be null and the @'System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint' cannot be null.
  - type: System.InvalidOperationException
    description: The @'System.Net.Sockets.Socket' is listening or a socket operation was already in progress using the @'System.Net.Sockets.SocketAsyncEventArgs' object specified in the *e* parameter.
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.NotSupportedException
    description: Windows XP or later is required for this method. This exception also occurs if the local endpoint and the @'System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint' are not the same address family.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.Security.SecurityException
    description: A caller higher in the call stack does not have permission for the requested operation.
- uid: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)
  id: ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: ConnectAsync(SocketType, ProtocolType, SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType, System.Net.Sockets.ProtocolType, System.Net.Sockets.SocketAsyncEventArgs)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 4486
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Begins an asynchronous request for a connection to a remote host.
  syntax:
    content: public static bool ConnectAsync(SocketType socketType, ProtocolType protocolType, SocketAsyncEventArgs e)
    content.vb: Public Shared Function ConnectAsync(socketType As SocketType, protocolType As ProtocolType, e As SocketAsyncEventArgs) As Boolean
    parameters:
    - id: socketType
      type: System.Net.Sockets.SocketType
      description: One of the @'System.Net.Sockets.SocketType' values.
    - id: protocolType
      type: System.Net.Sockets.ProtocolType
      description: One of the @'System.Net.Sockets.ProtocolType' values.
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: The @'System.Net.Sockets.SocketAsyncEventArgs' object to use for this asynchronous socket operation.
    return:
      type: System.Boolean
      description: Returns true if the I/O operation is pending. The @'System.Net.Sockets.SocketAsyncEventArgs.Completed' event on the *e* parameter will be raised upon completion of the operation. Returns false if the I/O operation completed synchronously. In this case, The @'System.Net.Sockets.SocketAsyncEventArgs.Completed' event on the *e* parameter will not be raised and the *e* object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.
  exceptions:
  - type: System.ArgumentException
    description: An argument is not valid. This exception occurs if multiple buffers are specified, the @'System.Net.Sockets.SocketAsyncEventArgs.BufferList' property is not null.
  - type: System.ArgumentNullException
    description: The *e* parameter cannot be null and the @'System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint' cannot be null.
  - type: System.InvalidOperationException
    description: The @'System.Net.Sockets.Socket' is listening or a socket operation was already in progress using the @'System.Net.Sockets.SocketAsyncEventArgs' object specified in the *e* parameter.
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.NotSupportedException
    description: Windows XP or later is required for this method. This exception also occurs if the local endpoint and the @'System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint' are not the same address family.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.Security.SecurityException
    description: A caller higher in the call stack does not have permission for the requested operation.
- uid: System.Net.Sockets.Socket.Dispose
  id: Dispose
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Dispose()
  fullName: System.Net.Sockets.Socket.Dispose()
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 5377
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Releases all resources used by the current instance of the @'System.Net.Sockets.Socket' class.
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
- uid: System.Net.Sockets.Socket.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Dispose(Boolean)
  fullName: System.Net.Sockets.Socket.Dispose(System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 5206
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Releases the unmanaged resources used by the @'System.Net.Sockets.Socket', and optionally disposes of the managed resources.
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: true to release both managed and unmanaged resources; false to releases only unmanaged resources.
- uid: System.Net.Sockets.Socket.Finalize
  id: Finalize
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Finalize()
  fullName: System.Net.Sockets.Socket.Finalize()
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 5396
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Frees resources used by the @'System.Net.Sockets.Socket' class.
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
- uid: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)
  id: GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: GetSocketOption(SocketOptionLevel, SocketOptionName)
  fullName: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel, System.Net.Sockets.SocketOptionName)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 2133
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Returns the value of a specified @'System.Net.Sockets.Socket' option, represented as an object.
  syntax:
    content: public object GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName)
    content.vb: Public Function GetSocketOption(optionLevel As SocketOptionLevel, optionName As SocketOptionName) As Object
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: One of the @'System.Net.Sockets.SocketOptionLevel' values.
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: One of the @'System.Net.Sockets.SocketOptionName' values.
    return:
      type: System.Object
      description: An object that represents the value of the option. When the *optionName* parameter is set to @'System.Net.Sockets.SocketOptionName.Linger' the return value is an instance of the @'System.Net.Sockets.LingerOption' class. When *optionName* is set to @'System.Net.Sockets.SocketOptionName.AddMembership' or @'System.Net.Sockets.SocketOptionName.DropMembership', the return value is an instance of the @'System.Net.Sockets.MulticastOption' class. When *optionName* is any other value, the return value is an integer.
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.-or-*optionName* was set to the unsupported value @'System.Net.Sockets.SocketOptionName.MaxConnections'.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  id: GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: GetSocketOption(SocketOptionLevel, SocketOptionName, Byte[])
  name.vb: GetSocketOption(SocketOptionLevel, SocketOptionName, Byte())
  fullName: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel, System.Net.Sockets.SocketOptionName, System.Byte[])
  fullName.vb: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel, System.Net.Sockets.SocketOptionName, System.Byte())
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 2183
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Returns the specified @'System.Net.Sockets.Socket' option setting, represented as a byte array.
  syntax:
    content: public void GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, byte[] optionValue)
    content.vb: Public Sub GetSocketOption(optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Byte())
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: One of the @'System.Net.Sockets.SocketOptionLevel' values.
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: One of the @'System.Net.Sockets.SocketOptionName' values.
    - id: optionValue
      type: System.Byte[]
      description: An array of type @'System.Byte' that is to receive the option setting.
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information. - or -In .NET Compact Framework applications, the Windows CE default buffer space is set to 32768 bytes. You can change the per socket buffer space by calling .
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  id: GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: GetSocketOption(SocketOptionLevel, SocketOptionName, Int32)
  fullName: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel, System.Net.Sockets.SocketOptionName, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 2219
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Returns the value of the specified @'System.Net.Sockets.Socket' option in an array.
  syntax:
    content: public byte[] GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionLength)
    content.vb: Public Function GetSocketOption(optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionLength As Integer) As Byte()
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: One of the @'System.Net.Sockets.SocketOptionLevel' values.
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: One of the @'System.Net.Sockets.SocketOptionName' values.
    - id: optionLength
      type: System.Int32
      description: The length, in bytes, of the expected return value.
    return:
      type: System.Byte[]
      description: An array of type @'System.Byte' that contains the value of the socket option.
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information. - or -In .NET Compact Framework applications, the Windows CE default buffer space is set to 32768 bytes. You can change the per socket buffer space by calling .
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.IOControl(System.Int32,System.Byte[],System.Byte[])
  id: IOControl(System.Int32,System.Byte[],System.Byte[])
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: IOControl(Int32, Byte[], Byte[])
  name.vb: IOControl(Int32, Byte(), Byte())
  fullName: System.Net.Sockets.Socket.IOControl(System.Int32, System.Byte[], System.Byte[])
  fullName.vb: System.Net.Sockets.Socket.IOControl(System.Int32, System.Byte(), System.Byte())
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 1944
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Sets low-level operating modes for the @'System.Net.Sockets.Socket' using numerical control codes.
  syntax:
    content: public int IOControl(int ioControlCode, byte[] optionInValue, byte[] optionOutValue)
    content.vb: Public Function IOControl(ioControlCode As Integer, optionInValue As Byte(), optionOutValue As Byte()) As Integer
    parameters:
    - id: ioControlCode
      type: System.Int32
      description: An @'System.Int32' value that specifies the control code of the operation to perform.
    - id: optionInValue
      type: System.Byte[]
      description: A @'System.Byte' array that contains the input data required by the operation.
    - id: optionOutValue
      type: System.Byte[]
      description: A @'System.Byte' array that contains the output data returned by the operation.
    return:
      type: System.Int32
      description: The number of bytes in the *optionOutValue* parameter.
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.InvalidOperationException
    description: An attempt was made to change the blocking mode without using the @'System.Net.Sockets.Socket.Blocking' property.
  - type: System.Security.SecurityException
    description: A caller in the call stack does not have the required permissions.
- uid: System.Net.Sockets.Socket.IOControl(System.Net.Sockets.IOControlCode,System.Byte[],System.Byte[])
  id: IOControl(System.Net.Sockets.IOControlCode,System.Byte[],System.Byte[])
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: IOControl(IOControlCode, Byte[], Byte[])
  name.vb: IOControl(IOControlCode, Byte(), Byte())
  fullName: System.Net.Sockets.Socket.IOControl(System.Net.Sockets.IOControlCode, System.Byte[], System.Byte[])
  fullName.vb: System.Net.Sockets.Socket.IOControl(System.Net.Sockets.IOControlCode, System.Byte(), System.Byte())
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 1977
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Sets low-level operating modes for the @'System.Net.Sockets.Socket' using the @'System.Net.Sockets.IOControlCode' enumeration to specify control codes.
  syntax:
    content: public int IOControl(IOControlCode ioControlCode, byte[] optionInValue, byte[] optionOutValue)
    content.vb: Public Function IOControl(ioControlCode As IOControlCode, optionInValue As Byte(), optionOutValue As Byte()) As Integer
    parameters:
    - id: ioControlCode
      type: System.Net.Sockets.IOControlCode
      description: A @'System.Net.Sockets.IOControlCode' value that specifies the control code of the operation to perform.
    - id: optionInValue
      type: System.Byte[]
      description: An array of type @'System.Byte' that contains the input data required by the operation.
    - id: optionOutValue
      type: System.Byte[]
      description: An array of type @'System.Byte' that contains the output data returned by the operation.
    return:
      type: System.Int32
      description: The number of bytes in the *optionOutValue* parameter.
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.InvalidOperationException
    description: An attempt was made to change the blocking mode without using the @'System.Net.Sockets.Socket.Blocking' property.
- uid: System.Net.Sockets.Socket.Listen(System.Int32)
  id: Listen(System.Int32)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Listen(Int32)
  fullName: System.Net.Sockets.Socket.Listen(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 1084
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Places a @'System.Net.Sockets.Socket' in a listening state.
  syntax:
    content: public void Listen(int backlog)
    content.vb: Public Sub Listen(backlog As Integer)
    parameters:
    - id: backlog
      type: System.Int32
      description: The maximum length of the pending connections queue.
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)
  id: Poll(System.Int32,System.Net.Sockets.SelectMode)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Poll(Int32, SelectMode)
  fullName: System.Net.Sockets.Socket.Poll(System.Int32, System.Net.Sockets.SelectMode)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 2266
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Determines the status of the @'System.Net.Sockets.Socket'.
  syntax:
    content: public bool Poll(int microSeconds, SelectMode mode)
    content.vb: Public Function Poll(microSeconds As Integer, mode As SelectMode) As Boolean
    parameters:
    - id: microSeconds
      type: System.Int32
      description: The time to wait for a response, in microseconds.
    - id: mode
      type: System.Net.Sockets.SelectMode
      description: One of the @'System.Net.Sockets.SelectMode' values.
    return:
      type: System.Boolean
      description: The status of the @'System.Net.Sockets.Socket' based on the polling mode value passed in the *mode* parameter.Mode Return Value @'System.Net.Sockets.SelectMode.SelectRead'true if @'System.Net.Sockets.Socket.Listen(System.Int32)' has been called and a connection is pending; -or- true if data is available for reading; -or- true if the connection has been closed, reset, or terminated; otherwise, returns false. @'System.Net.Sockets.SelectMode.SelectWrite'true, if processing a @'System.Net.Sockets.Socket.Connect(System.Net.EndPoint)', and the connection has succeeded; -or- true if data can be sent; otherwise, returns false. @'System.Net.Sockets.SelectMode.SelectError'true if processing a @'System.Net.Sockets.Socket.Connect(System.Net.EndPoint)' that does not block, and the connection has failed; -or- true if @'System.Net.Sockets.SocketOptionName.OutOfBandInline' is not set and out-of-band data is available; otherwise, returns false.
  exceptions:
  - type: System.NotSupportedException
    description: The *mode* parameter is not one of the @'System.Net.Sockets.SelectMode' values.
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See remarks below.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.Receive(System.Byte[])
  id: Receive(System.Byte[])
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Receive(Byte[])
  name.vb: Receive(Byte())
  fullName: System.Net.Sockets.Socket.Receive(System.Byte[])
  fullName.vb: System.Net.Sockets.Socket.Receive(System.Byte())
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 1512
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Receives data from a bound @'System.Net.Sockets.Socket' into a receive buffer.
  syntax:
    content: public int Receive(byte[] buffer)
    content.vb: Public Function Receive(buffer As Byte()) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type @'System.Byte' that is the storage location for the received data.
    return:
      type: System.Int32
      description: The number of bytes received.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.'
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.Security.SecurityException
    description: A caller in the call stack does not have the required permissions.
- uid: System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  id: Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Receive(Byte[], Int32, Int32, SocketFlags)
  name.vb: Receive(Byte(), Int32, Int32, SocketFlags)
  fullName: System.Net.Sockets.Socket.Receive(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags)
  fullName.vb: System.Net.Sockets.Socket.Receive(System.Byte(), System.Int32, System.Int32, System.Net.Sockets.SocketFlags)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 1518
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Receives the specified number of bytes from a bound @'System.Net.Sockets.Socket' into the specified offset position of the receive buffer, using the specified @'System.Net.Sockets.SocketFlags'.
  syntax:
    content: public int Receive(byte[] buffer, int offset, int size, SocketFlags socketFlags)
    content.vb: Public Function Receive(buffer As Byte(), offset As Integer, size As Integer, socketFlags As SocketFlags) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type @'System.Byte' that is the storage location for received data.
    - id: offset
      type: System.Int32
      description: The location in *buffer* to store the received data.
    - id: size
      type: System.Int32
      description: The number of bytes to receive.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the @'System.Net.Sockets.SocketFlags' values.
    return:
      type: System.Int32
      description: The number of bytes received.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*offset* is less than 0.-or- *offset* is greater than the length of *buffer*.-or- *size* is less than 0.-or- *size* is greater than the length of *buffer* minus the value of the *offset* parameter.'
  - type: System.Net.Sockets.SocketException
    description: '*socketFlags* is not a valid combination of values.-or- The @''System.Net.Sockets.Socket.LocalEndPoint'' property was not set.-or- An operating system error occurs while accessing the @''System.Net.Sockets.Socket''.'
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.Security.SecurityException
    description: A caller in the call stack does not have the required permissions.
- uid: System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  id: Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Receive(Byte[], Int32, Int32, SocketFlags, out SocketError)
  name.vb: Receive(Byte(), Int32, Int32, SocketFlags, ByRef SocketError)
  fullName: System.Net.Sockets.Socket.Receive(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags, out System.Net.Sockets.SocketError)
  fullName.vb: System.Net.Sockets.Socket.Receive(System.Byte(), System.Int32, System.Int32, System.Net.Sockets.SocketFlags, ByRef System.Net.Sockets.SocketError)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 204
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Receives data from a bound @'System.Net.Sockets.Socket' into a receive buffer, using the specified @'System.Net.Sockets.SocketFlags'.
  syntax:
    content: public int Receive(byte[] buffer, int offset, int size, SocketFlags socketFlags, out SocketError errorCode)
    content.vb: Public Function Receive(buffer As Byte(), offset As Integer, size As Integer, socketFlags As SocketFlags, ByRef errorCode As SocketError) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type @'System.Byte' that is the storage location for the received data.
    - id: offset
      type: System.Int32
      description: The position in the *buffer* parameter to store the received data.
    - id: size
      type: System.Int32
      description: The number of bytes to receive.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the @'System.Net.Sockets.SocketFlags' values.
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: A @'System.Net.Sockets.SocketError' object that stores the socket error.
    return:
      type: System.Int32
      description: The number of bytes received.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*offset* is less than 0.-or- *offset* is greater than the length of *buffer*.-or- *size* is less than 0.-or- *size* is greater than the length of *buffer* minus the value of the *offset* parameter.'
  - type: System.Net.Sockets.SocketException
    description: '*socketFlags* is not a valid combination of values.-or- The @''System.Net.Sockets.Socket.LocalEndPoint'' property is not set.-or- An operating system error occurs while accessing the @''System.Net.Sockets.Socket''.'
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.Security.SecurityException
    description: A caller in the call stack does not have the required permissions.
- uid: System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  id: Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Receive(Byte[], Int32, SocketFlags)
  name.vb: Receive(Byte(), Int32, SocketFlags)
  fullName: System.Net.Sockets.Socket.Receive(System.Byte[], System.Int32, System.Net.Sockets.SocketFlags)
  fullName.vb: System.Net.Sockets.Socket.Receive(System.Byte(), System.Int32, System.Net.Sockets.SocketFlags)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 1502
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Receives the specified number of bytes of data from a bound @'System.Net.Sockets.Socket' into a receive buffer, using the specified @'System.Net.Sockets.SocketFlags'.
  syntax:
    content: public int Receive(byte[] buffer, int size, SocketFlags socketFlags)
    content.vb: Public Function Receive(buffer As Byte(), size As Integer, socketFlags As SocketFlags) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type @'System.Byte' that is the storage location for the received data.
    - id: size
      type: System.Int32
      description: The number of bytes to receive.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the @'System.Net.Sockets.SocketFlags' values.
    return:
      type: System.Int32
      description: The number of bytes received.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*size* exceeds the size of *buffer*.'
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.Security.SecurityException
    description: A caller in the call stack does not have the required permissions.
- uid: System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)
  id: Receive(System.Byte[],System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Receive(Byte[], SocketFlags)
  name.vb: Receive(Byte(), SocketFlags)
  fullName: System.Net.Sockets.Socket.Receive(System.Byte[], System.Net.Sockets.SocketFlags)
  fullName.vb: System.Net.Sockets.Socket.Receive(System.Byte(), System.Net.Sockets.SocketFlags)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 1507
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Receives data from a bound @'System.Net.Sockets.Socket' into a receive buffer, using the specified @'System.Net.Sockets.SocketFlags'.
  syntax:
    content: public int Receive(byte[] buffer, SocketFlags socketFlags)
    content.vb: Public Function Receive(buffer As Byte(), socketFlags As SocketFlags) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type @'System.Byte' that is the storage location for the received data.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the @'System.Net.Sockets.SocketFlags' values.
    return:
      type: System.Int32
      description: The number of bytes received.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.'
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.Security.SecurityException
    description: A caller in the call stack does not have the required permissions.
- uid: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  id: Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Receive(Collections.Generic.IList<ArraySegment<Byte>>)
  name.vb: Receive(Collections.Generic.IList(Of ArraySegment(Of Byte)))
  fullName: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList<System.ArraySegment<System.Byte>>)
  fullName.vb: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte)))
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 207
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Receives data from a bound @'System.Net.Sockets.Socket' into the list of receive buffers.
  syntax:
    content: public int Receive(Collections.Generic.IList<ArraySegment<byte>> buffers)
    content.vb: Public Function Receive(buffers As Collections.Generic.IList(Of ArraySegment(Of Byte))) As Integer
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: A list of @'System.ArraySegment`1's of type @'System.Byte' that contains the received data.
    return:
      type: System.Int32
      description: The number of bytes received.
  exceptions:
  - type: System.ArgumentNullException
    description: The *buffer* parameter is null.
  - type: System.Net.Sockets.SocketException
    description: An error occurred while attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  id: Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Receive(Collections.Generic.IList<ArraySegment<Byte>>, SocketFlags)
  name.vb: Receive(Collections.Generic.IList(Of ArraySegment(Of Byte)), SocketFlags)
  fullName: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList<System.ArraySegment<System.Byte>>, System.Net.Sockets.SocketFlags)
  fullName.vb: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte)), System.Net.Sockets.SocketFlags)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 208
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Receives data from a bound @'System.Net.Sockets.Socket' into the list of receive buffers, using the specified @'System.Net.Sockets.SocketFlags'.
  syntax:
    content: public int Receive(Collections.Generic.IList<ArraySegment<byte>> buffers, SocketFlags socketFlags)
    content.vb: Public Function Receive(buffers As Collections.Generic.IList(Of ArraySegment(Of Byte)), socketFlags As SocketFlags) As Integer
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: A list of @'System.ArraySegment`1's of type @'System.Byte' that contains the received data.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the @'System.Net.Sockets.SocketFlags' values.
    return:
      type: System.Int32
      description: The number of bytes received.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffers* is null.-or-*buffers*.Count is zero.'
  - type: System.Net.Sockets.SocketException
    description: An error occurred while attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  id: Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Receive(Collections.Generic.IList<ArraySegment<Byte>>, SocketFlags, out SocketError)
  name.vb: Receive(Collections.Generic.IList(Of ArraySegment(Of Byte)), SocketFlags, ByRef SocketError)
  fullName: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList<System.ArraySegment<System.Byte>>, System.Net.Sockets.SocketFlags, out System.Net.Sockets.SocketError)
  fullName.vb: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte)), System.Net.Sockets.SocketFlags, ByRef System.Net.Sockets.SocketError)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 209
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Receives data from a bound @'System.Net.Sockets.Socket' into the list of receive buffers, using the specified @'System.Net.Sockets.SocketFlags'.
  syntax:
    content: public int Receive(Collections.Generic.IList<ArraySegment<byte>> buffers, SocketFlags socketFlags, out SocketError errorCode)
    content.vb: Public Function Receive(buffers As Collections.Generic.IList(Of ArraySegment(Of Byte)), socketFlags As SocketFlags, ByRef errorCode As SocketError) As Integer
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: A list of @'System.ArraySegment`1's of type @'System.Byte' that contains the received data.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the @'System.Net.Sockets.SocketFlags' values.
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: A @'System.Net.Sockets.SocketError' object that stores the socket error.
    return:
      type: System.Int32
      description: The number of bytes received.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffers* is null.-or-*buffers*.Count is zero.'
  - type: System.Net.Sockets.SocketException
    description: An error occurred while attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: ReceiveAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 4559
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Begins an asynchronous request to receive data from a connected @'System.Net.Sockets.Socket' object.
  syntax:
    content: public bool ReceiveAsync(SocketAsyncEventArgs e)
    content.vb: Public Function ReceiveAsync(e As SocketAsyncEventArgs) As Boolean
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: The @'System.Net.Sockets.SocketAsyncEventArgs' object to use for this asynchronous socket operation.
    return:
      type: System.Boolean
      description: Returns true if the I/O operation is pending. The @'System.Net.Sockets.SocketAsyncEventArgs.Completed' event on the *e* parameter will be raised upon completion of the operation. Returns false if the I/O operation completed synchronously. In this case, The @'System.Net.Sockets.SocketAsyncEventArgs.Completed' event on the *e* parameter will not be raised and the *e* object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.
  exceptions:
  - type: System.ArgumentException
    description: An argument was invalid. The @'System.Net.Sockets.SocketAsyncEventArgs.Buffer' or @'System.Net.Sockets.SocketAsyncEventArgs.BufferList' properties on the *e* parameter must reference valid buffers. One or the other of these properties may be set, but not both at the same time.
  - type: System.InvalidOperationException
    description: A socket operation was already in progress using the @'System.Net.Sockets.SocketAsyncEventArgs' object specified in the *e* parameter.
  - type: System.NotSupportedException
    description: Windows XP or later is required for this method.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
- uid: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  id: ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint)
  name.vb: ReceiveFrom(Byte(), Int32, Int32, SocketFlags, ByRef EndPoint)
  fullName: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags, ref System.Net.EndPoint)
  fullName.vb: System.Net.Sockets.Socket.ReceiveFrom(System.Byte(), System.Int32, System.Int32, System.Net.Sockets.SocketFlags, ByRef System.Net.EndPoint)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 211
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Receives the specified number of bytes of data into the specified location of the data buffer, using the specified @'System.Net.Sockets.SocketFlags', and stores the endpoint.
  syntax:
    content: public int ReceiveFrom(byte[] buffer, int offset, int size, SocketFlags socketFlags, ref EndPoint remoteEP)
    content.vb: Public Function ReceiveFrom(buffer As Byte(), offset As Integer, size As Integer, socketFlags As SocketFlags, ByRef remoteEP As EndPoint) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type @'System.Byte' that is the storage location for received data.
    - id: offset
      type: System.Int32
      description: The position in the *buffer* parameter to store the received data.
    - id: size
      type: System.Int32
      description: The number of bytes to receive.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the @'System.Net.Sockets.SocketFlags' values.
    - id: remoteEP
      type: System.Net.EndPoint
      description: An @'System.Net.EndPoint', passed by reference, that represents the remote server.
    return:
      type: System.Int32
      description: The number of bytes received.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.-or- *remoteEP* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*offset* is less than 0.-or- *offset* is greater than the length of *buffer*.-or- *size* is less than 0.-or- *size* is greater than the length of the *buffer* minus the value of the offset parameter.'
  - type: System.Net.Sockets.SocketException
    description: '*socketFlags* is not a valid combination of values.-or- The @''System.Net.Sockets.Socket.LocalEndPoint'' property was not set.-or- An error occurred when attempting to access the socket. See the Remarks section for more information.'
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  id: ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: ReceiveFrom(Byte[], Int32, SocketFlags, ref EndPoint)
  name.vb: ReceiveFrom(Byte(), Int32, SocketFlags, ByRef EndPoint)
  fullName: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[], System.Int32, System.Net.Sockets.SocketFlags, ref System.Net.EndPoint)
  fullName.vb: System.Net.Sockets.Socket.ReceiveFrom(System.Byte(), System.Int32, System.Net.Sockets.SocketFlags, ByRef System.Net.EndPoint)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 212
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Receives the specified number of bytes into the data buffer, using the specified @'System.Net.Sockets.SocketFlags', and stores the endpoint.
  syntax:
    content: public int ReceiveFrom(byte[] buffer, int size, SocketFlags socketFlags, ref EndPoint remoteEP)
    content.vb: Public Function ReceiveFrom(buffer As Byte(), size As Integer, socketFlags As SocketFlags, ByRef remoteEP As EndPoint) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type @'System.Byte' that is the storage location for received data.
    - id: size
      type: System.Int32
      description: The number of bytes to receive.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the @'System.Net.Sockets.SocketFlags' values.
    - id: remoteEP
      type: System.Net.EndPoint
      description: An @'System.Net.EndPoint', passed by reference, that represents the remote server.
    return:
      type: System.Int32
      description: The number of bytes received.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.-or- *remoteEP* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*size* is less than 0.-or- *size* is greater than the length of *buffer*.'
  - type: System.Net.Sockets.SocketException
    description: '*socketFlags* is not a valid combination of values.-or- The @''System.Net.Sockets.Socket.LocalEndPoint'' property was not set.-or- An operating system error occurs while accessing the @''System.Net.Sockets.Socket''.'
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.Security.SecurityException
    description: A caller in the call stack does not have the required permissions.
- uid: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.EndPoint@)
  id: ReceiveFrom(System.Byte[],System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: ReceiveFrom(Byte[], ref EndPoint)
  name.vb: ReceiveFrom(Byte(), ByRef EndPoint)
  fullName: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[], ref System.Net.EndPoint)
  fullName.vb: System.Net.Sockets.Socket.ReceiveFrom(System.Byte(), ByRef System.Net.EndPoint)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 213
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Receives a datagram into the data buffer and stores the endpoint.
  syntax:
    content: public int ReceiveFrom(byte[] buffer, ref EndPoint remoteEP)
    content.vb: Public Function ReceiveFrom(buffer As Byte(), ByRef remoteEP As EndPoint) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type @'System.Byte' that is the storage location for received data.
    - id: remoteEP
      type: System.Net.EndPoint
      description: An @'System.Net.EndPoint', passed by reference, that represents the remote server.
    return:
      type: System.Int32
      description: The number of bytes received.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.-or- *remoteEP* is null.'
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.Security.SecurityException
    description: A caller in the call stack does not have the required permissions.
- uid: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  id: ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: ReceiveFrom(Byte[], SocketFlags, ref EndPoint)
  name.vb: ReceiveFrom(Byte(), SocketFlags, ByRef EndPoint)
  fullName: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[], System.Net.Sockets.SocketFlags, ref System.Net.EndPoint)
  fullName.vb: System.Net.Sockets.Socket.ReceiveFrom(System.Byte(), System.Net.Sockets.SocketFlags, ByRef System.Net.EndPoint)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 214
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Receives a datagram into the data buffer, using the specified @'System.Net.Sockets.SocketFlags', and stores the endpoint.
  syntax:
    content: public int ReceiveFrom(byte[] buffer, SocketFlags socketFlags, ref EndPoint remoteEP)
    content.vb: Public Function ReceiveFrom(buffer As Byte(), socketFlags As SocketFlags, ByRef remoteEP As EndPoint) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type @'System.Byte' that is the storage location for the received data.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the @'System.Net.Sockets.SocketFlags' values.
    - id: remoteEP
      type: System.Net.EndPoint
      description: An @'System.Net.EndPoint', passed by reference, that represents the remote server.
    return:
      type: System.Int32
      description: The number of bytes received.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.-or- *remoteEP* is null.'
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.Security.SecurityException
    description: A caller in the call stack does not have the required permissions.
- uid: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: ReceiveFromAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 4617
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Begins to asynchronously receive data from a specified network device.
  syntax:
    content: public bool ReceiveFromAsync(SocketAsyncEventArgs e)
    content.vb: Public Function ReceiveFromAsync(e As SocketAsyncEventArgs) As Boolean
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: The @'System.Net.Sockets.SocketAsyncEventArgs' object to use for this asynchronous socket operation.
    return:
      type: System.Boolean
      description: Returns true if the I/O operation is pending. The @'System.Net.Sockets.SocketAsyncEventArgs.Completed' event on the *e* parameter will be raised upon completion of the operation. Returns false if the I/O operation completed synchronously. In this case, The @'System.Net.Sockets.SocketAsyncEventArgs.Completed' event on the *e* parameter will not be raised and the *e* object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The @'System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint' cannot be null.
  - type: System.InvalidOperationException
    description: A socket operation was already in progress using the @'System.Net.Sockets.SocketAsyncEventArgs' object specified in the *e* parameter.
  - type: System.NotSupportedException
    description: Windows XP or later is required for this method.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
- uid: System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)
  id: ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: ReceiveMessageFrom(Byte[], Int32, Int32, ref SocketFlags, ref EndPoint, out IPPacketInformation)
  name.vb: ReceiveMessageFrom(Byte(), Int32, Int32, ByRef SocketFlags, ByRef EndPoint, ByRef IPPacketInformation)
  fullName: System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[], System.Int32, System.Int32, ref System.Net.Sockets.SocketFlags, ref System.Net.EndPoint, out System.Net.Sockets.IPPacketInformation)
  fullName.vb: System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte(), System.Int32, System.Int32, ByRef System.Net.Sockets.SocketFlags, ByRef System.Net.EndPoint, ByRef System.Net.Sockets.IPPacketInformation)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 216
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Receives the specified number of bytes of data into the specified location of the data buffer, using the specified @'System.Net.Sockets.SocketFlags', and stores the endpoint and packet information.
  syntax:
    content: public int ReceiveMessageFrom(byte[] buffer, int offset, int size, ref SocketFlags socketFlags, ref EndPoint remoteEP, out IPPacketInformation ipPacketInformation)
    content.vb: Public Function ReceiveMessageFrom(buffer As Byte(), offset As Integer, size As Integer, ByRef socketFlags As SocketFlags, ByRef remoteEP As EndPoint, ByRef ipPacketInformation As IPPacketInformation) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type @'System.Byte' that is the storage location for received data.
    - id: offset
      type: System.Int32
      description: The position in the *buffer* parameter to store the received data.
    - id: size
      type: System.Int32
      description: The number of bytes to receive.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the @'System.Net.Sockets.SocketFlags' values.
    - id: remoteEP
      type: System.Net.EndPoint
      description: An @'System.Net.EndPoint', passed by reference, that represents the remote server.
    - id: ipPacketInformation
      type: System.Net.Sockets.IPPacketInformation
      description: An @'System.Net.Sockets.IPPacketInformation' holding address and interface information.
    return:
      type: System.Int32
      description: The number of bytes received.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.- or- *remoteEP* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*offset* is less than 0.-or- *offset* is greater than the length of *buffer*.-or- *size* is less than 0.-or- *size* is greater than the length of the *buffer* minus the value of the offset parameter.'
  - type: System.Net.Sockets.SocketException
    description: '*socketFlags* is not a valid combination of values.-or- The @''System.Net.Sockets.Socket.LocalEndPoint'' property was not set.-or- The .NET Framework is running on an AMD 64-bit processor.-or- An error occurred when attempting to access the socket. See the Remarks section for more information.'
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.NotSupportedException
    description: The operating system is Windows 2000 or earlier, and this method requires Windows XP.
- uid: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: ReceiveMessageFromAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 4692
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Begins to asynchronously receive the specified number of bytes of data into the specified location in the data buffer, using the specified @'System.Net.Sockets.SocketAsyncEventArgs.SocketFlags', and stores the endpoint and packet information.
  syntax:
    content: public bool ReceiveMessageFromAsync(SocketAsyncEventArgs e)
    content.vb: Public Function ReceiveMessageFromAsync(e As SocketAsyncEventArgs) As Boolean
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: The @'System.Net.Sockets.SocketAsyncEventArgs' object to use for this asynchronous socket operation.
    return:
      type: System.Boolean
      description: Returns true if the I/O operation is pending. The @'System.Net.Sockets.SocketAsyncEventArgs.Completed' event on the *e* parameter will be raised upon completion of the operation. Returns false if the I/O operation completed synchronously. In this case, The @'System.Net.Sockets.SocketAsyncEventArgs.Completed' event on the *e* parameter will not be raised and the *e* object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The @'System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint' cannot be null.
  - type: System.NotSupportedException
    description: Windows XP or later is required for this method.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket.
- uid: System.Net.Sockets.Socket.Select(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Int32)
  id: Select(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Int32)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Select(Collections.IList, Collections.IList, Collections.IList, Int32)
  fullName: System.Net.Sockets.Socket.Select(System.Collections.IList, System.Collections.IList, System.Collections.IList, System.Int32)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 218
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Determines the status of one or more sockets.
  syntax:
    content: public static void Select(Collections.IList checkRead, Collections.IList checkWrite, Collections.IList checkError, int microSeconds)
    content.vb: Public Shared Sub Select(checkRead As Collections.IList, checkWrite As Collections.IList, checkError As Collections.IList, microSeconds As Integer)
    parameters:
    - id: checkRead
      type: System.Collections.IList
      description: An @'System.Collections.IList' of @'System.Net.Sockets.Socket' instances to check for readability.
    - id: checkWrite
      type: System.Collections.IList
      description: An @'System.Collections.IList' of @'System.Net.Sockets.Socket' instances to check for writability.
    - id: checkError
      type: System.Collections.IList
      description: An @'System.Collections.IList' of @'System.Net.Sockets.Socket' instances to check for errors.
    - id: microSeconds
      type: System.Int32
      description: The time-out value, in microseconds. A -1 value indicates an infinite time-out.
  exceptions:
  - type: System.ArgumentNullException
    description: The *checkRead* parameter is null or empty.-and- The *checkWrite* parameter is null or empty -and- The *checkError* parameter is null or empty.
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
- uid: System.Net.Sockets.Socket.Send(System.Byte[])
  id: Send(System.Byte[])
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Send(Byte[])
  name.vb: Send(Byte())
  fullName: System.Net.Sockets.Socket.Send(System.Byte[])
  fullName.vb: System.Net.Sockets.Socket.Send(System.Byte())
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 1220
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Sends data to a connected @'System.Net.Sockets.Socket'.
  syntax:
    content: public int Send(byte[] buffer)
    content.vb: Public Function Send(buffer As Byte()) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type @'System.Byte' that contains the data to be sent.
    return:
      type: System.Int32
      description: The number of bytes sent to the @'System.Net.Sockets.Socket'.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.'
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  id: Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Send(Byte[], Int32, Int32, SocketFlags)
  name.vb: Send(Byte(), Int32, Int32, SocketFlags)
  fullName: System.Net.Sockets.Socket.Send(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags)
  fullName.vb: System.Net.Sockets.Socket.Send(System.Byte(), System.Int32, System.Int32, System.Net.Sockets.SocketFlags)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 1312
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Sends the specified number of bytes of data to a connected @'System.Net.Sockets.Socket', starting at the specified offset, and using the specified @'System.Net.Sockets.SocketFlags'.
  syntax:
    content: public int Send(byte[] buffer, int offset, int size, SocketFlags socketFlags)
    content.vb: Public Function Send(buffer As Byte(), offset As Integer, size As Integer, socketFlags As SocketFlags) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type @'System.Byte' that contains the data to be sent.
    - id: offset
      type: System.Int32
      description: The position in the data buffer at which to begin sending data.
    - id: size
      type: System.Int32
      description: The number of bytes to send.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the @'System.Net.Sockets.SocketFlags' values.
    return:
      type: System.Int32
      description: The number of bytes sent to the @'System.Net.Sockets.Socket'.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*offset* is less than 0.-or- *offset* is greater than the length of *buffer*.-or- *size* is less than 0.-or- *size* is greater than the length of *buffer* minus the value of the *offset* parameter.'
  - type: System.Net.Sockets.SocketException
    description: '*socketFlags* is not a valid combination of values.-or- An operating system error occurs while accessing the @''System.Net.Sockets.Socket''. See the Remarks section for more information.'
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  id: Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Send(Byte[], Int32, Int32, SocketFlags, out SocketError)
  name.vb: Send(Byte(), Int32, Int32, SocketFlags, ByRef SocketError)
  fullName: System.Net.Sockets.Socket.Send(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags, out System.Net.Sockets.SocketError)
  fullName.vb: System.Net.Sockets.Socket.Send(System.Byte(), System.Int32, System.Int32, System.Net.Sockets.SocketFlags, ByRef System.Net.Sockets.SocketError)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 221
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Sends the specified number of bytes of data to a connected @'System.Net.Sockets.Socket', starting at the specified offset, and using the specified @'System.Net.Sockets.SocketFlags'
  syntax:
    content: public int Send(byte[] buffer, int offset, int size, SocketFlags socketFlags, out SocketError errorCode)
    content.vb: Public Function Send(buffer As Byte(), offset As Integer, size As Integer, socketFlags As SocketFlags, ByRef errorCode As SocketError) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type @'System.Byte' that contains the data to be sent.
    - id: offset
      type: System.Int32
      description: The position in the data buffer at which to begin sending data.
    - id: size
      type: System.Int32
      description: The number of bytes to send.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the @'System.Net.Sockets.SocketFlags' values.
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: A @'System.Net.Sockets.SocketError' object that stores the socket error.
    return:
      type: System.Int32
      description: The number of bytes sent to the @'System.Net.Sockets.Socket'.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*offset* is less than 0.-or- *offset* is greater than the length of *buffer*.-or- *size* is less than 0.-or- *size* is greater than the length of *buffer* minus the value of the *offset* parameter.'
  - type: System.Net.Sockets.SocketException
    description: '*socketFlags* is not a valid combination of values.-or- An operating system error occurs while accessing the @''System.Net.Sockets.Socket''. See the Remarks section for more information.'
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  id: Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Send(Byte[], Int32, SocketFlags)
  name.vb: Send(Byte(), Int32, SocketFlags)
  fullName: System.Net.Sockets.Socket.Send(System.Byte[], System.Int32, System.Net.Sockets.SocketFlags)
  fullName.vb: System.Net.Sockets.Socket.Send(System.Byte(), System.Int32, System.Net.Sockets.SocketFlags)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 1210
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Sends the specified number of bytes of data to a connected @'System.Net.Sockets.Socket', using the specified @'System.Net.Sockets.SocketFlags'.
  syntax:
    content: public int Send(byte[] buffer, int size, SocketFlags socketFlags)
    content.vb: Public Function Send(buffer As Byte(), size As Integer, socketFlags As SocketFlags) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type @'System.Byte' that contains the data to be sent.
    - id: size
      type: System.Int32
      description: The number of bytes to send.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the @'System.Net.Sockets.SocketFlags' values.
    return:
      type: System.Int32
      description: The number of bytes sent to the @'System.Net.Sockets.Socket'.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*size* is less than 0 or exceeds the size of the buffer.'
  - type: System.Net.Sockets.SocketException
    description: '*socketFlags* is not a valid combination of values.-or- An operating system error occurs while accessing the socket. See the Remarks section for more information.'
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.Send(System.Byte[],System.Net.Sockets.SocketFlags)
  id: Send(System.Byte[],System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Send(Byte[], SocketFlags)
  name.vb: Send(Byte(), SocketFlags)
  fullName: System.Net.Sockets.Socket.Send(System.Byte[], System.Net.Sockets.SocketFlags)
  fullName.vb: System.Net.Sockets.Socket.Send(System.Byte(), System.Net.Sockets.SocketFlags)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 1215
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Sends data to a connected @'System.Net.Sockets.Socket' using the specified @'System.Net.Sockets.SocketFlags'.
  syntax:
    content: public int Send(byte[] buffer, SocketFlags socketFlags)
    content.vb: Public Function Send(buffer As Byte(), socketFlags As SocketFlags) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type @'System.Byte' that contains the data to be sent.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the @'System.Net.Sockets.SocketFlags' values.
    return:
      type: System.Int32
      description: The number of bytes sent to the @'System.Net.Sockets.Socket'.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.'
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  id: Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Send(Collections.Generic.IList<ArraySegment<Byte>>)
  name.vb: Send(Collections.Generic.IList(Of ArraySegment(Of Byte)))
  fullName: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList<System.ArraySegment<System.Byte>>)
  fullName.vb: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte)))
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 224
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Sends the set of buffers in the list to a connected @'System.Net.Sockets.Socket'.
  syntax:
    content: public int Send(Collections.Generic.IList<ArraySegment<byte>> buffers)
    content.vb: Public Function Send(buffers As Collections.Generic.IList(Of ArraySegment(Of Byte))) As Integer
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: A list of @'System.ArraySegment`1's of type @'System.Byte' that contains the data to be sent.
    return:
      type: System.Int32
      description: The number of bytes sent to the @'System.Net.Sockets.Socket'.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffers* is null.'
  - type: System.ArgumentException
    description: '*buffers* is empty.'
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See remarks section below.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  id: Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Send(Collections.Generic.IList<ArraySegment<Byte>>, SocketFlags)
  name.vb: Send(Collections.Generic.IList(Of ArraySegment(Of Byte)), SocketFlags)
  fullName: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList<System.ArraySegment<System.Byte>>, System.Net.Sockets.SocketFlags)
  fullName.vb: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte)), System.Net.Sockets.SocketFlags)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 225
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Sends the set of buffers in the list to a connected @'System.Net.Sockets.Socket', using the specified @'System.Net.Sockets.SocketFlags'.
  syntax:
    content: public int Send(Collections.Generic.IList<ArraySegment<byte>> buffers, SocketFlags socketFlags)
    content.vb: Public Function Send(buffers As Collections.Generic.IList(Of ArraySegment(Of Byte)), socketFlags As SocketFlags) As Integer
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: A list of @'System.ArraySegment`1's of type @'System.Byte' that contains the data to be sent.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the @'System.Net.Sockets.SocketFlags' values.
    return:
      type: System.Int32
      description: The number of bytes sent to the @'System.Net.Sockets.Socket'.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffers* is null.'
  - type: System.ArgumentException
    description: '*buffers* is empty.'
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  id: Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Send(Collections.Generic.IList<ArraySegment<Byte>>, SocketFlags, out SocketError)
  name.vb: Send(Collections.Generic.IList(Of ArraySegment(Of Byte)), SocketFlags, ByRef SocketError)
  fullName: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList<System.ArraySegment<System.Byte>>, System.Net.Sockets.SocketFlags, out System.Net.Sockets.SocketError)
  fullName.vb: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte)), System.Net.Sockets.SocketFlags, ByRef System.Net.Sockets.SocketError)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 226
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Sends the set of buffers in the list to a connected @'System.Net.Sockets.Socket', using the specified @'System.Net.Sockets.SocketFlags'.
  syntax:
    content: public int Send(Collections.Generic.IList<ArraySegment<byte>> buffers, SocketFlags socketFlags, out SocketError errorCode)
    content.vb: Public Function Send(buffers As Collections.Generic.IList(Of ArraySegment(Of Byte)), socketFlags As SocketFlags, ByRef errorCode As SocketError) As Integer
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: A list of @'System.ArraySegment`1's of type @'System.Byte' that contains the data to be sent.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the @'System.Net.Sockets.SocketFlags' values.
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: A @'System.Net.Sockets.SocketError' object that stores the socket error.
    return:
      type: System.Int32
      description: The number of bytes sent to the @'System.Net.Sockets.Socket'.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffers* is null.'
  - type: System.ArgumentException
    description: '*buffers* is empty.'
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: SendAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 4769
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Sends data asynchronously to a connected @'System.Net.Sockets.Socket' object.
  syntax:
    content: public bool SendAsync(SocketAsyncEventArgs e)
    content.vb: Public Function SendAsync(e As SocketAsyncEventArgs) As Boolean
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: The @'System.Net.Sockets.SocketAsyncEventArgs' object to use for this asynchronous socket operation.
    return:
      type: System.Boolean
      description: Returns true if the I/O operation is pending. The @'System.Net.Sockets.SocketAsyncEventArgs.Completed' event on the *e* parameter will be raised upon completion of the operation. Returns false if the I/O operation completed synchronously. In this case, The @'System.Net.Sockets.SocketAsyncEventArgs.Completed' event on the *e* parameter will not be raised and the *e* object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.
  exceptions:
  - type: System.ArgumentException
    description: The @'System.Net.Sockets.SocketAsyncEventArgs.Buffer' or @'System.Net.Sockets.SocketAsyncEventArgs.BufferList' properties on the *e* parameter must reference valid buffers. One or the other of these properties may be set, but not both at the same time.
  - type: System.InvalidOperationException
    description: A socket operation was already in progress using the @'System.Net.Sockets.SocketAsyncEventArgs' object specified in the *e* parameter.
  - type: System.NotSupportedException
    description: Windows XP or later is required for this method.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.Net.Sockets.SocketException
    description: The @'System.Net.Sockets.Socket' is not yet connected or was not obtained via an @'System.Net.Sockets.Socket.Accept', @'System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)',or , method.
- uid: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: SendPacketsAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 4827
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Sends a collection of files or in memory data buffers asynchronously to a connected @'System.Net.Sockets.Socket' object.
  syntax:
    content: public bool SendPacketsAsync(SocketAsyncEventArgs e)
    content.vb: Public Function SendPacketsAsync(e As SocketAsyncEventArgs) As Boolean
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: The @'System.Net.Sockets.SocketAsyncEventArgs' object to use for this asynchronous socket operation.
    return:
      type: System.Boolean
      description: Returns true if the I/O operation is pending. The @'System.Net.Sockets.SocketAsyncEventArgs.Completed' event on the *e* parameter will be raised upon completion of the operation. Returns false if the I/O operation completed synchronously. In this case, The @'System.Net.Sockets.SocketAsyncEventArgs.Completed' event on the *e* parameter will not be raised and the *e* object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.
  exceptions:
  - type: System.IO.FileNotFoundException
    description: The file specified in the @'System.Net.Sockets.SendPacketsElement.FilePath' property was not found.
  - type: System.InvalidOperationException
    description: A socket operation was already in progress using the @'System.Net.Sockets.SocketAsyncEventArgs' object specified in the *e* parameter.
  - type: System.NotSupportedException
    description: Windows XP or later is required for this method. This exception also occurs if the @'System.Net.Sockets.Socket' is not connected to a remote host.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.Net.Sockets.SocketException
    description: A connectionless @'System.Net.Sockets.Socket' is being used and the file being sent exceeds the maximum packet size of the underlying transport.
- uid: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  id: SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: SendTo(Byte[], Int32, Int32, SocketFlags, EndPoint)
  name.vb: SendTo(Byte(), Int32, Int32, SocketFlags, EndPoint)
  fullName: System.Net.Sockets.Socket.SendTo(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags, System.Net.EndPoint)
  fullName.vb: System.Net.Sockets.Socket.SendTo(System.Byte(), System.Int32, System.Int32, System.Net.Sockets.SocketFlags, System.Net.EndPoint)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 229
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Sends the specified number of bytes of data to the specified endpoint, starting at the specified location in the buffer, and using the specified @'System.Net.Sockets.SocketFlags'.
  syntax:
    content: public int SendTo(byte[] buffer, int offset, int size, SocketFlags socketFlags, EndPoint remoteEP)
    content.vb: Public Function SendTo(buffer As Byte(), offset As Integer, size As Integer, socketFlags As SocketFlags, remoteEP As EndPoint) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type @'System.Byte' that contains the data to be sent.
    - id: offset
      type: System.Int32
      description: The position in the data buffer at which to begin sending data.
    - id: size
      type: System.Int32
      description: The number of bytes to send.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the @'System.Net.Sockets.SocketFlags' values.
    - id: remoteEP
      type: System.Net.EndPoint
      description: The @'System.Net.EndPoint' that represents the destination location for the data.
    return:
      type: System.Int32
      description: The number of bytes sent.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.-or- *remoteEP* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*offset* is less than 0.-or- *offset* is greater than the length of *buffer*.-or- *size* is less than 0.-or- *size* is greater than the length of *buffer* minus the value of the *offset* parameter.'
  - type: System.Net.Sockets.SocketException
    description: '*socketFlags* is not a valid combination of values.-or- An operating system error occurs while accessing the @''System.Net.Sockets.Socket''. See the Remarks section for more information.'
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.Security.SecurityException
    description: A caller in the call stack does not have the required permissions.
- uid: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  id: SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: SendTo(Byte[], Int32, SocketFlags, EndPoint)
  name.vb: SendTo(Byte(), Int32, SocketFlags, EndPoint)
  fullName: System.Net.Sockets.Socket.SendTo(System.Byte[], System.Int32, System.Net.Sockets.SocketFlags, System.Net.EndPoint)
  fullName.vb: System.Net.Sockets.Socket.SendTo(System.Byte(), System.Int32, System.Net.Sockets.SocketFlags, System.Net.EndPoint)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 230
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Sends the specified number of bytes of data to the specified endpoint using the specified @'System.Net.Sockets.SocketFlags'.
  syntax:
    content: public int SendTo(byte[] buffer, int size, SocketFlags socketFlags, EndPoint remoteEP)
    content.vb: Public Function SendTo(buffer As Byte(), size As Integer, socketFlags As SocketFlags, remoteEP As EndPoint) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type @'System.Byte' that contains the data to be sent.
    - id: size
      type: System.Int32
      description: The number of bytes to send.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the @'System.Net.Sockets.SocketFlags' values.
    - id: remoteEP
      type: System.Net.EndPoint
      description: The @'System.Net.EndPoint' that represents the destination location for the data.
    return:
      type: System.Int32
      description: The number of bytes sent.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.-or- *remoteEP* is null.'
  - type: System.ArgumentOutOfRangeException
    description: The specified *size* exceeds the size of *buffer*.
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.EndPoint)
  id: SendTo(System.Byte[],System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: SendTo(Byte[], EndPoint)
  name.vb: SendTo(Byte(), EndPoint)
  fullName: System.Net.Sockets.Socket.SendTo(System.Byte[], System.Net.EndPoint)
  fullName.vb: System.Net.Sockets.Socket.SendTo(System.Byte(), System.Net.EndPoint)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 231
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Sends data to the specified endpoint.
  syntax:
    content: public int SendTo(byte[] buffer, EndPoint remoteEP)
    content.vb: Public Function SendTo(buffer As Byte(), remoteEP As EndPoint) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type @'System.Byte' that contains the data to be sent.
    - id: remoteEP
      type: System.Net.EndPoint
      description: The @'System.Net.EndPoint' that represents the destination for the data.
    return:
      type: System.Int32
      description: The number of bytes sent.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.-or- *remoteEP* is null.'
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  id: SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: SendTo(Byte[], SocketFlags, EndPoint)
  name.vb: SendTo(Byte(), SocketFlags, EndPoint)
  fullName: System.Net.Sockets.Socket.SendTo(System.Byte[], System.Net.Sockets.SocketFlags, System.Net.EndPoint)
  fullName.vb: System.Net.Sockets.Socket.SendTo(System.Byte(), System.Net.Sockets.SocketFlags, System.Net.EndPoint)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 232
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Sends data to a specific endpoint using the specified @'System.Net.Sockets.SocketFlags'.
  syntax:
    content: public int SendTo(byte[] buffer, SocketFlags socketFlags, EndPoint remoteEP)
    content.vb: Public Function SendTo(buffer As Byte(), socketFlags As SocketFlags, remoteEP As EndPoint) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: An array of type @'System.Byte' that contains the data to be sent.
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: A bitwise combination of the @'System.Net.Sockets.SocketFlags' values.
    - id: remoteEP
      type: System.Net.EndPoint
      description: The @'System.Net.EndPoint' that represents the destination location for the data.
    return:
      type: System.Int32
      description: The number of bytes sent.
  exceptions:
  - type: System.ArgumentNullException
    description: '*buffer* is null.-or- *remoteEP* is null.'
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: SendToAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 4903
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Sends data asynchronously to a specific remote host.
  syntax:
    content: public bool SendToAsync(SocketAsyncEventArgs e)
    content.vb: Public Function SendToAsync(e As SocketAsyncEventArgs) As Boolean
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: The @'System.Net.Sockets.SocketAsyncEventArgs' object to use for this asynchronous socket operation.
    return:
      type: System.Boolean
      description: Returns true if the I/O operation is pending. The @'System.Net.Sockets.SocketAsyncEventArgs.Completed' event on the *e* parameter will be raised upon completion of the operation. Returns false if the I/O operation completed synchronously. In this case, The @'System.Net.Sockets.SocketAsyncEventArgs.Completed' event on the *e* parameter will not be raised and the *e* object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The @'System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint' cannot be null.
  - type: System.InvalidOperationException
    description: A socket operation was already in progress using the @'System.Net.Sockets.SocketAsyncEventArgs' object specified in the *e* parameter.
  - type: System.NotSupportedException
    description: Windows XP or later is required for this method.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
  - type: System.Net.Sockets.SocketException
    description: The protocol specified is connection-oriented, but the @'System.Net.Sockets.Socket' is not yet connected.
- uid: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)
  id: SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: SetSocketOption(SocketOptionLevel, SocketOptionName, Boolean)
  fullName: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel, System.Net.Sockets.SocketOptionName, System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 2068
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Sets the specified @'System.Net.Sockets.Socket' option to the specified @'System.Boolean' value.
  syntax:
    content: public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, bool optionValue)
    content.vb: Public Sub SetSocketOption(optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Boolean)
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: One of the @'System.Net.Sockets.SocketOptionLevel' values.
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: One of the @'System.Net.Sockets.SocketOptionName' values.
    - id: optionValue
      type: System.Boolean
      description: The value of the option, represented as a @'System.Boolean'.
  exceptions:
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' object has been closed.
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
- uid: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  id: SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: SetSocketOption(SocketOptionLevel, SocketOptionName, Byte[])
  name.vb: SetSocketOption(SocketOptionLevel, SocketOptionName, Byte())
  fullName: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel, System.Net.Sockets.SocketOptionName, System.Byte[])
  fullName.vb: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel, System.Net.Sockets.SocketOptionName, System.Byte())
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 2031
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Sets the specified @'System.Net.Sockets.Socket' option to the specified value, represented as a byte array.
  syntax:
    content: public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, byte[] optionValue)
    content.vb: Public Sub SetSocketOption(optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Byte())
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: One of the @'System.Net.Sockets.SocketOptionLevel' values.
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: One of the @'System.Net.Sockets.SocketOptionName' values.
    - id: optionValue
      type: System.Byte[]
      description: An array of type @'System.Byte' that represents the value of the option.
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  id: SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: SetSocketOption(SocketOptionLevel, SocketOptionName, Int32)
  fullName: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel, System.Net.Sockets.SocketOptionName, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 2016
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Sets the specified @'System.Net.Sockets.Socket' option to the specified integer value.
  syntax:
    content: public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionValue)
    content.vb: Public Sub SetSocketOption(optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Integer)
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: One of the @'System.Net.Sockets.SocketOptionLevel' values.
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: One of the @'System.Net.Sockets.SocketOptionName' values.
    - id: optionValue
      type: System.Int32
      description: A value of the option.
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)
  id: SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: SetSocketOption(SocketOptionLevel, SocketOptionName, Object)
  fullName: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel, System.Net.Sockets.SocketOptionName, System.Object)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 2074
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Sets the specified @'System.Net.Sockets.Socket' option to the specified value, represented as an object.
  syntax:
    content: public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, object optionValue)
    content.vb: Public Sub SetSocketOption(optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Object)
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: One of the @'System.Net.Sockets.SocketOptionLevel' values.
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: One of the @'System.Net.Sockets.SocketOptionName' values.
    - id: optionValue
      type: System.Object
      description: A @'System.Net.Sockets.LingerOption' or @'System.Net.Sockets.MulticastOption' that contains the value of the option.
  exceptions:
  - type: System.ArgumentNullException
    description: '*optionValue* is null.'
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
- uid: System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
  id: Shutdown(System.Net.Sockets.SocketShutdown)
  parent: System.Net.Sockets.Socket
  href: System.Net.Sockets.Socket.yml
  name: Shutdown(SocketShutdown)
  fullName: System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs
    startLine: 4244
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Disables sends and receives on a @'System.Net.Sockets.Socket'.
  syntax:
    content: public void Shutdown(SocketShutdown how)
    content.vb: Public Sub Shutdown(how As SocketShutdown)
    parameters:
    - id: how
      type: System.Net.Sockets.SocketShutdown
      description: One of the @'System.Net.Sockets.SocketShutdown' values that specifies the operation that will no longer be allowed.
  exceptions:
  - type: System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the socket. See the Remarks section for more information.
  - type: System.ObjectDisposedException
    description: The @'System.Net.Sockets.Socket' has been closed.
references:
- uid: System.Net.Sockets
  isExternal: false
  name: System.Net.Sockets
  fullName: System.Net.Sockets
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Net.Sockets.AddressFamily
  parent: System.Net.Sockets
  isExternal: false
  href: System.Net.Sockets.AddressFamily.yml
  name: AddressFamily
  fullName: System.Net.Sockets.AddressFamily
- uid: System.Net.Sockets.SocketType
  parent: System.Net.Sockets
  isExternal: false
  href: System.Net.Sockets.SocketType.yml
  name: SocketType
  fullName: System.Net.Sockets.SocketType
- uid: System.Net.Sockets.ProtocolType
  parent: System.Net.Sockets
  isExternal: false
  href: System.Net.Sockets.ProtocolType.yml
  name: ProtocolType
  fullName: System.Net.Sockets.ProtocolType
- uid: System.Int32
  parent: System
  isExternal: false
  href: System.Int32.yml
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  href: System.Boolean.yml
  name: Boolean
  fullName: System.Boolean
- uid: System.Net.Sockets.LingerOption
  parent: System.Net.Sockets
  isExternal: false
  href: System.Net.Sockets.LingerOption.yml
  name: LingerOption
  fullName: System.Net.Sockets.LingerOption
- uid: System.Net.EndPoint
  parent: System.Net
  isExternal: false
  href: System.Net.EndPoint.yml
  name: EndPoint
  fullName: System.Net.EndPoint
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
- uid: System.Int16
  parent: System
  isExternal: false
  href: System.Int16.yml
  name: Int16
  fullName: System.Int16
- uid: System.Net.Sockets.Socket
  parent: System.Net.Sockets
  isExternal: false
  href: System.Net.Sockets.Socket.yml
  name: Socket
  fullName: System.Net.Sockets.Socket
- uid: System.Net.Sockets.SocketAsyncEventArgs
  parent: System.Net.Sockets
  isExternal: false
  href: System.Net.Sockets.SocketAsyncEventArgs.yml
  name: SocketAsyncEventArgs
  fullName: System.Net.Sockets.SocketAsyncEventArgs
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: false
  href: System.Net.IPAddress.yml
  name: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net.IPAddress[]
  isExternal: false
  href: System.Net.IPAddress.yml
  name: IPAddress[]
  name.vb: IPAddress()
  fullName: System.Net.IPAddress[]
  fullName.vb: System.Net.IPAddress()
  spec.csharp:
  - uid: System.Net.IPAddress
    name: IPAddress
    fullName: System.Net.IPAddress
    href: System.Net.IPAddress.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Net.IPAddress
    name: IPAddress
    fullName: System.Net.IPAddress
    href: System.Net.IPAddress.yml
  - name: ()
    fullName: ()
- uid: System.String
  parent: System
  isExternal: false
  href: System.String.yml
  name: String
  fullName: System.String
- uid: System.Net.Sockets.SocketOptionLevel
  parent: System.Net.Sockets
  isExternal: false
  href: System.Net.Sockets.SocketOptionLevel.yml
  name: SocketOptionLevel
  fullName: System.Net.Sockets.SocketOptionLevel
- uid: System.Net.Sockets.SocketOptionName
  parent: System.Net.Sockets
  isExternal: false
  href: System.Net.Sockets.SocketOptionName.yml
  name: SocketOptionName
  fullName: System.Net.Sockets.SocketOptionName
- uid: System.Byte[]
  isExternal: false
  href: System.Byte.yml
  name: Byte[]
  name.vb: Byte()
  fullName: System.Byte[]
  fullName.vb: System.Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    href: System.Byte.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    href: System.Byte.yml
  - name: ()
    fullName: ()
- uid: System.Net.Sockets.IOControlCode
  parent: System.Net.Sockets
  isExternal: false
  href: System.Net.Sockets.IOControlCode.yml
  name: IOControlCode
  fullName: System.Net.Sockets.IOControlCode
- uid: System.Net.Sockets.SelectMode
  parent: System.Net.Sockets
  isExternal: false
  href: System.Net.Sockets.SelectMode.yml
  name: SelectMode
  fullName: System.Net.Sockets.SelectMode
- uid: System.Net.Sockets.SocketFlags
  parent: System.Net.Sockets
  isExternal: false
  href: System.Net.Sockets.SocketFlags.yml
  name: SocketFlags
  fullName: System.Net.Sockets.SocketFlags
- uid: System.Net.Sockets.SocketError
  parent: System.Net.Sockets
  isExternal: false
  href: System.Net.Sockets.SocketError.yml
  name: SocketError
  fullName: System.Net.Sockets.SocketError
- uid: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
  definition: System.Collections.Generic.IList`1
  name: Collections.Generic.IList<ArraySegment<Byte>>
  name.vb: Collections.Generic.IList(Of ArraySegment(Of Byte))
  fullName: System.Collections.Generic.IList<System.ArraySegment<System.Byte>>
  fullName.vb: System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - uid: System.ArraySegment`1
    name: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.ArraySegment`1
    name: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.IList`1.yml
  name: Collections.Generic.IList<>
  name.vb: Collections.Generic.IList(Of )
  fullName: System.Collections.Generic.IList<>
  fullName.vb: System.Collections.Generic.IList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
    href: System.Collections.Generic.IList`1.yml
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
    href: System.Collections.Generic.IList`1.yml
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Net.Sockets.IPPacketInformation
  parent: System.Net.Sockets
  isExternal: false
  href: System.Net.Sockets.IPPacketInformation.yml
  name: IPPacketInformation
  fullName: System.Net.Sockets.IPPacketInformation
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: false
  href: System.Collections.IList.yml
  name: Collections.IList
  fullName: System.Collections.IList
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Net.Sockets.SocketShutdown
  parent: System.Net.Sockets
  isExternal: false
  href: System.Net.Sockets.SocketShutdown.yml
  name: SocketShutdown
  fullName: System.Net.Sockets.SocketShutdown
- uid: System.Net.Sockets.SocketException
  isExternal: false
  href: System.Net.Sockets.SocketException.yml
  name: SocketException
  fullName: System.Net.Sockets.SocketException
  summary: The exception that is thrown when a socket error occurs.
- uid: System.ObjectDisposedException
  isExternal: false
  href: System.ObjectDisposedException.yml
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
  summary: The exception that is thrown when an operation is performed on a disposed object.
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  href: System.NotSupportedException.yml
  name: NotSupportedException
  fullName: System.NotSupportedException
  summary: The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality.
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  href: System.InvalidOperationException.yml
  name: InvalidOperationException
  fullName: System.InvalidOperationException
  summary: The exception that is thrown when a method call is invalid for the object's current state.
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  href: System.ArgumentOutOfRangeException.yml
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  summary: The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
- uid: System.ArgumentException
  parent: System
  isExternal: false
  href: System.ArgumentException.yml
  name: ArgumentException
  fullName: System.ArgumentException
  summary: The exception that is thrown when one of the arguments provided to a method is not valid.
- uid: System.ArgumentNullException
  isExternal: false
  href: System.ArgumentNullException.yml
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  summary: The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
- uid: System.Security.SecurityException
  isExternal: false
  href: System.Security.SecurityException.yml
  name: SecurityException
  fullName: System.Security.SecurityException
  summary: The exception that is thrown when a security error is detected.
- uid: System.IO.FileNotFoundException
  isExternal: false
  href: System.IO.FileNotFoundException.yml
  name: FileNotFoundException
  fullName: System.IO.FileNotFoundException
  summary: The exception that is thrown when an attempt to access a file that does not exist on disk fails.
