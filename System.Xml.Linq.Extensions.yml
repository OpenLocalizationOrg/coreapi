items:
- uid: System.Xml.Linq.Extensions
  commentId: T:System.Xml.Linq.Extensions
  id: Extensions
  parent: System.Xml.Linq
  children:
  - System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})
  - System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
  - System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  - System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  - System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  - System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  - System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})
  - System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  - System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})
  - System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
  - System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  - System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  - System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})
  - System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
  - System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})
  - System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
  - System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})
  - System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})
  langs:
  - csharp
  - vb
  name: Extensions
  nameWithType: Extensions
  fullName: System.Xml.Linq.Extensions
  type: Class
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Extensions
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 10
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Contains the LINQ to XML extension methods.</p>\n"
  remarks: "\n<p>Most of the LINQ to XML extension methods are axis methods that are used in LINQ queries. The methods in this class operate on collections and return collections. These methods enumerate the source collection, call the appropriate axis method on each item in the collection, and concatenate the results.</p>\n<p>The two <xref href=\"System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})\" data-throw-if-not-resolved=\"false\"></xref> extension methods are not axis methods, however. These methods remove attributes or nodes from the XML tree.</p>\n<p>Note that there is another category of axis methods, implemented in the <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Xml.Linq.XNode\" data-throw-if-not-resolved=\"false\"></xref> classes. These other axis methods operate on a single object, and return a collection of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Xml.Linq.XNode\" data-throw-if-not-resolved=\"false\"></xref> objects. </p>\n<p>All of the axis extension methods use deferred execution. </p>\n"
  syntax:
    content: public class Extensions
    content.vb: Public Class Extensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})
  id: Ancestors``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: Ancestors<T>(IEnumerable<T>)
  nameWithType: Extensions.Ancestors<T>(IEnumerable<T>)
  fullName: System.Xml.Linq.Extensions.Ancestors<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Ancestors
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 12
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a collection of elements that contains the ancestors of every node in the source collection.</p>\n"
  remarks: "\n<p>If multiple nodes in the source collection have the same ancestor, the ancestor will be included multiple times in the result collection. To avoid this, use the <see cref=\"Overload:System.Linq.Enumerable.Distinct\"></see> method.</p>\n<p>This method uses deferred execution.</p>\n"
  syntax:
    content: 'public static IEnumerable<XElement> Ancestors<T>(this IEnumerable<T> source)where T : XNode'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Ancestors(Of T As XNode)(source As IEnumerable(Of T)) As IEnumerable(Of XElement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XNode\" data-throw-if-not-resolved=\"false\"></xref> that contains the source collection.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the objects in <em>source</em>, constrained to <xref href=\"System.Xml.Linq.XNode\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> that contains the ancestors of every node in the source collection.</p>\n"
  seealso:
  - type: System.Xml.Linq.XNode.Ancestors
    commentId: M:System.Xml.Linq.XNode.Ancestors
  - type: System.Xml.Linq.XElement.AncestorsAndSelf
    commentId: M:System.Xml.Linq.XElement.AncestorsAndSelf
  - type: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
    commentId: M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  - type: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
    commentId: M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
  nameWithType.vb: Extensions.Ancestors(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.Extensions.Ancestors(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Ancestors(Of T)(IEnumerable(Of T))
- uid: System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
  commentId: M:System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
  id: Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
  isExtensionMethod: true
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: Ancestors<T>(IEnumerable<T>, XName)
  nameWithType: Extensions.Ancestors<T>(IEnumerable<T>, XName)
  fullName: System.Xml.Linq.Extensions.Ancestors<T>(System.Collections.Generic.IEnumerable<T>, System.Xml.Linq.XName)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Ancestors
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 13
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a filtered collection of elements that contains the ancestors of every node in the source collection. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> are included in the collection.</p>\n"
  remarks: "\n<p>If multiple nodes in the source collection have the same ancestor with a matching <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref>, the ancestor will be included multiple times in the result collection.</p>\n<p>This method uses deferred execution.</p>\n"
  syntax:
    content: 'public static IEnumerable<XElement> Ancestors<T>(this IEnumerable<T> source, XName name)where T : XNode'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Ancestors(Of T As XNode)(source As IEnumerable(Of T), name As XName) As IEnumerable(Of XElement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XNode\" data-throw-if-not-resolved=\"false\"></xref> that contains the source collection.</p>\n"
    - id: name
      type: System.Xml.Linq.XName
      description: "\n<p>The <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> to match.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the objects in <em>source</em>, constrained to <xref href=\"System.Xml.Linq.XNode\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> that contains the ancestors of every node in the source collection. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> are included in the collection.</p>\n"
  seealso:
  - type: System.Xml.Linq.XNode.Ancestors
    commentId: M:System.Xml.Linq.XNode.Ancestors
  - type: System.Xml.Linq.XElement.AncestorsAndSelf
    commentId: M:System.Xml.Linq.XElement.AncestorsAndSelf
  - type: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
    commentId: M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  - type: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
    commentId: M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
  nameWithType.vb: Extensions.Ancestors(Of T)(IEnumerable(Of T), XName)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.Extensions.Ancestors(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Xml.Linq.XName)
  name.vb: Ancestors(Of T)(IEnumerable(Of T), XName)
- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  commentId: M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  id: AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  isExtensionMethod: true
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: AncestorsAndSelf(IEnumerable<XElement>)
  nameWithType: Extensions.AncestorsAndSelf(IEnumerable<XElement>)
  fullName: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AncestorsAndSelf
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 14
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a collection of elements that contains every element in the source collection, and the ancestors of every element in the source collection.</p>\n"
  remarks: "\n<p>If multiple nodes in the source collection have the same ancestor, the ancestor will be included multiple times in the result collection. To avoid this, use the <see cref=\"Overload:System.Linq.Enumerable.Distinct\"></see> method.</p>\n<p>This method uses deferred execution. </p>\n"
  syntax:
    content: public static IEnumerable<XElement> AncestorsAndSelf(this IEnumerable<XElement> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AncestorsAndSelf(source As IEnumerable(Of XElement)) As IEnumerable(Of XElement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> that contains the source collection.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> that contains every element in the source collection, and the ancestors of every element in the source collection.</p>\n"
  seealso:
  - type: System.Xml.Linq.XNode.Ancestors
    commentId: M:System.Xml.Linq.XNode.Ancestors
  - type: System.Xml.Linq.XElement.AncestorsAndSelf
    commentId: M:System.Xml.Linq.XElement.AncestorsAndSelf
  - type: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
    commentId: M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
  nameWithType.vb: Extensions.AncestorsAndSelf(IEnumerable(Of XElement))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XElement))
  name.vb: AncestorsAndSelf(IEnumerable(Of XElement))
- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  commentId: M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  id: AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  isExtensionMethod: true
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: AncestorsAndSelf(IEnumerable<XElement>, XName)
  nameWithType: Extensions.AncestorsAndSelf(IEnumerable<XElement>, XName)
  fullName: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>, System.Xml.Linq.XName)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AncestorsAndSelf
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 15
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a filtered collection of elements that contains every element in the source collection, and the ancestors of every element in the source collection. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> are included in the collection.</p>\n"
  remarks: "\n<p>If multiple nodes in the source collection have the same ancestor with a matching <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref>, the ancestor will be included multiple times in the result collection.</p>\n<p>This method uses deferred execution. </p>\n"
  syntax:
    content: public static IEnumerable<XElement> AncestorsAndSelf(this IEnumerable<XElement> source, XName name)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AncestorsAndSelf(source As IEnumerable(Of XElement), name As XName) As IEnumerable(Of XElement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> that contains the source collection.</p>\n"
    - id: name
      type: System.Xml.Linq.XName
      description: "\n<p>The <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> to match.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> that contains every element in the source collection, and the ancestors of every element in the source collection. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> are included in the collection.</p>\n"
  seealso:
  - type: System.Xml.Linq.XNode.Ancestors
    commentId: M:System.Xml.Linq.XNode.Ancestors
  - type: System.Xml.Linq.XElement.AncestorsAndSelf
    commentId: M:System.Xml.Linq.XElement.AncestorsAndSelf
  - type: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
    commentId: M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
  nameWithType.vb: Extensions.AncestorsAndSelf(IEnumerable(Of XElement), XName)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XElement), System.Xml.Linq.XName)
  name.vb: AncestorsAndSelf(IEnumerable(Of XElement), XName)
- uid: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  commentId: M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  id: Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  isExtensionMethod: true
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: Attributes(IEnumerable<XElement>)
  nameWithType: Extensions.Attributes(IEnumerable<XElement>)
  fullName: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Attributes
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 16
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a collection of the attributes of every element in the source collection.</p>\n"
  remarks: "\n<p>Note that unlike some other XML programming interfaces, in LINQ to XML, namespaces are surfaced as attributes.</p>\n<p>Although Visual Basic users can use the integrated attribute axis to retrieve attributes with a specified name from a collection of elements, there is no integrated Visual Basic axis to retrieve all attributes of all elements in a collection.</p>\n<p>This method uses deferred execution.</p>\n"
  syntax:
    content: public static IEnumerable<XAttribute> Attributes(this IEnumerable<XElement> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Attributes(source As IEnumerable(Of XElement)) As IEnumerable(Of XAttribute)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> that contains the source collection.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> that contains the attributes of every element in the source collection.</p>\n"
  seealso:
  - type: System.Xml.Linq.XElement.Attributes
    commentId: M:System.Xml.Linq.XElement.Attributes
  nameWithType.vb: Extensions.Attributes(IEnumerable(Of XElement))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XElement))
  name.vb: Attributes(IEnumerable(Of XElement))
- uid: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  commentId: M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  id: Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  isExtensionMethod: true
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: Attributes(IEnumerable<XElement>, XName)
  nameWithType: Extensions.Attributes(IEnumerable<XElement>, XName)
  fullName: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>, System.Xml.Linq.XName)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Attributes
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 17
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a filtered collection of the attributes of every element in the source collection. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> are included in the collection.</p>\n"
  remarks: "\n<p>Note that unlike some other XML programming interfaces, in LINQ to XML, namespaces are surfaced as attributes.</p>\n<p>This method uses deferred execution. </p>\n"
  syntax:
    content: public static IEnumerable<XAttribute> Attributes(this IEnumerable<XElement> source, XName name)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Attributes(source As IEnumerable(Of XElement), name As XName) As IEnumerable(Of XAttribute)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> that contains the source collection.</p>\n"
    - id: name
      type: System.Xml.Linq.XName
      description: "\n<p>The <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> to match.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> that contains a filtered collection of the attributes of every element in the source collection. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> are included in the collection.</p>\n"
  seealso:
  - type: System.Xml.Linq.XElement.Attributes
    commentId: M:System.Xml.Linq.XElement.Attributes
  nameWithType.vb: Extensions.Attributes(IEnumerable(Of XElement), XName)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XElement), System.Xml.Linq.XName)
  name.vb: Attributes(IEnumerable(Of XElement), XName)
- uid: System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})
  id: DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: DescendantNodes<T>(IEnumerable<T>)
  nameWithType: Extensions.DescendantNodes<T>(IEnumerable<T>)
  fullName: System.Xml.Linq.Extensions.DescendantNodes<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DescendantNodes
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 18
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a collection of the descendant nodes of every document and element in the source collection.</p>\n"
  remarks: "\n<p>This axis extension method is used on <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> objects. Both of these types derive from <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref>, so this method operates on an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref> that contains the source collection.</p>\n<p>Although Visual Basic has an integrated XML axis for descendant elements, there is no integrated axis for descendant nodes, so Visual Basic users must use this axis method explicitly.</p>\n<p>This method uses deferred execution.</p>\n"
  syntax:
    content: 'public static IEnumerable<XNode> DescendantNodes<T>(this IEnumerable<T> source)where T : XContainer'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DescendantNodes(Of T As XContainer)(source As IEnumerable(Of T)) As IEnumerable(Of XNode)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref> that contains the source collection.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the objects in <em>source</em>, constrained to <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XNode\" data-throw-if-not-resolved=\"false\"></xref> of the descendant nodes of every document and element in the source collection.</p>\n"
  seealso:
  - type: System.Xml.Linq.XElement.DescendantsAndSelf
    commentId: M:System.Xml.Linq.XElement.DescendantsAndSelf
  - type: System.Xml.Linq.XContainer.DescendantNodes
    commentId: M:System.Xml.Linq.XContainer.DescendantNodes
  - type: System.Xml.Linq.XContainer.Descendants
    commentId: M:System.Xml.Linq.XContainer.Descendants
  - type: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
    commentId: M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  - type: System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
    commentId: M:System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  - type: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
    commentId: M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
  nameWithType.vb: Extensions.DescendantNodes(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.Extensions.DescendantNodes(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: DescendantNodes(Of T)(IEnumerable(Of T))
- uid: System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  commentId: M:System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  id: DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  isExtensionMethod: true
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: DescendantNodesAndSelf(IEnumerable<XElement>)
  nameWithType: Extensions.DescendantNodesAndSelf(IEnumerable<XElement>)
  fullName: System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DescendantNodesAndSelf
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 19
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a collection of nodes that contains every element in the source collection, and the descendant nodes of every element in the source collection.</p>\n"
  remarks: "\n<p>Although Visual Basic has an integrated XML axis for descendant elements, there is no integrated axis for descendant nodes, so Visual Basic users must use this axis method explicitly.</p>\n<p>This method uses deferred execution. </p>\n"
  syntax:
    content: public static IEnumerable<XNode> DescendantNodesAndSelf(this IEnumerable<XElement> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DescendantNodesAndSelf(source As IEnumerable(Of XElement)) As IEnumerable(Of XNode)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> that contains the source collection.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XNode\" data-throw-if-not-resolved=\"false\"></xref> that contains every element in the source collection, and the descendant nodes of every element in the source collection.</p>\n"
  seealso:
  - type: System.Xml.Linq.XElement.DescendantNodesAndSelf
    commentId: M:System.Xml.Linq.XElement.DescendantNodesAndSelf
  - type: System.Xml.Linq.XElement.DescendantsAndSelf
    commentId: M:System.Xml.Linq.XElement.DescendantsAndSelf
  - type: System.Xml.Linq.XContainer.DescendantNodes
    commentId: M:System.Xml.Linq.XContainer.DescendantNodes
  - type: System.Xml.Linq.XContainer.Descendants
    commentId: M:System.Xml.Linq.XContainer.Descendants
  - type: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
    commentId: M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  - type: System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})
    commentId: M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})
  - type: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
    commentId: M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
  nameWithType.vb: Extensions.DescendantNodesAndSelf(IEnumerable(Of XElement))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XElement))
  name.vb: DescendantNodesAndSelf(IEnumerable(Of XElement))
- uid: System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})
  id: Descendants``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: Descendants<T>(IEnumerable<T>)
  nameWithType: Extensions.Descendants<T>(IEnumerable<T>)
  fullName: System.Xml.Linq.Extensions.Descendants<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Descendants
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 20
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a collection of elements that contains the descendant elements of every element and document in the source collection.</p>\n"
  remarks: "\n<p>Visual Basic users can use the integrated XML descendant axis to retrieve the descendant elements of a collection. However, the integrated axis only retrieves descendants with a specified name. If Visual Basic users want to retrieve all descendants, then they must use this axis method explicitly.</p>\n<p>This method uses deferred execution. </p>\n"
  syntax:
    content: 'public static IEnumerable<XElement> Descendants<T>(this IEnumerable<T> source)where T : XContainer'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Descendants(Of T As XContainer)(source As IEnumerable(Of T)) As IEnumerable(Of XElement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref> that contains the source collection.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the objects in <em>source</em>, constrained to <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> that contains the descendant elements of every element and document in the source collection.</p>\n"
  seealso:
  - type: System.Xml.Linq.XElement.DescendantNodesAndSelf
    commentId: M:System.Xml.Linq.XElement.DescendantNodesAndSelf
  - type: System.Xml.Linq.XElement.DescendantsAndSelf
    commentId: M:System.Xml.Linq.XElement.DescendantsAndSelf
  - type: System.Xml.Linq.XContainer.DescendantNodes
    commentId: M:System.Xml.Linq.XContainer.DescendantNodes
  - type: System.Xml.Linq.XContainer.Descendants
    commentId: M:System.Xml.Linq.XContainer.Descendants
  - type: System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})
    commentId: M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})
  - type: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
    commentId: M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  - type: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
    commentId: M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
  nameWithType.vb: Extensions.Descendants(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.Extensions.Descendants(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Descendants(Of T)(IEnumerable(Of T))
- uid: System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
  commentId: M:System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
  id: Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
  isExtensionMethod: true
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: Descendants<T>(IEnumerable<T>, XName)
  nameWithType: Extensions.Descendants<T>(IEnumerable<T>, XName)
  fullName: System.Xml.Linq.Extensions.Descendants<T>(System.Collections.Generic.IEnumerable<T>, System.Xml.Linq.XName)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Descendants
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 21
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a filtered collection of elements that contains the descendant elements of every element and document in the source collection. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> are included in the collection.</p>\n"
  remarks: "\n<p>Visual Basic users can use the Language-Integrated Axes in Visual Basic (LINQ to XML) instead of using this axis method explicitly.</p>\n<p>This method uses deferred execution. </p>\n"
  syntax:
    content: 'public static IEnumerable<XElement> Descendants<T>(this IEnumerable<T> source, XName name)where T : XContainer'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Descendants(Of T As XContainer)(source As IEnumerable(Of T), name As XName) As IEnumerable(Of XElement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref> that contains the source collection.</p>\n"
    - id: name
      type: System.Xml.Linq.XName
      description: "\n<p>The <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> to match.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the objects in <em>source</em>, constrained to <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> that contains the descendant elements of every element and document in the source collection. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> are included in the collection.</p>\n"
  seealso:
  - type: System.Xml.Linq.XElement.DescendantNodesAndSelf
    commentId: M:System.Xml.Linq.XElement.DescendantNodesAndSelf
  - type: System.Xml.Linq.XElement.DescendantsAndSelf
    commentId: M:System.Xml.Linq.XElement.DescendantsAndSelf
  - type: System.Xml.Linq.XContainer.DescendantNodes
    commentId: M:System.Xml.Linq.XContainer.DescendantNodes
  - type: System.Xml.Linq.XContainer.Descendants
    commentId: M:System.Xml.Linq.XContainer.Descendants
  - type: System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})
    commentId: M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})
  - type: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
    commentId: M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  - type: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
    commentId: M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
  nameWithType.vb: Extensions.Descendants(Of T)(IEnumerable(Of T), XName)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.Extensions.Descendants(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Xml.Linq.XName)
  name.vb: Descendants(Of T)(IEnumerable(Of T), XName)
- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  commentId: M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  id: DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  isExtensionMethod: true
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: DescendantsAndSelf(IEnumerable<XElement>)
  nameWithType: Extensions.DescendantsAndSelf(IEnumerable<XElement>)
  fullName: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DescendantsAndSelf
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 22
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a collection of elements that contains every element in the source collection, and the descendent elements of every element in the source collection.</p>\n"
  remarks: "\n<p>Although Visual Basic has an integrated XML axis for descendant elements, there is no integrated axis that has the semantics of this method, so Visual Basic users must use this axis method explicitly.</p>\n<p>This method uses deferred execution. </p>\n"
  syntax:
    content: public static IEnumerable<XElement> DescendantsAndSelf(this IEnumerable<XElement> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DescendantsAndSelf(source As IEnumerable(Of XElement)) As IEnumerable(Of XElement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> that contains the source collection.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> that contains every element in the source collection, and the descendent elements of every element in the source collection.</p>\n"
  seealso:
  - type: System.Xml.Linq.XElement.DescendantNodesAndSelf
    commentId: M:System.Xml.Linq.XElement.DescendantNodesAndSelf
  - type: System.Xml.Linq.XElement.DescendantsAndSelf
    commentId: M:System.Xml.Linq.XElement.DescendantsAndSelf
  - type: System.Xml.Linq.XContainer.DescendantNodes
    commentId: M:System.Xml.Linq.XContainer.DescendantNodes
  - type: System.Xml.Linq.XContainer.Descendants
    commentId: M:System.Xml.Linq.XContainer.Descendants
  - type: System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})
    commentId: M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})
  - type: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
    commentId: M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
  nameWithType.vb: Extensions.DescendantsAndSelf(IEnumerable(Of XElement))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XElement))
  name.vb: DescendantsAndSelf(IEnumerable(Of XElement))
- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  commentId: M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  id: DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)
  isExtensionMethod: true
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: DescendantsAndSelf(IEnumerable<XElement>, XName)
  nameWithType: Extensions.DescendantsAndSelf(IEnumerable<XElement>, XName)
  fullName: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>, System.Xml.Linq.XName)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DescendantsAndSelf
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 23
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a filtered collection of elements that contains every element in the source collection, and the descendents of every element in the source collection. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> are included in the collection.</p>\n"
  remarks: "\n<p>Although Visual Basic has an integrated XML axis for descendant elements, there is no integrated axis that has the semantics of this method, so Visual Basic users must use this axis method explicitly.</p>\n<p>This method uses deferred execution. </p>\n"
  syntax:
    content: public static IEnumerable<XElement> DescendantsAndSelf(this IEnumerable<XElement> source, XName name)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DescendantsAndSelf(source As IEnumerable(Of XElement), name As XName) As IEnumerable(Of XElement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> that contains the source collection.</p>\n"
    - id: name
      type: System.Xml.Linq.XName
      description: "\n<p>The <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> to match.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> that contains every element in the source collection, and the descendents of every element in the source collection. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> are included in the collection.</p>\n"
  seealso:
  - type: System.Xml.Linq.XElement.DescendantNodesAndSelf
    commentId: M:System.Xml.Linq.XElement.DescendantNodesAndSelf
  - type: System.Xml.Linq.XElement.DescendantsAndSelf
    commentId: M:System.Xml.Linq.XElement.DescendantsAndSelf
  - type: System.Xml.Linq.XContainer.DescendantNodes
    commentId: M:System.Xml.Linq.XContainer.DescendantNodes
  - type: System.Xml.Linq.XContainer.Descendants
    commentId: M:System.Xml.Linq.XContainer.Descendants
  - type: System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})
    commentId: M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})
  - type: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
    commentId: M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
  nameWithType.vb: Extensions.DescendantsAndSelf(IEnumerable(Of XElement), XName)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XElement), System.Xml.Linq.XName)
  name.vb: DescendantsAndSelf(IEnumerable(Of XElement), XName)
- uid: System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})
  id: Elements``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: Elements<T>(IEnumerable<T>)
  nameWithType: Extensions.Elements<T>(IEnumerable<T>)
  fullName: System.Xml.Linq.Extensions.Elements<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Elements
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 24
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a collection of the child elements of every element and document in the source collection.</p>\n"
  remarks: "\n<p>Although Visual Basic contains an integrated elements axis that allows you to find all child elements with a specified <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> for every element in the source collection, there is no integrated elements axis that allows you to retrieve a collection of every child element for every element in the source collection.</p>\n<p>This method uses deferred execution. </p>\n"
  syntax:
    content: 'public static IEnumerable<XElement> Elements<T>(this IEnumerable<T> source)where T : XContainer'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Elements(Of T As XContainer)(source As IEnumerable(Of T)) As IEnumerable(Of XElement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> that contains the source collection.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the objects in <em>source</em>, constrained to <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> of the child elements of every element or document in the source collection.</p>\n"
  seealso:
  - type: System.Xml.Linq.XElement.DescendantNodesAndSelf
    commentId: M:System.Xml.Linq.XElement.DescendantNodesAndSelf
  - type: System.Xml.Linq.XElement.DescendantsAndSelf
    commentId: M:System.Xml.Linq.XElement.DescendantsAndSelf
  - type: System.Xml.Linq.XContainer.DescendantNodes
    commentId: M:System.Xml.Linq.XContainer.DescendantNodes
  - type: System.Xml.Linq.XContainer.Descendants
    commentId: M:System.Xml.Linq.XContainer.Descendants
  - type: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
    commentId: M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  nameWithType.vb: Extensions.Elements(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.Extensions.Elements(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Elements(Of T)(IEnumerable(Of T))
- uid: System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
  commentId: M:System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
  id: Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)
  isExtensionMethod: true
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: Elements<T>(IEnumerable<T>, XName)
  nameWithType: Extensions.Elements<T>(IEnumerable<T>, XName)
  fullName: System.Xml.Linq.Extensions.Elements<T>(System.Collections.Generic.IEnumerable<T>, System.Xml.Linq.XName)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Elements
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 25
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a filtered collection of the child elements of every element and document in the source collection. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> are included in the collection.</p>\n"
  remarks: "\n<p>Visual Basic users can use the integrated elements axis to retrieve the child elements of every element in a collection.</p>\n<p>This method uses deferred execution. </p>\n"
  syntax:
    content: 'public static IEnumerable<XElement> Elements<T>(this IEnumerable<T> source, XName name)where T : XContainer'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Elements(Of T As XContainer)(source As IEnumerable(Of T), name As XName) As IEnumerable(Of XElement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> that contains the source collection.</p>\n"
    - id: name
      type: System.Xml.Linq.XName
      description: "\n<p>The <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> to match.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the objects in <em>source</em>, constrained to <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> of the child elements of every element and document in the source collection. Only elements that have a matching <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> are included in the collection.</p>\n"
  seealso:
  - type: System.Xml.Linq.XElement.DescendantNodesAndSelf
    commentId: M:System.Xml.Linq.XElement.DescendantNodesAndSelf
  - type: System.Xml.Linq.XElement.DescendantsAndSelf
    commentId: M:System.Xml.Linq.XElement.DescendantsAndSelf
  - type: System.Xml.Linq.XContainer.DescendantNodes
    commentId: M:System.Xml.Linq.XContainer.DescendantNodes
  - type: System.Xml.Linq.XContainer.Descendants
    commentId: M:System.Xml.Linq.XContainer.Descendants
  - type: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
    commentId: M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  nameWithType.vb: Extensions.Elements(Of T)(IEnumerable(Of T), XName)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.Extensions.Elements(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Xml.Linq.XName)
  name.vb: Elements(Of T)(IEnumerable(Of T), XName)
- uid: System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})
  id: InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: InDocumentOrder<T>(IEnumerable<T>)
  nameWithType: Extensions.InDocumentOrder<T>(IEnumerable<T>)
  fullName: System.Xml.Linq.Extensions.InDocumentOrder<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InDocumentOrder
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 26
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a collection of nodes that contains all nodes in the source collection, sorted in document order.</p>\n"
  remarks: "\n<p>This axis method uses deferred execution. However, it first enumerates its source collection, the sorts the nodes in document order, and then yields the results.</p>\n"
  syntax:
    content: 'public static IEnumerable<T> InDocumentOrder<T>(this IEnumerable<T> source)where T : XNode'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function InDocumentOrder(Of T As XNode)(source As IEnumerable(Of T)) As IEnumerable(Of T)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XNode\" data-throw-if-not-resolved=\"false\"></xref> that contains the source collection.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the objects in <em>source</em>, constrained to <xref href=\"System.Xml.Linq.XNode\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XNode\" data-throw-if-not-resolved=\"false\"></xref> that contains all nodes in the source collection, sorted in document order.</p>\n"
  seealso:
  - type: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
    commentId: M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
  nameWithType.vb: Extensions.InDocumentOrder(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.Extensions.InDocumentOrder(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: InDocumentOrder(Of T)(IEnumerable(Of T))
- uid: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})
  id: Nodes``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: Nodes<T>(IEnumerable<T>)
  nameWithType: Extensions.Nodes<T>(IEnumerable<T>)
  fullName: System.Xml.Linq.Extensions.Nodes<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Nodes
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 27
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a collection of the child nodes of every document and element in the source collection.</p>\n"
  remarks: "\n<p>This method uses deferred execution. </p>\n"
  syntax:
    content: 'public static IEnumerable<XNode> Nodes<T>(this IEnumerable<T> source)where T : XContainer'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Nodes(Of T As XContainer)(source As IEnumerable(Of T)) As IEnumerable(Of XNode)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XNode\" data-throw-if-not-resolved=\"false\"></xref> that contains the source collection.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the objects in <em>source</em>, constrained to <xref href=\"System.Xml.Linq.XContainer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XNode\" data-throw-if-not-resolved=\"false\"></xref> of the child nodes of every document and element in the source collection.</p>\n"
  seealso:
  - type: System.Xml.Linq.XContainer.Nodes
    commentId: M:System.Xml.Linq.XContainer.Nodes
  - type: System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})
    commentId: M:System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})
  nameWithType.vb: Extensions.Nodes(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.Extensions.Nodes(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Nodes(Of T)(IEnumerable(Of T))
- uid: System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})
  commentId: M:System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})
  id: Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})
  isExtensionMethod: true
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: Remove(IEnumerable<XAttribute>)
  nameWithType: Extensions.Remove(IEnumerable<XAttribute>)
  fullName: System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute>)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 28
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Removes every attribute in the source collection from its parent element.</p>\n"
  remarks: "\n<p>This method uses snapshot semantics—that is, it copies the attributes in the source collection to a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> before disconnecting them from their parents. This is required to avoid issues with mixed imperative/declarative code. For more information, see Mixed Declarative Code/Imperative Code Bugs (LINQ to XML).</p>\n"
  syntax:
    content: public static void Remove(this IEnumerable<XAttribute> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Remove(source As IEnumerable(Of XAttribute))
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref> that contains the source collection.</p>\n"
  seealso:
  - type: System.Xml.Linq.XElement.RemoveAttributes
    commentId: M:System.Xml.Linq.XElement.RemoveAttributes
  - type: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
    commentId: M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  - type: System.Xml.Linq.XAttribute.Remove
    commentId: M:System.Xml.Linq.XAttribute.Remove
  - type: System.Xml.Linq.XNode.Remove
    commentId: M:System.Xml.Linq.XNode.Remove
  nameWithType.vb: Extensions.Remove(IEnumerable(Of XAttribute))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XAttribute))
  name.vb: Remove(IEnumerable(Of XAttribute))
- uid: System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})
  id: Remove``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Xml.Linq.Extensions
  langs:
  - csharp
  - vb
  name: Remove<T>(IEnumerable<T>)
  nameWithType: Extensions.Remove<T>(IEnumerable<T>)
  fullName: System.Xml.Linq.Extensions.Remove<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 29
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Removes every node in the source collection from its parent node.</p>\n"
  remarks: "\n<p>This method uses snapshot semantics—that is, it copies the attributes in the source collection to a List<T> before disconnecting them from their parents. This is required to avoid issues with mixed imperative/declarative code. For more information, see Mixed Declarative Code/Imperative Code Bugs (LINQ to XML).</p>\n"
  syntax:
    content: 'public static void Remove<T>(this IEnumerable<T> source)where T : XNode'
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Remove(Of T As XNode)(source As IEnumerable(Of T))
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Xml.Linq.XNode\" data-throw-if-not-resolved=\"false\"></xref> that contains the source collection.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the objects in <em>source</em>, constrained to <xref href=\"System.Xml.Linq.XNode\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Xml.Linq.XElement.RemoveAll
    commentId: M:System.Xml.Linq.XElement.RemoveAll
  - type: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
    commentId: M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})
  - type: System.Xml.Linq.XAttribute.Remove
    commentId: M:System.Xml.Linq.XAttribute.Remove
  - type: System.Xml.Linq.XNode.Remove
    commentId: M:System.Xml.Linq.XNode.Remove
  nameWithType.vb: Extensions.Remove(Of T)(IEnumerable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.Extensions.Remove(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Remove(Of T)(IEnumerable(Of T))
references:
- uid: System.Xml.Linq
  isExternal: false
  name: System.Xml.Linq
  nameWithType: System.Xml.Linq
  fullName: System.Xml.Linq
  commentId: N:System.Xml.Linq
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
  commentId: T:System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
  commentId: N:System
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  commentId: T:System.Collections.Generic.IEnumerable{`0}
- uid: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<XElement>
  nameWithType: IEnumerable<XElement>
  fullName: System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>
  nameWithType.vb: IEnumerable(Of XElement)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XElement)
  name.vb: IEnumerable(Of XElement)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Xml.Linq.XElement
    name: XElement
    nameWithType: XElement
    fullName: System.Xml.Linq.XElement
  - name: )
    nameWithType: )
    fullName: )
  commentId: T:System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  commentId: T:System.Collections.Generic.IEnumerable`1
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  commentId: N:System.Collections.Generic
- uid: System.Xml.Linq.XName
  parent: System.Xml.Linq
  isExternal: false
  name: XName
  nameWithType: XName
  fullName: System.Xml.Linq.XName
  commentId: T:System.Xml.Linq.XName
- uid: System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<XAttribute>
  nameWithType: IEnumerable<XAttribute>
  fullName: System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute>
  nameWithType.vb: IEnumerable(Of XAttribute)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XAttribute)
  name.vb: IEnumerable(Of XAttribute)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xml.Linq.XAttribute
    name: XAttribute
    nameWithType: XAttribute
    fullName: System.Xml.Linq.XAttribute
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Xml.Linq.XAttribute
    name: XAttribute
    nameWithType: XAttribute
    fullName: System.Xml.Linq.XAttribute
  - name: )
    nameWithType: )
    fullName: )
  commentId: T:System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute}
- uid: System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<XNode>
  nameWithType: IEnumerable<XNode>
  fullName: System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode>
  nameWithType.vb: IEnumerable(Of XNode)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XNode)
  name.vb: IEnumerable(Of XNode)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xml.Linq.XNode
    name: XNode
    nameWithType: XNode
    fullName: System.Xml.Linq.XNode
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Xml.Linq.XNode
    name: XNode
    nameWithType: XNode
    fullName: System.Xml.Linq.XNode
  - name: )
    nameWithType: )
    fullName: )
  commentId: T:System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}
