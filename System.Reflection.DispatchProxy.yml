items:
- uid: System.Reflection.DispatchProxy
  commentId: T:System.Reflection.DispatchProxy
  id: DispatchProxy
  parent: System.Reflection
  children:
  - System.Reflection.DispatchProxy.#ctor
  - System.Reflection.DispatchProxy.Create``2
  - System.Reflection.DispatchProxy.Invoke(System.Reflection.MethodInfo,System.Object[])
  langs:
  - csharp
  - vb
  name: DispatchProxy
  fullName: System.Reflection.DispatchProxy
  type: Class
  source:
    remote:
      path: src/System.Reflection.DispatchProxy/src/System/Reflection/DispatchProxy.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DispatchProxy
    path: src/System.Reflection.DispatchProxy/src/System/Reflection/DispatchProxy.cs
    startLine: 13
  assemblies:
  - System.Reflection.DispatchProxy
  namespace: System.Reflection
  syntax:
    content: public abstract class DispatchProxy
    content.vb: Public MustInherit Class DispatchProxy
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Reflection.DispatchProxy.#ctor
  commentId: M:System.Reflection.DispatchProxy.#ctor
  id: '#ctor'
  parent: System.Reflection.DispatchProxy
  langs:
  - csharp
  - vb
  name: DispatchProxy()
  fullName: System.Reflection.DispatchProxy.DispatchProxy()
  type: Constructor
  source:
    remote:
      path: src/System.Reflection.DispatchProxy/src/System/Reflection/DispatchProxy.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Reflection.DispatchProxy/src/System/Reflection/DispatchProxy.cs
    startLine: 15
  assemblies:
  - System.Reflection.DispatchProxy
  namespace: System.Reflection
  syntax:
    content: protected DispatchProxy()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Reflection.DispatchProxy.Create``2
  commentId: M:System.Reflection.DispatchProxy.Create``2
  id: Create``2
  parent: System.Reflection.DispatchProxy
  langs:
  - csharp
  - vb
  name: Create<T, TProxy>()
  fullName: System.Reflection.DispatchProxy.Create<T, TProxy>()
  type: Method
  source:
    remote:
      path: src/System.Reflection.DispatchProxy/src/System/Reflection/DispatchProxy.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Reflection.DispatchProxy/src/System/Reflection/DispatchProxy.cs
    startLine: 37
  assemblies:
  - System.Reflection.DispatchProxy
  namespace: System.Reflection
  syntax:
    content: 'public static T Create<T, TProxy>()where TProxy : DispatchProxy'
    content.vb: Public Shared Function Create(Of T, TProxy As DispatchProxy) As T
    typeParameters:
    - id: T
      description: The interface the proxy should implement.
    - id: TProxy
      description: The base class to use for the proxy class.
    return:
      type: '{T}'
      description: An object instance that implements <em>T</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Reflection.DispatchProxy.Create(Of T, TProxy)()
  name.vb: Create(Of T, TProxy)()
- uid: System.Reflection.DispatchProxy.Invoke(System.Reflection.MethodInfo,System.Object[])
  commentId: M:System.Reflection.DispatchProxy.Invoke(System.Reflection.MethodInfo,System.Object[])
  id: Invoke(System.Reflection.MethodInfo,System.Object[])
  parent: System.Reflection.DispatchProxy
  langs:
  - csharp
  - vb
  name: Invoke(MethodInfo, Object[])
  fullName: System.Reflection.DispatchProxy.Invoke(System.Reflection.MethodInfo, System.Object[])
  type: Method
  source:
    remote:
      path: src/System.Reflection.DispatchProxy/src/System/Reflection/DispatchProxy.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Invoke
    path: src/System.Reflection.DispatchProxy/src/System/Reflection/DispatchProxy.cs
    startLine: 26
  assemblies:
  - System.Reflection.DispatchProxy
  namespace: System.Reflection
  syntax:
    content: protected abstract object Invoke(MethodInfo targetMethod, object[] args)
    content.vb: Protected MustOverride Function Invoke(targetMethod As MethodInfo, args As Object()) As Object
    parameters:
    - id: targetMethod
      type: System.Reflection.MethodInfo
      description: The method the caller invoked
    - id: args
      type: System.Object[]
      description: The arguments the caller passed to the method
    return:
      type: System.Object
      description: The object to return to the caller, or <code>null</code> for void methods
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: System.Reflection.DispatchProxy.Invoke(System.Reflection.MethodInfo, System.Object())
  name.vb: Invoke(MethodInfo, Object())
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Object[]
  isExternal: true
  name: Object[]
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
