items:
- uid: System.ComponentModel.DesignOnlyAttribute
  commentId: T:System.ComponentModel.DesignOnlyAttribute
  id: DesignOnlyAttribute
  parent: System.ComponentModel
  children:
  - System.ComponentModel.DesignOnlyAttribute.#ctor(System.Boolean)
  - System.ComponentModel.DesignOnlyAttribute.Default
  - System.ComponentModel.DesignOnlyAttribute.Equals(System.Object)
  - System.ComponentModel.DesignOnlyAttribute.GetHashCode
  - System.ComponentModel.DesignOnlyAttribute.IsDesignOnly
  - System.ComponentModel.DesignOnlyAttribute.No
  - System.ComponentModel.DesignOnlyAttribute.Yes
  langs:
  - csharp
  - vb
  name: DesignOnlyAttribute
  fullName: System.ComponentModel.DesignOnlyAttribute
  type: Class
  source:
    remote:
      path: src/System.ComponentModel.Primitives/src/System/ComponentModel/DesignOnlyAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DesignOnlyAttribute
    path: src/System.ComponentModel.Primitives/src/System/ComponentModel/DesignOnlyAttribute.cs
    startLine: 10
  assemblies:
  - System.ComponentModel.Primitives
  namespace: System.ComponentModel
  summary: "\n<p>Specifies whether a property can only be set at design time.</p>\n"
  remarks: "\n<p>Members marked with the <xref href=\"System.ComponentModel.DesignOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref> set to <strong>true</strong> can be set only at design time. Typically, these properties exist only at design time and do not correspond to a real property on the object at run time.</p>\n<p>Members that either have no attribute or are marked with the <xref href=\"System.ComponentModel.DesignOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref> set to <strong>false</strong> can be set during run time. The default is <strong>false</strong>.</p>\n<p>A property with the <xref href=\"System.ComponentModel.DesignOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref> set to <strong>true</strong> has its value serialized to the .resx file instead of the <code>InitializeComponent</code> method.</p>\n<p>For more information, see Extending Metadata Using Attributes.</p>\n"
  example:
  - "\n<p>The following example creates a <code>GetLanguage</code> property. The property is marked with a <xref href=\"System.ComponentModel.DesignOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic DesignOnlyAttribute Example#1<p>The next example gets the value of the <xref href=\"System.ComponentModel.DesignOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref>. First the code gets a <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> with all the properties for the object. Next it indexes into the <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> to find the <code>GetLanguage</code> property. Then it returns the attributes for this property and saves them in the attributes variable.</p><p>The example then prints whether the property is design only by retrieving <xref href=\"System.ComponentModel.DesignOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref> from the <xref href=\"System.ComponentModel.AttributeCollection\" data-throw-if-not-resolved=\"false\"></xref>, and writing it to the console screen.</p>Classic DesignOnlyAttribute Example#2"
  syntax:
    content: 'public sealed class DesignOnlyAttribute : Attribute'
    content.vb: >-
      Public NotInheritable Class DesignOnlyAttribute
          Inherits Attribute
  seealso:
  - type: System.Attribute
    commentId: T:System.Attribute
  - type: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.ComponentModel.DesignOnlyAttribute.Default
  commentId: F:System.ComponentModel.DesignOnlyAttribute.Default
  id: Default
  parent: System.ComponentModel.DesignOnlyAttribute
  langs:
  - csharp
  - vb
  name: Default
  fullName: System.ComponentModel.DesignOnlyAttribute.Default
  type: Field
  source:
    remote:
      path: src/System.ComponentModel.Primitives/src/System/ComponentModel/DesignOnlyAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Default
    path: src/System.ComponentModel.Primitives/src/System/ComponentModel/DesignOnlyAttribute.cs
    startLine: 55
  assemblies:
  - System.ComponentModel.Primitives
  namespace: System.ComponentModel
  summary: "\n<p>Specifies the default value for the <xref href=\"System.ComponentModel.DesignOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref>, which is <xref href=\"System.ComponentModel.DesignOnlyAttribute.No\" data-throw-if-not-resolved=\"false\"></xref>. This <strong>static</strong> field is read-only.</p>\n"
  syntax:
    content: public static readonly DesignOnlyAttribute Default
    content.vb: Public Shared ReadOnly Default As DesignOnlyAttribute
    return:
      type: System.ComponentModel.DesignOnlyAttribute
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.ComponentModel.DesignOnlyAttribute.No
  commentId: F:System.ComponentModel.DesignOnlyAttribute.No
  id: No
  parent: System.ComponentModel.DesignOnlyAttribute
  langs:
  - csharp
  - vb
  name: No
  fullName: System.ComponentModel.DesignOnlyAttribute.No
  type: Field
  source:
    remote:
      path: src/System.ComponentModel.Primitives/src/System/ComponentModel/DesignOnlyAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: No
    path: src/System.ComponentModel.Primitives/src/System/ComponentModel/DesignOnlyAttribute.cs
    startLine: 47
  assemblies:
  - System.ComponentModel.Primitives
  namespace: System.ComponentModel
  summary: "\n<p>Specifies that a property can be set at design time or at run time. This <strong>static</strong> field is read-only.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ComponentModel.DesignOnlyAttribute.No\" data-throw-if-not-resolved=\"false\"></xref> field is the default setting for this attribute.</p>\n"
  syntax:
    content: public static readonly DesignOnlyAttribute No
    content.vb: Public Shared ReadOnly No As DesignOnlyAttribute
    return:
      type: System.ComponentModel.DesignOnlyAttribute
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.ComponentModel.DesignOnlyAttribute.Yes
  commentId: F:System.ComponentModel.DesignOnlyAttribute.Yes
  id: Yes
  parent: System.ComponentModel.DesignOnlyAttribute
  langs:
  - csharp
  - vb
  name: Yes
  fullName: System.ComponentModel.DesignOnlyAttribute.Yes
  type: Field
  source:
    remote:
      path: src/System.ComponentModel.Primitives/src/System/ComponentModel/DesignOnlyAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Yes
    path: src/System.ComponentModel.Primitives/src/System/ComponentModel/DesignOnlyAttribute.cs
    startLine: 37
  assemblies:
  - System.ComponentModel.Primitives
  namespace: System.ComponentModel
  summary: "\n<p>Specifies that a property can be set only at design time. This <strong>static</strong> field is read-only.</p>\n"
  syntax:
    content: public static readonly DesignOnlyAttribute Yes
    content.vb: Public Shared ReadOnly Yes As DesignOnlyAttribute
    return:
      type: System.ComponentModel.DesignOnlyAttribute
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.ComponentModel.DesignOnlyAttribute.#ctor(System.Boolean)
  commentId: M:System.ComponentModel.DesignOnlyAttribute.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.ComponentModel.DesignOnlyAttribute
  langs:
  - csharp
  - vb
  name: DesignOnlyAttribute(Boolean)
  fullName: System.ComponentModel.DesignOnlyAttribute.DesignOnlyAttribute(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.Primitives/src/System/ComponentModel/DesignOnlyAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.Primitives/src/System/ComponentModel/DesignOnlyAttribute.cs
    startLine: 18
  assemblies:
  - System.ComponentModel.Primitives
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.DesignOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public DesignOnlyAttribute(bool isDesignOnly)
    content.vb: Public Sub New(isDesignOnly As Boolean)
    parameters:
    - id: isDesignOnly
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a property can be set only at design time; <strong>false</strong> if the property can be set at design time and at run time. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.DesignOnlyAttribute.IsDesignOnly
  commentId: P:System.ComponentModel.DesignOnlyAttribute.IsDesignOnly
  id: IsDesignOnly
  parent: System.ComponentModel.DesignOnlyAttribute
  langs:
  - csharp
  - vb
  name: IsDesignOnly
  fullName: System.ComponentModel.DesignOnlyAttribute.IsDesignOnly
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.Primitives/src/System/ComponentModel/DesignOnlyAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDesignOnly
    path: src/System.ComponentModel.Primitives/src/System/ComponentModel/DesignOnlyAttribute.cs
    startLine: 29
  assemblies:
  - System.ComponentModel.Primitives
  namespace: System.ComponentModel
  summary: "\n<p>Gets a value indicating whether a property can be set only at design time.</p>\n"
  syntax:
    content: public bool IsDesignOnly { get; }
    content.vb: Public ReadOnly Property IsDesignOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a property can be set only at design time; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.ComponentModel.DesignOnlyAttribute.Equals(System.Object)
  commentId: M:System.ComponentModel.DesignOnlyAttribute.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.ComponentModel.DesignOnlyAttribute
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.ComponentModel.DesignOnlyAttribute.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.Primitives/src/System/ComponentModel/DesignOnlyAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.ComponentModel.Primitives/src/System/ComponentModel/DesignOnlyAttribute.cs
    startLine: 57
  assemblies:
  - System.ComponentModel.Primitives
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether the value of the given object is equal to the current <xref href=\"System.ComponentModel.DesignOnlyAttribute\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to test the value equality of. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of the given object is equal to that of the current; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.ComponentModel.DesignOnlyAttribute.GetHashCode
  commentId: M:System.ComponentModel.DesignOnlyAttribute.GetHashCode
  id: GetHashCode
  parent: System.ComponentModel.DesignOnlyAttribute
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.ComponentModel.DesignOnlyAttribute.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.Primitives/src/System/ComponentModel/DesignOnlyAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.ComponentModel.Primitives/src/System/ComponentModel/DesignOnlyAttribute.cs
    startLine: 68
  assemblies:
  - System.ComponentModel.Primitives
  namespace: System.ComponentModel
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  seealso:
  - type: System.Attribute.GetHashCode
    commentId: M:System.Attribute.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.ComponentModel
  isExternal: false
  name: System.ComponentModel
  fullName: System.ComponentModel
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.ComponentModel.DesignOnlyAttribute
  parent: System.ComponentModel
  isExternal: false
  name: DesignOnlyAttribute
  fullName: System.ComponentModel.DesignOnlyAttribute
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
