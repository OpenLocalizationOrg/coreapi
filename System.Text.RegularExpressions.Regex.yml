items:
- uid: System.Text.RegularExpressions.Regex
  id: Regex
  parent: System.Text.RegularExpressions
  children:
  - System.Text.RegularExpressions.Regex.#ctor
  - System.Text.RegularExpressions.Regex.#ctor(System.String)
  - System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)
  - System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  - System.Text.RegularExpressions.Regex.CacheSize
  - System.Text.RegularExpressions.Regex.Escape(System.String)
  - System.Text.RegularExpressions.Regex.GetGroupNames
  - System.Text.RegularExpressions.Regex.GetGroupNumbers
  - System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)
  - System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)
  - System.Text.RegularExpressions.Regex.InfiniteMatchTimeout
  - System.Text.RegularExpressions.Regex.IsMatch(System.String)
  - System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)
  - System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)
  - System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  - System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  - System.Text.RegularExpressions.Regex.Match(System.String)
  - System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)
  - System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)
  - System.Text.RegularExpressions.Regex.Match(System.String,System.String)
  - System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  - System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  - System.Text.RegularExpressions.Regex.Matches(System.String)
  - System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)
  - System.Text.RegularExpressions.Regex.Matches(System.String,System.String)
  - System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  - System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  - System.Text.RegularExpressions.Regex.MatchTimeout
  - System.Text.RegularExpressions.Regex.Options
  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String)
  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)
  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)
  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)
  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)
  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)
  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  - System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)
  - System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)
  - System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)
  - System.Text.RegularExpressions.Regex.RightToLeft
  - System.Text.RegularExpressions.Regex.Split(System.String)
  - System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)
  - System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)
  - System.Text.RegularExpressions.Regex.Split(System.String,System.String)
  - System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  - System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  - System.Text.RegularExpressions.Regex.ToString
  - System.Text.RegularExpressions.Regex.Unescape(System.String)
  href: System.Text.RegularExpressions.Regex.yml
  name: Regex
  fullName: System.Text.RegularExpressions.Regex
  type: Class
  source:
    remote: &o0
      path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 19
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Represents an immutable regular expression.To browse the .NET Framework source code for this type, see the Reference Source.
  syntax:
    content: public class Regex
    content.vb: Public Class Regex
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Text.RegularExpressions.Regex.InfiniteMatchTimeout
  id: InfiniteMatchTimeout
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: InfiniteMatchTimeout
  fullName: System.Text.RegularExpressions.Regex.InfiniteMatchTimeout
  type: Field
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 38
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Specifies that a pattern-matching operation should not time out.
  syntax:
    content: public static readonly TimeSpan InfiniteMatchTimeout
    content.vb: Public Shared ReadOnly InfiniteMatchTimeout As TimeSpan
- uid: System.Text.RegularExpressions.Regex.#ctor
  id: '#ctor'
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Regex()
  fullName: System.Text.RegularExpressions.Regex.Regex()
  type: Constructor
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 65
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Initializes a new instance of the @'System.Text.RegularExpressions.Regex' class.
  syntax:
    content: protected Regex()
    content.vb: Protected Sub New
- uid: System.Text.RegularExpressions.Regex.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Regex(String)
  fullName: System.Text.RegularExpressions.Regex.Regex(System.String)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 74
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Initializes a new instance of the @'System.Text.RegularExpressions.Regex' class for the specified regular expression.
  syntax:
    content: public Regex(string pattern)
    content.vb: Public Sub New(pattern As String)
    parameters:
    - id: pattern
      type: System.String
      description: The regular expression pattern to match.
  exceptions:
  - type: System.ArgumentException
    description: A regular expression parsing error occurred.
  - type: System.ArgumentNullException
    description: '*pattern* is null.'
- uid: System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)
  id: '#ctor(System.String,System.Text.RegularExpressions.RegexOptions)'
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Regex(String, RegexOptions)
  fullName: System.Text.RegularExpressions.Regex.Regex(System.String, System.Text.RegularExpressions.RegexOptions)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 83
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Initializes a new instance of the @'System.Text.RegularExpressions.Regex' class for the specified regular expression, with options that modify the pattern.
  syntax:
    content: public Regex(string pattern, RegexOptions options)
    content.vb: Public Sub New(pattern As String, options As RegexOptions)
    parameters:
    - id: pattern
      type: System.String
      description: The regular expression pattern to match.
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: A bitwise combination of the enumeration values that modify the regular expression.
  exceptions:
  - type: System.ArgumentException
    description: A regular expression parsing error occurred.
  - type: System.ArgumentNullException
    description: '*pattern* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*options* contains an invalid flag.'
- uid: System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  id: '#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)'
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Regex(String, RegexOptions, TimeSpan)
  fullName: System.Text.RegularExpressions.Regex.Regex(System.String, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 88
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Initializes a new instance of the @'System.Text.RegularExpressions.Regex' class for the specified regular expression, with options that modify the pattern and a value that specifies how long a pattern matching method should attempt a match before it times out.
  syntax:
    content: public Regex(string pattern, RegexOptions options, TimeSpan matchTimeout)
    content.vb: Public Sub New(pattern As String, options As RegexOptions, matchTimeout As TimeSpan)
    parameters:
    - id: pattern
      type: System.String
      description: The regular expression pattern to match.
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: A bitwise combination of the enumeration values that modify the regular expression.
    - id: matchTimeout
      type: System.TimeSpan
      description: A time-out interval, or @'System.Text.RegularExpressions.Regex.InfiniteMatchTimeout' to indicate that the method should not time out.
  exceptions:
  - type: System.ArgumentException
    description: A regular expression parsing error occurred.
  - type: System.ArgumentNullException
    description: '*pattern* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*options* is not a valid @''System.Text.RegularExpressions.RegexOptions'' value.-or-*matchTimeout* is negative, zero, or greater than approximately 24 days.'
- uid: System.Text.RegularExpressions.Regex.CacheSize
  id: CacheSize
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: CacheSize
  fullName: System.Text.RegularExpressions.Regex.CacheSize
  type: Property
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 211
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Gets or sets the maximum number of entries in the current static cache of compiled regular expressions.
  syntax:
    content: public static int CacheSize { get; set; }
    content.vb: Public Shared Property CacheSize As Integer
    parameters: []
    return:
      type: System.Int32
      description: The maximum number of entries in the static cache.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: The value in a set operation is less than zero.
- uid: System.Text.RegularExpressions.Regex.MatchTimeout
  id: MatchTimeout
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: MatchTimeout
  fullName: System.Text.RegularExpressions.Regex.MatchTimeout
  type: Property
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 247
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Gets the time-out interval of the current instance.
  syntax:
    content: public TimeSpan MatchTimeout { get; }
    content.vb: Public ReadOnly Property MatchTimeout As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
      description: The maximum time interval that can elapse in a pattern-matching operation before a @'System.Text.RegularExpressions.RegexMatchTimeoutException' is thrown, or @'System.Text.RegularExpressions.Regex.InfiniteMatchTimeout' if time-outs are disabled.
- uid: System.Text.RegularExpressions.Regex.Options
  id: Options
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Options
  fullName: System.Text.RegularExpressions.Regex.Options
  type: Property
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 238
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Gets the options that were passed into the @'System.Text.RegularExpressions.Regex' constructor.
  syntax:
    content: public RegexOptions Options { get; }
    content.vb: Public ReadOnly Property Options As RegexOptions
    parameters: []
    return:
      type: System.Text.RegularExpressions.RegexOptions
      description: One or more members of the @'System.Text.RegularExpressions.RegexOptions' enumeration that represent options that were passed to the @'System.Text.RegularExpressions.Regex' constructor
- uid: System.Text.RegularExpressions.Regex.RightToLeft
  id: RightToLeft
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: RightToLeft
  fullName: System.Text.RegularExpressions.Regex.RightToLeft
  type: Property
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 255
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Gets a value that indicates whether the regular expression searches from right to left.
  syntax:
    content: public bool RightToLeft { get; }
    content.vb: Public ReadOnly Property RightToLeft As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the regular expression searches from right to left; otherwise, false.
- uid: System.Text.RegularExpressions.Regex.Escape(System.String)
  id: Escape(System.String)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Escape(String)
  fullName: System.Text.RegularExpressions.Regex.Escape(System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 191
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: 'Escapes a minimal set of characters (\, *, +, ?, |, {, [, (,), ^, $,., #, and white space) by replacing them with their escape codes. This instructs the regular expression engine to interpret these characters literally rather than as metacharacters.'
  syntax:
    content: public static string Escape(string str)
    content.vb: Public Shared Function Escape(str As String) As String
    parameters:
    - id: str
      type: System.String
      description: The input string that contains the text to convert.
    return:
      type: System.String
      description: A string of characters with metacharacters converted to their escaped form.
  exceptions:
  - type: System.ArgumentNullException
    description: '*str* is null.'
- uid: System.Text.RegularExpressions.Regex.GetGroupNames
  id: GetGroupNames
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: GetGroupNames()
  fullName: System.Text.RegularExpressions.Regex.GetGroupNames()
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 281
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Returns an array of capturing group names for the regular expression.
  syntax:
    content: public string[] GetGroupNames()
    content.vb: Public Function GetGroupNames As String()
    return:
      type: System.String[]
      description: A string array of group names.
- uid: System.Text.RegularExpressions.Regex.GetGroupNumbers
  id: GetGroupNumbers
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: GetGroupNumbers()
  fullName: System.Text.RegularExpressions.Regex.GetGroupNumbers()
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 314
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Returns an array of capturing group numbers that correspond to group names in an array.
  syntax:
    content: public int[] GetGroupNumbers()
    content.vb: Public Function GetGroupNumbers As Integer()
    return:
      type: System.Int32[]
      description: An integer array of group numbers.
- uid: System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)
  id: GroupNameFromNumber(System.Int32)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: GroupNameFromNumber(Int32)
  fullName: System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 351
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Gets the group name that corresponds to the specified group number.
  syntax:
    content: public string GroupNameFromNumber(int i)
    content.vb: Public Function GroupNameFromNumber(i As Integer) As String
    parameters:
    - id: i
      type: System.Int32
      description: The group number to convert to the corresponding group name.
    return:
      type: System.String
      description: A string that contains the group name associated with the specified group number. If there is no group name that corresponds to *i*, the method returns @'System.String.Empty'.
- uid: System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)
  id: GroupNumberFromName(System.String)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: GroupNumberFromName(String)
  fullName: System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 385
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Returns the group number that corresponds to the specified group name.
  syntax:
    content: public int GroupNumberFromName(string name)
    content.vb: Public Function GroupNumberFromName(name As String) As Integer
    parameters:
    - id: name
      type: System.String
      description: The group name to convert to the corresponding group number.
    return:
      type: System.Int32
      description: The group number that corresponds to the specified group name, or -1 if *name* is not a valid group name.
  exceptions:
  - type: System.ArgumentNullException
    description: '*name* is null.'
- uid: System.Text.RegularExpressions.Regex.IsMatch(System.String)
  id: IsMatch(System.String)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: IsMatch(String)
  fullName: System.Text.RegularExpressions.Regex.IsMatch(System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 457
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Indicates whether the regular expression specified in the @'System.Text.RegularExpressions.Regex' constructor finds a match in a specified input string.
  syntax:
    content: public bool IsMatch(string input)
    content.vb: Public Function IsMatch(input As String) As Boolean
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    return:
      type: System.Boolean
      description: true if the regular expression finds a match; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: '*input* is null.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)
  id: IsMatch(System.String,System.Int32)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: IsMatch(String, Int32)
  fullName: System.Text.RegularExpressions.Regex.IsMatch(System.String, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 473
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Indicates whether the regular expression specified in the @'System.Text.RegularExpressions.Regex' constructor finds a match in the specified input string, beginning at the specified starting position in the string.
  syntax:
    content: public bool IsMatch(string input, int startat)
    content.vb: Public Function IsMatch(input As String, startat As Integer) As Boolean
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    - id: startat
      type: System.Int32
      description: The character position at which to start the search.
    return:
      type: System.Boolean
      description: true if the regular expression finds a match; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    description: '*input* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*startat* is less than zero or greater than the length of *input*.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)
  id: IsMatch(System.String,System.String)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: IsMatch(String, String)
  fullName: System.Text.RegularExpressions.Regex.IsMatch(System.String, System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 427
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Indicates whether the specified regular expression finds a match in the specified input string.
  syntax:
    content: public static bool IsMatch(string input, string pattern)
    content.vb: Public Shared Function IsMatch(input As String, pattern As String) As Boolean
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    - id: pattern
      type: System.String
      description: The regular expression pattern to match.
    return:
      type: System.Boolean
      description: true if the regular expression finds a match; otherwise, false.
  exceptions:
  - type: System.ArgumentException
    description: A regular expression parsing error occurred.
  - type: System.ArgumentNullException
    description: '*input* or *pattern* is null.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  id: IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: IsMatch(String, String, RegexOptions)
  fullName: System.Text.RegularExpressions.Regex.IsMatch(System.String, System.String, System.Text.RegularExpressions.RegexOptions)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 440
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options.
  syntax:
    content: public static bool IsMatch(string input, string pattern, RegexOptions options)
    content.vb: Public Shared Function IsMatch(input As String, pattern As String, options As RegexOptions) As Boolean
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    - id: pattern
      type: System.String
      description: The regular expression pattern to match.
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: A bitwise combination of the enumeration values that provide options for matching.
    return:
      type: System.Boolean
      description: true if the regular expression finds a match; otherwise, false.
  exceptions:
  - type: System.ArgumentException
    description: A regular expression parsing error occurred.
  - type: System.ArgumentNullException
    description: '*input* or *pattern* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*options* is not a valid @''System.Text.RegularExpressions.RegexOptions''  value.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  id: IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: IsMatch(String, String, RegexOptions, TimeSpan)
  fullName: System.Text.RegularExpressions.Regex.IsMatch(System.String, System.String, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 445
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options and time-out interval.
  syntax:
    content: public static bool IsMatch(string input, string pattern, RegexOptions options, TimeSpan matchTimeout)
    content.vb: Public Shared Function IsMatch(input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As Boolean
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    - id: pattern
      type: System.String
      description: The regular expression pattern to match.
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: A bitwise combination of the enumeration values that provide options for matching.
    - id: matchTimeout
      type: System.TimeSpan
      description: A time-out interval, or @'System.Text.RegularExpressions.Regex.InfiniteMatchTimeout' to indicate that the method should not time out.
    return:
      type: System.Boolean
      description: true if the regular expression finds a match; otherwise, false.
  exceptions:
  - type: System.ArgumentException
    description: A regular expression parsing error occurred.
  - type: System.ArgumentNullException
    description: '*input* or *pattern* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*options* is not a valid @''System.Text.RegularExpressions.RegexOptions'' value.-or-*matchTimeout* is negative, zero, or greater than approximately 24 days.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred.
- uid: System.Text.RegularExpressions.Regex.Match(System.String)
  id: Match(System.String)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Match(String)
  fullName: System.Text.RegularExpressions.Regex.Match(System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 520
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Searches the specified input string for the first occurrence of the regular expression specified in the @'System.Text.RegularExpressions.Regex' constructor.
  syntax:
    content: public Match Match(string input)
    content.vb: Public Function Match(input As String) As Match
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    return:
      type: System.Text.RegularExpressions.Match
      description: An object that contains information about the match.
  exceptions:
  - type: System.ArgumentNullException
    description: '*input* is null.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)
  id: Match(System.String,System.Int32)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Match(String, Int32)
  fullName: System.Text.RegularExpressions.Regex.Match(System.String, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 535
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position in the string.
  syntax:
    content: public Match Match(string input, int startat)
    content.vb: Public Function Match(input As String, startat As Integer) As Match
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    - id: startat
      type: System.Int32
      description: The zero-based character position at which to start the search.
    return:
      type: System.Text.RegularExpressions.Match
      description: An object that contains information about the match.
  exceptions:
  - type: System.ArgumentNullException
    description: '*input* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*startat* is less than zero or greater than the length of *input*.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)
  id: Match(System.String,System.Int32,System.Int32)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Match(String, Int32, Int32)
  fullName: System.Text.RegularExpressions.Regex.Match(System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 551
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position and searching only the specified number of characters.
  syntax:
    content: public Match Match(string input, int beginning, int length)
    content.vb: Public Function Match(input As String, beginning As Integer, length As Integer) As Match
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    - id: beginning
      type: System.Int32
      description: The zero-based character position in the input string that defines the leftmost position to be searched.
    - id: length
      type: System.Int32
      description: The number of characters in the substring to include in the search.
    return:
      type: System.Text.RegularExpressions.Match
      description: An object that contains information about the match.
  exceptions:
  - type: System.ArgumentNullException
    description: '*input* is null.'
  - type: System.ArgumentOutOfRangeException
    description: "*beginning* is less than zero or greater than the length of *input*.-or-*length* is less than zero or greater than the length of *input*.-or-*beginning*+*length*– 1 identifies a position that is outside the range of *input*."
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.Match(System.String,System.String)
  id: Match(System.String,System.String)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Match(String, String)
  fullName: System.Text.RegularExpressions.Regex.Match(System.String, System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 488
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Searches the specified input string for the first occurrence of the specified regular expression.
  syntax:
    content: public static Match Match(string input, string pattern)
    content.vb: Public Shared Function Match(input As String, pattern As String) As Match
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    - id: pattern
      type: System.String
      description: The regular expression pattern to match.
    return:
      type: System.Text.RegularExpressions.Match
      description: An object that contains information about the match.
  exceptions:
  - type: System.ArgumentException
    description: A regular expression parsing error occurred.
  - type: System.ArgumentNullException
    description: '*input* or *pattern* is null.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  id: Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Match(String, String, RegexOptions)
  fullName: System.Text.RegularExpressions.Regex.Match(System.String, System.String, System.Text.RegularExpressions.RegexOptions)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 501
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Searches the input string for the first occurrence of the specified regular expression, using the specified matching options.
  syntax:
    content: public static Match Match(string input, string pattern, RegexOptions options)
    content.vb: Public Shared Function Match(input As String, pattern As String, options As RegexOptions) As Match
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    - id: pattern
      type: System.String
      description: The regular expression pattern to match.
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: A bitwise combination of the enumeration values that provide options for matching.
    return:
      type: System.Text.RegularExpressions.Match
      description: An object that contains information about the match.
  exceptions:
  - type: System.ArgumentException
    description: A regular expression parsing error occurred.
  - type: System.ArgumentNullException
    description: '*input* or *pattern* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*options* is not a valid bitwise combination of @''System.Text.RegularExpressions.RegexOptions'' values.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  id: Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Match(String, String, RegexOptions, TimeSpan)
  fullName: System.Text.RegularExpressions.Regex.Match(System.String, System.String, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 507
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Searches the input string for the first occurrence of the specified regular expression, using the specified matching options and time-out interval.
  syntax:
    content: public static Match Match(string input, string pattern, RegexOptions options, TimeSpan matchTimeout)
    content.vb: Public Shared Function Match(input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As Match
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    - id: pattern
      type: System.String
      description: The regular expression pattern to match.
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: A bitwise combination of the enumeration values that provide options for matching.
    - id: matchTimeout
      type: System.TimeSpan
      description: A time-out interval, or @'System.Text.RegularExpressions.Regex.InfiniteMatchTimeout' to indicate that the method should not time out.
    return:
      type: System.Text.RegularExpressions.Match
      description: An object that contains information about the match.
  exceptions:
  - type: System.ArgumentException
    description: A regular expression parsing error occurred.
  - type: System.ArgumentNullException
    description: '*input* or *pattern* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*options* is not a valid bitwise combination of @''System.Text.RegularExpressions.RegexOptions'' values.-or-*matchTimeout* is negative, zero, or greater than approximately 24 days.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.Matches(System.String)
  id: Matches(System.String)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Matches(String)
  fullName: System.Text.RegularExpressions.Regex.Matches(System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 593
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Searches the specified input string for all occurrences of a regular expression.
  syntax:
    content: public MatchCollection Matches(string input)
    content.vb: Public Function Matches(input As String) As MatchCollection
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    return:
      type: System.Text.RegularExpressions.MatchCollection
      description: A collection of the @'System.Text.RegularExpressions.Match' objects found by the search. If no matches are found, the method returns an empty collection object.
  exceptions:
  - type: System.ArgumentNullException
    description: '*input* is null.'
- uid: System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)
  id: Matches(System.String,System.Int32)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Matches(String, Int32)
  fullName: System.Text.RegularExpressions.Regex.Matches(System.String, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 607
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Searches the specified input string for all occurrences of a regular expression, beginning at the specified starting position in the string.
  syntax:
    content: public MatchCollection Matches(string input, int startat)
    content.vb: Public Function Matches(input As String, startat As Integer) As MatchCollection
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    - id: startat
      type: System.Int32
      description: The character position in the input string at which to start the search.
    return:
      type: System.Text.RegularExpressions.MatchCollection
      description: A collection of the @'System.Text.RegularExpressions.Match' objects found by the search. If no matches are found, the method returns an empty collection object.
  exceptions:
  - type: System.ArgumentNullException
    description: '*input* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*startat* is less than zero or greater than the length of *input*.'
- uid: System.Text.RegularExpressions.Regex.Matches(System.String,System.String)
  id: Matches(System.String,System.String)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Matches(String, String)
  fullName: System.Text.RegularExpressions.Regex.Matches(System.String, System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 565
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Searches the specified input string for all occurrences of a specified regular expression.
  syntax:
    content: public static MatchCollection Matches(string input, string pattern)
    content.vb: Public Shared Function Matches(input As String, pattern As String) As MatchCollection
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    - id: pattern
      type: System.String
      description: The regular expression pattern to match.
    return:
      type: System.Text.RegularExpressions.MatchCollection
      description: A collection of the @'System.Text.RegularExpressions.Match' objects found by the search. If no matches are found, the method returns an empty collection object.
  exceptions:
  - type: System.ArgumentException
    description: A regular expression parsing error occurred.
  - type: System.ArgumentNullException
    description: '*input* or *pattern* is null.'
- uid: System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  id: Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Matches(String, String, RegexOptions)
  fullName: System.Text.RegularExpressions.Regex.Matches(System.String, System.String, System.Text.RegularExpressions.RegexOptions)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 576
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options.
  syntax:
    content: public static MatchCollection Matches(string input, string pattern, RegexOptions options)
    content.vb: Public Shared Function Matches(input As String, pattern As String, options As RegexOptions) As MatchCollection
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    - id: pattern
      type: System.String
      description: The regular expression pattern to match.
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: A bitwise combination of the enumeration values that specify options for matching.
    return:
      type: System.Text.RegularExpressions.MatchCollection
      description: A collection of the @'System.Text.RegularExpressions.Match' objects found by the search. If no matches are found, the method returns an empty collection object.
  exceptions:
  - type: System.ArgumentException
    description: A regular expression parsing error occurred.
  - type: System.ArgumentNullException
    description: '*input* or *pattern* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*options* is not a valid bitwise combination of @''System.Text.RegularExpressions.RegexOptions'' values.'
- uid: System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  id: Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Matches(String, String, RegexOptions, TimeSpan)
  fullName: System.Text.RegularExpressions.Regex.Matches(System.String, System.String, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 581
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options and time-out interval.
  syntax:
    content: public static MatchCollection Matches(string input, string pattern, RegexOptions options, TimeSpan matchTimeout)
    content.vb: Public Shared Function Matches(input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As MatchCollection
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    - id: pattern
      type: System.String
      description: The regular expression pattern to match.
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: A bitwise combination of the enumeration values that specify options for matching.
    - id: matchTimeout
      type: System.TimeSpan
      description: A time-out interval, or @'System.Text.RegularExpressions.Regex.InfiniteMatchTimeout' to indicate that the method should not time out.
    return:
      type: System.Text.RegularExpressions.MatchCollection
      description: A collection of the @'System.Text.RegularExpressions.Match' objects found by the search. If no matches are found, the method returns an empty collection object.
  exceptions:
  - type: System.ArgumentException
    description: A regular expression parsing error occurred.
  - type: System.ArgumentNullException
    description: '*input* or *pattern* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*options* is not a valid bitwise combination of @''System.Text.RegularExpressions.RegexOptions'' values.-or-*matchTimeout* is negative, zero, or greater than approximately 24 days.'
- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String)
  id: Replace(System.String,System.String)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Replace(String, String)
  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 644
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: In a specified input string, replaces all strings that match a regular expression pattern with a specified replacement string.
  syntax:
    content: public string Replace(string input, string replacement)
    content.vb: Public Function Replace(input As String, replacement As String) As String
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    - id: replacement
      type: System.String
      description: The replacement string.
    return:
      type: System.String
      description: A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.
  exceptions:
  - type: System.ArgumentNullException
    description: '*input* or *replacement* is null.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)
  id: Replace(System.String,System.String,System.Int32)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Replace(String, String, Int32)
  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 657
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.
  syntax:
    content: public string Replace(string input, string replacement, int count)
    content.vb: Public Function Replace(input As String, replacement As String, count As Integer) As String
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    - id: replacement
      type: System.String
      description: The replacement string.
    - id: count
      type: System.Int32
      description: The maximum number of times the replacement can occur.
    return:
      type: System.String
      description: A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.
  exceptions:
  - type: System.ArgumentNullException
    description: '*input* or *replacement* is null.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)
  id: Replace(System.String,System.String,System.Int32,System.Int32)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Replace(String, String, Int32, Int32)
  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 670
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.
  syntax:
    content: public string Replace(string input, string replacement, int count, int startat)
    content.vb: Public Function Replace(input As String, replacement As String, count As Integer, startat As Integer) As String
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    - id: replacement
      type: System.String
      description: The replacement string.
    - id: count
      type: System.Int32
      description: Maximum number of times the replacement can occur.
    - id: startat
      type: System.Int32
      description: The character position in the input string where the search begins.
    return:
      type: System.String
      description: A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.
  exceptions:
  - type: System.ArgumentNullException
    description: '*input* or *replacement* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*startat* is less than zero or greater than the length of *input*.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)
  id: Replace(System.String,System.String,System.String)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Replace(String, String, String)
  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String, System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 619
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string.
  syntax:
    content: public static string Replace(string input, string pattern, string replacement)
    content.vb: Public Shared Function Replace(input As String, pattern As String, replacement As String) As String
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    - id: pattern
      type: System.String
      description: The regular expression pattern to match.
    - id: replacement
      type: System.String
      description: The replacement string.
    return:
      type: System.String
      description: A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If *pattern* is not matched in the current instance, the method returns the current instance unchanged.
  exceptions:
  - type: System.ArgumentException
    description: A regular expression parsing error occurred.
  - type: System.ArgumentNullException
    description: '*input*, *pattern*, or *replacement* is null.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  id: Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Replace(String, String, String, RegexOptions)
  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String, System.String, System.Text.RegularExpressions.RegexOptions)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 629
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Specified options modify the matching operation.
  syntax:
    content: public static string Replace(string input, string pattern, string replacement, RegexOptions options)
    content.vb: Public Shared Function Replace(input As String, pattern As String, replacement As String, options As RegexOptions) As String
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    - id: pattern
      type: System.String
      description: The regular expression pattern to match.
    - id: replacement
      type: System.String
      description: The replacement string.
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: A bitwise combination of the enumeration values that provide options for matching.
    return:
      type: System.String
      description: A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If *pattern* is not matched in the current instance, the method returns the current instance unchanged.
  exceptions:
  - type: System.ArgumentException
    description: A regular expression parsing error occurred.
  - type: System.ArgumentNullException
    description: '*input*, *pattern*, or *replacement* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*options* is not a valid bitwise combination of @''System.Text.RegularExpressions.RegexOptions'' values.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  id: Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Replace(String, String, String, RegexOptions, TimeSpan)
  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String, System.String, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 634
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.
  syntax:
    content: public static string Replace(string input, string pattern, string replacement, RegexOptions options, TimeSpan matchTimeout)
    content.vb: Public Shared Function Replace(input As String, pattern As String, replacement As String, options As RegexOptions, matchTimeout As TimeSpan) As String
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    - id: pattern
      type: System.String
      description: The regular expression pattern to match.
    - id: replacement
      type: System.String
      description: The replacement string.
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: A bitwise combination of the enumeration values that provide options for matching.
    - id: matchTimeout
      type: System.TimeSpan
      description: A time-out interval, or @'System.Text.RegularExpressions.Regex.InfiniteMatchTimeout' to indicate that the method should not time out.
    return:
      type: System.String
      description: A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If *pattern* is not matched in the current instance, the method returns the current instance unchanged.
  exceptions:
  - type: System.ArgumentException
    description: A regular expression parsing error occurred.
  - type: System.ArgumentNullException
    description: '*input*, *pattern*, or *replacement* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*options* is not a valid bitwise combination of @''System.Text.RegularExpressions.RegexOptions'' values.-or-*matchTimeout* is negative, zero, or greater than approximately 24 days.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)
  id: Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Replace(String, String, MatchEvaluator)
  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String, System.Text.RegularExpressions.MatchEvaluator)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 694
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: In a specified input string, replaces all strings that match a specified regular expression with a string returned by a @'System.Text.RegularExpressions.MatchEvaluator' delegate.
  syntax:
    content: public static string Replace(string input, string pattern, MatchEvaluator evaluator)
    content.vb: Public Shared Function Replace(input As String, pattern As String, evaluator As MatchEvaluator) As String
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    - id: pattern
      type: System.String
      description: The regular expression pattern to match.
    - id: evaluator
      type: System.Text.RegularExpressions.MatchEvaluator
      description: A custom method that examines each match and returns either the original matched string or a replacement string.
    return:
      type: System.String
      description: A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If *pattern* is not matched in the current instance, the method returns the current instance unchanged.
  exceptions:
  - type: System.ArgumentException
    description: A regular expression parsing error occurred.
  - type: System.ArgumentNullException
    description: '*input*, *pattern*, or *evaluator* is null.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)
  id: Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Replace(String, String, MatchEvaluator, RegexOptions)
  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String, System.Text.RegularExpressions.MatchEvaluator, System.Text.RegularExpressions.RegexOptions)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 703
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: In a specified input string, replaces all strings that match a specified regular expression with a string returned by a @'System.Text.RegularExpressions.MatchEvaluator' delegate. Specified options modify the matching operation.
  syntax:
    content: public static string Replace(string input, string pattern, MatchEvaluator evaluator, RegexOptions options)
    content.vb: Public Shared Function Replace(input As String, pattern As String, evaluator As MatchEvaluator, options As RegexOptions) As String
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    - id: pattern
      type: System.String
      description: The regular expression pattern to match.
    - id: evaluator
      type: System.Text.RegularExpressions.MatchEvaluator
      description: A custom method that examines each match and returns either the original matched string or a replacement string.
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: A bitwise combination of the enumeration values that provide options for matching.
    return:
      type: System.String
      description: A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If *pattern* is not matched in the current instance, the method returns the current instance unchanged.
  exceptions:
  - type: System.ArgumentException
    description: A regular expression parsing error occurred.
  - type: System.ArgumentNullException
    description: '*input*, *pattern*, or *evaluator* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*options* is not a valid bitwise combination of @''System.Text.RegularExpressions.RegexOptions'' values.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  id: Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Replace(String, String, MatchEvaluator, RegexOptions, TimeSpan)
  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String, System.Text.RegularExpressions.MatchEvaluator, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 708
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: In a specified input string, replaces all substrings that match a specified regular expression with a string returned by a @'System.Text.RegularExpressions.MatchEvaluator' delegate. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.
  syntax:
    content: public static string Replace(string input, string pattern, MatchEvaluator evaluator, RegexOptions options, TimeSpan matchTimeout)
    content.vb: Public Shared Function Replace(input As String, pattern As String, evaluator As MatchEvaluator, options As RegexOptions, matchTimeout As TimeSpan) As String
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    - id: pattern
      type: System.String
      description: The regular expression pattern to match.
    - id: evaluator
      type: System.Text.RegularExpressions.MatchEvaluator
      description: A custom method that examines each match and returns either the original matched string or a replacement string.
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: A bitwise combination of enumeration values that provide options for matching.
    - id: matchTimeout
      type: System.TimeSpan
      description: A time-out interval, or @'System.Text.RegularExpressions.Regex.InfiniteMatchTimeout' to indicate that the method should not time out.
    return:
      type: System.String
      description: A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If *pattern* is not matched in the current instance, the method returns the current instance unchanged.
  exceptions:
  - type: System.ArgumentException
    description: A regular expression parsing error occurred.
  - type: System.ArgumentNullException
    description: '*input*, *pattern*, or *evaluator* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*options* is not a valid bitwise combination of @''System.Text.RegularExpressions.RegexOptions'' values.-or-*matchTimeout* is negative, zero, or greater than approximately 24 days.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)
  id: Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Replace(String, MatchEvaluator)
  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.Text.RegularExpressions.MatchEvaluator)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 717
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: In a specified input string, replaces all strings that match a specified regular expression with a string returned by a @'System.Text.RegularExpressions.MatchEvaluator' delegate.
  syntax:
    content: public string Replace(string input, MatchEvaluator evaluator)
    content.vb: Public Function Replace(input As String, evaluator As MatchEvaluator) As String
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    - id: evaluator
      type: System.Text.RegularExpressions.MatchEvaluator
      description: A custom method that examines each match and returns either the original matched string or a replacement string.
    return:
      type: System.String
      description: A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.
  exceptions:
  - type: System.ArgumentNullException
    description: '*input* or *evaluator* is null.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)
  id: Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Replace(String, MatchEvaluator, Int32)
  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.Text.RegularExpressions.MatchEvaluator, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 729
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a @'System.Text.RegularExpressions.MatchEvaluator' delegate.
  syntax:
    content: public string Replace(string input, MatchEvaluator evaluator, int count)
    content.vb: Public Function Replace(input As String, evaluator As MatchEvaluator, count As Integer) As String
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    - id: evaluator
      type: System.Text.RegularExpressions.MatchEvaluator
      description: A custom method that examines each match and returns either the original matched string or a replacement string.
    - id: count
      type: System.Int32
      description: The maximum number of times the replacement will occur.
    return:
      type: System.String
      description: A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.
  exceptions:
  - type: System.ArgumentNullException
    description: '*input* or *evaluator* is null.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)
  id: Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Replace(String, MatchEvaluator, Int32, Int32)
  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.Text.RegularExpressions.MatchEvaluator, System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 742
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a @'System.Text.RegularExpressions.MatchEvaluator' delegate.
  syntax:
    content: public string Replace(string input, MatchEvaluator evaluator, int count, int startat)
    content.vb: Public Function Replace(input As String, evaluator As MatchEvaluator, count As Integer, startat As Integer) As String
    parameters:
    - id: input
      type: System.String
      description: The string to search for a match.
    - id: evaluator
      type: System.Text.RegularExpressions.MatchEvaluator
      description: A custom method that examines each match and returns either the original matched string or a replacement string.
    - id: count
      type: System.Int32
      description: The maximum number of times the replacement will occur.
    - id: startat
      type: System.Int32
      description: The character position in the input string where the search begins.
    return:
      type: System.String
      description: A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.
  exceptions:
  - type: System.ArgumentNullException
    description: '*input* or *evaluator* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*startat* is less than zero or greater than the length of *input*.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.Split(System.String)
  id: Split(System.String)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Split(String)
  fullName: System.Text.RegularExpressions.Regex.Split(System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 776
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Splits an input string into an array of substrings at the positions defined by a regular expression pattern specified in the @'System.Text.RegularExpressions.Regex' constructor.
  syntax:
    content: public string[] Split(string input)
    content.vb: Public Function Split(input As String) As String()
    parameters:
    - id: input
      type: System.String
      description: The string to split.
    return:
      type: System.String[]
      description: An array of strings.
  exceptions:
  - type: System.ArgumentNullException
    description: '*input* is null.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)
  id: Split(System.String,System.Int32)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Split(String, Int32)
  fullName: System.Text.RegularExpressions.Regex.Split(System.String, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 788
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the @'System.Text.RegularExpressions.Regex' constructor.
  syntax:
    content: public string[] Split(string input, int count)
    content.vb: Public Function Split(input As String, count As Integer) As String()
    parameters:
    - id: input
      type: System.String
      description: The string to be split.
    - id: count
      type: System.Int32
      description: The maximum number of times the split can occur.
    return:
      type: System.String[]
      description: An array of strings.
  exceptions:
  - type: System.ArgumentNullException
    description: '*input* is null.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)
  id: Split(System.String,System.Int32,System.Int32)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Split(String, Int32, Int32)
  fullName: System.Text.RegularExpressions.Regex.Split(System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 800
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the @'System.Text.RegularExpressions.Regex' constructor. The search for the regular expression pattern starts at a specified character position in the input string.
  syntax:
    content: public string[] Split(string input, int count, int startat)
    content.vb: Public Function Split(input As String, count As Integer, startat As Integer) As String()
    parameters:
    - id: input
      type: System.String
      description: The string to be split.
    - id: count
      type: System.Int32
      description: The maximum number of times the split can occur.
    - id: startat
      type: System.Int32
      description: The character position in the input string where the search will begin.
    return:
      type: System.String[]
      description: An array of strings.
  exceptions:
  - type: System.ArgumentNullException
    description: '*input* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*startat* is less than zero or greater than the length of *input*.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.Split(System.String,System.String)
  id: Split(System.String,System.String)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Split(String, String)
  fullName: System.Text.RegularExpressions.Regex.Split(System.String, System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 754
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Splits an input string into an array of substrings at the positions defined by a regular expression pattern.
  syntax:
    content: public static string[] Split(string input, string pattern)
    content.vb: Public Shared Function Split(input As String, pattern As String) As String()
    parameters:
    - id: input
      type: System.String
      description: The string to split.
    - id: pattern
      type: System.String
      description: The regular expression pattern to match.
    return:
      type: System.String[]
      description: An array of strings.
  exceptions:
  - type: System.ArgumentException
    description: A regular expression parsing error occurred.
  - type: System.ArgumentNullException
    description: '*input* or *pattern* is null.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  id: Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Split(String, String, RegexOptions)
  fullName: System.Text.RegularExpressions.Regex.Split(System.String, System.String, System.Text.RegularExpressions.RegexOptions)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 762
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern. Specified options modify the matching operation.
  syntax:
    content: public static string[] Split(string input, string pattern, RegexOptions options)
    content.vb: Public Shared Function Split(input As String, pattern As String, options As RegexOptions) As String()
    parameters:
    - id: input
      type: System.String
      description: The string to split.
    - id: pattern
      type: System.String
      description: The regular expression pattern to match.
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: A bitwise combination of the enumeration values that provide options for matching.
    return:
      type: System.String[]
      description: An array of strings.
  exceptions:
  - type: System.ArgumentException
    description: A regular expression parsing error occurred.
  - type: System.ArgumentNullException
    description: '*input* or *pattern* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*options* is not a valid bitwise combination of @''System.Text.RegularExpressions.RegexOptions'' values.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  id: Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Split(String, String, RegexOptions, TimeSpan)
  fullName: System.Text.RegularExpressions.Regex.Split(System.String, System.String, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 767
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.
  syntax:
    content: public static string[] Split(string input, string pattern, RegexOptions options, TimeSpan matchTimeout)
    content.vb: Public Shared Function Split(input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As String()
    parameters:
    - id: input
      type: System.String
      description: The string to split.
    - id: pattern
      type: System.String
      description: The regular expression pattern to match.
    - id: options
      type: System.Text.RegularExpressions.RegexOptions
      description: A bitwise combination of the enumeration values that provide options for matching.
    - id: matchTimeout
      type: System.TimeSpan
      description: A time-out interval, or @'System.Text.RegularExpressions.Regex.InfiniteMatchTimeout' to indicate that the method should not time out.
    return:
      type: System.String[]
      description: A string array.
  exceptions:
  - type: System.ArgumentException
    description: A regular expression parsing error occurred.
  - type: System.ArgumentNullException
    description: '*input* or *pattern* is null.'
  - type: System.ArgumentOutOfRangeException
    description: '*options* is not a valid bitwise combination of @''System.Text.RegularExpressions.RegexOptions'' values.-or-*matchTimeout* is negative, zero, or greater than approximately 24 days.'
  - type: System.Text.RegularExpressions.RegexMatchTimeoutException
    description: A time-out occurred. For more information about time-outs, see the Remarks section.
- uid: System.Text.RegularExpressions.Regex.ToString
  id: ToString
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: ToString()
  fullName: System.Text.RegularExpressions.Regex.ToString()
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 266
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Returns the regular expression pattern that was passed into the Regex constructor.
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: The *pattern* parameter that was passed into the Regex constructor.
  overridden: System.Object.ToString
- uid: System.Text.RegularExpressions.Regex.Unescape(System.String)
  id: Unescape(System.String)
  parent: System.Text.RegularExpressions.Regex
  href: System.Text.RegularExpressions.Regex.yml
  name: Unescape(String)
  fullName: System.Text.RegularExpressions.Regex.Unescape(System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs
    startLine: 202
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: Converts any escaped characters in the input string.
  syntax:
    content: public static string Unescape(string str)
    content.vb: Public Shared Function Unescape(str As String) As String
    parameters:
    - id: str
      type: System.String
      description: The input string containing the text to convert.
    return:
      type: System.String
      description: A string of characters with any escaped characters converted to their unescaped form.
  exceptions:
  - type: System.ArgumentException
    description: '*str* includes an unrecognized escape sequence.'
  - type: System.ArgumentNullException
    description: '*str* is null.'
references:
- uid: System.Text.RegularExpressions
  isExternal: false
  name: System.Text.RegularExpressions
  fullName: System.Text.RegularExpressions
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  href: System.String.yml
  name: String
  fullName: System.String
- uid: System.Text.RegularExpressions.RegexOptions
  parent: System.Text.RegularExpressions
  isExternal: false
  href: System.Text.RegularExpressions.RegexOptions.yml
  name: RegexOptions
  fullName: System.Text.RegularExpressions.RegexOptions
- uid: System.TimeSpan
  parent: System
  isExternal: false
  href: System.TimeSpan.yml
  name: TimeSpan
  fullName: System.TimeSpan
- uid: System.Int32
  parent: System
  isExternal: false
  href: System.Int32.yml
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  href: System.Boolean.yml
  name: Boolean
  fullName: System.Boolean
- uid: System.String[]
  isExternal: true
  name: String[]
  name.vb: String()
  fullName: System.String[]
  fullName.vb: System.String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Int32[]
  isExternal: true
  name: Int32[]
  name.vb: Int32()
  fullName: System.Int32[]
  fullName.vb: System.Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Text.RegularExpressions.Match
  parent: System.Text.RegularExpressions
  isExternal: false
  href: System.Text.RegularExpressions.Match.yml
  name: Match
  fullName: System.Text.RegularExpressions.Match
- uid: System.Text.RegularExpressions.MatchCollection
  parent: System.Text.RegularExpressions
  isExternal: false
  href: System.Text.RegularExpressions.MatchCollection.yml
  name: MatchCollection
  fullName: System.Text.RegularExpressions.MatchCollection
- uid: System.Text.RegularExpressions.MatchEvaluator
  parent: System.Text.RegularExpressions
  isExternal: false
  href: System.Text.RegularExpressions.MatchEvaluator.yml
  name: MatchEvaluator
  fullName: System.Text.RegularExpressions.MatchEvaluator
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentException
  parent: System
  isExternal: false
  href: System.ArgumentException.yml
  name: ArgumentException
  fullName: System.ArgumentException
  summary: The exception that is thrown when one of the arguments provided to a method is not valid.
- uid: System.ArgumentNullException
  isExternal: false
  href: System.ArgumentNullException.yml
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  summary: The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  href: System.ArgumentOutOfRangeException.yml
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  summary: The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
- uid: System.Text.RegularExpressions.RegexMatchTimeoutException
  isExternal: false
  href: System.Text.RegularExpressions.RegexMatchTimeoutException.yml
  name: RegexMatchTimeoutException
  fullName: System.Text.RegularExpressions.RegexMatchTimeoutException
  summary: The exception that is thrown when the execution time of a regular expression pattern-matching method exceeds its time-out interval.
