items:
- uid: System.IO.Pipes.PipeSecurity
  commentId: T:System.IO.Pipes.PipeSecurity
  id: PipeSecurity
  parent: System.IO.Pipes
  children:
  - System.IO.Pipes.PipeSecurity.#ctor
  - System.IO.Pipes.PipeSecurity.AccessRightType
  - System.IO.Pipes.PipeSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.IO.Pipes.PipeSecurity.AccessRuleType
  - System.IO.Pipes.PipeSecurity.AddAccessRule(System.IO.Pipes.PipeAccessRule)
  - System.IO.Pipes.PipeSecurity.AddAuditRule(System.IO.Pipes.PipeAuditRule)
  - System.IO.Pipes.PipeSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  - System.IO.Pipes.PipeSecurity.AuditRuleType
  - System.IO.Pipes.PipeSecurity.Persist(System.Runtime.InteropServices.SafeHandle)
  - System.IO.Pipes.PipeSecurity.Persist(System.String)
  - System.IO.Pipes.PipeSecurity.RemoveAccessRule(System.IO.Pipes.PipeAccessRule)
  - System.IO.Pipes.PipeSecurity.RemoveAccessRuleSpecific(System.IO.Pipes.PipeAccessRule)
  - System.IO.Pipes.PipeSecurity.RemoveAuditRule(System.IO.Pipes.PipeAuditRule)
  - System.IO.Pipes.PipeSecurity.RemoveAuditRuleAll(System.IO.Pipes.PipeAuditRule)
  - System.IO.Pipes.PipeSecurity.RemoveAuditRuleSpecific(System.IO.Pipes.PipeAuditRule)
  - System.IO.Pipes.PipeSecurity.ResetAccessRule(System.IO.Pipes.PipeAccessRule)
  - System.IO.Pipes.PipeSecurity.SetAccessRule(System.IO.Pipes.PipeAccessRule)
  - System.IO.Pipes.PipeSecurity.SetAuditRule(System.IO.Pipes.PipeAuditRule)
  langs:
  - csharp
  - vb
  name: PipeSecurity
  fullName: System.IO.Pipes.PipeSecurity
  type: Class
  source:
    remote:
      path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PipeSecurity
    path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
    startLine: 12
  assemblies:
  - System.IO.Pipes.AccessControl
  namespace: System.IO.Pipes
  summary: "\n<p>Represents the access control and audit security for a pipe.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> class specifies the access rights for a pipe and how access attempts are audited.  This class represents access and audit rights as a set of rules. Each access rule is represented by a <xref href=\"System.IO.Pipes.PipeAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object, while each audit rule is represented by a <xref href=\"System.IO.Pipes.PipeAuditRule\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>The <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> class is an abstraction of the underlying Microsoft Windows file security system. In this system, each pipe has a discretionary access control list (DACL), which controls access to the pipe, and a system access control list (SACL), which specifies the access control attempts that are audited.  The <xref href=\"System.IO.Pipes.PipeAccessRule\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.Pipes.PipeAuditRule\" data-throw-if-not-resolved=\"false\"></xref> classes are abstractions of the access control entries (ACEs) that comprise DACLs and SACLs.      </p>\n<p>The <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> class hides many of the details of DACLs and SACLs; you do not have to worry about ACE ordering or null DACLS.</p>\n<p>Use the <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> class to retrieve, add, or change the access rules that represent the DACL and SACL of a pipe.</p>\n<p>To persist new or changed access or audit rules to a pipe, use the <xref href=\"System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)\" data-throw-if-not-resolved=\"false\"></xref> method. To retrieve access or audit rules from an existing file, use the <xref href=\"System.IO.Pipes.PipeStream.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: 'public class PipeSecurity : Security.AccessControl.NativeObjectSecurity'
    content.vb: >-
      Public Class PipeSecurity
          Inherits Security.AccessControl.NativeObjectSecurity
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.IO.Pipes.PipeSecurity.#ctor
  commentId: M:System.IO.Pipes.PipeSecurity.#ctor
  id: '#ctor'
  parent: System.IO.Pipes.PipeSecurity
  langs:
  - csharp
  - vb
  name: PipeSecurity()
  fullName: System.IO.Pipes.PipeSecurity.PipeSecurity()
  type: Constructor
  source:
    remote:
      path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
    startLine: 14
  assemblies:
  - System.IO.Pipes.AccessControl
  namespace: System.IO.Pipes
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>This constructor creates an empty <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object that is not based on an existing pipe. You can then populate the object with access control information and apply it to a pipe.</p>\n<p>You can add access or audit rules to the <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object using the <xref href=\"System.IO.Pipes.PipeSecurity.AddAccessRule(System.IO.Pipes.PipeAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method. You can remove access or audit rules using the <xref href=\"System.IO.Pipes.PipeSecurity.RemoveAccessRule(System.IO.Pipes.PipeAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>To persist new or changed access or audit rules to a pipe, use the <xref href=\"System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)\" data-throw-if-not-resolved=\"false\"></xref> method. To retrieve access or audit rules from an existing file, use the <xref href=\"System.IO.Pipes.PipeStream.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: public PipeSecurity()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Pipes.PipeSecurity.AccessRightType
  commentId: P:System.IO.Pipes.PipeSecurity.AccessRightType
  id: AccessRightType
  parent: System.IO.Pipes.PipeSecurity
  langs:
  - csharp
  - vb
  name: AccessRightType
  fullName: System.IO.Pipes.PipeSecurity.AccessRightType
  type: Property
  source:
    remote:
      path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AccessRightType
    path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
    startLine: 259
  assemblies:
  - System.IO.Pipes.AccessControl
  namespace: System.IO.Pipes
  summary: "\n<p>Gets the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of the securable object that is associated with the current <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>Classes that derive from the <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> class override the <xref href=\"System.Security.AccessControl.ObjectSecurity.AccessRightType\" data-throw-if-not-resolved=\"false\"></xref> property and return the type they use to represent access rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.</p>\n"
  example:
  - 
  syntax:
    content: public override Type AccessRightType { get; }
    content.vb: Public Overrides ReadOnly Property AccessRightType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The type of the securable object that is associated with the current <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.Pipes.PipeSecurity.AccessRuleType
  commentId: P:System.IO.Pipes.PipeSecurity.AccessRuleType
  id: AccessRuleType
  parent: System.IO.Pipes.PipeSecurity
  langs:
  - csharp
  - vb
  name: AccessRuleType
  fullName: System.IO.Pipes.PipeSecurity.AccessRuleType
  type: Property
  source:
    remote:
      path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AccessRuleType
    path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
    startLine: 267
  assemblies:
  - System.IO.Pipes.AccessControl
  namespace: System.IO.Pipes
  summary: "\n<p>Gets the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of the object that is associated with the access rules of the current <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>Classes that derive from the <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> class override the <xref href=\"System.Security.AccessControl.ObjectSecurity.AccessRuleType\" data-throw-if-not-resolved=\"false\"></xref> property and return the type they use to represent access rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.</p>\n"
  example:
  - 
  syntax:
    content: public override Type AccessRuleType { get; }
    content.vb: Public Overrides ReadOnly Property AccessRuleType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The type of the object that is associated with the access rules of the current <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.Pipes.PipeSecurity.AuditRuleType
  commentId: P:System.IO.Pipes.PipeSecurity.AuditRuleType
  id: AuditRuleType
  parent: System.IO.Pipes.PipeSecurity
  langs:
  - csharp
  - vb
  name: AuditRuleType
  fullName: System.IO.Pipes.PipeSecurity.AuditRuleType
  type: Property
  source:
    remote:
      path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuditRuleType
    path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
    startLine: 275
  assemblies:
  - System.IO.Pipes.AccessControl
  namespace: System.IO.Pipes
  summary: "\n<p>Gets the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object associated with the audit rules of the current <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>Classes that derive from the <xref href=\"System.Security.AccessControl.ObjectSecurity\" data-throw-if-not-resolved=\"false\"></xref> class override the <xref href=\"System.Security.AccessControl.ObjectSecurity.AuditRuleType\" data-throw-if-not-resolved=\"false\"></xref> property and return the type they use to represent access rights. When you work with arrays or collections that contain multiple types of security objects, use this property to determine the correct enumeration type to use with each security object.</p>\n"
  example:
  - 
  syntax:
    content: public override Type AuditRuleType { get; }
    content.vb: Public Overrides ReadOnly Property AuditRuleType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The type of the object that is associated with the audit rules of the current <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.Pipes.PipeSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  commentId: M:System.IO.Pipes.PipeSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  id: AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  parent: System.IO.Pipes.PipeSecurity
  langs:
  - csharp
  - vb
  name: AccessRuleFactory(Security.Principal.IdentityReference, Int32, Boolean, Security.AccessControl.InheritanceFlags, Security.AccessControl.PropagationFlags, Security.AccessControl.AccessControlType)
  fullName: System.IO.Pipes.PipeSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference, System.Int32, System.Boolean, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AccessControlType)
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes.AccessControl/ref/System.IO.Pipes.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AccessRuleFactory
    path: src/System.IO.Pipes.AccessControl/ref/System.IO.Pipes.AccessControl.cs
    startLine: 54
  assemblies:
  - System.IO.Pipes.AccessControl
  namespace: System.IO.Pipes
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.AccessRule\" data-throw-if-not-resolved=\"false\"></xref> class with the specified values.</p>\n"
  remarks: "\n<p>The recommended way to create access control rules is to use the constructors of the <xref href=\"System.IO.Pipes.PipeAccessRule\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - 
  syntax:
    content: public override Security.AccessControl.AccessRule AccessRuleFactory(Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, Security.AccessControl.InheritanceFlags inheritanceFlags, Security.AccessControl.PropagationFlags propagationFlags, Security.AccessControl.AccessControlType type)
    content.vb: Public Overrides Function AccessRuleFactory(identityReference As Security.Principal.IdentityReference, accessMask As Integer, isInherited As Boolean, inheritanceFlags As Security.AccessControl.InheritanceFlags, propagationFlags As Security.AccessControl.PropagationFlags, type As Security.AccessControl.AccessControlType) As Security.AccessControl.AccessRule
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "\n<p>The identity that the access rule applies to. It must be an object that can be cast as a <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    - id: accessMask
      type: System.Int32
      description: "\n<p>The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators</p>\n"
    - id: isInherited
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this rule is inherited from a parent container; otherwise false.</p>\n"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.InheritanceFlags\" data-throw-if-not-resolved=\"false\"></xref> values that specifies the inheritance properties of the access rule.</p>\n"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.PropagationFlags\" data-throw-if-not-resolved=\"false\"></xref> values that specifies whether inherited access rules are automatically propagated. The propagation flags are ignored if <em>inheritanceFlags</em> is set to <xref href=\"System.Security.AccessControl.InheritanceFlags.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "\n<p>Specifies the valid access control type.</p>\n"
    return:
      type: System.Security.AccessControl.AccessRule
      description: "\n<p>The <xref href=\"System.Security.AccessControl.AccessRule\" data-throw-if-not-resolved=\"false\"></xref> object that this method creates.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>accessMask</em>, <em>inheritanceFlags</em>, <em>propagationFlags</em>, or <em>type</em> specifies an invalid value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>identityReference</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>accessMask</em> is zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>identityReference</em> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref> nor of a type, such as <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref>, that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.Pipes.PipeSecurity.AddAccessRule(System.IO.Pipes.PipeAccessRule)
  commentId: M:System.IO.Pipes.PipeSecurity.AddAccessRule(System.IO.Pipes.PipeAccessRule)
  id: AddAccessRule(System.IO.Pipes.PipeAccessRule)
  parent: System.IO.Pipes.PipeSecurity
  langs:
  - csharp
  - vb
  name: AddAccessRule(PipeAccessRule)
  fullName: System.IO.Pipes.PipeSecurity.AddAccessRule(System.IO.Pipes.PipeAccessRule)
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAccessRule
    path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
    startLine: 22
  assemblies:
  - System.IO.Pipes.AccessControl
  namespace: System.IO.Pipes
  summary: "\n<p>Adds an access rule to the Discretionary Access Control List (DACL) that is associated with the current <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Pipes.PipeSecurity.AddAccessRule(System.IO.Pipes.PipeAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method adds a new rule to the list of rules that a <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object contains.If an access control list (ACL) already exists for the specified rule, the <xref href=\"System.IO.Pipes.PipeSecurity.AddAccessRule(System.IO.Pipes.PipeAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method will still add the rule, with one exception: a <xref href=\"System.IO.Pipes.PipeAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object that is created using the <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> value supersedes an object that is created using the <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  example:
  - 
  syntax:
    content: public void AddAccessRule(PipeAccessRule rule)
    content.vb: Public Sub AddAccessRule(rule As PipeAccessRule)
    parameters:
    - id: rule
      type: System.IO.Pipes.PipeAccessRule
      description: "\n<p>The access rule to add.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>rule</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Pipes.PipeSecurity.AddAuditRule(System.IO.Pipes.PipeAuditRule)
  commentId: M:System.IO.Pipes.PipeSecurity.AddAuditRule(System.IO.Pipes.PipeAuditRule)
  id: AddAuditRule(System.IO.Pipes.PipeAuditRule)
  parent: System.IO.Pipes.PipeSecurity
  langs:
  - csharp
  - vb
  name: AddAuditRule(PipeAuditRule)
  fullName: System.IO.Pipes.PipeSecurity.AddAuditRule(System.IO.Pipes.PipeAuditRule)
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAuditRule
    path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
    startLine: 129
  assemblies:
  - System.IO.Pipes.AccessControl
  namespace: System.IO.Pipes
  summary: "\n<p>Adds an audit rule to the System Access Control List (SACL)that is associated with the current <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Pipes.PipeSecurity.AddAuditRule(System.IO.Pipes.PipeAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method adds a new audit rule to the list of rules that a <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object contains.</p>\n<p>If an audit rule already exists for the specified rule, the <xref href=\"System.IO.Pipes.PipeSecurity.AddAuditRule(System.IO.Pipes.PipeAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method will still add the rule.</p>\n"
  example:
  - 
  syntax:
    content: public void AddAuditRule(PipeAuditRule rule)
    content.vb: Public Sub AddAuditRule(rule As PipeAuditRule)
    parameters:
    - id: rule
      type: System.IO.Pipes.PipeAuditRule
      description: "\n<p>The audit rule to add.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>rule</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Pipes.PipeSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  commentId: M:System.IO.Pipes.PipeSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  id: AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  parent: System.IO.Pipes.PipeSecurity
  langs:
  - csharp
  - vb
  name: AuditRuleFactory(Security.Principal.IdentityReference, Int32, Boolean, Security.AccessControl.InheritanceFlags, Security.AccessControl.PropagationFlags, Security.AccessControl.AuditFlags)
  fullName: System.IO.Pipes.PipeSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference, System.Int32, System.Boolean, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.AuditFlags)
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes.AccessControl/ref/System.IO.Pipes.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuditRuleFactory
    path: src/System.IO.Pipes.AccessControl/ref/System.IO.Pipes.AccessControl.cs
    startLine: 57
  assemblies:
  - System.IO.Pipes.AccessControl
  namespace: System.IO.Pipes
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.AuditRule\" data-throw-if-not-resolved=\"false\"></xref> class with the specified values.</p>\n"
  remarks: "\n<p>The recommended way to create audit rules is to use the constructors of the <xref href=\"System.IO.Pipes.PipeAuditRule\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - 
  syntax:
    content: public override sealed Security.AccessControl.AuditRule AuditRuleFactory(Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, Security.AccessControl.InheritanceFlags inheritanceFlags, Security.AccessControl.PropagationFlags propagationFlags, Security.AccessControl.AuditFlags flags)
    content.vb: Public NotOverridable Overrides Function AuditRuleFactory(identityReference As Security.Principal.IdentityReference, accessMask As Integer, isInherited As Boolean, inheritanceFlags As Security.AccessControl.InheritanceFlags, propagationFlags As Security.AccessControl.PropagationFlags, flags As Security.AccessControl.AuditFlags) As Security.AccessControl.AuditRule
    parameters:
    - id: identityReference
      type: System.Security.Principal.IdentityReference
      description: "\n<p>The identity that the access rule applies to. It must be an object that can be cast as a <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    - id: accessMask
      type: System.Int32
      description: "\n<p>The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators</p>\n"
    - id: isInherited
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this rule is inherited from a parent container; otherwise, false..</p>\n"
    - id: inheritanceFlags
      type: System.Security.AccessControl.InheritanceFlags
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.InheritanceFlags\" data-throw-if-not-resolved=\"false\"></xref> values that specifies the inheritance properties of the access rule.</p>\n"
    - id: propagationFlags
      type: System.Security.AccessControl.PropagationFlags
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.PropagationFlags\" data-throw-if-not-resolved=\"false\"></xref> values that specifies whether inherited access rules are automatically propagated. The propagation flags are ignored if <em>inheritanceFlags</em> is set to <xref href=\"System.Security.AccessControl.InheritanceFlags.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: flags
      type: System.Security.AccessControl.AuditFlags
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.AuditFlags\" data-throw-if-not-resolved=\"false\"></xref> values that specifies the valid access control type.</p>\n"
    return:
      type: System.Security.AccessControl.AuditRule
      description: "\n<p>The <xref href=\"System.Security.AccessControl.AuditRule\" data-throw-if-not-resolved=\"false\"></xref> object that this method creates.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>accessMask</em>, <em>inheritanceFlags</em>, <em>propagationFlags</em>, or <em>flags</em> properties specify an invalid value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>identityReference</em> property is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>The <em>accessMask</em> property is zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>identityReference</em> property is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref> nor of a type, such as <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref>, that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - override
  - sealed
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
- uid: System.IO.Pipes.PipeSecurity.Persist(System.Runtime.InteropServices.SafeHandle)
  commentId: M:System.IO.Pipes.PipeSecurity.Persist(System.Runtime.InteropServices.SafeHandle)
  id: Persist(System.Runtime.InteropServices.SafeHandle)
  parent: System.IO.Pipes.PipeSecurity
  langs:
  - csharp
  - vb
  name: Persist(Runtime.InteropServices.SafeHandle)
  fullName: System.IO.Pipes.PipeSecurity.Persist(System.Runtime.InteropServices.SafeHandle)
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes.AccessControl/ref/System.IO.Pipes.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Persist
    path: src/System.IO.Pipes.AccessControl/ref/System.IO.Pipes.AccessControl.cs
    startLine: 58
  assemblies:
  - System.IO.Pipes.AccessControl
  namespace: System.IO.Pipes
  summary: "\n<p>Saves the specified sections of the security descriptor that is associated with the current <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object to permanent storage.</p>\n"
  example:
  - 
  syntax:
    content: protected void Persist(Runtime.InteropServices.SafeHandle handle)
    content.vb: Protected Sub Persist(handle As Runtime.InteropServices.SafeHandle)
    parameters:
    - id: handle
      type: System.Runtime.InteropServices.SafeHandle
      description: "\n<p>The handle of the securable object that the current <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object is associated with.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.IO.Pipes.PipeSecurity.Persist(System.String)
  commentId: M:System.IO.Pipes.PipeSecurity.Persist(System.String)
  id: Persist(System.String)
  parent: System.IO.Pipes.PipeSecurity
  langs:
  - csharp
  - vb
  name: Persist(String)
  fullName: System.IO.Pipes.PipeSecurity.Persist(System.String)
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes.AccessControl/ref/System.IO.Pipes.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Persist
    path: src/System.IO.Pipes.AccessControl/ref/System.IO.Pipes.AccessControl.cs
    startLine: 60
  assemblies:
  - System.IO.Pipes.AccessControl
  namespace: System.IO.Pipes
  summary: "\n<p>Saves the specified sections of the security descriptor that is associated with the current <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object to permanent storage.</p>\n"
  example:
  - 
  syntax:
    content: protected void Persist(string name)
    content.vb: Protected Sub Persist(name As String)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the securable object that the current <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object is associated with.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.IO.Pipes.PipeSecurity.RemoveAccessRule(System.IO.Pipes.PipeAccessRule)
  commentId: M:System.IO.Pipes.PipeSecurity.RemoveAccessRule(System.IO.Pipes.PipeAccessRule)
  id: RemoveAccessRule(System.IO.Pipes.PipeAccessRule)
  parent: System.IO.Pipes.PipeSecurity
  langs:
  - csharp
  - vb
  name: RemoveAccessRule(PipeAccessRule)
  fullName: System.IO.Pipes.PipeSecurity.RemoveAccessRule(System.IO.Pipes.PipeAccessRule)
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAccessRule
    path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
    startLine: 46
  assemblies:
  - System.IO.Pipes.AccessControl
  namespace: System.IO.Pipes
  summary: "\n<p>Removes an access rule from the Discretionary Access Control List (DACL) that is associated with the current <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Pipes.PipeSecurity.RemoveAccessRule(System.IO.Pipes.PipeAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes either all matching <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> access rules or all matching <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> access rules from the current <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object. For example, you can use this method to remove all <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> access rules for a user by passing a <xref href=\"System.IO.Pipes.PipeAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object created using the <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> value, the <xref href=\"System.IO.Pipes.PipeAccessRights.Read\" data-throw-if-not-resolved=\"false\"></xref> value, and a user account. The <xref href=\"System.IO.Pipes.PipeSecurity.RemoveAccessRule(System.IO.Pipes.PipeAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes any deny rules that specify the <xref href=\"System.IO.Pipes.PipeAccessRights.Read\" data-throw-if-not-resolved=\"false\"></xref> value or the <xref href=\"System.IO.Pipes.PipeAccessRights.Write\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  example:
  - 
  syntax:
    content: public bool RemoveAccessRule(PipeAccessRule rule)
    content.vb: Public Function RemoveAccessRule(rule As PipeAccessRule) As Boolean
    parameters:
    - id: rule
      type: System.IO.Pipes.PipeAccessRule
      description: "\n<p>The access rule to remove.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>rule</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Pipes.PipeSecurity.RemoveAccessRuleSpecific(System.IO.Pipes.PipeAccessRule)
  commentId: M:System.IO.Pipes.PipeSecurity.RemoveAccessRuleSpecific(System.IO.Pipes.PipeAccessRule)
  id: RemoveAccessRuleSpecific(System.IO.Pipes.PipeAccessRule)
  parent: System.IO.Pipes.PipeSecurity
  langs:
  - csharp
  - vb
  name: RemoveAccessRuleSpecific(PipeAccessRule)
  fullName: System.IO.Pipes.PipeSecurity.RemoveAccessRuleSpecific(System.IO.Pipes.PipeAccessRule)
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAccessRuleSpecific
    path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
    startLine: 87
  assemblies:
  - System.IO.Pipes.AccessControl
  namespace: System.IO.Pipes
  summary: "\n<p>Removes the specified access rule from the Discretionary Access Control List (DACL) that is associated with the current <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Pipes.PipeSecurity.RemoveAccessRule(System.IO.Pipes.PipeAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes either all matching <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> access rules or all matching <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> access rules from the current <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object. For example, you can use this method to remove all <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> access rules for a user by passing a <xref href=\"System.IO.Pipes.PipeAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object created using the <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> value, the <xref href=\"System.IO.Pipes.PipeAccessRights.Read\" data-throw-if-not-resolved=\"false\"></xref> value, and a user account. The <xref href=\"System.IO.Pipes.PipeSecurity.RemoveAccessRule(System.IO.Pipes.PipeAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes any deny rules that specify the <xref href=\"System.IO.Pipes.PipeAccessRights.Read\" data-throw-if-not-resolved=\"false\"></xref> value or the <xref href=\"System.IO.Pipes.PipeAccessRights.Write\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  example:
  - 
  syntax:
    content: public void RemoveAccessRuleSpecific(PipeAccessRule rule)
    content.vb: Public Sub RemoveAccessRuleSpecific(rule As PipeAccessRule)
    parameters:
    - id: rule
      type: System.IO.Pipes.PipeAccessRule
      description: "\n<p>The access rule to remove.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>rule</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Pipes.PipeSecurity.RemoveAuditRule(System.IO.Pipes.PipeAuditRule)
  commentId: M:System.IO.Pipes.PipeSecurity.RemoveAuditRule(System.IO.Pipes.PipeAuditRule)
  id: RemoveAuditRule(System.IO.Pipes.PipeAuditRule)
  parent: System.IO.Pipes.PipeSecurity
  langs:
  - csharp
  - vb
  name: RemoveAuditRule(PipeAuditRule)
  fullName: System.IO.Pipes.PipeSecurity.RemoveAuditRule(System.IO.Pipes.PipeAuditRule)
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAuditRule
    path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
    startLine: 139
  assemblies:
  - System.IO.Pipes.AccessControl
  namespace: System.IO.Pipes
  summary: "\n<p>Removes an audit rule from the System Access Control List (SACL) that is associated with the current <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Pipes.PipeSecurity.RemoveAuditRule(System.IO.Pipes.PipeAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes either all matching <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> audit rules or all matching <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> audit rules from the current <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.  For example, you can use this method to remove all <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> audit rules for a user by passing a <xref href=\"System.Security.AccessControl.FileSystemAuditRule\" data-throw-if-not-resolved=\"false\"></xref> object created using the <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> value, the <xref href=\"System.Security.AccessControl.AuditFlags.Failure\" data-throw-if-not-resolved=\"false\"></xref> value, and a user account.  When you do this, the <xref href=\"System.IO.Pipes.PipeSecurity.RemoveAuditRule(System.IO.Pipes.PipeAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes any deny rules that specify the <xref href=\"System.Security.AccessControl.AuditFlags.Failure\" data-throw-if-not-resolved=\"false\"></xref> value or the <xref href=\"System.Security.AccessControl.AuditFlags.Success\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  example:
  - 
  syntax:
    content: public bool RemoveAuditRule(PipeAuditRule rule)
    content.vb: Public Function RemoveAuditRule(rule As PipeAuditRule) As Boolean
    parameters:
    - id: rule
      type: System.IO.Pipes.PipeAuditRule
      description: "\n<p>The audit rule to remove.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the audit rule was removed; otherwise, <strong>false</strong></p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>rule</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Pipes.PipeSecurity.RemoveAuditRuleAll(System.IO.Pipes.PipeAuditRule)
  commentId: M:System.IO.Pipes.PipeSecurity.RemoveAuditRuleAll(System.IO.Pipes.PipeAuditRule)
  id: RemoveAuditRuleAll(System.IO.Pipes.PipeAuditRule)
  parent: System.IO.Pipes.PipeSecurity
  langs:
  - csharp
  - vb
  name: RemoveAuditRuleAll(PipeAuditRule)
  fullName: System.IO.Pipes.PipeSecurity.RemoveAuditRuleAll(System.IO.Pipes.PipeAuditRule)
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAuditRuleAll
    path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
    startLine: 144
  assemblies:
  - System.IO.Pipes.AccessControl
  namespace: System.IO.Pipes
  summary: "\n<p>Removes all audit rules that have the same security identifier as the specified audit rule from the System Access Control List (SACL) that is associated with the current <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Pipes.PipeSecurity.RemoveAuditRuleAll(System.IO.Pipes.PipeAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes all audit rules for the specified user.  It ignores all values in the <xref href=\"System.IO.Pipes.PipeAuditRule\" data-throw-if-not-resolved=\"false\"></xref> object except the user account.</p>\n"
  example:
  - 
  syntax:
    content: public void RemoveAuditRuleAll(PipeAuditRule rule)
    content.vb: Public Sub RemoveAuditRuleAll(rule As PipeAuditRule)
    parameters:
    - id: rule
      type: System.IO.Pipes.PipeAuditRule
      description: "\n<p>The audit rule to remove.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>rule</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Pipes.PipeSecurity.RemoveAuditRuleSpecific(System.IO.Pipes.PipeAuditRule)
  commentId: M:System.IO.Pipes.PipeSecurity.RemoveAuditRuleSpecific(System.IO.Pipes.PipeAuditRule)
  id: RemoveAuditRuleSpecific(System.IO.Pipes.PipeAuditRule)
  parent: System.IO.Pipes.PipeSecurity
  langs:
  - csharp
  - vb
  name: RemoveAuditRuleSpecific(PipeAuditRule)
  fullName: System.IO.Pipes.PipeSecurity.RemoveAuditRuleSpecific(System.IO.Pipes.PipeAuditRule)
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAuditRuleSpecific
    path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
    startLine: 149
  assemblies:
  - System.IO.Pipes.AccessControl
  namespace: System.IO.Pipes
  summary: "\n<p>Removes the specified audit rule from the System Access Control List (SACL) that is associated with the current <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Pipes.PipeSecurity.RemoveAuditRuleSpecific(System.IO.Pipes.PipeAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes the specified matching <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> audit rule or the specified matching <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> audit rule from the current <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.  For example, you can use this method to remove a specified <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> audit rule for a user by passing a <xref href=\"System.Security.AccessControl.FileSystemAuditRule\" data-throw-if-not-resolved=\"false\"></xref> object created using the <xref href=\"System.Security.AccessControl.AccessControlType.Deny\" data-throw-if-not-resolved=\"false\"></xref> value, the <xref href=\"System.Security.AccessControl.AuditFlags.Failure\" data-throw-if-not-resolved=\"false\"></xref> value, and a user account.  When you do this, the <xref href=\"System.IO.Pipes.PipeSecurity.RemoveAuditRuleSpecific(System.IO.Pipes.PipeAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method removes only a deny rule that specifies the <xref href=\"System.Security.AccessControl.AuditFlags.Failure\" data-throw-if-not-resolved=\"false\"></xref> value.  It does not remove any deny rules that specify the <xref href=\"System.Security.AccessControl.AuditFlags.Success\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  example:
  - 
  syntax:
    content: public void RemoveAuditRuleSpecific(PipeAuditRule rule)
    content.vb: Public Sub RemoveAuditRuleSpecific(rule As PipeAuditRule)
    parameters:
    - id: rule
      type: System.IO.Pipes.PipeAuditRule
      description: "\n<p>The audit rule to remove.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>rule</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Pipes.PipeSecurity.ResetAccessRule(System.IO.Pipes.PipeAccessRule)
  commentId: M:System.IO.Pipes.PipeSecurity.ResetAccessRule(System.IO.Pipes.PipeAccessRule)
  id: ResetAccessRule(System.IO.Pipes.PipeAccessRule)
  parent: System.IO.Pipes.PipeSecurity
  langs:
  - csharp
  - vb
  name: ResetAccessRule(PipeAccessRule)
  fullName: System.IO.Pipes.PipeSecurity.ResetAccessRule(System.IO.Pipes.PipeAccessRule)
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ResetAccessRule
    path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
    startLine: 38
  assemblies:
  - System.IO.Pipes.AccessControl
  namespace: System.IO.Pipes
  summary: "\n<p>Removes all access rules in the Discretionary Access Control List (DACL) that is associated with the current <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object and then adds the specified access rule.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Pipes.PipeSecurity.ResetAccessRule(System.IO.Pipes.PipeAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method adds the specified access control list (ACL) rule or overwrites any identical ACL rules that match the <em>rule</em> parameter.  For example, if the <em>rule</em> parameter specifies a <xref href=\"System.IO.Pipes.PipeAccessRights.Read\" data-throw-if-not-resolved=\"false\"></xref> value and the <xref href=\"System.IO.Pipes.PipeSecurity.ResetAccessRule(System.IO.Pipes.PipeAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method finds an identical ACL rule that specifies the <xref href=\"System.IO.Pipes.PipeAccessRights.Read\" data-throw-if-not-resolved=\"false\"></xref> value, the identical rule will be overwritten.  If the <xref href=\"System.IO.Pipes.PipeSecurity.ResetAccessRule(System.IO.Pipes.PipeAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method finds an identical ACL rule that specifies the <xref href=\"System.IO.Pipes.PipeAccessRights.Write\" data-throw-if-not-resolved=\"false\"></xref> value, the identical rule will also be overwritten. </p>\n"
  example:
  - 
  syntax:
    content: public void ResetAccessRule(PipeAccessRule rule)
    content.vb: Public Sub ResetAccessRule(rule As PipeAccessRule)
    parameters:
    - id: rule
      type: System.IO.Pipes.PipeAccessRule
      description: "\n<p>The access rule to add.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>rule</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Pipes.PipeSecurity.SetAccessRule(System.IO.Pipes.PipeAccessRule)
  commentId: M:System.IO.Pipes.PipeSecurity.SetAccessRule(System.IO.Pipes.PipeAccessRule)
  id: SetAccessRule(System.IO.Pipes.PipeAccessRule)
  parent: System.IO.Pipes.PipeSecurity
  langs:
  - csharp
  - vb
  name: SetAccessRule(PipeAccessRule)
  fullName: System.IO.Pipes.PipeSecurity.SetAccessRule(System.IO.Pipes.PipeAccessRule)
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetAccessRule
    path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
    startLine: 30
  assemblies:
  - System.IO.Pipes.AccessControl
  namespace: System.IO.Pipes
  summary: "\n<p>Sets an access rule in the Discretionary Access Control List (DACL) that is associated with the current <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Pipes.PipeSecurity.SetAccessRule(System.IO.Pipes.PipeAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method adds the specified access control list (ACL) rule or overwrites any identical ACL rules that match the <xref href=\"System.IO.Pipes.PipeAccessRights\" data-throw-if-not-resolved=\"false\"></xref> value of the <em>rule</em> parameter.  For example, if the <em>rule</em> parameter specifies a <xref href=\"System.IO.Pipes.PipeAccessRights.Read\" data-throw-if-not-resolved=\"false\"></xref> value and the <xref href=\"System.IO.Pipes.PipeSecurity.SetAccessRule(System.IO.Pipes.PipeAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method finds an identical ACL rule that specifies the <xref href=\"System.IO.Pipes.PipeAccessRights.Read\" data-throw-if-not-resolved=\"false\"></xref> value, the identical rule will be overwritten.  If the <xref href=\"System.IO.Pipes.PipeSecurity.SetAccessRule(System.IO.Pipes.PipeAccessRule)\" data-throw-if-not-resolved=\"false\"></xref> method finds an identical ACL rule that specifies the <xref href=\"System.IO.Pipes.PipeAccessRights.Write\" data-throw-if-not-resolved=\"false\"></xref> value, the identical rule will not be overwritten. </p>\n"
  example:
  - 
  syntax:
    content: public void SetAccessRule(PipeAccessRule rule)
    content.vb: Public Sub SetAccessRule(rule As PipeAccessRule)
    parameters:
    - id: rule
      type: System.IO.Pipes.PipeAccessRule
      description: "\n<p>The rule to set.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>rule</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Pipes.PipeSecurity.SetAuditRule(System.IO.Pipes.PipeAuditRule)
  commentId: M:System.IO.Pipes.PipeSecurity.SetAuditRule(System.IO.Pipes.PipeAuditRule)
  id: SetAuditRule(System.IO.Pipes.PipeAuditRule)
  parent: System.IO.Pipes.PipeSecurity
  langs:
  - csharp
  - vb
  name: SetAuditRule(PipeAuditRule)
  fullName: System.IO.Pipes.PipeSecurity.SetAuditRule(System.IO.Pipes.PipeAuditRule)
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetAuditRule
    path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeSecurity.cs
    startLine: 134
  assemblies:
  - System.IO.Pipes.AccessControl
  namespace: System.IO.Pipes
  summary: "\n<p>Sets an audit rule in the System Access Control List (SACL) that is associated with the current <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.Pipes.PipeSecurity.SetAuditRule(System.IO.Pipes.PipeAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method adds the specified audit rule or overwrites any identical audit rules that match the <xref href=\"System.IO.Pipes.PipeAccessRights\" data-throw-if-not-resolved=\"false\"></xref> value of the <em>rule</em> parameter.  For example, if the <em>rule</em> parameter specifies a <xref href=\"System.IO.Pipes.PipeAccessRights.Read\" data-throw-if-not-resolved=\"false\"></xref> value and the <xref href=\"System.IO.Pipes.PipeSecurity.SetAuditRule(System.IO.Pipes.PipeAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method finds an identical audit rule that specifies the <xref href=\"System.IO.Pipes.PipeAccessRights.Read\" data-throw-if-not-resolved=\"false\"></xref> value, the identical rule will be overwritten.  If the <xref href=\"System.IO.Pipes.PipeSecurity.SetAuditRule(System.IO.Pipes.PipeAuditRule)\" data-throw-if-not-resolved=\"false\"></xref> method finds an identical audit rule that specifies the <xref href=\"System.IO.Pipes.PipeAccessRights.Write\" data-throw-if-not-resolved=\"false\"></xref> value, the identical rule will not be overwritten. </p>\n"
  example:
  - 
  syntax:
    content: public void SetAuditRule(PipeAuditRule rule)
    content.vb: Public Sub SetAuditRule(rule As PipeAuditRule)
    parameters:
    - id: rule
      type: System.IO.Pipes.PipeAuditRule
      description: "\n<p>The rule to set.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>rule</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.IO.Pipes
  isExternal: false
  name: System.IO.Pipes
  fullName: System.IO.Pipes
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: Principal.IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.AccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessRule
  fullName: System.Security.AccessControl.AccessRule
- uid: System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.IO.Pipes.PipeAccessRule
  parent: System.IO.Pipes
  isExternal: false
  name: PipeAccessRule
  fullName: System.IO.Pipes.PipeAccessRule
- uid: System.IO.Pipes.PipeAuditRule
  parent: System.IO.Pipes
  isExternal: false
  name: PipeAuditRule
  fullName: System.IO.Pipes.PipeAuditRule
- uid: System.Security.AccessControl.AuditFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditFlags
  fullName: System.Security.AccessControl.AuditFlags
- uid: System.Security.AccessControl.AuditRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditRule
  fullName: System.Security.AccessControl.AuditRule
- uid: System.Runtime.InteropServices.SafeHandle
  parent: System.Runtime.InteropServices
  isExternal: false
  name: Runtime.InteropServices.SafeHandle
  fullName: System.Runtime.InteropServices.SafeHandle
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
