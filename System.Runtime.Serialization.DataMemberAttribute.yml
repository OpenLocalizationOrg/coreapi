items:
- uid: System.Runtime.Serialization.DataMemberAttribute
  commentId: T:System.Runtime.Serialization.DataMemberAttribute
  id: DataMemberAttribute
  parent: System.Runtime.Serialization
  children:
  - System.Runtime.Serialization.DataMemberAttribute.#ctor
  - System.Runtime.Serialization.DataMemberAttribute.EmitDefaultValue
  - System.Runtime.Serialization.DataMemberAttribute.IsNameSetExplicitly
  - System.Runtime.Serialization.DataMemberAttribute.IsRequired
  - System.Runtime.Serialization.DataMemberAttribute.Name
  - System.Runtime.Serialization.DataMemberAttribute.Order
  langs:
  - csharp
  - vb
  name: DataMemberAttribute
  fullName: System.Runtime.Serialization.DataMemberAttribute
  type: Class
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataMemberAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DataMemberAttribute
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataMemberAttribute.cs
    startLine: 6
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>When applied to the member of a type, specifies that the member is part of a data contract and is serializable by the <xref href=\"System.Runtime.Serialization.DataContractSerializer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Apply the <xref href=\"System.Runtime.Serialization.DataMemberAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute in conjunction with the <xref href=\"System.Runtime.Serialization.DataContractAttribute\" data-throw-if-not-resolved=\"false\"></xref> to identify members of a type that are part of a data contract. One of the serializers that can serialize data contracts is the <xref href=\"System.Runtime.Serialization.DataContractSerializer\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>The data contract model is an \"opt-in\" model. Applying the <xref href=\"System.Runtime.Serialization.DataMemberAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a field or property explicitly specifies that the member value will be serialized. In contrast, the <xref href=\"System.Runtime.Serialization.Formatters.Binary.BinaryFormatter\" data-throw-if-not-resolved=\"false\"></xref> serializes public and private fields of a type, and the <xref href=\"System.Xml.Serialization.XmlSerializer\" data-throw-if-not-resolved=\"false\"></xref> serializes only public fields and properties of a type. </p>\n<p>You can apply the <xref href=\"System.Runtime.Serialization.DataMemberAttribute\" data-throw-if-not-resolved=\"false\"></xref> to private fields or properties. Be aware that the data returned by the member (even if it's private) will be serialized and deserialized, and thus can be viewed or intercepted by a malicious user or process. </p>\n<p>By default, the CLR member name is used as the name of the data member. By setting the <xref href=\"System.Runtime.Serialization.DataMemberAttribute.Name\" data-throw-if-not-resolved=\"false\"></xref> property, you can customize the name of the data member. This can be used to provide a name that may not be allowed as a CLR member name. When mapping to XML using the <xref href=\"System.Runtime.Serialization.DataContractSerializer\" data-throw-if-not-resolved=\"false\"></xref>, this name is used as the name of the schema element in a type.</p>\n<p>Properties to which the <xref href=\"System.Runtime.Serialization.DataMemberAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute has been applied must have both <strong>get</strong> and <strong>set</strong> fields; they cannot be <strong>get</strong>-only or <strong>set</strong>-only.</p>\n<p>For more information about data contracts and data members, see Using Data Contracts. For more information about member names, see Data Member Default Values.</p>\n"
  example:
  - "\n<p>The following example shows a type to which the <xref href=\"System.Runtime.Serialization.DataContractAttribute\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Runtime.Serialization.DataMemberAttribute\" data-throw-if-not-resolved=\"false\"></xref> attributes have been applied. The <xref href=\"System.Runtime.Serialization.DataMemberAttribute.Name\" data-throw-if-not-resolved=\"false\"></xref> property on the <xref href=\"System.Runtime.Serialization.DataMemberAttribute\" data-throw-if-not-resolved=\"false\"></xref> is set to \"ID\".</p>DataMemberAttribute#0"
  syntax:
    content: 'public sealed class DataMemberAttribute : Attribute'
    content.vb: >-
      Public NotInheritable Class DataMemberAttribute
          Inherits Attribute
  seealso:
  - type: System.Runtime.Serialization.DataContractAttribute
    commentId: T:System.Runtime.Serialization.DataContractAttribute
  - type: System.Runtime.Serialization.DataContractSerializer
    commentId: T:System.Runtime.Serialization.DataContractSerializer
  - type: System.Runtime.Serialization.IExtensibleDataObject
    commentId: T:System.Runtime.Serialization.IExtensibleDataObject
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Runtime.Serialization.DataMemberAttribute.#ctor
  commentId: M:System.Runtime.Serialization.DataMemberAttribute.#ctor
  id: '#ctor'
  parent: System.Runtime.Serialization.DataMemberAttribute
  langs:
  - csharp
  - vb
  name: DataMemberAttribute()
  fullName: System.Runtime.Serialization.DataMemberAttribute.DataMemberAttribute()
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataMemberAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataMemberAttribute.cs
    startLine: 15
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.Serialization.DataMemberAttribute\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  syntax:
    content: public DataMemberAttribute()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.DataMemberAttribute.EmitDefaultValue
  commentId: P:System.Runtime.Serialization.DataMemberAttribute.EmitDefaultValue
  id: EmitDefaultValue
  parent: System.Runtime.Serialization.DataMemberAttribute
  langs:
  - csharp
  - vb
  name: EmitDefaultValue
  fullName: System.Runtime.Serialization.DataMemberAttribute.EmitDefaultValue
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataMemberAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EmitDefaultValue
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataMemberAttribute.cs
    startLine: 47
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets or sets a value that specifies whether to serialize the default value for a field or property being serialized. </p>\n"
  remarks: "\n<p>In the .NET Framework, types have a concept of default values. For example, for any reference type the default value is <strong>null</strong>, and for an integer type it is 0. It is occasionally desirable to omit a data member from the serialized data when it is set to its default value. To do this, set the <xref href=\"System.Runtime.Serialization.DataMemberAttribute.EmitDefaultValue\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>false</strong> (it is <strong>true</strong> by default). </p>\n<p>Setting the <xref href=\"System.Runtime.Serialization.DataMemberAttribute.EmitDefaultValue\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>false</strong> is not a recommended practice. It should only be done if there is a specific need to do so (such as for interoperability or to reduce data size).</p>\n"
  example:
  - "\n<p>The following example shows the <xref href=\"System.Runtime.Serialization.DataMemberAttribute.EmitDefaultValue\" data-throw-if-not-resolved=\"false\"></xref> property set to <strong>false</strong> on various fields. </p>DataMemberAttribute#3"
  syntax:
    content: public bool EmitDefaultValue { get; set; }
    content.vb: Public Property EmitDefaultValue As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the default value for a member should be generated in the serialization stream; otherwise, <strong>false</strong>. The default is <strong>true</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.DataMemberAttribute.IsNameSetExplicitly
  commentId: P:System.Runtime.Serialization.DataMemberAttribute.IsNameSetExplicitly
  id: IsNameSetExplicitly
  parent: System.Runtime.Serialization.DataMemberAttribute
  langs:
  - csharp
  - vb
  name: IsNameSetExplicitly
  fullName: System.Runtime.Serialization.DataMemberAttribute.IsNameSetExplicitly
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataMemberAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNameSetExplicitly
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataMemberAttribute.cs
    startLine: 25
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets whether <xref href=\"System.Runtime.Serialization.DataMemberAttribute.Name\" data-throw-if-not-resolved=\"false\"></xref> has been explicitly set.</p>\n"
  syntax:
    content: public bool IsNameSetExplicitly { get; }
    content.vb: Public ReadOnly Property IsNameSetExplicitly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <strong>true</strong> if the name has been explicitly set; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Serialization.DataMemberAttribute.IsRequired
  commentId: P:System.Runtime.Serialization.DataMemberAttribute.IsRequired
  id: IsRequired
  parent: System.Runtime.Serialization.DataMemberAttribute
  langs:
  - csharp
  - vb
  name: IsRequired
  fullName: System.Runtime.Serialization.DataMemberAttribute.IsRequired
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataMemberAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsRequired
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataMemberAttribute.cs
    startLine: 41
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets or sets a value that instructs the serialization engine that the member must be present when reading or deserializing.</p>\n"
  remarks: "\n<p>The property is used for ensuring compatibility with future versions of a type. For more information, see Data Contract Versioning and Best Practices: Data Contract Versioning.</p>\n"
  example:
  - 
  syntax:
    content: public bool IsRequired { get; set; }
    content.vb: Public Property IsRequired As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong>, if the member is required; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>the member is not present.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.DataMemberAttribute.Name
  commentId: P:System.Runtime.Serialization.DataMemberAttribute.Name
  id: Name
  parent: System.Runtime.Serialization.DataMemberAttribute
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Runtime.Serialization.DataMemberAttribute.Name
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataMemberAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataMemberAttribute.cs
    startLine: 19
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets or sets a data member name. </p>\n"
  remarks: "\n<p>This property is used to override the default name of the data member that is derived from the name of the member annotated with the <xref href=\"System.Runtime.Serialization.DataMemberAttribute\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>The <xref href=\"System.Runtime.Serialization.DataMemberAttribute.Name\" data-throw-if-not-resolved=\"false\"></xref> property enables you to use names that are not permitted as common language runtime (CLR) identifiers. In addition, this property enables the type author to define a data member name separate from the CLR member name. This separate definition helps in versioning scenarios (changing the CLR member name without breaking the data contract) and allows a different naming convention for data contact members and CLR members. </p>\n"
  example:
  - 
  syntax:
    content: public string Name { get; set; }
    content.vb: Public Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the data member. The default is the name of the target that the attribute is applied to. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.DataMemberAttribute.Order
  commentId: P:System.Runtime.Serialization.DataMemberAttribute.Order
  id: Order
  parent: System.Runtime.Serialization.DataMemberAttribute
  langs:
  - csharp
  - vb
  name: Order
  fullName: System.Runtime.Serialization.DataMemberAttribute.Order
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataMemberAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Order
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataMemberAttribute.cs
    startLine: 30
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets or sets the order of serialization and deserialization of a member.</p>\n"
  remarks: "\n<p>If a type requires that one member be serialized or deserialized before another, use this property to specify the order. For more information, see Data Member Order.</p>\n"
  example:
  - 
  syntax:
    content: public int Order { get; set; }
    content.vb: Public Property Order As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The numeric order of serialization or deserialization.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: System.Runtime.Serialization
  isExternal: false
  name: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Runtime.Serialization.SerializationException
  isExternal: false
  name: SerializationException
  fullName: System.Runtime.Serialization.SerializationException
