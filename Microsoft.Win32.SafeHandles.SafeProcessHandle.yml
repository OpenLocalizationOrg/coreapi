items:
- uid: Microsoft.Win32.SafeHandles.SafeProcessHandle
  commentId: T:Microsoft.Win32.SafeHandles.SafeProcessHandle
  id: SafeProcessHandle
  parent: Microsoft.Win32.SafeHandles
  children:
  - Microsoft.Win32.SafeHandles.SafeProcessHandle.#ctor(System.IntPtr,System.Boolean)
  - Microsoft.Win32.SafeHandles.SafeProcessHandle.IsInvalid
  - Microsoft.Win32.SafeHandles.SafeProcessHandle.ReleaseHandle
  langs:
  - csharp
  - vb
  name: SafeProcessHandle
  fullName: Microsoft.Win32.SafeHandles.SafeProcessHandle
  type: Class
  source:
    remote:
      path: src/System.Diagnostics.Process/src/Microsoft/Win32/SafeHandles/SafeProcessHandle.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SafeProcessHandle
    path: src/System.Diagnostics.Process/src/Microsoft/Win32/SafeHandles/SafeProcessHandle.Windows.cs
    startLine: 19
  assemblies:
  - System.Diagnostics.Process
  namespace: Microsoft.Win32.SafeHandles
  summary: "\n<p>Provides a managed wrapper for a process handle.</p>\n"
  syntax:
    content: 'public sealed class SafeProcessHandle : Runtime.InteropServices.SafeHandle, Runtime.InteropServices.SafeHandle'
    content.vb: >-
      Public NotInheritable Class SafeProcessHandle
          Inherits Runtime.InteropServices.SafeHandle
          Implements Runtime.InteropServices.SafeHandle
  inheritance:
  - System.Object
  implements:
  - System.Runtime.InteropServices.SafeHandle
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.Win32.SafeHandles.SafeProcessHandle.#ctor(System.IntPtr,System.Boolean)
  commentId: M:Microsoft.Win32.SafeHandles.SafeProcessHandle.#ctor(System.IntPtr,System.Boolean)
  id: '#ctor(System.IntPtr,System.Boolean)'
  parent: Microsoft.Win32.SafeHandles.SafeProcessHandle
  langs:
  - csharp
  - vb
  name: SafeProcessHandle(IntPtr, Boolean)
  fullName: Microsoft.Win32.SafeHandles.SafeProcessHandle.SafeProcessHandle(System.IntPtr, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.Process/ref/4.0/System.Diagnostics.Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.Process/ref/4.0/System.Diagnostics.Process.cs
    startLine: 11
  assemblies:
  - System.Diagnostics.Process
  namespace: Microsoft.Win32.SafeHandles
  summary: "\n<p>Initializes a new instance of the <xref href=\"Microsoft.Win32.SafeHandles.SafeProcessHandle\" data-throw-if-not-resolved=\"false\"></xref> class from the specified handle, indicating whether to release the handle during the finalization phase. </p>\n"
  remarks: "\n<p>This type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic.</p>\n"
  syntax:
    content: public SafeProcessHandle(IntPtr existingHandle, bool ownsHandle)
    content.vb: Public Sub New(existingHandle As IntPtr, ownsHandle As Boolean)
    parameters:
    - id: existingHandle
      type: System.IntPtr
      description: "\n<p>The handle to be wrapped.</p>\n"
    - id: ownsHandle
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to reliably let <xref href=\"Microsoft.Win32.SafeHandles.SafeProcessHandle\" data-throw-if-not-resolved=\"false\"></xref> release the handle during the finalization phase; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Win32.SafeHandles.SafeProcessHandle.ReleaseHandle
  commentId: M:Microsoft.Win32.SafeHandles.SafeProcessHandle.ReleaseHandle
  id: ReleaseHandle
  parent: Microsoft.Win32.SafeHandles.SafeProcessHandle
  langs:
  - csharp
  - vb
  name: ReleaseHandle()
  fullName: Microsoft.Win32.SafeHandles.SafeProcessHandle.ReleaseHandle()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/src/Microsoft/Win32/SafeHandles/SafeProcessHandle.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReleaseHandle
    path: src/System.Diagnostics.Process/src/Microsoft/Win32/SafeHandles/SafeProcessHandle.Windows.cs
    startLine: 29
  assemblies:
  - System.Diagnostics.Process
  namespace: Microsoft.Win32.SafeHandles
  syntax:
    content: protected override bool ReleaseHandle()
    content.vb: Protected Overrides Function ReleaseHandle As Boolean
    return:
      type: System.Boolean
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.Win32.SafeHandles.SafeProcessHandle.IsInvalid
  commentId: P:Microsoft.Win32.SafeHandles.SafeProcessHandle.IsInvalid
  id: IsInvalid
  parent: Microsoft.Win32.SafeHandles.SafeProcessHandle
  langs:
  - csharp
  - vb
  name: IsInvalid
  fullName: Microsoft.Win32.SafeHandles.SafeProcessHandle.IsInvalid
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/Microsoft/Win32/SafeHandles/SafeProcessHandle.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsInvalid
    path: src/System.Diagnostics.Process/src/Microsoft/Win32/SafeHandles/SafeProcessHandle.Windows.cs
    startLine: 23
  assemblies:
  - System.Diagnostics.Process
  namespace: Microsoft.Win32.SafeHandles
  syntax:
    content: public override bool IsInvalid { get; }
    content.vb: Public Overrides ReadOnly Property IsInvalid As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
references:
- uid: Microsoft.Win32.SafeHandles
  isExternal: false
  name: Microsoft.Win32.SafeHandles
  fullName: Microsoft.Win32.SafeHandles
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Runtime.InteropServices.SafeHandle
  parent: System.Runtime.InteropServices
  isExternal: false
  name: Runtime.InteropServices.SafeHandle
  fullName: System.Runtime.InteropServices.SafeHandle
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  fullName: System.IntPtr
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
