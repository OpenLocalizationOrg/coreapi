items:
- uid: System.Xml.Serialization.XmlNamespaceDeclarationsAttribute
  commentId: T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute
  id: XmlNamespaceDeclarationsAttribute
  parent: System.Xml.Serialization
  children:
  - System.Xml.Serialization.XmlNamespaceDeclarationsAttribute.#ctor
  langs:
  - csharp
  - vb
  name: XmlNamespaceDeclarationsAttribute
  fullName: System.Xml.Serialization.XmlNamespaceDeclarationsAttribute
  type: Class
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlNamespaceDeclarationsAttribute
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 163
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Specifies that the target property, parameter, return value, or class member contains prefixes associated with namespaces that are used within an XML document.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Xml.Serialization.XmlNamespaceDeclarationsAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute can only be applied once in a class to a field or property that returns an <xref href=\"System.Xml.Serialization.XmlSerializerNamespaces\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>The <xref href=\"System.Xml.Serialization.XmlNamespaceDeclarationsAttribute\" data-throw-if-not-resolved=\"false\"></xref> allows you to store the prefixes, and the associated namespaces, used in an XML document. For example, one common usage of the attribute is to store XPath data, as it is defined by the World Wide Web Consortium (www.w3.org) document named \"XML Language (XPath) Version 1.0\". In brief, an XPath is a string that contains many namespace prefixes and local names, along with some other syntax.</p>\n<p>The XPath language allows for the association of a prefix with a path, and using the prefix within the XML document. For example, the following XML document named \"select\" contains a prefix (\"cal\") associated with a specific URI (http://www.cohowinery.com/calendar/). The element contains an attribute named \"path\" that contains the XPath.</p>\n<pre><code> <select xmlns:cal =\"http://www.cohowinery.com/calendar/\" path=\"cal:appointments/@startTime\" /></code></pre>\n<p>The schema for this might be: </p>\n<pre><code> <element name=\"select\">\n<complexType>\n<simpleContent>\n  <attribute name=\"path\" />\n</simpleContent>\n</complexType>\n</element></code></pre>\n<p>Without the <xref href=\"System.Xml.Serialization.XmlNamespaceDeclarationsAttribute\" data-throw-if-not-resolved=\"false\"></xref>, the association between the prefix and the namespace is lost.</p>\n<p>To retain the association between the prefix and the namespace URI, add a member that returns an <xref href=\"System.Xml.Serialization.XmlSerializerNamespaces\" data-throw-if-not-resolved=\"false\"></xref> object and apply the <xref href=\"System.Xml.Serialization.XmlNamespaceDeclarationsAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute to the member, as shown in the following C# and Visual Basic code: </p>\n<pre><code> // C#\npublic class Select {\n[XmlAttribute] public string path;\n[XmlNamespaceDeclarations] public XmlSerializerNamespaces xmlns;\n}\n' Visual Basic\nPublic Class Select\n<XmlAttribute> Public path As String\n<XmlNamespaceDeclarations> Public xmlns As XmlSerializerNamespaces\nEnd Class</code></pre>\n<p>When serialized, the schema for the generated XML document contains the XML Schema definition (XSD) element named <code>appinfo</code>. The element further contains a metadata element named <code>keepNamespaceDeclarations</code>, set to the name of the member that contains the namespace declarations. The following XML fragment shows the schema: </p>\n<pre><code> <xs:element name=\"select\">\n<xs:complexType>\n<xs:annotation> \n  <xs:appinfo>\n   <keepNamespaceDeclarations>xmlns</keepNamespaceDeclarations>\n  </xs:appinfo> \n</xs:annotation> \n<xs:simpleContent>\n  <xs:attribute name=\"path\" />\n</xs:simpleContent>\n</xs:complexType>\n</xs:element></code></pre>\n<p>On deserialization, the <code>xmlns</code> field contains an <xref href=\"System.Xml.Serialization.XmlSerializerNamespaces\" data-throw-if-not-resolved=\"false\"></xref> object that contains all namespace prefix definitions.</p>\n<p>On serialization, the user can add prefix-namespace pairs to the <xref href=\"System.Xml.Serialization.XmlSerializerNamespaces\" data-throw-if-not-resolved=\"false\"></xref> object using the <xref href=\"System.Xml.Serialization.XmlSerializerNamespaces.Add(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. This is shown in the following C# and Visual Basic code: </p>\n<pre><code> // C#\nusing System;\nusing System.IO;\nusing System.Xml.Serialization;\n[XmlRoot(\"select\")]\npublic class Select {\n[XmlAttribute]\npublic string xpath;\n[XmlNamespaceDeclarations]\npublic XmlSerializerNamespaces xmlns;\n}\npublic class Test {\npublic static void Main(string[] args) {\nSelect mySelect = new Select();\nmySelect.xpath = \"myNS:ref/@common:y\";\nmySelect.xmlns = new XmlSerializerNamespaces();\nmySelect.xmlns.Add(\"MyNS\", \"myNS.tempuri.org\");\nmySelect.xmlns.Add(\"common\", \"common.tempuri.org\");\nXmlSerializer ser = new XmlSerializer(typeof(Select));\nser.Serialize(Console.Out, mySelect);\n}\n}\n// Output:\n// <?xml version=\"1.0\" encoding=\"IBM437\"?>\n// <select xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n// xmlns:common=\"common.tempuri.org\" xmlns:MyNS=\"myNS.tempuri.org\" xpath=\"myNS:ref/@common:y\" />\n' Visual Basic\nImports System\nImports System.IO\nImports System.Xml.Serialization\n<XmlRoot(\"select\")> _\nPublic Class SelectPath\n<XmlAttribute> _\nPublic xpath As String \n<XmlNamespaceDeclarations> _\npublic xmlns As XmlSerializerNamespaces \nEnd Class\nPublic Class Test \nPublic Shared Sub Main() \nDim mySelect As SelectPath = New SelectPath()\nmySelect.xpath = \"myNS:ref/@common:y\"\nmySelect.xmlns = New XmlSerializerNamespaces()\nmySelect.xmlns.Add(\"MyNS\", \"myNS.tempuri.org\")\nmySelect.xmlns.Add(\"common\", \"common.tempuri.org\")\nDim ser As XmlSerializer = New XmlSerializer(mySelect.GetType)\nser.Serialize(Console.Out, mySelect)\nEnd Sub\nEnd Class\n'Output:\n' <?xml version=\"1.0\" encoding=\"IBM437\"?>\n' <select xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n' xmlns:common=\"common.tempuri.org\" xmlns:MyNS=\"myNS.tempuri.org\" xpath=\"myNS:ref/@common:y\" /></code></pre>\n<p>Also note that the member to which the attribute is applied contains only the prefix-namespace pairs that belong to the XML element defined by the class. For example, in the following XML document, only the prefix pair \"cal\" is captured, but not the \"x\" prefix. To get that data, add a member with the <xref href=\"System.Xml.Serialization.XmlNamespaceDeclarationsAttribute\" data-throw-if-not-resolved=\"false\"></xref> to the class that represents the <code>root</code> element.</p>\n<pre><code> <?xml version=\"1.0\"?>\n<x:root xmlns:x=\"http://www.cohowinery.com/x/\">\n<x:select xmlns:cal=\"http://www.cohowinery.com/calendar/\" path=\"cal:appointments/@cal:startTime\" />\n</x:root></code></pre>\n"
  syntax:
    content: 'public class XmlNamespaceDeclarationsAttribute : Attribute'
    content.vb: >-
      Public Class XmlNamespaceDeclarationsAttribute
          Inherits Attribute
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Xml.Serialization.XmlNamespaceDeclarationsAttribute.#ctor
  commentId: M:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute.#ctor
  id: '#ctor'
  parent: System.Xml.Serialization.XmlNamespaceDeclarationsAttribute
  langs:
  - csharp
  - vb
  name: XmlNamespaceDeclarationsAttribute()
  fullName: System.Xml.Serialization.XmlNamespaceDeclarationsAttribute.XmlNamespaceDeclarationsAttribute()
  type: Constructor
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 166
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.Serialization.XmlNamespaceDeclarationsAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Xml.Serialization.XmlNamespaceDeclarationsAttribute\" data-throw-if-not-resolved=\"false\"></xref> can only be applied to a target that returns an <xref href=\"System.Xml.Serialization.XmlSerializerNamespaces\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public XmlNamespaceDeclarationsAttribute()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Xml.Serialization
  isExternal: false
  name: System.Xml.Serialization
  fullName: System.Xml.Serialization
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
