items:
- uid: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor
  commentId: T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor
  id: MemoryMappedViewAccessor
  parent: System.IO.MemoryMappedFiles
  children:
  - System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Dispose(System.Boolean)
  - System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Flush
  - System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.PointerOffset
  - System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.SafeMemoryMappedViewHandle
  langs:
  - csharp
  - vb
  name: MemoryMappedViewAccessor
  fullName: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor
  type: Class
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedViewAccessor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemoryMappedViewAccessor
    path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedViewAccessor.cs
    startLine: 10
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: "\n<p>Represents a randomly accessed view of a memory-mapped file.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor\" data-throw-if-not-resolved=\"false\"></xref> method of a <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFile\" data-throw-if-not-resolved=\"false\"></xref> object to get this view.</p>\n"
  example:
  - "\n<p>The following example obtains a <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedViewAccessor\" data-throw-if-not-resolved=\"false\"></xref> from a large memory-mapped file for editing.</p>\n<p>This code example is part of a larger example provided for the <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFile\" data-throw-if-not-resolved=\"false\"></xref> class.</p>memorymappedfiles.memorymappedfile.createfromfile#2"
  syntax:
    content: 'public sealed class MemoryMappedViewAccessor : UnmanagedMemoryAccessor'
    content.vb: >-
      Public NotInheritable Class MemoryMappedViewAccessor
          Inherits UnmanagedMemoryAccessor
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.PointerOffset
  commentId: P:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.PointerOffset
  id: PointerOffset
  parent: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor
  langs:
  - csharp
  - vb
  name: PointerOffset
  fullName: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.PointerOffset
  type: Property
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedViewAccessor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PointerOffset
    path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedViewAccessor.cs
    startLine: 29
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Gets the number of bytes by which the starting position of this view is offset from the beginning of the memory-mapped file. </p>\n"
  syntax:
    content: public long PointerOffset { get; }
    content.vb: Public ReadOnly Property PointerOffset As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The number of bytes between the starting position of this view and the beginning of the memory-mapped file. </p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The object from which this instance was created is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.SafeMemoryMappedViewHandle
  commentId: P:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.SafeMemoryMappedViewHandle
  id: SafeMemoryMappedViewHandle
  parent: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor
  langs:
  - csharp
  - vb
  name: SafeMemoryMappedViewHandle
  fullName: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.SafeMemoryMappedViewHandle
  type: Property
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedViewAccessor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SafeMemoryMappedViewHandle
    path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedViewAccessor.cs
    startLine: 23
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: "\n<p>Gets a handle to the view of a memory-mapped file.</p>\n"
  example:
  - 
  syntax:
    content: public SafeMemoryMappedViewHandle SafeMemoryMappedViewHandle { get; }
    content.vb: Public ReadOnly Property SafeMemoryMappedViewHandle As SafeMemoryMappedViewHandle
    parameters: []
    return:
      type: Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle
      description: "\n<p>A wrapper for the operating system's handle to the view of the file. </p>\n"
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Dispose(System.Boolean)
  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedViewAccessor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedViewAccessor.cs
    startLine: 34
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Flush
  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Flush
  id: Flush
  parent: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor
  langs:
  - csharp
  - vb
  name: Flush()
  fullName: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Flush()
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedViewAccessor.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Flush
    path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedViewAccessor.cs
    startLine: 64
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: "\n<p>Clears all buffers for this view and causes any buffered data to be written to the underlying file.</p>\n"
  remarks: "\n<p>If you are using views that are adjacent to each other, this method will also clear the following data, provided its size is equal to a multiple of the system page size:</p>\n<ul><li>\n<p>Any data that precedes the view up until the latest file offset.</p>\n</li><li>\n<p>Any data that follows the view up until the earliest file offset.</p>\n</li></ul>\n"
  example:
  - 
  syntax:
    content: public void Flush()
    content.vb: Public Sub Flush
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>Methods were called after the accessor was closed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.IO.MemoryMappedFiles
  isExternal: false
  name: System.IO.MemoryMappedFiles
  fullName: System.IO.MemoryMappedFiles
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeMemoryMappedViewHandle
  fullName: Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle
- uid: Microsoft.Win32.SafeHandles
  isExternal: false
  name: Microsoft.Win32.SafeHandles
  fullName: Microsoft.Win32.SafeHandles
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
