items:
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  id: ReadOnlyCollection`1
  parent: System.Collections.ObjectModel
  children:
  - System.Collections.ObjectModel.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})
  - System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.Count
  - System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator
  - System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.Items
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)
  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)
  langs:
  - csharp
  - vb
  name: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadOnlyCollection
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 14
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Provides the base class for a generic read-only collection.
  syntax:
    content: 'public class ReadOnlyCollection<T> : IList<T>, ICollection<T>, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable'
    content.vb: >-
      Public Class ReadOnlyCollection(Of T)
          Implements IList(Of T), ICollection(Of T), IReadOnlyList(Of T), IReadOnlyCollection(Of T), IEnumerable(Of T), IList, ICollection, IEnumerable
    typeParameters:
    - id: T
      description: The type of elements in the collection.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IList{{T}}
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IReadOnlyList{{T}}
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})
  id: '#ctor(System.Collections.Generic.IList{`0})'
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: ReadOnlyCollection(IList<T>)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.ReadOnlyCollection(System.Collections.Generic.IList<T>)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 24
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Initializes a new instance of the <xref href="System.Collections.ObjectModel.ReadOnlyCollection`1" data-throw-if-not-resolved="false"></xref> class that is a read-only wrapper around the specified list.
  syntax:
    content: public ReadOnlyCollection(IList<T> list)
    content.vb: Public Sub New(list As IList(Of T))
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{T}}
      description: The list to wrap.
  exceptions:
  - type: System.ArgumentNullException
    description: "\r\n  <em>list</em> is null."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).ReadOnlyCollection(System.Collections.Generic.IList(Of T))
  name.vb: ReadOnlyCollection(IList(Of T))
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Count
  id: Count
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.Count
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Count
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 31
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Gets the number of elements contained in the <xref href="System.Collections.ObjectModel.ReadOnlyCollection`1" data-throw-if-not-resolved="false"></xref> instance.
  syntax:
    content: >-
      public int Count

      {
          get;
      }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of elements contained in the <xref href="System.Collections.ObjectModel.ReadOnlyCollection`1" data-throw-if-not-resolved="false"></xref> instance.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).Count
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: Item[Int32]
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: this[]
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 35
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Gets the element at the specified index.
  syntax:
    content: >-
      public T this[int index]

      {
          get;
      }
    content.vb: Public ReadOnly Property Item(index As Integer) As T
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to get.
    return:
      type: '{T}'
      description: The element at the specified index.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: "\r\n  <em>index</em> is less than zero.-or-<em>index</em> is equal to or greater than <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1.Count\" data-throw-if-not-resolved=\"false\"></xref>. "
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Items
  id: Items
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: Items
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.Items
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Items
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 55
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Returns the <xref href="System.Collections.Generic.IList`1" data-throw-if-not-resolved="false"></xref> that the <xref href="System.Collections.ObjectModel.ReadOnlyCollection`1" data-throw-if-not-resolved="false"></xref> wraps.
  syntax:
    content: >-
      protected IList<T> Items

      {
          get;
      }
    content.vb: Protected ReadOnly Property Items As IList(Of T)
    parameters: []
    return:
      type: System.Collections.Generic.IList{{T}}
      description: The <xref href="System.Collections.Generic.IList`1" data-throw-if-not-resolved="false"></xref> that the <xref href="System.Collections.ObjectModel.ReadOnlyCollection`1" data-throw-if-not-resolved="false"></xref> wraps.
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).Items
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.Items
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.IsReadOnly
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.ICollection<T>.IsReadOnly
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 61
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Gets a value indicating whether the <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref> is read-only.
  syntax:
    content: >-
      bool ICollection<T>.IsReadOnly

      {
          get;
      }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<T>.IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly
    parameters: []
    return:
      type: System.Boolean
      description: true if the <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref> is read-only; otherwise, false.  In the default implementation of <xref href="System.Collections.ObjectModel.ReadOnlyCollection`1" data-throw-if-not-resolved="false"></xref>, this property always returns true.
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)
  id: System#Collections#Generic#IList{T}#Item(System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList<T>.Item[Int32]
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.IList<T>.this[]
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 65
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Gets the element at the specified index. An <xref href="System.NotSupportedException" data-throw-if-not-resolved="false"></xref> occurs if you try to set the item at the specified index.
  syntax:
    content: >-
      T IList<T>.this[int index]

      {
          get;
          set;
      }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IList<T>.Item(index As Integer) As T Implements IList(Of T).this
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to get.
    return:
      type: '{T}'
      description: The element at the specified index.
  exceptions:
  - type: System.NotSupportedException
    description: Always thrown if the property is set.
  modifiers.csharp:
  - get
  - set
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.Item(System.Int32)
  name.vb: System.Collections.Generic.IList<T>.Item(Int32)
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: ICollection.IsSynchronized
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.ICollection.IsSynchronized
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 97
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Gets a value indicating whether access to the <xref href="System.Collections.ICollection" data-throw-if-not-resolved="false"></xref> is synchronized (thread safe).
  syntax:
    content: >-
      bool ICollection.IsSynchronized

      {
          get;
      }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
      description: true if access to the <xref href="System.Collections.ICollection" data-throw-if-not-resolved="false"></xref> is synchronized (thread safe); otherwise, false.  In the default implementation of <xref href="System.Collections.ObjectModel.ReadOnlyCollection`1" data-throw-if-not-resolved="false"></xref>, this property always returns false.
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: ICollection.SyncRoot
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.ICollection.SyncRoot
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 101
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Gets an object that can be used to synchronize access to the <xref href="System.Collections.ICollection" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: >-
      object ICollection.SyncRoot

      {
          get;
      }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
      description: An object that can be used to synchronize access to the <xref href="System.Collections.ICollection" data-throw-if-not-resolved="false"></xref>.  In the default implementation of <xref href="System.Collections.ObjectModel.ReadOnlyCollection`1" data-throw-if-not-resolved="false"></xref>, this property always returns the current instance.
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList.IsFixedSize
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.IsFixedSize
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.IsFixedSize
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 175
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Gets a value indicating whether the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref> has a fixed size.
  syntax:
    content: >-
      bool IList.IsFixedSize

      {
          get;
      }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsFixedSize As Boolean Implements IList.IsFixedSize
    parameters: []
    return:
      type: System.Boolean
      description: true if the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref> has a fixed size; otherwise, false.  In the default implementation of <xref href="System.Collections.ObjectModel.ReadOnlyCollection`1" data-throw-if-not-resolved="false"></xref>, this property always returns true.
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.IsFixedSize
  name.vb: System.Collections.IList.IsFixedSize
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList.IsReadOnly
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.IsReadOnly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.IsReadOnly
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 179
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Gets a value indicating whether the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref> is read-only.
  syntax:
    content: >-
      bool IList.IsReadOnly

      {
          get;
      }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsReadOnly As Boolean Implements IList.IsReadOnly
    parameters: []
    return:
      type: System.Boolean
      description: true if the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref> is read-only; otherwise, false.  In the default implementation of <xref href="System.Collections.ObjectModel.ReadOnlyCollection`1" data-throw-if-not-resolved="false"></xref>, this property always returns true.
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.IsReadOnly
  name.vb: System.Collections.IList.IsReadOnly
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList.Item[Int32]
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.this[]
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 183
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Gets the element at the specified index. A <xref href="System.NotSupportedException" data-throw-if-not-resolved="false"></xref> occurs if you try to set the item at the specified index.
  syntax:
    content: >-
      object IList.this[int index]

      {
          get;
          set;
      }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.Item(index As Integer) As Object Implements IList.this
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to get.
    return:
      type: System.Object
      description: The element at the specified index.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: "\r\n  <em>index</em> is not a valid index in the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>. "
  - type: System.NotSupportedException
    description: Always thrown if the property is set.
  modifiers.csharp:
  - get
  - set
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.Contains(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Contains
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 39
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Determines whether an element is in the <xref href="System.Collections.ObjectModel.ReadOnlyCollection`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public bool Contains(T value)
    content.vb: Public Function Contains(value As T) As Boolean
    parameters:
    - id: value
      type: '{T}'
      description: The object to locate in the <xref href="System.Collections.ObjectModel.ReadOnlyCollection`1" data-throw-if-not-resolved="false"></xref>. The value can be null for reference types.
    return:
      type: System.Boolean
      description: true if <em>value</em> is found in the <xref href="System.Collections.ObjectModel.ReadOnlyCollection`1" data-throw-if-not-resolved="false"></xref>; otherwise, false.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).Contains(T)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CopyTo
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 43
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Copies the entire <xref href="System.Collections.ObjectModel.ReadOnlyCollection`1" data-throw-if-not-resolved="false"></xref> to a compatible one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref>, starting at the specified index of the target array.
  syntax:
    content: public void CopyTo(T[] array, int index)
    content.vb: Public Sub CopyTo(array As T(), index As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that is the destination of the elements copied from <xref href="System.Collections.ObjectModel.ReadOnlyCollection`1" data-throw-if-not-resolved="false"></xref>. The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <em>array</em> at which copying begins.
  exceptions:
  - type: System.ArgumentNullException
    description: "\r\n  <em>array</em> is null."
  - type: System.ArgumentOutOfRangeException
    description: "\r\n  <em>index</em> is less than zero."
  - type: System.ArgumentException
    description: The number of elements in the source <xref href="System.Collections.ObjectModel.ReadOnlyCollection`1" data-throw-if-not-resolved="false"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEnumerator
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 47
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Returns an enumerator that iterates through the <xref href="System.Collections.ObjectModel.ReadOnlyCollection`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public IEnumerator<T> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of T)
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
      description: An <xref href="System.Collections.Generic.IEnumerator`1" data-throw-if-not-resolved="false"></xref> for the <xref href="System.Collections.ObjectModel.ReadOnlyCollection`1" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).GetEnumerator()
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IndexOf(T)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IndexOf(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 51
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Searches for the specified object and returns the zero-based index of the first occurrence within the entire <xref href="System.Collections.ObjectModel.ReadOnlyCollection`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public int IndexOf(T value)
    content.vb: Public Function IndexOf(value As T) As Integer
    parameters:
    - id: value
      type: '{T}'
      description: The object to locate in the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>. The value can be null for reference types.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of <em>item</em> within the entire <xref href="System.Collections.ObjectModel.ReadOnlyCollection`1" data-throw-if-not-resolved="false"></xref>, if found; otherwise, -1.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).IndexOf(T)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)
  id: System#Collections#Generic#ICollection{T}#Add(`0)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Add(T)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Add(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.ICollection<T>.Add
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 72
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Adds an item to the <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref>.  This implementation always throws <xref href="System.NotSupportedException" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: void ICollection<T>.Add(T value)
    content.vb: Sub System.Collections.Generic.ICollection<T>.Add(value As T) Implements ICollection(Of T).Add
    parameters:
    - id: value
      type: '{T}'
      description: The object to add to the <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.NotSupportedException
    description: Always thrown.
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  name.vb: System.Collections.Generic.ICollection<T>.Add(T)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear
  id: System#Collections#Generic#ICollection{T}#Clear
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Clear()
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Clear()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.ICollection<T>.Clear
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 76
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Removes all items from the <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref>.  This implementation always throws <xref href="System.NotSupportedException" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: void ICollection<T>.Clear()
    content.vb: Sub System.Collections.Generic.ICollection<T>.Clear Implements ICollection(Of T).Clear
  exceptions:
  - type: System.NotSupportedException
    description: Always thrown.
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Clear()
  name.vb: System.Collections.Generic.ICollection<T>.Clear()
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)
  id: System#Collections#Generic#ICollection{T}#Remove(`0)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Remove(T)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Remove(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.ICollection<T>.Remove
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 84
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Removes the first occurrence of a specific object from the <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref>.  This implementation always throws <xref href="System.NotSupportedException" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: bool ICollection<T>.Remove(T value)
    content.vb: Function System.Collections.Generic.ICollection<T>.Remove(value As T) As Boolean Implements ICollection(Of T).Remove
    parameters:
    - id: value
      type: '{T}'
      description: The object to remove from the <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: true if <em>value</em> was successfully removed from the <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref>; otherwise, false.
  exceptions:
  - type: System.NotSupportedException
    description: Always thrown.
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Remove(T)
  name.vb: System.Collections.Generic.ICollection<T>.Remove(T)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  id: System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList<T>.Insert(Int32, T)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.IList<T>.Insert
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 80
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Inserts an item to the <xref href="System.Collections.Generic.IList`1" data-throw-if-not-resolved="false"></xref> at the specified index.  This implementation always throws <xref href="System.NotSupportedException" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: void IList<T>.Insert(int index, T value)
    content.vb: Sub System.Collections.Generic.IList<T>.Insert(index As Integer, value As T) Implements IList(Of T).Insert
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which <em>value</em> should be inserted.
    - id: value
      type: '{T}'
      description: The object to insert into the <xref href="System.Collections.Generic.IList`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.NotSupportedException
    description: Always thrown.
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.Insert(System.Int32, T)
  name.vb: System.Collections.Generic.IList<T>.Insert(Int32, T)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  id: System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.IList<T>.RemoveAt
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 89
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Removes the <xref href="System.Collections.Generic.IList`1" data-throw-if-not-resolved="false"></xref> item at the specified index.  This implementation always throws <xref href="System.NotSupportedException" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: void IList<T>.RemoveAt(int index)
    content.vb: Sub System.Collections.Generic.IList<T>.RemoveAt(index As Integer) Implements IList(Of T).RemoveAt
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the item to remove.
  exceptions:
  - type: System.NotSupportedException
    description: Always thrown.
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.RemoveAt(System.Int32)
  name.vb: System.Collections.Generic.IList<T>.RemoveAt(Int32)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.ICollection.CopyTo
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 116
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Copies the elements of the <xref href="System.Collections.ICollection" data-throw-if-not-resolved="false"></xref> to an <xref href="System.Array" data-throw-if-not-resolved="false"></xref>, starting at a particular <xref href="System.Array" data-throw-if-not-resolved="false"></xref> index.
  syntax:
    content: void ICollection.CopyTo(Array array, int index)
    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that is the destination of the elements copied from <xref href="System.Collections.ICollection" data-throw-if-not-resolved="false"></xref>. The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <em>array</em> at which copying begins.
  exceptions:
  - type: System.ArgumentNullException
    description: "\r\n  <em>array</em> is null."
  - type: System.ArgumentOutOfRangeException
    description: "\r\n  <em>index</em> is less than zero."
  - type: System.ArgumentException
    description: "\r\n  <em>array</em> is multidimensional.-or-<em>array</em> does not have zero-based indexing.-or-The number of elements in the source <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>.-or-The type of the source <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>."
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 93
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Returns an enumerator that iterates through a collection.
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: An <xref href="System.Collections.IEnumerator" data-throw-if-not-resolved="false"></xref> that can be used to iterate through the collection.
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList.Add(Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Add(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.Add
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 190
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Adds an item to the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref>.  This implementation always throws <xref href="System.NotSupportedException" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: int IList.Add(object value)
    content.vb: Function System.Collections.IList.Add(value As Object) As Integer Implements IList.Add
    parameters:
    - id: value
      type: System.Object
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to add to the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Int32
      description: The position into which the new element was inserted.
  exceptions:
  - type: System.NotSupportedException
    description: Always thrown.
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear
  id: System#Collections#IList#Clear
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList.Clear()
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Clear()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.Clear
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 195
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Removes all items from the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref>.  This implementation always throws <xref href="System.NotSupportedException" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: void IList.Clear()
    content.vb: Sub System.Collections.IList.Clear Implements IList.Clear
  exceptions:
  - type: System.NotSupportedException
    description: Always thrown.
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.Clear()
  name.vb: System.Collections.IList.Clear()
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList.Contains(Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.Contains
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 205
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Determines whether the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref> contains a specific value.
  syntax:
    content: bool IList.Contains(object value)
    content.vb: Function System.Collections.IList.Contains(value As Object) As Boolean Implements IList.Contains
    parameters:
    - id: value
      type: System.Object
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to locate in the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: true if the <xref href="System.Object" data-throw-if-not-resolved="false"></xref> is found in the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref>; otherwise, false.
  exceptions:
  - type: System.ArgumentException
    description: "\r\n  <em>value</em> is not of the type specified for the generic type parameter <em>T</em>."
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList.IndexOf(Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.IndexOf(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.IndexOf
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 212
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Determines the index of a specific item in the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: int IList.IndexOf(object value)
    content.vb: Function System.Collections.IList.IndexOf(value As Object) As Integer Implements IList.IndexOf
    parameters:
    - id: value
      type: System.Object
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to locate in the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Int32
      description: The index of <em>value</em> if found in the list; otherwise, -1.
  exceptions:
  - type: System.ArgumentException
    description: "\r\n  <em>value</em> is not of the type specified for the generic type parameter <em>T</em>."
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList.Insert(Int32, Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Insert(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.Insert
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 219
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Inserts an item to the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref> at the specified index.  This implementation always throws <xref href="System.NotSupportedException" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: void IList.Insert(int index, object value)
    content.vb: Sub System.Collections.IList.Insert(index As Integer, value As Object) Implements IList.Insert
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which <em>value</em> should be inserted.
    - id: value
      type: System.Object
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to insert into the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.NotSupportedException
    description: Always thrown.
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.Insert(System.Int32, System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList.Remove(Object)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.Remove
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 223
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Removes the first occurrence of a specific object from the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref>.  This implementation always throws <xref href="System.NotSupportedException" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: void IList.Remove(object value)
    content.vb: Sub System.Collections.IList.Remove(value As Object) Implements IList.Remove
    parameters:
    - id: value
      type: System.Object
      description: The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to remove from the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.NotSupportedException
    description: Always thrown.
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)
  id: System#Collections#IList#RemoveAt(System.Int32)
  parent: System.Collections.ObjectModel.ReadOnlyCollection`1
  langs:
  - csharp
  - vb
  name: IList.RemoveAt(Int32)
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.RemoveAt
    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs
    startLine: 227
  assemblies:
  - System.Runtime
  namespace: System.Collections.ObjectModel
  summary: Removes the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref> item at the specified index.  This implementation always throws <xref href="System.NotSupportedException" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: void IList.RemoveAt(int index)
    content.vb: Sub System.Collections.IList.RemoveAt(index As Integer) Implements IList.RemoveAt
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the item to remove.
  exceptions:
  - type: System.NotSupportedException
    description: Always thrown.
  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.RemoveAt(System.Int32)
  name.vb: System.Collections.IList.RemoveAt(Int32)
  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)
references:
- uid: System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.IList{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  fullName: System.Collections.Generic.IList<T>
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: Generic.IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: Generic.IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Generic.IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: false
  name: Generic.IList<>
  fullName: System.Collections.Generic.IList<>
  fullname.vb: System.Collections.Generic.IList(Of )
  name.vb: Generic.IList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: Generic.IList
    fullName: System.Collections.Generic.IList
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: Generic.IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: Generic.ICollection<>
  fullName: System.Collections.Generic.ICollection<>
  fullname.vb: System.Collections.Generic.ICollection(Of )
  name.vb: Generic.ICollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: Generic.ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: Generic.ICollection
    fullName: System.Collections.Generic.ICollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  parent: System.Collections.Generic
  isExternal: false
  name: IReadOnlyList<>
  fullName: System.Collections.Generic.IReadOnlyList<>
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of )
  name.vb: IReadOnlyList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: Generic.IReadOnlyCollection<>
  fullName: System.Collections.Generic.IReadOnlyCollection<>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of )
  name.vb: Generic.IReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: '{T}[]'
  isExternal: false
  name: T[]
  fullName: T[]
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerator{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: Generic.IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerator<>
  fullName: System.Collections.Generic.IEnumerator<>
  fullname.vb: System.Collections.Generic.IEnumerator(Of )
  name.vb: Collections.Generic.IEnumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Collections.Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Collections.Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
