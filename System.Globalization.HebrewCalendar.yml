items:
- uid: System.Globalization.HebrewCalendar
  commentId: T:System.Globalization.HebrewCalendar
  id: HebrewCalendar
  parent: System.Globalization
  children:
  - System.Globalization.HebrewCalendar.#ctor
  - System.Globalization.HebrewCalendar.AddMonths(System.DateTime,System.Int32)
  - System.Globalization.HebrewCalendar.AddYears(System.DateTime,System.Int32)
  - System.Globalization.HebrewCalendar.Eras
  - System.Globalization.HebrewCalendar.GetDayOfMonth(System.DateTime)
  - System.Globalization.HebrewCalendar.GetDayOfWeek(System.DateTime)
  - System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)
  - System.Globalization.HebrewCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  - System.Globalization.HebrewCalendar.GetDaysInYear(System.Int32,System.Int32)
  - System.Globalization.HebrewCalendar.GetEra(System.DateTime)
  - System.Globalization.HebrewCalendar.GetLeapMonth(System.Int32,System.Int32)
  - System.Globalization.HebrewCalendar.GetMonth(System.DateTime)
  - System.Globalization.HebrewCalendar.GetMonthsInYear(System.Int32,System.Int32)
  - System.Globalization.HebrewCalendar.GetYear(System.DateTime)
  - System.Globalization.HebrewCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Globalization.HebrewCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  - System.Globalization.HebrewCalendar.IsLeapYear(System.Int32,System.Int32)
  - System.Globalization.HebrewCalendar.MaxSupportedDateTime
  - System.Globalization.HebrewCalendar.MinSupportedDateTime
  - System.Globalization.HebrewCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Globalization.HebrewCalendar.ToFourDigitYear(System.Int32)
  - System.Globalization.HebrewCalendar.TwoDigitYearMax
  langs:
  - csharp
  - vb
  name: HebrewCalendar
  nameWithType: HebrewCalendar
  fullName: System.Globalization.HebrewCalendar
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: HebrewCalendar
    path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
    startLine: 64
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Represents the Hebrew calendar.</p>\n"
  remarks: "\n<p>The Hebrew calendar recognizes two eras: B.C.E. (before the common era) and A.M. (Latin \"Anno Mundi\", which means \"the year of the world\"). This implementation of the <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> class recognizes only the current era (A.M.) and the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).</p>\n<p>For information about using the <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> class and the other calendar classes in the .NET Framework, see Working with Calendars.</p>\n<p>In every 19-year cycle that ends with a year that is evenly divisible by 19, the 3rd, 6th, 8th, 11th, 14th, 17th, and 19th years are leap years. A common year can have from 353 to 355 days, depending on the placement of Jewish holidays. A leap year can have from 383 to 385 days.</p>\n<p>The Hebrew calendar has 12 months during common years and 13 months during leap years: </p>\n<p>GetMonth value (common year) </p>\n<p>GetMonth value (leap year) </p>\n<p>Month </p>\n<p>Days in common years </p>\n<p>Days in leap years </p>\n<p>The days in Cheshvan and Kislev vary depending on the placement of Jewish holidays. During leap years, Adar is replaced by Adar Alef with 30 days and Adar Beit with 29 days. Adar Alef is considered the leap month. The last day of Adar Alef and all the days in Adar Beit are considered leap days; that is, the <xref href=\"System.Globalization.HebrewCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method returns <strong>true</strong> for these days. </p>\n<p>The date January 1, 2001 A.D. in the Gregorian calendar is equivalent to the sixth day of Tevet in the year 5761 A.M. in the Hebrew calendar.</p>\n<p>Each <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> supports a set of calendars. The <xref href=\"System.Globalization.CultureInfo.Calendar\" data-throw-if-not-resolved=\"false\"></xref> property returns the default calendar for the culture, and the <xref href=\"System.Globalization.CultureInfo.OptionalCalendars\" data-throw-if-not-resolved=\"false\"></xref> property returns an array containing all the calendars supported by the culture. To change the calendar used by a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>, the application should set the <xref href=\"System.Globalization.DateTimeFormatInfo.Calendar\" data-throw-if-not-resolved=\"false\"></xref> property of <xref href=\"System.Globalization.CultureInfo.DateTimeFormat\" data-throw-if-not-resolved=\"false\"></xref> to a new <xref href=\"System.Globalization.Calendar\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public class HebrewCalendar : Calendar, ICloneable
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public Class HebrewCalendar
          Inherits Calendar
          Implements ICloneable
  seealso:
  - type: System.Globalization.Calendar
    commentId: T:System.Globalization.Calendar
  - type: System.Globalization.CultureInfo.Calendar
    commentId: P:System.Globalization.CultureInfo.Calendar
  - type: System.Globalization.CultureInfo.OptionalCalendars
    commentId: P:System.Globalization.CultureInfo.OptionalCalendars
  inheritance:
  - System.Object
  - System.Globalization.Calendar
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.Globalization.Calendar.CurrentEra
  - System.Globalization.Calendar.Clone
  - System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)
  - System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)
  - System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)
  - System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)
  - System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)
  - System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)
  - System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)
  - System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)
  - System.Globalization.Calendar.GetDaysInYear(System.Int32)
  - System.Globalization.Calendar.GetHour(System.DateTime)
  - System.Globalization.Calendar.GetMilliseconds(System.DateTime)
  - System.Globalization.Calendar.GetMinute(System.DateTime)
  - System.Globalization.Calendar.GetMonthsInYear(System.Int32)
  - System.Globalization.Calendar.GetSecond(System.DateTime)
  - System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  - System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)
  - System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)
  - System.Globalization.Calendar.GetLeapMonth(System.Int32)
  - System.Globalization.Calendar.IsLeapYear(System.Int32)
  - System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Globalization.Calendar.AlgorithmType
  - System.Globalization.Calendar.IsReadOnly
  - System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Globalization.HebrewCalendar.#ctor
  commentId: M:System.Globalization.HebrewCalendar.#ctor
  id: '#ctor'
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  - vb
  name: HebrewCalendar()
  nameWithType: HebrewCalendar.HebrewCalendar()
  fullName: System.Globalization.HebrewCalendar.HebrewCalendar()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
    startLine: 352
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public HebrewCalendar()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Globalization.HebrewCalendar.Eras
  commentId: P:System.Globalization.HebrewCalendar.Eras
  id: Eras
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  - vb
  name: Eras
  nameWithType: HebrewCalendar.Eras
  fullName: System.Globalization.HebrewCalendar.Eras
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Eras
    path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
    startLine: 847
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Gets the list of eras in the <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The Hebrew calendar recognizes two eras: B.C.E. (before the common era) and A.M. (Latin \"Anno Mundi\", which means \"the year of the world\"). This implementation of the <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> class recognizes only the current era (A.M.). This property always returns an array with only one element.</p>\n"
  syntax:
    content: public override int[] Eras { get; }
    content.vb: Public Overrides ReadOnly Property Eras As Integer()
    parameters: []
    return:
      type: System.Int32[]
      description: "\n<p>An array of integers that represents the eras in the <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> type. The return value is always an array containing one element equal to <xref href=\"System.Globalization.HebrewCalendar.HebrewEra\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  overridden: System.Globalization.Calendar.Eras
  seealso:
  - type: System.Globalization.Calendar.CurrentEra
    commentId: F:System.Globalization.Calendar.CurrentEra
  - type: System.Globalization.HebrewCalendar.HebrewEra
    commentId: F:System.Globalization.HebrewCalendar.HebrewEra
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Globalization.HebrewCalendar.MaxSupportedDateTime
  commentId: P:System.Globalization.HebrewCalendar.MaxSupportedDateTime
  id: MaxSupportedDateTime
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  - vb
  name: MaxSupportedDateTime
  nameWithType: HebrewCalendar.MaxSupportedDateTime
  fullName: System.Globalization.HebrewCalendar.MaxSupportedDateTime
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MaxSupportedDateTime
    path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
    startLine: 311
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Gets the latest date and time supported by the <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
  syntax:
    content: public override DateTime MaxSupportedDateTime { get; }
    content.vb: Public Overrides ReadOnly Property MaxSupportedDateTime As Date
    parameters: []
    return:
      type: System.DateTime
      description: "\n<p>The latest date and time supported by the <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> type, which is equivalent to the last moment of September, 29, 2239 C.E. in the Gregorian calendar.</p>\n"
  overridden: System.Globalization.Calendar.MaxSupportedDateTime
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Globalization.HebrewCalendar.MinSupportedDateTime
  commentId: P:System.Globalization.HebrewCalendar.MinSupportedDateTime
  id: MinSupportedDateTime
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  - vb
  name: MinSupportedDateTime
  nameWithType: HebrewCalendar.MinSupportedDateTime
  fullName: System.Globalization.HebrewCalendar.MinSupportedDateTime
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MinSupportedDateTime
    path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
    startLine: 301
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Gets the earliest date and time supported by the <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
  remarks: "\n<p>Microsoft Visual Basic represents time of day as the specified time on the minimum date supported by the <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> type, which is January 1, 0001 C.E. However, the <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> type does not support that minimum date. Consequently, if you call a method to format the time of day using the current calendar but you do not specify a format specifier, formatting uses the ISO 8601 sortable (\"s\") date/time pattern format specifier instead of the default general (\"G\") date/time pattern format specifier. For more information, see Standard Date and Time Format Strings.</p>\n"
  syntax:
    content: public override DateTime MinSupportedDateTime { get; }
    content.vb: Public Overrides ReadOnly Property MinSupportedDateTime As Date
    parameters: []
    return:
      type: System.DateTime
      description: "\n<p>The earliest date and time supported by the <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> type, which is equivalent to the first moment of January, 1, 1583 C.E. in the Gregorian calendar.</p>\n"
  overridden: System.Globalization.Calendar.MinSupportedDateTime
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Globalization.HebrewCalendar.TwoDigitYearMax
  commentId: P:System.Globalization.HebrewCalendar.TwoDigitYearMax
  id: TwoDigitYearMax
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  - vb
  name: TwoDigitYearMax
  nameWithType: HebrewCalendar.TwoDigitYearMax
  fullName: System.Globalization.HebrewCalendar.TwoDigitYearMax
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TwoDigitYearMax
    path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
    startLine: 1028
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Globalization.HebrewCalendar.TwoDigitYearMax\" data-throw-if-not-resolved=\"false\"></xref> property allows a 2-digit year to be properly translated to a 4-digit year. For example, if this property is set to 5729, the 100-year range is from 5630 to 5729. Therefore, a 2-digit value of 30 is interpreted as 5630, while a 2-digit value of 29 is interpreted as 5729.</p>\n<p>The initial value of this property is derived from the settings in the regional and language options portion of Control Panel. If the initial system setting changes during the life of your application the <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> class does not automatically detect the change.</p>\n<p>The special value 99 causes the <xref href=\"System.Globalization.HebrewCalendar.ToFourDigitYear(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to ignore the system settings and return the specified year unchanged.</p>\n"
  syntax:
    content: public override int TwoDigitYearMax { get; set; }
    content.vb: Public Overrides Property TwoDigitYearMax As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The last year of a 100-year range that can be represented by a 2-digit year.</p>\n"
  overridden: System.Globalization.Calendar.TwoDigitYearMax
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The current <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> object is read-only.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>In a set operation, the Hebrew calendar year value is less than 5343 but is not 99, or the year value is greater than 5999. </p>\n"
  seealso:
  - type: System.Globalization.HebrewCalendar.ToFourDigitYear(System.Int32)
    commentId: M:System.Globalization.HebrewCalendar.ToFourDigitYear(System.Int32)
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.HebrewCalendar.AddMonths(System.DateTime,System.Int32)
  commentId: M:System.Globalization.HebrewCalendar.AddMonths(System.DateTime,System.Int32)
  id: AddMonths(System.DateTime,System.Int32)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  - vb
  name: AddMonths(DateTime, Int32)
  nameWithType: HebrewCalendar.AddMonths(DateTime, Int32)
  fullName: System.Globalization.HebrewCalendar.AddMonths(System.DateTime, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddMonths
    path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
    startLine: 666
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Returns a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> that is the specified number of months away from the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This implementation of the <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> class recognizes only the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).</p>\n<p>The day part of the resulting <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. The year part of the resulting <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> is affected if the resulting month is outside the year of the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>. This implementation supports only the current era. Therefore, <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> is thrown if the resulting year is outside the era of the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>. The time-of-day part of the resulting <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> remains the same as the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For example, if the specified month is Av, which has 30 days, the specified day is the 30th day of that month, and the value of the <em>months</em> parameter is 5, the resulting year is one more than the specified year, the resulting month is Tevet, and the resulting day is the 29th day, which is the last day in Tevet.</p>\n<p>If the value of the <em>months</em> parameter is negative, the resulting <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> is earlier than the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The<xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property of the returned <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value always equals <xref href=\"System.DateTimeKind.Unspecified\" data-throw-if-not-resolved=\"false\"></xref>. You can preserve the <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>time</em> parameter by calling the <xref href=\"System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)\" data-throw-if-not-resolved=\"false\"></xref> method, as the following example shows.</p>System.Globalization.Calendar.AddMethods#5"
  syntax:
    content: public override DateTime AddMonths(DateTime time, int months)
    content.vb: Public Overrides Function AddMonths(time As Date, months As Integer) As Date
    parameters:
    - id: time
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> to which to add <em>months</em>. </p>\n"
    - id: months
      type: System.Int32
      description: "\n<p>The number of months to add. </p>\n"
    return:
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> that results from adding the specified number of months to the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The resulting <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> is outside the supported range. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>months</em> is less than -120,000 or greater than 120,000. </p>\n"
  seealso:
  - type: System.DateTime
    commentId: T:System.DateTime
  - type: System.Globalization.HebrewCalendar.AddYears(System.DateTime,System.Int32)
    commentId: M:System.Globalization.HebrewCalendar.AddYears(System.DateTime,System.Int32)
  - type: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)
    commentId: M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)
  - type: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)
    commentId: M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)
  - type: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)
    commentId: M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)
  - type: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)
    commentId: M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)
  - type: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)
    commentId: M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)
  - type: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)
    commentId: M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.HebrewCalendar.AddYears(System.DateTime,System.Int32)
  commentId: M:System.Globalization.HebrewCalendar.AddYears(System.DateTime,System.Int32)
  id: AddYears(System.DateTime,System.Int32)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  - vb
  name: AddYears(DateTime, Int32)
  nameWithType: HebrewCalendar.AddYears(DateTime, Int32)
  fullName: System.Globalization.HebrewCalendar.AddYears(System.DateTime, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddYears
    path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
    startLine: 723
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Returns a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> that is the specified number of years away from the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This implementation of the <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> class recognizes only the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).</p>\n<p>The day part of the resulting <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> is affected if the resulting day is not a valid day in the resulting month of the resulting year. It is changed to the last valid day in the resulting month of the resulting year. For example, Cheshvan can have 29 or 30 days, depending on the placement of Jewish holidays. Suppose that Cheshvan has 30 days in the current year and 29 in the following year. If the specified date is the 30th day of Cheshvan in the current year and the value of <em>years</em> is 1, the resulting date will be the 29th day of Cheshvan in the following year.</p>\n<p>The month part of the resulting <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> is affected if the resulting month is not a valid month in the resulting year. It is changed to the last valid month in the resulting year. For example, if the month in the <em>time</em> parameter is the 13th month of a leap year and the value of <em>years</em> is 1, the month in the resulting <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> is the 12th month of the following year, which is a non-leap year. Note that even when the month part does not change, it might still refer to a different month. For example, Adar Beit is the 7th month in leap years, but Nissan is the 7th month in common years.</p>\n<p>This implementation supports only the current era. Therefore, <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> is thrown if the resulting year is outside the era of the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The time-of-day part of the resulting <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> remains the same as the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If <em>years</em> is negative, the resulting <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> is earlier than the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The<xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property of the returned <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value always equals <xref href=\"System.DateTimeKind.Unspecified\" data-throw-if-not-resolved=\"false\"></xref>. You can preserve the <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>time</em> parameter by calling the <xref href=\"System.DateTime.SpecifyKind(System.DateTime,System.DateTimeKind)\" data-throw-if-not-resolved=\"false\"></xref> method, as the following example shows.</p>System.Globalization.Calendar.AddMethods#8"
  syntax:
    content: public override DateTime AddYears(DateTime time, int years)
    content.vb: Public Overrides Function AddYears(time As Date, years As Integer) As Date
    parameters:
    - id: time
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> to which to add <em>years</em>. </p>\n"
    - id: years
      type: System.Int32
      description: "\n<p>The number of years to add. </p>\n"
    return:
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> that results from adding the specified number of years to the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The resulting <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> is outside the supported range. </p>\n"
  seealso:
  - type: System.DateTime
    commentId: T:System.DateTime
  - type: System.Globalization.HebrewCalendar.AddMonths(System.DateTime,System.Int32)
    commentId: M:System.Globalization.HebrewCalendar.AddMonths(System.DateTime,System.Int32)
  - type: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)
    commentId: M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)
  - type: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)
    commentId: M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)
  - type: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)
    commentId: M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)
  - type: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)
    commentId: M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)
  - type: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)
    commentId: M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)
  - type: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)
    commentId: M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.HebrewCalendar.GetDayOfMonth(System.DateTime)
  commentId: M:System.Globalization.HebrewCalendar.GetDayOfMonth(System.DateTime)
  id: GetDayOfMonth(System.DateTime)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  - vb
  name: GetDayOfMonth(DateTime)
  nameWithType: HebrewCalendar.GetDayOfMonth(DateTime)
  fullName: System.Globalization.HebrewCalendar.GetDayOfMonth(System.DateTime)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDayOfMonth
    path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
    startLine: 750
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Returns the day of the month in the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override int GetDayOfMonth(DateTime time)
    content.vb: Public Overrides Function GetDayOfMonth(time As Date) As Integer
    parameters:
    - id: time
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> to read. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>An integer from 1 to 30 that represents the day of the month in the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)
  seealso:
  - type: System.DateTime.Day
    commentId: P:System.DateTime.Day
  - type: System.Globalization.HebrewCalendar.GetEra(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetEra(System.DateTime)
  - type: System.Globalization.HebrewCalendar.GetYear(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetYear(System.DateTime)
  - type: System.Globalization.HebrewCalendar.GetMonth(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetMonth(System.DateTime)
  - type: System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)
  - type: System.Globalization.HebrewCalendar.GetDayOfWeek(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetDayOfWeek(System.DateTime)
  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.HebrewCalendar.GetDayOfWeek(System.DateTime)
  commentId: M:System.Globalization.HebrewCalendar.GetDayOfWeek(System.DateTime)
  id: GetDayOfWeek(System.DateTime)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  - vb
  name: GetDayOfWeek(DateTime)
  nameWithType: HebrewCalendar.GetDayOfWeek(DateTime)
  fullName: System.Globalization.HebrewCalendar.GetDayOfWeek(System.DateTime)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDayOfWeek
    path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
    startLine: 760
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Returns the day of the week in the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.DayOfWeek\" data-throw-if-not-resolved=\"false\"></xref> values are as follows: </p>\n<p>DayOfWeek value </p>\n<p>Day of Week </p>\n<table><tbody><tr><td>\n<p>Sunday </p>\n</td><td>\n<p>יום ראשון (Yom Rishon) </p>\n</td></tr><tr><td>\n<p>Monday </p>\n</td><td>\n<p>יום שני (Yom Sheni) </p>\n</td></tr><tr><td>\n<p>Tuesday </p>\n</td><td>\n<p>יום שלישי (Yom Shlishi) </p>\n</td></tr><tr><td>\n<p>Wednesday </p>\n</td><td>\n<p>יום רביעי (Yom Reviee) </p>\n</td></tr><tr><td>\n<p>Thursday </p>\n</td><td>\n<p>יום חמישי (Yom Chamishi) </p>\n</td></tr><tr><td>\n<p>Friday </p>\n</td><td>\n<p>יום שישי (Yom Shishi) </p>\n</td></tr><tr><td>\n<p>Saturday </p>\n</td><td>\n<p>שבת (Shabat) </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public override DayOfWeek GetDayOfWeek(DateTime time)
    content.vb: Public Overrides Function GetDayOfWeek(time As Date) As DayOfWeek
    parameters:
    - id: time
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> to read. </p>\n"
    return:
      type: System.DayOfWeek
      description: "\n<p>A <xref href=\"System.DayOfWeek\" data-throw-if-not-resolved=\"false\"></xref> value that represents the day of the week in the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)
  seealso:
  - type: System.DateTime.DayOfWeek
    commentId: P:System.DateTime.DayOfWeek
  - type: System.DayOfWeek
    commentId: T:System.DayOfWeek
  - type: System.Globalization.HebrewCalendar.GetEra(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetEra(System.DateTime)
  - type: System.Globalization.HebrewCalendar.GetYear(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetYear(System.DateTime)
  - type: System.Globalization.HebrewCalendar.GetMonth(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetMonth(System.DateTime)
  - type: System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)
  - type: System.Globalization.HebrewCalendar.GetDayOfMonth(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetDayOfMonth(System.DateTime)
  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)
  commentId: M:System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)
  id: GetDayOfYear(System.DateTime)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  - vb
  name: GetDayOfYear(DateTime)
  nameWithType: HebrewCalendar.GetDayOfYear(DateTime)
  fullName: System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDayOfYear
    path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
    startLine: 777
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Returns the day of the year in the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The day of the year is defined as the number of days from the first day of the year. For example, <xref href=\"System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> for the first day of the first month returns 1, and <xref href=\"System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> for the last day of the last month returns the total number of days in that year, which is the same value returned by <xref href=\"System.Globalization.HebrewCalendar.GetDaysInYear(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This implementation of the <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> class recognizes only the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).</p>\n"
  syntax:
    content: public override int GetDayOfYear(DateTime time)
    content.vb: Public Overrides Function GetDayOfYear(time As Date) As Integer
    parameters:
    - id: time
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> to read. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>An integer from 1 to 385 that represents the day of the year in the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Globalization.Calendar.GetDayOfYear(System.DateTime)
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>time</em> is earlier than September 17, 1583 in the Gregorian calendar, or greater than <xref href=\"System.Globalization.HebrewCalendar.MaxSupportedDateTime\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.DateTime.DayOfYear
    commentId: P:System.DateTime.DayOfYear
  - type: System.Globalization.HebrewCalendar.GetEra(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetEra(System.DateTime)
  - type: System.Globalization.HebrewCalendar.GetYear(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetYear(System.DateTime)
  - type: System.Globalization.HebrewCalendar.GetMonth(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetMonth(System.DateTime)
  - type: System.Globalization.HebrewCalendar.GetDayOfMonth(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetDayOfMonth(System.DateTime)
  - type: System.Globalization.HebrewCalendar.GetDayOfWeek(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetDayOfWeek(System.DateTime)
  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.HebrewCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  commentId: M:System.Globalization.HebrewCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  id: GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  - vb
  name: GetDaysInMonth(Int32, Int32, Int32)
  nameWithType: HebrewCalendar.GetDaysInMonth(Int32, Int32, Int32)
  fullName: System.Globalization.HebrewCalendar.GetDaysInMonth(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDaysInMonth
    path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
    startLine: 808
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Returns the number of days in the specified month in the specified year in the specified era.</p>\n"
  remarks: "\n<p>For example, this method returns 29 or 30 for Cheshvan, depending on the placement of Jewish holidays.</p>\n<p>This implementation of the <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> class recognizes only the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).</p>\n"
  syntax:
    content: public override int GetDaysInMonth(int year, int month, int era)
    content.vb: Public Overrides Function GetDaysInMonth(year As Integer, month As Integer, era As Integer) As Integer
    parameters:
    - id: year
      type: System.Int32
      description: "\n<p>An integer that represents the year. </p>\n"
    - id: month
      type: System.Int32
      description: "\n<p>An integer from 1 to 13 that represents the month. </p>\n"
    - id: era
      type: System.Int32
      description: "\n<p>An integer that represents the era. Specify either <xref href=\"System.Globalization.HebrewCalendar.HebrewEra\" data-throw-if-not-resolved=\"false\"></xref> or <strong>Calendar.Eras[Calendar.CurrentEra]</strong>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of days in the specified month in the specified year in the specified era.</p>\n"
  overridden: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>year</em>, <em>month</em>, or <em>era</em> is outside the range supported by the current <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  seealso:
  - type: System.Globalization.Calendar.CurrentEra
    commentId: F:System.Globalization.Calendar.CurrentEra
  - type: System.Globalization.HebrewCalendar.HebrewEra
    commentId: F:System.Globalization.HebrewCalendar.HebrewEra
  - type: System.Globalization.HebrewCalendar.Eras
    commentId: P:System.Globalization.HebrewCalendar.Eras
  - type: System.Globalization.HebrewCalendar.GetMonthsInYear(System.Int32,System.Int32)
    commentId: M:System.Globalization.HebrewCalendar.GetMonthsInYear(System.Int32,System.Int32)
  - type: System.Globalization.HebrewCalendar.GetDaysInYear(System.Int32,System.Int32)
    commentId: M:System.Globalization.HebrewCalendar.GetDaysInYear(System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.HebrewCalendar.GetDaysInYear(System.Int32,System.Int32)
  commentId: M:System.Globalization.HebrewCalendar.GetDaysInYear(System.Int32,System.Int32)
  id: GetDaysInYear(System.Int32,System.Int32)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  - vb
  name: GetDaysInYear(Int32, Int32)
  nameWithType: HebrewCalendar.GetDaysInYear(Int32, Int32)
  fullName: System.Globalization.HebrewCalendar.GetDaysInYear(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDaysInYear
    path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
    startLine: 825
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Returns the number of days in the specified year in the specified era.</p>\n"
  remarks: "\n<p>For example, this method returns an integer from 353 to 355 or from 383 to 385, depending on the placement of Jewish holidays and depending on whether <em>year</em> is a leap year.</p>\n<p>This implementation of the <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> class recognizes only the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).</p>\n"
  syntax:
    content: public override int GetDaysInYear(int year, int era)
    content.vb: Public Overrides Function GetDaysInYear(year As Integer, era As Integer) As Integer
    parameters:
    - id: year
      type: System.Int32
      description: "\n<p>An integer that represents the year. </p>\n"
    - id: era
      type: System.Int32
      description: "\n<p>An integer that represents the era. Specify either <xref href=\"System.Globalization.HebrewCalendar.HebrewEra\" data-throw-if-not-resolved=\"false\"></xref> or <strong>HebrewCalendar.Eras[Calendar.CurrentEra]</strong>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of days in the specified year in the specified era.</p>\n"
  overridden: System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>year</em> or <em>era</em> is outside the range supported by the current <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  seealso:
  - type: System.Globalization.Calendar.CurrentEra
    commentId: F:System.Globalization.Calendar.CurrentEra
  - type: System.Globalization.HebrewCalendar.HebrewEra
    commentId: F:System.Globalization.HebrewCalendar.HebrewEra
  - type: System.Globalization.HebrewCalendar.Eras
    commentId: P:System.Globalization.HebrewCalendar.Eras
  - type: System.Globalization.HebrewCalendar.GetMonthsInYear(System.Int32,System.Int32)
    commentId: M:System.Globalization.HebrewCalendar.GetMonthsInYear(System.Int32,System.Int32)
  - type: System.Globalization.HebrewCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
    commentId: M:System.Globalization.HebrewCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.HebrewCalendar.GetEra(System.DateTime)
  commentId: M:System.Globalization.HebrewCalendar.GetEra(System.DateTime)
  id: GetEra(System.DateTime)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  - vb
  name: GetEra(DateTime)
  nameWithType: HebrewCalendar.GetEra(DateTime)
  fullName: System.Globalization.HebrewCalendar.GetEra(System.DateTime)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEra
    path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
    startLine: 841
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Returns the era in the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The Hebrew calendar recognizes two eras: B.C.E. (before the common era) and A.M. (Latin \"Anno Mundi\", which means \"the year of the world\"). This implementation of the <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> class recognizes only the current era (A.M.) and only the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).</p>\n"
  syntax:
    content: public override int GetEra(DateTime time)
    content.vb: Public Overrides Function GetEra(time As Date) As Integer
    parameters:
    - id: time
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> to read. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>An integer that represents the era in the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>. The return value is always <xref href=\"System.Globalization.HebrewCalendar.HebrewEra\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Globalization.Calendar.GetEra(System.DateTime)
  seealso:
  - type: System.DateTime
    commentId: T:System.DateTime
  - type: System.Globalization.Calendar.CurrentEra
    commentId: F:System.Globalization.Calendar.CurrentEra
  - type: System.Globalization.HebrewCalendar.HebrewEra
    commentId: F:System.Globalization.HebrewCalendar.HebrewEra
  - type: System.Globalization.HebrewCalendar.Eras
    commentId: P:System.Globalization.HebrewCalendar.Eras
  - type: System.Globalization.HebrewCalendar.GetYear(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetYear(System.DateTime)
  - type: System.Globalization.HebrewCalendar.GetMonth(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetMonth(System.DateTime)
  - type: System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)
  - type: System.Globalization.HebrewCalendar.GetDayOfMonth(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetDayOfMonth(System.DateTime)
  - type: System.Globalization.HebrewCalendar.GetDayOfWeek(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetDayOfWeek(System.DateTime)
  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  - type: System.Globalization.Calendar.GetHour(System.DateTime)
    commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)
  - type: System.Globalization.Calendar.GetMinute(System.DateTime)
    commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)
  - type: System.Globalization.Calendar.GetSecond(System.DateTime)
    commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)
  - type: System.Globalization.Calendar.GetMilliseconds(System.DateTime)
    commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.HebrewCalendar.GetLeapMonth(System.Int32,System.Int32)
  commentId: M:System.Globalization.HebrewCalendar.GetLeapMonth(System.Int32,System.Int32)
  id: GetLeapMonth(System.Int32,System.Int32)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  - vb
  name: GetLeapMonth(Int32, Int32)
  nameWithType: HebrewCalendar.GetLeapMonth(Int32, Int32)
  fullName: System.Globalization.HebrewCalendar.GetLeapMonth(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetLeapMonth
    path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
    startLine: 900
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Calculates the leap month for a specified year and era.</p>\n"
  remarks: "\n<p>In a calendar that supports the notion of a leap month, the leap month can occur either after a particular month or after any month in a year. For example, the <xref href=\"System.Globalization.EastAsianLunisolarCalendar.GetMonth(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> method returns a number between 1 and 13 that indicates the month associated with a specified date. If there is a leap month between the eighth and ninth months of the year, the <xref href=\"System.Globalization.EastAsianLunisolarCalendar.GetMonth(System.DateTime)\" data-throw-if-not-resolved=\"false\"></xref> method returns 8 for the eighth month, 9 for the leap eighth month, and 10 for the ninth month.</p>\n"
  syntax:
    content: public override int GetLeapMonth(int year, int era)
    content.vb: Public Overrides Function GetLeapMonth(year As Integer, era As Integer) As Integer
    parameters:
    - id: year
      type: System.Int32
      description: "\n<p>A year.</p>\n"
    - id: era
      type: System.Int32
      description: "\n<p>An era. Specify either <xref href=\"System.Globalization.HebrewCalendar.HebrewEra\" data-throw-if-not-resolved=\"false\"></xref> or <strong>HebrewCalendar.Eras[Calendar.CurrentEra]</strong>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A positive integer that indicates the leap month in the specified year and era. The return value is 7 if the <em>year</em> and <em>era</em> parameters specify a leap year, or 0 if the year is not a leap year.</p>\n"
  overridden: System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>era</em> is not <xref href=\"System.Globalization.HebrewCalendar.HebrewEra\" data-throw-if-not-resolved=\"false\"></xref> or <strong>HebrewCalendar.Eras[Calendar.CurrentEra]</strong>.</p>\n<p>-or-</p>\n<p>\n<em>year</em> is less than the Hebrew calendar year 5343 or greater than the Hebrew calendar year 5999.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.HebrewCalendar.GetMonth(System.DateTime)
  commentId: M:System.Globalization.HebrewCalendar.GetMonth(System.DateTime)
  id: GetMonth(System.DateTime)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  - vb
  name: GetMonth(DateTime)
  nameWithType: HebrewCalendar.GetMonth(DateTime)
  fullName: System.Globalization.HebrewCalendar.GetMonth(System.DateTime)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetMonth
    path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
    startLine: 857
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Returns the month in the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override int GetMonth(DateTime time)
    content.vb: Public Overrides Function GetMonth(time As Date) As Integer
    parameters:
    - id: time
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> to read. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>An integer from 1 to 13 that represents the month in the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Globalization.Calendar.GetMonth(System.DateTime)
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>time</em> is less than <xref href=\"System.Globalization.HebrewCalendar.MinSupportedDateTime\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Globalization.HebrewCalendar.MaxSupportedDateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.DateTime.Month
    commentId: P:System.DateTime.Month
  - type: System.Globalization.HebrewCalendar.GetEra(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetEra(System.DateTime)
  - type: System.Globalization.HebrewCalendar.GetYear(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetYear(System.DateTime)
  - type: System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)
  - type: System.Globalization.HebrewCalendar.GetDayOfMonth(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetDayOfMonth(System.DateTime)
  - type: System.Globalization.HebrewCalendar.GetDayOfWeek(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetDayOfWeek(System.DateTime)
  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  - type: System.Globalization.Calendar.GetHour(System.DateTime)
    commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)
  - type: System.Globalization.Calendar.GetMinute(System.DateTime)
    commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)
  - type: System.Globalization.Calendar.GetSecond(System.DateTime)
    commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)
  - type: System.Globalization.Calendar.GetMilliseconds(System.DateTime)
    commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.HebrewCalendar.GetMonthsInYear(System.Int32,System.Int32)
  commentId: M:System.Globalization.HebrewCalendar.GetMonthsInYear(System.Int32,System.Int32)
  id: GetMonthsInYear(System.Int32,System.Int32)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  - vb
  name: GetMonthsInYear(Int32, Int32)
  nameWithType: HebrewCalendar.GetMonthsInYear(Int32, Int32)
  fullName: System.Globalization.HebrewCalendar.GetMonthsInYear(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetMonthsInYear
    path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
    startLine: 863
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Returns the number of months in the specified year in the specified era.</p>\n"
  remarks: "\n<p>This implementation of the <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> class recognizes only the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).</p>\n"
  syntax:
    content: public override int GetMonthsInYear(int year, int era)
    content.vb: Public Overrides Function GetMonthsInYear(year As Integer, era As Integer) As Integer
    parameters:
    - id: year
      type: System.Int32
      description: "\n<p>An integer that represents the year. </p>\n"
    - id: era
      type: System.Int32
      description: "\n<p>An integer that represents the era. Specify either <xref href=\"System.Globalization.HebrewCalendar.HebrewEra\" data-throw-if-not-resolved=\"false\"></xref> or <strong>HebrewCalendar.Eras[Calendar.CurrentEra]</strong>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of months in the specified year in the specified era. The return value is either 12 in a common year, or 13 in a leap year.</p>\n"
  overridden: System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>year</em> or <em>era</em> is outside the range supported by the current <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  seealso:
  - type: System.Globalization.Calendar.CurrentEra
    commentId: F:System.Globalization.Calendar.CurrentEra
  - type: System.Globalization.HebrewCalendar.HebrewEra
    commentId: F:System.Globalization.HebrewCalendar.HebrewEra
  - type: System.Globalization.HebrewCalendar.Eras
    commentId: P:System.Globalization.HebrewCalendar.Eras
  - type: System.Globalization.HebrewCalendar.GetDaysInYear(System.Int32,System.Int32)
    commentId: M:System.Globalization.HebrewCalendar.GetDaysInYear(System.Int32,System.Int32)
  - type: System.Globalization.HebrewCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
    commentId: M:System.Globalization.HebrewCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.HebrewCalendar.GetYear(System.DateTime)
  commentId: M:System.Globalization.HebrewCalendar.GetYear(System.DateTime)
  id: GetYear(System.DateTime)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  - vb
  name: GetYear(DateTime)
  nameWithType: HebrewCalendar.GetYear(DateTime)
  fullName: System.Globalization.HebrewCalendar.GetYear(System.DateTime)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetYear
    path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
    startLine: 871
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Returns the year in the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>This implementation of the <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> class recognizes only the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).</p>\n"
  syntax:
    content: public override int GetYear(DateTime time)
    content.vb: Public Overrides Function GetYear(time As Date) As Integer
    parameters:
    - id: time
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> to read. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>An integer that represents the year in the specified <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  overridden: System.Globalization.Calendar.GetYear(System.DateTime)
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>time</em> is outside the range supported by the current <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  seealso:
  - type: System.DateTime.Year
    commentId: P:System.DateTime.Year
  - type: System.Globalization.HebrewCalendar.GetEra(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetEra(System.DateTime)
  - type: System.Globalization.HebrewCalendar.GetMonth(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetMonth(System.DateTime)
  - type: System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)
  - type: System.Globalization.HebrewCalendar.GetDayOfMonth(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetDayOfMonth(System.DateTime)
  - type: System.Globalization.HebrewCalendar.GetDayOfWeek(System.DateTime)
    commentId: M:System.Globalization.HebrewCalendar.GetDayOfWeek(System.DateTime)
  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  - type: System.Globalization.Calendar.GetHour(System.DateTime)
    commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)
  - type: System.Globalization.Calendar.GetMinute(System.DateTime)
    commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)
  - type: System.Globalization.Calendar.GetSecond(System.DateTime)
    commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)
  - type: System.Globalization.Calendar.GetMilliseconds(System.DateTime)
    commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.HebrewCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Globalization.HebrewCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  id: IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  - vb
  name: IsLeapDay(Int32, Int32, Int32, Int32)
  nameWithType: HebrewCalendar.IsLeapDay(Int32, Int32, Int32, Int32)
  fullName: System.Globalization.HebrewCalendar.IsLeapDay(System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsLeapDay
    path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
    startLine: 879
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Determines whether the specified date in the specified era is a leap day.</p>\n"
  remarks: "\n<p>This implementation of the <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> class recognizes only the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).</p>\n<p>In every 19-year cycle that ends with a year that is evenly divisible by 19, the 3rd, 6th, 8th, 11th, 14th, 17th, and 19th years are leap years. A common year can have from 353 to 355 days, depending on the placement of Jewish holidays. A leap year can have from 383 to 385 days.</p>\n<p>A leap day is a day that occurs only in a leap year. In the Hebrew calendar, the last day of Adar Alef and all the days in Adar Beit are considered leap days.</p>\n"
  syntax:
    content: public override bool IsLeapDay(int year, int month, int day, int era)
    content.vb: Public Overrides Function IsLeapDay(year As Integer, month As Integer, day As Integer, era As Integer) As Boolean
    parameters:
    - id: year
      type: System.Int32
      description: "\n<p>An integer that represents the year. </p>\n"
    - id: month
      type: System.Int32
      description: "\n<p>An integer from 1 to 13 that represents the month. </p>\n"
    - id: day
      type: System.Int32
      description: "\n<p>An integer from 1 to 30 that represents the day. </p>\n"
    - id: era
      type: System.Int32
      description: "\n<p>An integer that represents the era. Specify either <xref href=\"System.Globalization.HebrewCalendar.HebrewEra\" data-throw-if-not-resolved=\"false\"></xref> or <strong>HebrewCalendar.Eras[Calendar.CurrentEra]</strong>..</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the specified day is a leap day; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>year</em>, <em>month</em>, <em>day</em>, or <em>era</em> is outside the range supported by this calendar. </p>\n"
  seealso:
  - type: System.Globalization.Calendar.CurrentEra
    commentId: F:System.Globalization.Calendar.CurrentEra
  - type: System.Globalization.HebrewCalendar.HebrewEra
    commentId: F:System.Globalization.HebrewCalendar.HebrewEra
  - type: System.Globalization.HebrewCalendar.Eras
    commentId: P:System.Globalization.HebrewCalendar.Eras
  - type: System.Globalization.HebrewCalendar.GetMonthsInYear(System.Int32,System.Int32)
    commentId: M:System.Globalization.HebrewCalendar.GetMonthsInYear(System.Int32,System.Int32)
  - type: System.Globalization.HebrewCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
    commentId: M:System.Globalization.HebrewCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  - type: System.Globalization.HebrewCalendar.IsLeapYear(System.Int32,System.Int32)
    commentId: M:System.Globalization.HebrewCalendar.IsLeapYear(System.Int32,System.Int32)
  - type: System.Globalization.HebrewCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
    commentId: M:System.Globalization.HebrewCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.HebrewCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  commentId: M:System.Globalization.HebrewCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  id: IsLeapMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  - vb
  name: IsLeapMonth(Int32, Int32, Int32)
  nameWithType: HebrewCalendar.IsLeapMonth(Int32, Int32, Int32)
  fullName: System.Globalization.HebrewCalendar.IsLeapMonth(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsLeapMonth
    path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
    startLine: 915
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Determines whether the specified month in the specified year in the specified era is a leap month.</p>\n"
  remarks: "\n<p>This implementation of the <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> class recognizes only the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).</p>\n<p>In every 19-year cycle that ends with a year that is evenly divisible by 19, the 3rd, 6th, 8th, 11th, 14th, 17th, and 19th years are leap years. A common year can have from 353 to 355 days, depending on the placement of Jewish holidays. A leap year can have from 383 to 385 days.</p>\n<p>A leap month is an entire month that occurs only in a leap year. In the Hebrew calendar, Adar Beit is the only leap month.</p>\n"
  syntax:
    content: public override bool IsLeapMonth(int year, int month, int era)
    content.vb: Public Overrides Function IsLeapMonth(year As Integer, month As Integer, era As Integer) As Boolean
    parameters:
    - id: year
      type: System.Int32
      description: "\n<p>An integer that represents the year. </p>\n"
    - id: month
      type: System.Int32
      description: "\n<p>An integer from 1 to 13 that represents the month. </p>\n"
    - id: era
      type: System.Int32
      description: "\n<p>An integer that represents the era. Specify either <xref href=\"System.Globalization.HebrewCalendar.HebrewEra\" data-throw-if-not-resolved=\"false\"></xref> or <strong>HebrewCalendar.Eras[Calendar.CurrentEra]</strong>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the specified month is a leap month; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>year</em>, <em>month</em>, or <em>era</em> is outside the range supported by this calendar. </p>\n"
  seealso:
  - type: System.Globalization.Calendar.CurrentEra
    commentId: F:System.Globalization.Calendar.CurrentEra
  - type: System.Globalization.HebrewCalendar.HebrewEra
    commentId: F:System.Globalization.HebrewCalendar.HebrewEra
  - type: System.Globalization.HebrewCalendar.Eras
    commentId: P:System.Globalization.HebrewCalendar.Eras
  - type: System.Globalization.HebrewCalendar.GetMonthsInYear(System.Int32,System.Int32)
    commentId: M:System.Globalization.HebrewCalendar.GetMonthsInYear(System.Int32,System.Int32)
  - type: System.Globalization.HebrewCalendar.IsLeapYear(System.Int32,System.Int32)
    commentId: M:System.Globalization.HebrewCalendar.IsLeapYear(System.Int32,System.Int32)
  - type: System.Globalization.HebrewCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
    commentId: M:System.Globalization.HebrewCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.HebrewCalendar.IsLeapYear(System.Int32,System.Int32)
  commentId: M:System.Globalization.HebrewCalendar.IsLeapYear(System.Int32,System.Int32)
  id: IsLeapYear(System.Int32,System.Int32)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  - vb
  name: IsLeapYear(Int32, Int32)
  nameWithType: HebrewCalendar.IsLeapYear(Int32, Int32)
  fullName: System.Globalization.HebrewCalendar.IsLeapYear(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsLeapYear
    path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
    startLine: 932
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Determines whether the specified year in the specified era is a leap year.</p>\n"
  remarks: "\n<p>This implementation of the <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> class recognizes only the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).</p>\n<p>In every 19-year cycle that ends with a year that is evenly divisible by 19, the 3rd, 6th, 8th, 11th, 14th, 17th, and 19th years are leap years. A common year can have from 353 to 355 days, depending on the placement of Jewish holidays. A leap year can have from 383 to 385 days.</p>\n"
  syntax:
    content: public override bool IsLeapYear(int year, int era)
    content.vb: Public Overrides Function IsLeapYear(year As Integer, era As Integer) As Boolean
    parameters:
    - id: year
      type: System.Int32
      description: "\n<p>An integer that represents the year. </p>\n"
    - id: era
      type: System.Int32
      description: "\n<p>An integer that represents the era. Specify either <xref href=\"System.Globalization.HebrewCalendar.HebrewEra\" data-throw-if-not-resolved=\"false\"></xref> or <strong>HebrewCalendar.Eras[Calendar.CurrentEra]</strong>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the specified year is a leap year; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>year</em> or <em>era</em> is outside the range supported by this calendar. </p>\n"
  seealso:
  - type: System.Globalization.Calendar.CurrentEra
    commentId: F:System.Globalization.Calendar.CurrentEra
  - type: System.Globalization.HebrewCalendar.HebrewEra
    commentId: F:System.Globalization.HebrewCalendar.HebrewEra
  - type: System.Globalization.HebrewCalendar.Eras
    commentId: P:System.Globalization.HebrewCalendar.Eras
  - type: System.Globalization.HebrewCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
    commentId: M:System.Globalization.HebrewCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  - type: System.Globalization.HebrewCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
    commentId: M:System.Globalization.HebrewCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.HebrewCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Globalization.HebrewCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  - vb
  name: ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)
  nameWithType: HebrewCalendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)
  fullName: System.Globalization.HebrewCalendar.ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToDateTime
    path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
    startLine: 1016
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Returns a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> that is set to the specified date and time in the specified era.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Globalization.HebrewCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is useful because it can convert any date in the current calendar to a Gregorian calendar date. The Gregorian date can subsequently be used, for example, to compare dates in different calendars or create an equivalent date in a particular calendar.</p>\n<p>This implementation of the <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> class recognizes only the Hebrew years 5343 to 5999 (1583 to 2239 in the Gregorian calendar).</p>\n"
  syntax:
    content: public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era)
    content.vb: Public Overrides Function ToDateTime(year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, era As Integer) As Date
    parameters:
    - id: year
      type: System.Int32
      description: "\n<p>An integer that represents the year. </p>\n"
    - id: month
      type: System.Int32
      description: "\n<p>An integer from 1 to 13 that represents the month. </p>\n"
    - id: day
      type: System.Int32
      description: "\n<p>An integer from 1 to 30 that represents the day. </p>\n"
    - id: hour
      type: System.Int32
      description: "\n<p>An integer from 0 to 23 that represents the hour. </p>\n"
    - id: minute
      type: System.Int32
      description: "\n<p>An integer from 0 to 59 that represents the minute. </p>\n"
    - id: second
      type: System.Int32
      description: "\n<p>An integer from 0 to 59 that represents the second. </p>\n"
    - id: millisecond
      type: System.Int32
      description: "\n<p>An integer from 0 to 999 that represents the millisecond. </p>\n"
    - id: era
      type: System.Int32
      description: "\n<p>An integer that represents the era. Specify either <xref href=\"System.Globalization.HebrewCalendar.HebrewEra\" data-throw-if-not-resolved=\"false\"></xref> or <strong>HebrewCalendar.Eras[Calendar.CurrentEra]</strong>.</p>\n"
    return:
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> that is set to the specified date and time in the current era.</p>\n"
  overridden: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>year</em>, <em>month</em>, <em>day</em> or <em>era</em> is outside the range supported by the current <xref href=\"System.Globalization.HebrewCalendar\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>-or- </p>\n<p>\n<em>hour</em> is less than 0 or greater than 23.</p>\n<p>-or- </p>\n<p>\n<em>minute</em> is less than 0 or greater than 59.</p>\n<p>-or- </p>\n<p>\n<em>second</em> is less than 0 or greater than 59.</p>\n<p>-or- </p>\n<p>\n<em>millisecond</em> is less than 0 or greater than 999. </p>\n"
  seealso:
  - type: System.DateTime
    commentId: T:System.DateTime
  - type: System.Globalization.Calendar.CurrentEra
    commentId: F:System.Globalization.Calendar.CurrentEra
  - type: System.Globalization.HebrewCalendar.HebrewEra
    commentId: F:System.Globalization.HebrewCalendar.HebrewEra
  - type: System.Globalization.HebrewCalendar.Eras
    commentId: P:System.Globalization.HebrewCalendar.Eras
  - type: System.Globalization.HebrewCalendar.GetMonthsInYear(System.Int32,System.Int32)
    commentId: M:System.Globalization.HebrewCalendar.GetMonthsInYear(System.Int32,System.Int32)
  - type: System.Globalization.HebrewCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
    commentId: M:System.Globalization.HebrewCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.HebrewCalendar.ToFourDigitYear(System.Int32)
  commentId: M:System.Globalization.HebrewCalendar.ToFourDigitYear(System.Int32)
  id: ToFourDigitYear(System.Int32)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  - vb
  name: ToFourDigitYear(Int32)
  nameWithType: HebrewCalendar.ToFourDigitYear(Int32)
  fullName: System.Globalization.HebrewCalendar.ToFourDigitYear(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToFourDigitYear
    path: src/mscorlib/src/System/Globalization/HebrewCalendar.cs
    startLine: 1051
  assemblies:
  - System.Globalization.Calendars
  namespace: System.Globalization
  summary: "\n<p>Converts the specified year to a 4-digit year by using the <xref href=\"System.Globalization.HebrewCalendar.TwoDigitYearMax\" data-throw-if-not-resolved=\"false\"></xref> property to determine the appropriate century.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Globalization.HebrewCalendar.ToFourDigitYear(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method uses the <em>year</em> parameter, the <xref href=\"System.Globalization.HebrewCalendar.TwoDigitYearMax\" data-throw-if-not-resolved=\"false\"></xref> property, and a year to calculate a 4-digit year. The century is determined by finding the sole occurrence of the <em>year</em> parameter within that 100-year range. For example, if <xref href=\"System.Globalization.HebrewCalendar.TwoDigitYearMax\" data-throw-if-not-resolved=\"false\"></xref> is set to 5729, the 100-year range is from 5630 to 5729. Therefore, a value of 30 is interpreted as 5630, while a value of 29 is interpreted as 5729.</p>\n<p>If the <xref href=\"System.Globalization.HebrewCalendar.TwoDigitYearMax\" data-throw-if-not-resolved=\"false\"></xref> property has the special value 99, the <xref href=\"System.Globalization.HebrewCalendar.ToFourDigitYear(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method ignores the settings in the regional and language options in Control Panel and returns the value of the <em>year</em> parameter unchanged. </p>\n<p>\n<xref href=\"System.Globalization.HebrewCalendar.ToFourDigitYear(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> supports either a two-digit year or a four-digit year. Passing a two-digit year value (less than 100) causes the method to convert the value to a four-digit value according to the <xref href=\"System.Globalization.HebrewCalendar.TwoDigitYearMax\" data-throw-if-not-resolved=\"false\"></xref> value representing the appropriate century. If the application supplies a four-digit year value that is within the supported calendar range to <xref href=\"System.Globalization.HebrewCalendar.ToFourDigitYear(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, the method returns the actual input value. If the application supplies a four-digit value that is outside the supported calendar range, or if it supplies a negative value, the method throws an exception.</p>\n"
  syntax:
    content: public override int ToFourDigitYear(int year)
    content.vb: Public Overrides Function ToFourDigitYear(year As Integer) As Integer
    parameters:
    - id: year
      type: System.Int32
      description: "\n<p>A 2-digit year from 0 through 99, or a 4-digit Hebrew calendar year from 5343 through 5999.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>If the <em>year</em> parameter is a 2-digit year, the return value is the corresponding 4-digit year. If the <em>year</em> parameter is a 4-digit year, the return value is the unchanged <em>year</em> parameter.</p>\n"
  overridden: System.Globalization.Calendar.ToFourDigitYear(System.Int32)
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>year</em> is less than 0.</p>\n<p>-or-</p>\n<p>\n<em>year</em> is less than <xref href=\"System.Globalization.HebrewCalendar.MinSupportedDateTime\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Globalization.HebrewCalendar.MaxSupportedDateTime\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Globalization.HebrewCalendar.TwoDigitYearMax
    commentId: P:System.Globalization.HebrewCalendar.TwoDigitYearMax
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Globalization
  isExternal: false
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
  commentId: N:System.Globalization
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
  commentId: T:System.Object
- uid: System.Globalization.Calendar
  parent: System.Globalization
  isExternal: false
  name: Calendar
  nameWithType: Calendar
  fullName: System.Globalization.Calendar
  commentId: T:System.Globalization.Calendar
- uid: System.ICloneable
  parent: System
  isExternal: true
  name: ICloneable
  nameWithType: ICloneable
  fullName: System.ICloneable
  commentId: T:System.ICloneable
- uid: System.Globalization.Calendar.CurrentEra
  parent: System.Globalization.Calendar
  isExternal: true
  name: CurrentEra
  nameWithType: Calendar.CurrentEra
  fullName: System.Globalization.Calendar.CurrentEra
  commentId: F:System.Globalization.Calendar.CurrentEra
- uid: System.Globalization.Calendar.Clone
  parent: System.Globalization.Calendar
  isExternal: true
  name: Clone()
  nameWithType: Calendar.Clone()
  fullName: System.Globalization.Calendar.Clone()
  spec.csharp:
  - uid: System.Globalization.Calendar.Clone
    name: Clone
    nameWithType: Calendar.Clone
    fullName: System.Globalization.Calendar.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.Clone
    name: Clone
    nameWithType: Calendar.Clone
    fullName: System.Globalization.Calendar.Clone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.Clone
- uid: System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)
  parent: System.Globalization.Calendar
  isExternal: true
  name: ReadOnly(Calendar)
  nameWithType: Calendar.ReadOnly(Calendar)
  fullName: System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)
  spec.csharp:
  - uid: System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)
    name: ReadOnly
    nameWithType: Calendar.ReadOnly
    fullName: System.Globalization.Calendar.ReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Globalization.Calendar
    name: Calendar
    nameWithType: Calendar
    fullName: System.Globalization.Calendar
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)
    name: ReadOnly
    nameWithType: Calendar.ReadOnly
    fullName: System.Globalization.Calendar.ReadOnly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Globalization.Calendar
    name: Calendar
    nameWithType: Calendar
    fullName: System.Globalization.Calendar
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)
- uid: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)
  parent: System.Globalization.Calendar
  isExternal: true
  name: AddMilliseconds(DateTime, Double)
  nameWithType: Calendar.AddMilliseconds(DateTime, Double)
  fullName: System.Globalization.Calendar.AddMilliseconds(System.DateTime, System.Double)
  spec.csharp:
  - uid: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)
    name: AddMilliseconds
    nameWithType: Calendar.AddMilliseconds
    fullName: System.Globalization.Calendar.AddMilliseconds
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)
    name: AddMilliseconds
    nameWithType: Calendar.AddMilliseconds
    fullName: System.Globalization.Calendar.AddMilliseconds
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)
- uid: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)
  parent: System.Globalization.Calendar
  isExternal: true
  name: AddDays(DateTime, Int32)
  nameWithType: Calendar.AddDays(DateTime, Int32)
  fullName: System.Globalization.Calendar.AddDays(System.DateTime, System.Int32)
  spec.csharp:
  - uid: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)
    name: AddDays
    nameWithType: Calendar.AddDays
    fullName: System.Globalization.Calendar.AddDays
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)
    name: AddDays
    nameWithType: Calendar.AddDays
    fullName: System.Globalization.Calendar.AddDays
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)
- uid: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)
  parent: System.Globalization.Calendar
  isExternal: true
  name: AddHours(DateTime, Int32)
  nameWithType: Calendar.AddHours(DateTime, Int32)
  fullName: System.Globalization.Calendar.AddHours(System.DateTime, System.Int32)
  spec.csharp:
  - uid: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)
    name: AddHours
    nameWithType: Calendar.AddHours
    fullName: System.Globalization.Calendar.AddHours
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)
    name: AddHours
    nameWithType: Calendar.AddHours
    fullName: System.Globalization.Calendar.AddHours
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)
- uid: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)
  parent: System.Globalization.Calendar
  isExternal: true
  name: AddMinutes(DateTime, Int32)
  nameWithType: Calendar.AddMinutes(DateTime, Int32)
  fullName: System.Globalization.Calendar.AddMinutes(System.DateTime, System.Int32)
  spec.csharp:
  - uid: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)
    name: AddMinutes
    nameWithType: Calendar.AddMinutes
    fullName: System.Globalization.Calendar.AddMinutes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)
    name: AddMinutes
    nameWithType: Calendar.AddMinutes
    fullName: System.Globalization.Calendar.AddMinutes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)
- uid: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)
  parent: System.Globalization.Calendar
  isExternal: true
  name: AddSeconds(DateTime, Int32)
  nameWithType: Calendar.AddSeconds(DateTime, Int32)
  fullName: System.Globalization.Calendar.AddSeconds(System.DateTime, System.Int32)
  spec.csharp:
  - uid: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)
    name: AddSeconds
    nameWithType: Calendar.AddSeconds
    fullName: System.Globalization.Calendar.AddSeconds
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)
    name: AddSeconds
    nameWithType: Calendar.AddSeconds
    fullName: System.Globalization.Calendar.AddSeconds
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)
- uid: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)
  parent: System.Globalization.Calendar
  isExternal: true
  name: AddWeeks(DateTime, Int32)
  nameWithType: Calendar.AddWeeks(DateTime, Int32)
  fullName: System.Globalization.Calendar.AddWeeks(System.DateTime, System.Int32)
  spec.csharp:
  - uid: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)
    name: AddWeeks
    nameWithType: Calendar.AddWeeks
    fullName: System.Globalization.Calendar.AddWeeks
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)
    name: AddWeeks
    nameWithType: Calendar.AddWeeks
    fullName: System.Globalization.Calendar.AddWeeks
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)
- uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)
  parent: System.Globalization.Calendar
  isExternal: true
  name: GetDaysInMonth(Int32, Int32)
  nameWithType: Calendar.GetDaysInMonth(Int32, Int32)
  fullName: System.Globalization.Calendar.GetDaysInMonth(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)
    name: GetDaysInMonth
    nameWithType: Calendar.GetDaysInMonth
    fullName: System.Globalization.Calendar.GetDaysInMonth
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)
    name: GetDaysInMonth
    nameWithType: Calendar.GetDaysInMonth
    fullName: System.Globalization.Calendar.GetDaysInMonth
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)
- uid: System.Globalization.Calendar.GetDaysInYear(System.Int32)
  parent: System.Globalization.Calendar
  isExternal: true
  name: GetDaysInYear(Int32)
  nameWithType: Calendar.GetDaysInYear(Int32)
  fullName: System.Globalization.Calendar.GetDaysInYear(System.Int32)
  spec.csharp:
  - uid: System.Globalization.Calendar.GetDaysInYear(System.Int32)
    name: GetDaysInYear
    nameWithType: Calendar.GetDaysInYear
    fullName: System.Globalization.Calendar.GetDaysInYear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.GetDaysInYear(System.Int32)
    name: GetDaysInYear
    nameWithType: Calendar.GetDaysInYear
    fullName: System.Globalization.Calendar.GetDaysInYear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.GetDaysInYear(System.Int32)
- uid: System.Globalization.Calendar.GetHour(System.DateTime)
  parent: System.Globalization.Calendar
  isExternal: true
  name: GetHour(DateTime)
  nameWithType: Calendar.GetHour(DateTime)
  fullName: System.Globalization.Calendar.GetHour(System.DateTime)
  spec.csharp:
  - uid: System.Globalization.Calendar.GetHour(System.DateTime)
    name: GetHour
    nameWithType: Calendar.GetHour
    fullName: System.Globalization.Calendar.GetHour
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.GetHour(System.DateTime)
    name: GetHour
    nameWithType: Calendar.GetHour
    fullName: System.Globalization.Calendar.GetHour
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)
- uid: System.Globalization.Calendar.GetMilliseconds(System.DateTime)
  parent: System.Globalization.Calendar
  isExternal: true
  name: GetMilliseconds(DateTime)
  nameWithType: Calendar.GetMilliseconds(DateTime)
  fullName: System.Globalization.Calendar.GetMilliseconds(System.DateTime)
  spec.csharp:
  - uid: System.Globalization.Calendar.GetMilliseconds(System.DateTime)
    name: GetMilliseconds
    nameWithType: Calendar.GetMilliseconds
    fullName: System.Globalization.Calendar.GetMilliseconds
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.GetMilliseconds(System.DateTime)
    name: GetMilliseconds
    nameWithType: Calendar.GetMilliseconds
    fullName: System.Globalization.Calendar.GetMilliseconds
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)
- uid: System.Globalization.Calendar.GetMinute(System.DateTime)
  parent: System.Globalization.Calendar
  isExternal: true
  name: GetMinute(DateTime)
  nameWithType: Calendar.GetMinute(DateTime)
  fullName: System.Globalization.Calendar.GetMinute(System.DateTime)
  spec.csharp:
  - uid: System.Globalization.Calendar.GetMinute(System.DateTime)
    name: GetMinute
    nameWithType: Calendar.GetMinute
    fullName: System.Globalization.Calendar.GetMinute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.GetMinute(System.DateTime)
    name: GetMinute
    nameWithType: Calendar.GetMinute
    fullName: System.Globalization.Calendar.GetMinute
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)
- uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32)
  parent: System.Globalization.Calendar
  isExternal: true
  name: GetMonthsInYear(Int32)
  nameWithType: Calendar.GetMonthsInYear(Int32)
  fullName: System.Globalization.Calendar.GetMonthsInYear(System.Int32)
  spec.csharp:
  - uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32)
    name: GetMonthsInYear
    nameWithType: Calendar.GetMonthsInYear
    fullName: System.Globalization.Calendar.GetMonthsInYear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32)
    name: GetMonthsInYear
    nameWithType: Calendar.GetMonthsInYear
    fullName: System.Globalization.Calendar.GetMonthsInYear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.GetMonthsInYear(System.Int32)
- uid: System.Globalization.Calendar.GetSecond(System.DateTime)
  parent: System.Globalization.Calendar
  isExternal: true
  name: GetSecond(DateTime)
  nameWithType: Calendar.GetSecond(DateTime)
  fullName: System.Globalization.Calendar.GetSecond(System.DateTime)
  spec.csharp:
  - uid: System.Globalization.Calendar.GetSecond(System.DateTime)
    name: GetSecond
    nameWithType: Calendar.GetSecond
    fullName: System.Globalization.Calendar.GetSecond
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.GetSecond(System.DateTime)
    name: GetSecond
    nameWithType: Calendar.GetSecond
    fullName: System.Globalization.Calendar.GetSecond
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)
- uid: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
  parent: System.Globalization.Calendar
  isExternal: true
  name: GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)
  nameWithType: Calendar.GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)
  fullName: System.Globalization.Calendar.GetWeekOfYear(System.DateTime, System.Globalization.CalendarWeekRule, System.DayOfWeek)
  spec.csharp:
  - uid: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
    name: GetWeekOfYear
    nameWithType: Calendar.GetWeekOfYear
    fullName: System.Globalization.Calendar.GetWeekOfYear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CalendarWeekRule
    name: CalendarWeekRule
    nameWithType: CalendarWeekRule
    fullName: System.Globalization.CalendarWeekRule
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.DayOfWeek
    name: DayOfWeek
    nameWithType: DayOfWeek
    fullName: System.DayOfWeek
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
    name: GetWeekOfYear
    nameWithType: Calendar.GetWeekOfYear
    fullName: System.Globalization.Calendar.GetWeekOfYear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CalendarWeekRule
    name: CalendarWeekRule
    nameWithType: CalendarWeekRule
    fullName: System.Globalization.CalendarWeekRule
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.DayOfWeek
    name: DayOfWeek
    nameWithType: DayOfWeek
    fullName: System.DayOfWeek
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)
- uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.Calendar
  isExternal: true
  name: IsLeapDay(Int32, Int32, Int32)
  nameWithType: Calendar.IsLeapDay(Int32, Int32, Int32)
  fullName: System.Globalization.Calendar.IsLeapDay(System.Int32, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)
    name: IsLeapDay
    nameWithType: Calendar.IsLeapDay
    fullName: System.Globalization.Calendar.IsLeapDay
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)
    name: IsLeapDay
    nameWithType: Calendar.IsLeapDay
    fullName: System.Globalization.Calendar.IsLeapDay
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)
- uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)
  parent: System.Globalization.Calendar
  isExternal: true
  name: IsLeapMonth(Int32, Int32)
  nameWithType: Calendar.IsLeapMonth(Int32, Int32)
  fullName: System.Globalization.Calendar.IsLeapMonth(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)
    name: IsLeapMonth
    nameWithType: Calendar.IsLeapMonth
    fullName: System.Globalization.Calendar.IsLeapMonth
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)
    name: IsLeapMonth
    nameWithType: Calendar.IsLeapMonth
    fullName: System.Globalization.Calendar.IsLeapMonth
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)
- uid: System.Globalization.Calendar.GetLeapMonth(System.Int32)
  parent: System.Globalization.Calendar
  isExternal: true
  name: GetLeapMonth(Int32)
  nameWithType: Calendar.GetLeapMonth(Int32)
  fullName: System.Globalization.Calendar.GetLeapMonth(System.Int32)
  spec.csharp:
  - uid: System.Globalization.Calendar.GetLeapMonth(System.Int32)
    name: GetLeapMonth
    nameWithType: Calendar.GetLeapMonth
    fullName: System.Globalization.Calendar.GetLeapMonth
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.GetLeapMonth(System.Int32)
    name: GetLeapMonth
    nameWithType: Calendar.GetLeapMonth
    fullName: System.Globalization.Calendar.GetLeapMonth
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.GetLeapMonth(System.Int32)
- uid: System.Globalization.Calendar.IsLeapYear(System.Int32)
  parent: System.Globalization.Calendar
  isExternal: true
  name: IsLeapYear(Int32)
  nameWithType: Calendar.IsLeapYear(Int32)
  fullName: System.Globalization.Calendar.IsLeapYear(System.Int32)
  spec.csharp:
  - uid: System.Globalization.Calendar.IsLeapYear(System.Int32)
    name: IsLeapYear
    nameWithType: Calendar.IsLeapYear
    fullName: System.Globalization.Calendar.IsLeapYear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.IsLeapYear(System.Int32)
    name: IsLeapYear
    nameWithType: Calendar.IsLeapYear
    fullName: System.Globalization.Calendar.IsLeapYear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.IsLeapYear(System.Int32)
- uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.Calendar
  isExternal: true
  name: ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)
  nameWithType: Calendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)
  fullName: System.Globalization.Calendar.ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
    name: ToDateTime
    nameWithType: Calendar.ToDateTime
    fullName: System.Globalization.Calendar.ToDateTime
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
    name: ToDateTime
    nameWithType: Calendar.ToDateTime
    fullName: System.Globalization.Calendar.ToDateTime
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
- uid: System.Globalization.Calendar.AlgorithmType
  parent: System.Globalization.Calendar
  isExternal: true
  name: AlgorithmType
  nameWithType: Calendar.AlgorithmType
  fullName: System.Globalization.Calendar.AlgorithmType
  commentId: P:System.Globalization.Calendar.AlgorithmType
- uid: System.Globalization.Calendar.IsReadOnly
  parent: System.Globalization.Calendar
  isExternal: true
  name: IsReadOnly
  nameWithType: Calendar.IsReadOnly
  fullName: System.Globalization.Calendar.IsReadOnly
  commentId: P:System.Globalization.Calendar.IsReadOnly
- uid: System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear
  parent: System.Globalization.Calendar
  isExternal: true
  name: DaysInYearBeforeMinSupportedYear
  nameWithType: Calendar.DaysInYearBeforeMinSupportedYear
  fullName: System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear
  commentId: P:System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
  commentId: N:System
- uid: System.Globalization.Calendar.Eras
  parent: System.Globalization.Calendar
  isExternal: true
  name: Eras
  nameWithType: Calendar.Eras
  fullName: System.Globalization.Calendar.Eras
  commentId: P:System.Globalization.Calendar.Eras
- uid: System.Int32[]
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullname.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Globalization.Calendar.MaxSupportedDateTime
  parent: System.Globalization.Calendar
  isExternal: true
  name: MaxSupportedDateTime
  nameWithType: Calendar.MaxSupportedDateTime
  fullName: System.Globalization.Calendar.MaxSupportedDateTime
  commentId: P:System.Globalization.Calendar.MaxSupportedDateTime
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
  commentId: T:System.DateTime
- uid: System.Globalization.Calendar.MinSupportedDateTime
  parent: System.Globalization.Calendar
  isExternal: true
  name: MinSupportedDateTime
  nameWithType: Calendar.MinSupportedDateTime
  fullName: System.Globalization.Calendar.MinSupportedDateTime
  commentId: P:System.Globalization.Calendar.MinSupportedDateTime
- uid: System.Globalization.Calendar.TwoDigitYearMax
  parent: System.Globalization.Calendar
  isExternal: true
  name: TwoDigitYearMax
  nameWithType: Calendar.TwoDigitYearMax
  fullName: System.Globalization.Calendar.TwoDigitYearMax
  commentId: P:System.Globalization.Calendar.TwoDigitYearMax
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
  commentId: T:System.Int32
- uid: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)
  parent: System.Globalization.Calendar
  isExternal: true
  name: AddMonths(DateTime, Int32)
  nameWithType: Calendar.AddMonths(DateTime, Int32)
  fullName: System.Globalization.Calendar.AddMonths(System.DateTime, System.Int32)
  spec.csharp:
  - uid: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)
    name: AddMonths
    nameWithType: Calendar.AddMonths
    fullName: System.Globalization.Calendar.AddMonths
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)
    name: AddMonths
    nameWithType: Calendar.AddMonths
    fullName: System.Globalization.Calendar.AddMonths
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)
- uid: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)
  parent: System.Globalization.Calendar
  isExternal: true
  name: AddYears(DateTime, Int32)
  nameWithType: Calendar.AddYears(DateTime, Int32)
  fullName: System.Globalization.Calendar.AddYears(System.DateTime, System.Int32)
  spec.csharp:
  - uid: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)
    name: AddYears
    nameWithType: Calendar.AddYears
    fullName: System.Globalization.Calendar.AddYears
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)
    name: AddYears
    nameWithType: Calendar.AddYears
    fullName: System.Globalization.Calendar.AddYears
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)
- uid: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)
  parent: System.Globalization.Calendar
  isExternal: true
  name: GetDayOfMonth(DateTime)
  nameWithType: Calendar.GetDayOfMonth(DateTime)
  fullName: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)
  spec.csharp:
  - uid: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)
    name: GetDayOfMonth
    nameWithType: Calendar.GetDayOfMonth
    fullName: System.Globalization.Calendar.GetDayOfMonth
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)
    name: GetDayOfMonth
    nameWithType: Calendar.GetDayOfMonth
    fullName: System.Globalization.Calendar.GetDayOfMonth
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)
- uid: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)
  parent: System.Globalization.Calendar
  isExternal: true
  name: GetDayOfWeek(DateTime)
  nameWithType: Calendar.GetDayOfWeek(DateTime)
  fullName: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)
  spec.csharp:
  - uid: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)
    name: GetDayOfWeek
    nameWithType: Calendar.GetDayOfWeek
    fullName: System.Globalization.Calendar.GetDayOfWeek
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)
    name: GetDayOfWeek
    nameWithType: Calendar.GetDayOfWeek
    fullName: System.Globalization.Calendar.GetDayOfWeek
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.GetDayOfWeek(System.DateTime)
- uid: System.DayOfWeek
  parent: System
  isExternal: false
  name: DayOfWeek
  nameWithType: DayOfWeek
  fullName: System.DayOfWeek
  commentId: T:System.DayOfWeek
- uid: System.Globalization.Calendar.GetDayOfYear(System.DateTime)
  parent: System.Globalization.Calendar
  isExternal: true
  name: GetDayOfYear(DateTime)
  nameWithType: Calendar.GetDayOfYear(DateTime)
  fullName: System.Globalization.Calendar.GetDayOfYear(System.DateTime)
  spec.csharp:
  - uid: System.Globalization.Calendar.GetDayOfYear(System.DateTime)
    name: GetDayOfYear
    nameWithType: Calendar.GetDayOfYear
    fullName: System.Globalization.Calendar.GetDayOfYear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.GetDayOfYear(System.DateTime)
    name: GetDayOfYear
    nameWithType: Calendar.GetDayOfYear
    fullName: System.Globalization.Calendar.GetDayOfYear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)
- uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.Calendar
  isExternal: true
  name: GetDaysInMonth(Int32, Int32, Int32)
  nameWithType: Calendar.GetDaysInMonth(Int32, Int32, Int32)
  fullName: System.Globalization.Calendar.GetDaysInMonth(System.Int32, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
    name: GetDaysInMonth
    nameWithType: Calendar.GetDaysInMonth
    fullName: System.Globalization.Calendar.GetDaysInMonth
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
    name: GetDaysInMonth
    nameWithType: Calendar.GetDaysInMonth
    fullName: System.Globalization.Calendar.GetDaysInMonth
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
- uid: System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)
  parent: System.Globalization.Calendar
  isExternal: true
  name: GetDaysInYear(Int32, Int32)
  nameWithType: Calendar.GetDaysInYear(Int32, Int32)
  fullName: System.Globalization.Calendar.GetDaysInYear(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)
    name: GetDaysInYear
    nameWithType: Calendar.GetDaysInYear
    fullName: System.Globalization.Calendar.GetDaysInYear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)
    name: GetDaysInYear
    nameWithType: Calendar.GetDaysInYear
    fullName: System.Globalization.Calendar.GetDaysInYear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)
- uid: System.Globalization.Calendar.GetEra(System.DateTime)
  parent: System.Globalization.Calendar
  isExternal: true
  name: GetEra(DateTime)
  nameWithType: Calendar.GetEra(DateTime)
  fullName: System.Globalization.Calendar.GetEra(System.DateTime)
  spec.csharp:
  - uid: System.Globalization.Calendar.GetEra(System.DateTime)
    name: GetEra
    nameWithType: Calendar.GetEra
    fullName: System.Globalization.Calendar.GetEra
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.GetEra(System.DateTime)
    name: GetEra
    nameWithType: Calendar.GetEra
    fullName: System.Globalization.Calendar.GetEra
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.GetEra(System.DateTime)
- uid: System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)
  parent: System.Globalization.Calendar
  isExternal: true
  name: GetLeapMonth(Int32, Int32)
  nameWithType: Calendar.GetLeapMonth(Int32, Int32)
  fullName: System.Globalization.Calendar.GetLeapMonth(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)
    name: GetLeapMonth
    nameWithType: Calendar.GetLeapMonth
    fullName: System.Globalization.Calendar.GetLeapMonth
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)
    name: GetLeapMonth
    nameWithType: Calendar.GetLeapMonth
    fullName: System.Globalization.Calendar.GetLeapMonth
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)
- uid: System.Globalization.Calendar.GetMonth(System.DateTime)
  parent: System.Globalization.Calendar
  isExternal: true
  name: GetMonth(DateTime)
  nameWithType: Calendar.GetMonth(DateTime)
  fullName: System.Globalization.Calendar.GetMonth(System.DateTime)
  spec.csharp:
  - uid: System.Globalization.Calendar.GetMonth(System.DateTime)
    name: GetMonth
    nameWithType: Calendar.GetMonth
    fullName: System.Globalization.Calendar.GetMonth
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.GetMonth(System.DateTime)
    name: GetMonth
    nameWithType: Calendar.GetMonth
    fullName: System.Globalization.Calendar.GetMonth
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.GetMonth(System.DateTime)
- uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)
  parent: System.Globalization.Calendar
  isExternal: true
  name: GetMonthsInYear(Int32, Int32)
  nameWithType: Calendar.GetMonthsInYear(Int32, Int32)
  fullName: System.Globalization.Calendar.GetMonthsInYear(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)
    name: GetMonthsInYear
    nameWithType: Calendar.GetMonthsInYear
    fullName: System.Globalization.Calendar.GetMonthsInYear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)
    name: GetMonthsInYear
    nameWithType: Calendar.GetMonthsInYear
    fullName: System.Globalization.Calendar.GetMonthsInYear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)
- uid: System.Globalization.Calendar.GetYear(System.DateTime)
  parent: System.Globalization.Calendar
  isExternal: true
  name: GetYear(DateTime)
  nameWithType: Calendar.GetYear(DateTime)
  fullName: System.Globalization.Calendar.GetYear(System.DateTime)
  spec.csharp:
  - uid: System.Globalization.Calendar.GetYear(System.DateTime)
    name: GetYear
    nameWithType: Calendar.GetYear
    fullName: System.Globalization.Calendar.GetYear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.GetYear(System.DateTime)
    name: GetYear
    nameWithType: Calendar.GetYear
    fullName: System.Globalization.Calendar.GetYear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.GetYear(System.DateTime)
- uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.Calendar
  isExternal: true
  name: IsLeapDay(Int32, Int32, Int32, Int32)
  nameWithType: Calendar.IsLeapDay(Int32, Int32, Int32, Int32)
  fullName: System.Globalization.Calendar.IsLeapDay(System.Int32, System.Int32, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
    name: IsLeapDay
    nameWithType: Calendar.IsLeapDay
    fullName: System.Globalization.Calendar.IsLeapDay
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
    name: IsLeapDay
    nameWithType: Calendar.IsLeapDay
    fullName: System.Globalization.Calendar.IsLeapDay
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
  commentId: T:System.Boolean
- uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.Calendar
  isExternal: true
  name: IsLeapMonth(Int32, Int32, Int32)
  nameWithType: Calendar.IsLeapMonth(Int32, Int32, Int32)
  fullName: System.Globalization.Calendar.IsLeapMonth(System.Int32, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
    name: IsLeapMonth
    nameWithType: Calendar.IsLeapMonth
    fullName: System.Globalization.Calendar.IsLeapMonth
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
    name: IsLeapMonth
    nameWithType: Calendar.IsLeapMonth
    fullName: System.Globalization.Calendar.IsLeapMonth
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
- uid: System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)
  parent: System.Globalization.Calendar
  isExternal: true
  name: IsLeapYear(Int32, Int32)
  nameWithType: Calendar.IsLeapYear(Int32, Int32)
  fullName: System.Globalization.Calendar.IsLeapYear(System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)
    name: IsLeapYear
    nameWithType: Calendar.IsLeapYear
    fullName: System.Globalization.Calendar.IsLeapYear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)
    name: IsLeapYear
    nameWithType: Calendar.IsLeapYear
    fullName: System.Globalization.Calendar.IsLeapYear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)
- uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.Calendar
  isExternal: true
  name: ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)
  nameWithType: Calendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)
  fullName: System.Globalization.Calendar.ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
  spec.csharp:
  - uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
    name: ToDateTime
    nameWithType: Calendar.ToDateTime
    fullName: System.Globalization.Calendar.ToDateTime
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
    name: ToDateTime
    nameWithType: Calendar.ToDateTime
    fullName: System.Globalization.Calendar.ToDateTime
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
- uid: System.Globalization.Calendar.ToFourDigitYear(System.Int32)
  parent: System.Globalization.Calendar
  isExternal: true
  name: ToFourDigitYear(Int32)
  nameWithType: Calendar.ToFourDigitYear(Int32)
  fullName: System.Globalization.Calendar.ToFourDigitYear(System.Int32)
  spec.csharp:
  - uid: System.Globalization.Calendar.ToFourDigitYear(System.Int32)
    name: ToFourDigitYear
    nameWithType: Calendar.ToFourDigitYear
    fullName: System.Globalization.Calendar.ToFourDigitYear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Globalization.Calendar.ToFourDigitYear(System.Int32)
    name: ToFourDigitYear
    nameWithType: Calendar.ToFourDigitYear
    fullName: System.Globalization.Calendar.ToFourDigitYear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Globalization.Calendar.ToFourDigitYear(System.Int32)
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
  commentId: T:System.ArgumentException
