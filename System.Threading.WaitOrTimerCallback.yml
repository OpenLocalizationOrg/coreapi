items:
- uid: System.Threading.WaitOrTimerCallback
  commentId: T:System.Threading.WaitOrTimerCallback
  id: WaitOrTimerCallback
  parent: System.Threading
  children: []
  langs:
  - csharp
  - vb
  name: WaitOrTimerCallback
  nameWithType: WaitOrTimerCallback
  fullName: System.Threading.WaitOrTimerCallback
  type: Delegate
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ThreadPool.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitOrTimerCallback
    path: src/mscorlib/src/System/Threading/ThreadPool.cs
    startLine: 1133
  assemblies:
  - System.Threading.ThreadPool
  namespace: System.Threading
  summary: "\n<p>Represents a method to be called when a <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> is signaled or times out.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Threading.WaitOrTimerCallback\" data-throw-if-not-resolved=\"false\"></xref> represents a callback method that you want to execute when a registered wait handle times out or is signaled. Create the delegate by passing your callback method to the <xref href=\"System.Threading.WaitOrTimerCallback\" data-throw-if-not-resolved=\"false\"></xref> constructor. Your method must have the signature shown here.</p>\n<p>Create the registered wait handle by passing the <xref href=\"System.Threading.WaitOrTimerCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate and a <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>. Your callback method executes each time the <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> times out or is signaled.</p>\n<p>[Visual Basic]</p>\n<p>Visual Basic users can omit the <xref href=\"System.Threading.WaitOrTimerCallback\" data-throw-if-not-resolved=\"false\"></xref> constructor, and simply use the <strong>AddressOf</strong> operator when passing the callback method to <xref href=\"System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>. Visual Basic automatically calls the correct delegate constructor.</p>\n<p>If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <xref href=\"System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> when you create the registered wait handle. Each time your callback method executes, the <em>state</em> parameter contains this object.</p>\n<p>For more information about using callback methods to synchronize thread pool threads, see The Managed Thread Pool.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public delegate void WaitOrTimerCallback(object state, bool timedOut);
    content.vb: >-
      <ComVisible(True)>

      Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)
    parameters:
    - id: state
      type: System.Object
      description: "\n<p>An object containing information to be used by the callback method each time it executes. </p>\n"
    - id: timedOut
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> timed out; <strong>false</strong> if it was signaled. </p>\n"
  extensionMethods:
  - System.Delegate.System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  commentId: N:System.Threading
- uid: System.Delegate.System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  parent: System.Reflection.RuntimeReflectionExtensions
  definition: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  name: GetMethodInfo()
  nameWithType: RuntimeReflectionExtensions.GetMethodInfo()
  fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo()
  spec.csharp:
  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
    name: GetMethodInfo
    nameWithType: RuntimeReflectionExtensions.GetMethodInfo
    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
    name: GetMethodInfo
    nameWithType: RuntimeReflectionExtensions.GetMethodInfo
    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
  commentId: T:System.Object
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
  commentId: T:System.Boolean
- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  isExternal: true
  name: GetMethodInfo(Delegate)
  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  spec.csharp:
  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
    name: GetMethodInfo
    nameWithType: RuntimeReflectionExtensions.GetMethodInfo
    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Delegate
    name: Delegate
    nameWithType: Delegate
    fullName: System.Delegate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
    name: GetMethodInfo
    nameWithType: RuntimeReflectionExtensions.GetMethodInfo
    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Delegate
    name: Delegate
    nameWithType: Delegate
    fullName: System.Delegate
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
- uid: System.Reflection.RuntimeReflectionExtensions
  parent: System.Reflection
  isExternal: false
  name: RuntimeReflectionExtensions
  nameWithType: RuntimeReflectionExtensions
  fullName: System.Reflection.RuntimeReflectionExtensions
  commentId: T:System.Reflection.RuntimeReflectionExtensions
- uid: System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
  commentId: N:System
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
  commentId: N:System.Reflection
