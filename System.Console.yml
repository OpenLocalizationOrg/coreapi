items:
- uid: System.Console
  commentId: T:System.Console
  id: Console
  parent: System
  children:
  - System.Console.BackgroundColor
  - System.Console.Beep
  - System.Console.Beep(System.Int32,System.Int32)
  - System.Console.BufferHeight
  - System.Console.BufferWidth
  - System.Console.CancelKeyPress
  - System.Console.CapsLock
  - System.Console.Clear
  - System.Console.CursorLeft
  - System.Console.CursorSize
  - System.Console.CursorTop
  - System.Console.CursorVisible
  - System.Console.Error
  - System.Console.ForegroundColor
  - System.Console.In
  - System.Console.InputEncoding
  - System.Console.IsErrorRedirected
  - System.Console.IsInputRedirected
  - System.Console.IsOutputRedirected
  - System.Console.KeyAvailable
  - System.Console.LargestWindowHeight
  - System.Console.LargestWindowWidth
  - System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)
  - System.Console.NumberLock
  - System.Console.OpenStandardError
  - System.Console.OpenStandardInput
  - System.Console.OpenStandardOutput
  - System.Console.Out
  - System.Console.OutputEncoding
  - System.Console.Read
  - System.Console.ReadKey
  - System.Console.ReadKey(System.Boolean)
  - System.Console.ReadLine
  - System.Console.ResetColor
  - System.Console.SetBufferSize(System.Int32,System.Int32)
  - System.Console.SetCursorPosition(System.Int32,System.Int32)
  - System.Console.SetError(System.IO.TextWriter)
  - System.Console.SetIn(System.IO.TextReader)
  - System.Console.SetOut(System.IO.TextWriter)
  - System.Console.SetWindowPosition(System.Int32,System.Int32)
  - System.Console.SetWindowSize(System.Int32,System.Int32)
  - System.Console.Title
  - System.Console.TreatControlCAsInput
  - System.Console.WindowHeight
  - System.Console.WindowLeft
  - System.Console.WindowTop
  - System.Console.WindowWidth
  - System.Console.Write(System.Boolean)
  - System.Console.Write(System.Char)
  - System.Console.Write(System.Char[])
  - System.Console.Write(System.Char[],System.Int32,System.Int32)
  - System.Console.Write(System.Decimal)
  - System.Console.Write(System.Double)
  - System.Console.Write(System.Int32)
  - System.Console.Write(System.Int64)
  - System.Console.Write(System.Object)
  - System.Console.Write(System.Single)
  - System.Console.Write(System.String)
  - System.Console.Write(System.String,System.Object)
  - System.Console.Write(System.String,System.Object,System.Object)
  - System.Console.Write(System.String,System.Object,System.Object,System.Object)
  - System.Console.Write(System.String,System.Object[])
  - System.Console.Write(System.UInt32)
  - System.Console.Write(System.UInt64)
  - System.Console.WriteLine
  - System.Console.WriteLine(System.Boolean)
  - System.Console.WriteLine(System.Char)
  - System.Console.WriteLine(System.Char[])
  - System.Console.WriteLine(System.Char[],System.Int32,System.Int32)
  - System.Console.WriteLine(System.Decimal)
  - System.Console.WriteLine(System.Double)
  - System.Console.WriteLine(System.Int32)
  - System.Console.WriteLine(System.Int64)
  - System.Console.WriteLine(System.Object)
  - System.Console.WriteLine(System.Single)
  - System.Console.WriteLine(System.String)
  - System.Console.WriteLine(System.String,System.Object)
  - System.Console.WriteLine(System.String,System.Object,System.Object)
  - System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)
  - System.Console.WriteLine(System.String,System.Object[])
  - System.Console.WriteLine(System.UInt32)
  - System.Console.WriteLine(System.UInt64)
  langs:
  - csharp
  - vb
  name: Console
  nameWithType: Console
  fullName: System.Console
  type: Class
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Console
    path: src/System.Console/src/System/Console.cs
    startLine: 13
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Represents the standard input, output, and error streams for console applications. This class cannot be inherited.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/console.cs#f907d79481da6ba4\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/console.cs#f907d79481da6ba4\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>The console is an operating system window where users interact with the operating system or with a text-based console application by entering text input through the computer keyboard, and by reading text output from the computer terminal. For example, in the Windows operating system, the console is called the Command Prompt window and accepts MS-DOS commands. The <xref href=\"System.Console\" data-throw-if-not-resolved=\"false\"></xref> class provides basic support for applications that read characters from, and write characters to, the console. </p>\n<p>For information about developing with the <xref href=\"System.Console\" data-throw-if-not-resolved=\"false\"></xref> class, see the following sections:</p>\n<ul><li>\n<p>Console I/O Streams</p>\n</li><li>\n<p>Screen Buffer and Console Window</p>\n</li><li>\n<p>Unicode Support for the Console</p>\n</li><li>\n<p>Common Operations</p>\n</li><li>\n<p>.NET Core Notes</p>\n</li></ul>\n"
  syntax:
    content: public class Console
    content.vb: Public Class Console
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Console.BackgroundColor
  commentId: P:System.Console.BackgroundColor
  id: BackgroundColor
  parent: System.Console
  langs:
  - csharp
  - vb
  name: BackgroundColor
  nameWithType: Console.BackgroundColor
  fullName: System.Console.BackgroundColor
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BackgroundColor
    path: src/System.Console/src/System/Console.cs
    startLine: 195
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets or sets the background color of the console.</p>\n"
  remarks: "\n<p> A change to the <xref href=\"System.Console.BackgroundColor\" data-throw-if-not-resolved=\"false\"></xref> property affects only output that is written to individual character cells after the background color is changed. To change the background color of the console window as a whole, set the <xref href=\"System.Console.BackgroundColor\" data-throw-if-not-resolved=\"false\"></xref> property and call the <xref href=\"System.Console.Clear\" data-throw-if-not-resolved=\"false\"></xref> method. The following example provides an illustration. </p>System.Console.BackgroundColor#1<p>A get operation for a Windows-based application, in which a console does not exist, returns <xref href=\"System.ConsoleColor.Black\" data-throw-if-not-resolved=\"false\"></xref>.</p>"
  syntax:
    content: public static ConsoleColor BackgroundColor { get; set; }
    content.vb: Public Shared Property BackgroundColor As ConsoleColor
    parameters: []
    return:
      type: System.ConsoleColor
      description: "\n<p>A value that specifies the background color of the console; that is, the color that appears behind each character. The default is black.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The color specified in a set operation is not a valid member of <xref href=\"System.ConsoleColor\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have permission to perform this action. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.Beep
  commentId: M:System.Console.Beep
  id: Beep
  parent: System.Console
  langs:
  - csharp
  - vb
  name: Beep()
  nameWithType: Console.Beep()
  fullName: System.Console.Beep()
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Beep
    path: src/System.Console/src/System/Console.cs
    startLine: 332
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Plays the sound of a beep through the console speaker.</p>\n"
  remarks: "\n<p>By default, the beep plays at a frequency of 800 hertz for a duration of 200 milliseconds. </p>\n<p>The <xref href=\"System.Console.Beep\" data-throw-if-not-resolved=\"false\"></xref> method is not supported on the 64-bit editions of Windows Vista and Windows XP. </p>\n<p>\n<xref href=\"System.Console.Beep\" data-throw-if-not-resolved=\"false\"></xref> wraps a call to the Windows <see href=\"https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx\">Beep function</see>. Whether <xref href=\"System.Console.Beep\" data-throw-if-not-resolved=\"false\"></xref> produces a sound on versions of Windows before Windows 7 depends on the presence of a 8254 programmable interval timer chip. Starting with Windows 7, it depends on the default sound device. </p>\n"
  syntax:
    content: public static void Beep()
    content.vb: Public Shared Sub Beep
  exceptions:
  - type: System.Security.HostProtectionException
    commentId: T:System.Security.HostProtectionException
    description: "\n<p>This method was executed on a server, such as SQL Server, that does not permit access to a user interface.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.Beep(System.Int32,System.Int32)
  commentId: M:System.Console.Beep(System.Int32,System.Int32)
  id: Beep(System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: Beep(Int32, Int32)
  nameWithType: Console.Beep(Int32, Int32)
  fullName: System.Console.Beep(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Beep
    path: src/System.Console/src/System/Console.cs
    startLine: 337
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Plays the sound of a beep of a specified frequency and duration through the console speaker.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Console.Beep\" data-throw-if-not-resolved=\"false\"></xref> wraps a call to the Windows <see href=\"https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx\">Beep function</see>. Whether <xref href=\"System.Console.Beep\" data-throw-if-not-resolved=\"false\"></xref> produces a sound on versions of Windows before Windows 7 depends on the presence of a 8254 programmable interval timer chip. Starting with Windows 7, it depends on the default sound device. </p>\n<p>The <xref href=\"System.Console.Beep\" data-throw-if-not-resolved=\"false\"></xref> method is not supported on the 64-bit editions of Windows Vista and Windows XP. </p>\n"
  syntax:
    content: public static void Beep(int frequency, int duration)
    content.vb: Public Shared Sub Beep(frequency As Integer, duration As Integer)
    parameters:
    - id: frequency
      type: System.Int32
      description: "\n<p>The frequency of the beep, ranging from 37 to 32767 hertz.</p>\n"
    - id: duration
      type: System.Int32
      description: "\n<p>The duration of the beep measured in milliseconds.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>frequency</em> is less than 37 or more than 32767 hertz.</p>\n<p>-or-</p>\n<p>\n<em>duration</em> is less than or equal to zero.</p>\n"
  - type: System.Security.HostProtectionException
    commentId: T:System.Security.HostProtectionException
    description: "\n<p>This method was executed on a server, such as SQL Server, that does not permit access to the console.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.BufferHeight
  commentId: P:System.Console.BufferHeight
  id: BufferHeight
  parent: System.Console
  langs:
  - csharp
  - vb
  name: BufferHeight
  nameWithType: Console.BufferHeight
  fullName: System.Console.BufferHeight
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BufferHeight
    path: src/System.Console/src/System/Console.cs
    startLine: 218
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets or sets the height of the buffer area.</p>\n"
  remarks: "\n<p>This property defines the number of rows (or lines) stored in the buffer that is accessed by a console mode window. In contrast, the <xref href=\"System.Console.WindowHeight\" data-throw-if-not-resolved=\"false\"></xref> property defines the number of rows that are actually displayed in the console window at any particular time. If the number of rows actually written to the buffer exceeds the number of rows defined by the <xref href=\"System.Console.WindowHeight\" data-throw-if-not-resolved=\"false\"></xref> property, the window can be scrolled vertically so that it displays a contiguous number of rows that are equal to the <xref href=\"System.Console.WindowHeight\" data-throw-if-not-resolved=\"false\"></xref> property and are located anywhere in the buffer.</p>\n<p>If a set operation decreases the value of the <xref href=\"System.Console.BufferHeight\" data-throw-if-not-resolved=\"false\"></xref> property, the uppermost lines are removed. For example, if the number of lines is reduced from 300 to 250, lines 0 through 49 are removed, and the existing lines 50 through 299 become lines 0 through 249.</p>\n"
  syntax:
    content: public static int BufferHeight { get; set; }
    content.vb: Public Shared Property BufferHeight As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The current height, in rows, of the buffer area.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value in a set operation is less than or equal to zero.</p>\n<p>-or- </p>\n<p>The value in a set operation is greater than or equal to <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>The value in a set operation is less than <xref href=\"System.Console.WindowTop\" data-throw-if-not-resolved=\"false\"></xref> + <xref href=\"System.Console.WindowHeight\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have permission to perform this action. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.BufferWidth
  commentId: P:System.Console.BufferWidth
  id: BufferWidth
  parent: System.Console
  langs:
  - csharp
  - vb
  name: BufferWidth
  nameWithType: Console.BufferWidth
  fullName: System.Console.BufferWidth
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BufferWidth
    path: src/System.Console/src/System/Console.cs
    startLine: 212
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets or sets the width of the buffer area.</p>\n"
  remarks: "\n<p>If a set operation decreases the value of the <xref href=\"System.Console.BufferWidth\" data-throw-if-not-resolved=\"false\"></xref> property, the rightmost columns are removed. For example, if the number of columns is reduced from 80 to 60, columns 60 through 79 of each row are removed.</p>\n"
  syntax:
    content: public static int BufferWidth { get; set; }
    content.vb: Public Shared Property BufferWidth As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The current width, in columns, of the buffer area.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value in a set operation is less than or equal to zero.</p>\n<p>-or- </p>\n<p>The value in a set operation is greater than or equal to <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>The value in a set operation is less than <xref href=\"System.Console.WindowLeft\" data-throw-if-not-resolved=\"false\"></xref> + <xref href=\"System.Console.WindowWidth\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have permission to perform this action. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.CapsLock
  commentId: P:System.Console.CapsLock
  id: CapsLock
  parent: System.Console
  langs:
  - csharp
  - vb
  name: CapsLock
  nameWithType: Console.CapsLock
  fullName: System.Console.CapsLock
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CapsLock
    path: src/System.Console/src/System/Console.cs
    startLine: 193
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets a value indicating whether the CAPS LOCK keyboard toggle is turned on or turned off.</p>\n"
  syntax:
    content: public static bool CapsLock { get; }
    content.vb: Public Shared ReadOnly Property CapsLock As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if CAPS LOCK is turned on; <strong>false</strong> if CAPS LOCK is turned off.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Console.CancelKeyPress
  commentId: E:System.Console.CancelKeyPress
  id: CancelKeyPress
  parent: System.Console
  langs:
  - csharp
  - vb
  name: CancelKeyPress
  nameWithType: Console.CancelKeyPress
  fullName: System.Console.CancelKeyPress
  type: Event
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CancelKeyPress
    path: src/System.Console/src/System/Console.cs
    startLine: 368
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Occurs when the <xref href=\"System.ConsoleModifiers.Control\" data-throw-if-not-resolved=\"false\"></xref> modifier key (Ctrl) and either the <xref href=\"System.ConsoleKey.C\" data-throw-if-not-resolved=\"false\"></xref> console key (C) or the Break key are pressed simultaneously (Ctrl+C or Ctrl+Break).</p>\n"
  remarks: "\n<p>This event is used in conjunction with <xref href=\"System.ConsoleCancelEventHandler\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.ConsoleCancelEventArgs\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Console.CancelKeyPress\" data-throw-if-not-resolved=\"false\"></xref> event enables a console application to intercept the Ctrl+C signal so the event handler can decide whether to continue executing or terminate. For more information about handling events, see Handling and Raising Events.</p>\n<p>When the user presses either Ctrl+C or Ctrl+Break, the <xref href=\"System.Console.CancelKeyPress\" data-throw-if-not-resolved=\"false\"></xref> event is fired and the application's <xref href=\"System.ConsoleCancelEventHandler\" data-throw-if-not-resolved=\"false\"></xref> event handler is executed. The event handler is passed a <xref href=\"System.ConsoleCancelEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object that has two useful properties: </p>\n<ul><li>\n<p>\n<xref href=\"System.ConsoleCancelEventArgs.SpecialKey\" data-throw-if-not-resolved=\"false\"></xref>, which allows you to determine whether the handler was invoked as a result of the user pressing Ctrl+C (the property value is <xref href=\"System.ConsoleSpecialKey.ControlC\" data-throw-if-not-resolved=\"false\"></xref>) or Ctrl+Break (the property value is <xref href=\"System.ConsoleSpecialKey.ControlBreak\" data-throw-if-not-resolved=\"false\"></xref>). </p>\n</li><li>\n<p>\n<xref href=\"System.ConsoleCancelEventArgs.Cancel\" data-throw-if-not-resolved=\"false\"></xref>, which allows you to determine how to your application should respond to the user pressing Ctrl+C or Ctrl+Break. By default, the <xref href=\"System.ConsoleCancelEventArgs.Cancel\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>, which causes program execution to terminate when the event handler exits. Changing its property to <strong>true</strong> specifies that the application should continue to execute. </p>\n</li></ul>\n<p>If your application has simple requirements, you can use the <xref href=\"System.Console.TreatControlCAsInput\" data-throw-if-not-resolved=\"false\"></xref> property instead of this event. By setting this property to <strong>false</strong>, you can ensure that your application always exits if the user presses Ctrl+C. By setting it to <strong>true</strong>, you can ensure that pressing Ctrl+C will not terminate the application. </p>\n<p>The event handler for this event is executed on a thread pool thread.</p>\n"
  syntax:
    content: public static event ConsoleCancelEventHandler CancelKeyPress
    content.vb: Public Shared Event CancelKeyPress As ConsoleCancelEventHandler
    return:
      type: System.ConsoleCancelEventHandler
  seealso:
  - type: System.ConsoleCancelEventArgs
    commentId: T:System.ConsoleCancelEventArgs
  - type: System.ConsoleCancelEventHandler
    commentId: T:System.ConsoleCancelEventHandler
  - type: System.Console.TreatControlCAsInput
    commentId: P:System.Console.TreatControlCAsInput
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.Clear
  commentId: M:System.Console.Clear
  id: Clear
  parent: System.Console
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: Console.Clear()
  fullName: System.Console.Clear()
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Console/src/System/Console.cs
    startLine: 352
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Clears the console buffer and corresponding console window of display information.</p>\n"
  remarks: "\n<p>Using the <xref href=\"System.Console.Clear\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent invoking the MS-DOS <strong>cls</strong> command in the command prompt window. When the <xref href=\"System.Console.Clear\" data-throw-if-not-resolved=\"false\"></xref> method is called, the cursor automatically scrolls to the top-left corner of the window and the contents of the screen buffer are set to blanks using the current foreground background colors.</p>\n<p>Attempting to call the <xref href=\"System.Console.Clear\" data-throw-if-not-resolved=\"false\"></xref> method when a console application's output is redirected to a file throws a <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref>. To prevent this, always wrap a call to the <xref href=\"System.Console.Clear\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>…<strong>catch</strong> block.</p>\n"
  syntax:
    content: public static void Clear()
    content.vb: Public Shared Sub Clear
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.CursorLeft
  commentId: P:System.Console.CursorLeft
  id: CursorLeft
  parent: System.Console
  langs:
  - csharp
  - vb
  name: CursorLeft
  nameWithType: Console.CursorLeft
  fullName: System.Console.CursorLeft
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CursorLeft
    path: src/System.Console/src/System/Console.cs
    startLine: 299
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets or sets the column position of the cursor within the buffer area.</p>\n"
  syntax:
    content: public static int CursorLeft { get; set; }
    content.vb: Public Shared Property CursorLeft As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The current position, in columns, of the cursor.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value in a set operation is less than zero.</p>\n<p>-or- </p>\n<p>The value in a set operation is greater than or equal to <xref href=\"System.Console.BufferWidth\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have permission to perform this action. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.CursorSize
  commentId: P:System.Console.CursorSize
  id: CursorSize
  parent: System.Console
  langs:
  - csharp
  - vb
  name: CursorSize
  nameWithType: Console.CursorSize
  fullName: System.Console.CursorSize
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CursorSize
    path: src/System.Console/src/System/Console.cs
    startLine: 185
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets or sets the height of the cursor within a character cell.</p>\n"
  remarks: "\n<p>The cursor appearance varies, ranging from a horizontal line at the bottom of the cell when the property value is 1, to completely filling the cell when the property value is 100.</p>\n"
  syntax:
    content: public static int CursorSize { get; set; }
    content.vb: Public Shared Property CursorSize As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The size of the cursor expressed as a percentage of the height of a character cell. The property value ranges from 1 to 100.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value specified in a set operation is less than 1 or greater than 100. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have permission to perform this action. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred.</p>\n"
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.CursorTop
  commentId: P:System.Console.CursorTop
  id: CursorTop
  parent: System.Console
  langs:
  - csharp
  - vb
  name: CursorTop
  nameWithType: Console.CursorTop
  fullName: System.Console.CursorTop
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CursorTop
    path: src/System.Console/src/System/Console.cs
    startLine: 305
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets or sets the row position of the cursor within the buffer area.</p>\n"
  syntax:
    content: public static int CursorTop { get; set; }
    content.vb: Public Shared Property CursorTop As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The current position, in rows, of the cursor.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value in a set operation is less than zero.</p>\n<p>-or- </p>\n<p>The value in a set operation is greater than or equal to <xref href=\"System.Console.BufferHeight\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have permission to perform this action. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred.</p>\n"
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.CursorVisible
  commentId: P:System.Console.CursorVisible
  id: CursorVisible
  parent: System.Console
  langs:
  - csharp
  - vb
  name: CursorVisible
  nameWithType: Console.CursorVisible
  fullName: System.Console.CursorVisible
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CursorVisible
    path: src/System.Console/src/System/Console.cs
    startLine: 293
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets or sets a value indicating whether the cursor is visible.</p>\n"
  syntax:
    content: public static bool CursorVisible { get; set; }
    content.vb: Public Shared Property CursorVisible As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the cursor is visible; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have permission to perform this action. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred.</p>\n"
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.Error
  commentId: P:System.Console.Error
  id: Error
  parent: System.Console
  langs:
  - csharp
  - vb
  name: Error
  nameWithType: Console.Error
  fullName: System.Console.Error
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Error
    path: src/System.Console/src/System/Console.cs
    startLine: 135
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets the standard error output stream.</p>\n"
  remarks: "\n<p>This standard error stream is set to the console by default. It can be set to another stream with the <xref href=\"System.Console.SetError(System.IO.TextWriter)\" data-throw-if-not-resolved=\"false\"></xref> method. After the standard error stream is redirected, it can be reacquired by calling the <xref href=\"System.Console.OpenStandardError\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>In console applications whose informational output is often redirected to a file, the standard error stream available through the <xref href=\"System.Console.Error\" data-throw-if-not-resolved=\"false\"></xref> property can be used to display information to the console even if output is redirected. The following example displays product tables for 10 numbers at a time starting with 1. After every set of 10 numbers, the <xref href=\"System.Console.Error\" data-throw-if-not-resolved=\"false\"></xref> property is used to ask the user whether to display the next set. If the standard output is redirected to a file, the user is still asked whether the routine should generate the next set of products.  </p>System.Console.Error#1"
  syntax:
    content: public static TextWriter Error { get; }
    content.vb: Public Shared ReadOnly Property Error As TextWriter
    parameters: []
    return:
      type: System.IO.TextWriter
      description: "\n<p>A <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> that represents the standard error output stream.</p>\n"
  seealso:
  - type: System.Console.In
    commentId: P:System.Console.In
  - type: System.Console.Out
    commentId: P:System.Console.Out
  - type: System.Console.IsErrorRedirected
    commentId: P:System.Console.IsErrorRedirected
  - type: System.Console.SetError(System.IO.TextWriter)
    commentId: M:System.Console.SetError(System.IO.TextWriter)
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Console.ForegroundColor
  commentId: P:System.Console.ForegroundColor
  id: ForegroundColor
  parent: System.Console
  langs:
  - csharp
  - vb
  name: ForegroundColor
  nameWithType: Console.ForegroundColor
  fullName: System.Console.ForegroundColor
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ForegroundColor
    path: src/System.Console/src/System/Console.cs
    startLine: 201
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets or sets the foreground color of the console.</p>\n"
  remarks: "\n<p>A get operation for a Windows-based application, in which a console does not exist, returns <xref href=\"System.ConsoleColor.Gray\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  syntax:
    content: public static ConsoleColor ForegroundColor { get; set; }
    content.vb: Public Shared Property ForegroundColor As ConsoleColor
    parameters: []
    return:
      type: System.ConsoleColor
      description: "\n<p>A <xref href=\"System.ConsoleColor\" data-throw-if-not-resolved=\"false\"></xref> that specifies the foreground color of the console; that is, the color of each character that is displayed. The default is gray.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The color specified in a set operation is not a valid member of <xref href=\"System.ConsoleColor\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have permission to perform this action. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.InputEncoding
  commentId: P:System.Console.InputEncoding
  id: InputEncoding
  parent: System.Console
  langs:
  - csharp
  - vb
  name: InputEncoding
  nameWithType: Console.InputEncoding
  fullName: System.Console.InputEncoding
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InputEncoding
    path: src/System.Console/src/System/Console.cs
    startLine: 49
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets or sets the encoding the console uses to read input. </p>\n"
  remarks: "\n<p>The console uses the input encoding to translate keyboard input into a corresponding character. The input encoding incorporates a code page that maps 256 keyboard character codes to individual characters. Different code pages include different special characters, typically customized for a language or a group of languages.</p>\n<p>Starting with the .NET Framework 4, a property get operation may return a cached value instead of the console's current input encoding. This can occur if the value of the <xref href=\"System.Console.InputEncoding\" data-throw-if-not-resolved=\"false\"></xref> property is modified by some means other than an assignment to the <xref href=\"System.Console.InputEncoding\" data-throw-if-not-resolved=\"false\"></xref> property, such as calling the Windows <strong>SetConsoleCP</strong> function or using the <strong>chcp</strong> command from a PowerShell script. </p>\n"
  syntax:
    content: public static Encoding InputEncoding { get; set; }
    content.vb: Public Shared Property InputEncoding As Encoding
    parameters: []
    return:
      type: System.Text.Encoding
      description: "\n<p>The encoding used to read console input.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The property value in a set operation is <strong>null</strong>.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An error occurred during the execution of this operation.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>Your application does not have permission to perform this operation.</p>\n"
  seealso:
  - type: System.Text.Encoding
    commentId: T:System.Text.Encoding
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.IsErrorRedirected
  commentId: P:System.Console.IsErrorRedirected
  id: IsErrorRedirected
  parent: System.Console
  langs:
  - csharp
  - vb
  name: IsErrorRedirected
  nameWithType: Console.IsErrorRedirected
  fullName: System.Console.IsErrorRedirected
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsErrorRedirected
    path: src/System.Console/src/System/Console.cs
    startLine: 175
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets a value that indicates whether the error output stream has been redirected from the standard error stream.</p>\n"
  syntax:
    content: public static bool IsErrorRedirected { get; }
    content.vb: Public Shared ReadOnly Property IsErrorRedirected As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if error output is redirected; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Console.Error
    commentId: P:System.Console.Error
  - type: System.Console.SetError(System.IO.TextWriter)
    commentId: M:System.Console.SetError(System.IO.TextWriter)
  - type: System.Console.OpenStandardError
    commentId: M:System.Console.OpenStandardError
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Console.IsInputRedirected
  commentId: P:System.Console.IsInputRedirected
  id: IsInputRedirected
  parent: System.Console
  langs:
  - csharp
  - vb
  name: IsInputRedirected
  nameWithType: Console.IsInputRedirected
  fullName: System.Console.IsInputRedirected
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsInputRedirected
    path: src/System.Console/src/System/Console.cs
    startLine: 155
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets a value that indicates whether input has been redirected from the standard input stream.</p>\n"
  syntax:
    content: public static bool IsInputRedirected { get; }
    content.vb: Public Shared ReadOnly Property IsInputRedirected As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if input is redirected; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Console.In
    commentId: P:System.Console.In
  - type: System.Console.SetIn(System.IO.TextReader)
    commentId: M:System.Console.SetIn(System.IO.TextReader)
  - type: System.Console.OpenStandardInput
    commentId: M:System.Console.OpenStandardInput
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Console.IsOutputRedirected
  commentId: P:System.Console.IsOutputRedirected
  id: IsOutputRedirected
  parent: System.Console
  langs:
  - csharp
  - vb
  name: IsOutputRedirected
  nameWithType: Console.IsOutputRedirected
  fullName: System.Console.IsOutputRedirected
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsOutputRedirected
    path: src/System.Console/src/System/Console.cs
    startLine: 165
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets a value that indicates whether output has been redirected from the standard output stream.</p>\n"
  syntax:
    content: public static bool IsOutputRedirected { get; }
    content.vb: Public Shared ReadOnly Property IsOutputRedirected As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if output is redirected; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Console.Out
    commentId: P:System.Console.Out
  - type: System.Console.SetOut(System.IO.TextWriter)
    commentId: M:System.Console.SetOut(System.IO.TextWriter)
  - type: System.Console.OpenStandardError
    commentId: M:System.Console.OpenStandardError
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Console.In
  commentId: P:System.Console.In
  id: In
  parent: System.Console
  langs:
  - csharp
  - vb
  name: In
  nameWithType: Console.In
  fullName: System.Console.In
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: In
    path: src/System.Console/src/System/Console.cs
    startLine: 41
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets the standard input stream.</p>\n"
  remarks: "\n<p>This property is set to the standard input stream by default. This property can be set to another stream with the <xref href=\"System.Console.SetIn(System.IO.TextReader)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Read operations on the standard input stream execute synchronously. That is, they block until the specified read operation has completed. This is true even if an asynchronous method, such as <xref href=\"System.IO.TextReader.ReadLineAsync\" data-throw-if-not-resolved=\"false\"></xref>, is called on the <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object returned by the <xref href=\"System.Console.In\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  syntax:
    content: public static TextReader In { get; }
    content.vb: Public Shared ReadOnly Property In As TextReader
    parameters: []
    return:
      type: System.IO.TextReader
      description: "\n<p>A <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> that represents the standard input stream.</p>\n"
  seealso:
  - type: System.Console.OpenStandardInput
    commentId: M:System.Console.OpenStandardInput
  - type: System.Console.IsInputRedirected
    commentId: P:System.Console.IsInputRedirected
  - type: System.Console.Error
    commentId: P:System.Console.Error
  - type: System.Console.Out
    commentId: P:System.Console.Out
  - type: System.Console.SetIn(System.IO.TextReader)
    commentId: M:System.Console.SetIn(System.IO.TextReader)
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Console.KeyAvailable
  commentId: P:System.Console.KeyAvailable
  id: KeyAvailable
  parent: System.Console
  langs:
  - csharp
  - vb
  name: KeyAvailable
  nameWithType: Console.KeyAvailable
  fullName: System.Console.KeyAvailable
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeyAvailable
    path: src/System.Console/src/System/Console.cs
    startLine: 107
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets a value indicating whether a key press is available in the input stream.</p>\n"
  remarks: "\n<p>The property value is returned immediately; that is, the <xref href=\"System.Console.KeyAvailable\" data-throw-if-not-resolved=\"false\"></xref> property does not block input until a key press is available.</p>\n<p>Use the <xref href=\"System.Console.KeyAvailable\" data-throw-if-not-resolved=\"false\"></xref> property in conjunction with only the <xref href=\"System.Console.ReadKey\" data-throw-if-not-resolved=\"false\"></xref> method, not the <xref href=\"System.Console.Read\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Console.ReadLine\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n"
  syntax:
    content: public static bool KeyAvailable { get; }
    content.vb: Public Shared ReadOnly Property KeyAvailable As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a key press is available; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Standard input is redirected to a file instead of the keyboard. </p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Console.LargestWindowWidth
  commentId: P:System.Console.LargestWindowWidth
  id: LargestWindowWidth
  parent: System.Console
  langs:
  - csharp
  - vb
  name: LargestWindowWidth
  nameWithType: Console.LargestWindowWidth
  fullName: System.Console.LargestWindowWidth
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LargestWindowWidth
    path: src/System.Console/src/System/Console.cs
    startLine: 283
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets the largest possible number of console window columns, based on the current font and screen resolution.</p>\n"
  syntax:
    content: public static int LargestWindowWidth { get; }
    content.vb: Public Shared ReadOnly Property LargestWindowWidth As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The width of the largest possible console window measured in columns.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Console.LargestWindowHeight
  commentId: P:System.Console.LargestWindowHeight
  id: LargestWindowHeight
  parent: System.Console
  langs:
  - csharp
  - vb
  name: LargestWindowHeight
  nameWithType: Console.LargestWindowHeight
  fullName: System.Console.LargestWindowHeight
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LargestWindowHeight
    path: src/System.Console/src/System/Console.cs
    startLine: 288
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets the largest possible number of console window rows, based on the current font and screen resolution.</p>\n"
  syntax:
    content: public static int LargestWindowHeight { get; }
    content.vb: Public Shared ReadOnly Property LargestWindowHeight As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The height of the largest possible console window measured in rows.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: MoveBufferArea(Int32, Int32, Int32, Int32, Int32, Int32)
  nameWithType: Console.MoveBufferArea(Int32, Int32, Int32, Int32, Int32, Int32)
  fullName: System.Console.MoveBufferArea(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveBufferArea
    path: src/System.Console/src/System/Console.cs
    startLine: 342
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Copies a specified source area of the screen buffer to a specified destination area.</p>\n"
  remarks: "\n<p>If the destination and source parameters specify a position located outside the boundaries of the current screen buffer, only the portion of the source area that fits within the destination area is copied. That is, the source area is clipped to fit the current screen buffer.</p>\n<p>The <xref href=\"System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method copies the source area to the destination area. If the destination area does not intersect the source area, the source area is filled with blanks using the current foreground and background colors. Otherwise, the intersected portion of the source area is not filled.</p>\n"
  syntax:
    content: public static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop)
    content.vb: Public Shared Sub MoveBufferArea(sourceLeft As Integer, sourceTop As Integer, sourceWidth As Integer, sourceHeight As Integer, targetLeft As Integer, targetTop As Integer)
    parameters:
    - id: sourceLeft
      type: System.Int32
      description: "\n<p>The leftmost column of the source area. </p>\n"
    - id: sourceTop
      type: System.Int32
      description: "\n<p>The topmost row of the source area. </p>\n"
    - id: sourceWidth
      type: System.Int32
      description: "\n<p>The number of columns in the source area. </p>\n"
    - id: sourceHeight
      type: System.Int32
      description: "\n<p>The number of rows in the source area. </p>\n"
    - id: targetLeft
      type: System.Int32
      description: "\n<p>The leftmost column of the destination area. </p>\n"
    - id: targetTop
      type: System.Int32
      description: "\n<p>The topmost row of the destination area. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>One or more of the parameters is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>sourceLeft</em> or <em>targetLeft</em> is greater than or equal to <xref href=\"System.Console.BufferWidth\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>sourceTop</em> or <em>targetTop</em> is greater than or equal to <xref href=\"System.Console.BufferHeight\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>sourceTop</em> + <em>sourceHeight</em> is greater than or equal to <xref href=\"System.Console.BufferHeight\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>sourceLeft</em> + <em>sourceWidth</em> is greater than or equal to <xref href=\"System.Console.BufferWidth\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have permission to perform this action. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred.</p>\n"
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)
  commentId: M:System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)
  id: MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: MoveBufferArea(Int32, Int32, Int32, Int32, Int32, Int32, Char, ConsoleColor, ConsoleColor)
  nameWithType: Console.MoveBufferArea(Int32, Int32, Int32, Int32, Int32, Int32, Char, ConsoleColor, ConsoleColor)
  fullName: System.Console.MoveBufferArea(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Char, System.ConsoleColor, System.ConsoleColor)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveBufferArea
    path: src/System.Console/src/System/Console.cs
    startLine: 347
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Copies a specified source area of the screen buffer to a specified destination area.</p>\n"
  remarks: "\n<p>If the destination and source parameters specify a position located beyond the boundaries of the current screen buffer, only the portion of the source area that fits within the destination area is copied. That is, the source area is clipped to fit the current screen buffer.</p>\n<p>The <xref href=\"System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method copies the source area to the destination area. If the destination area does not intersect the source area, the source area is filled with the character specified by <em>sourceChar</em>, using the colors specified by <em>sourceForeColor</em> and <em>sourceBackColor</em>. Otherwise, the intersected portion of the source area is not filled.</p>\n<p>The <xref href=\"System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method performs no operation if <em>sourceWidth</em> or <em>sourceHeight</em> is zero.</p>\n"
  syntax:
    content: public static void MoveBufferArea(int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor)
    content.vb: Public Shared Sub MoveBufferArea(sourceLeft As Integer, sourceTop As Integer, sourceWidth As Integer, sourceHeight As Integer, targetLeft As Integer, targetTop As Integer, sourceChar As Char, sourceForeColor As ConsoleColor, sourceBackColor As ConsoleColor)
    parameters:
    - id: sourceLeft
      type: System.Int32
      description: "\n<p>The leftmost column of the source area. </p>\n"
    - id: sourceTop
      type: System.Int32
      description: "\n<p>The topmost row of the source area. </p>\n"
    - id: sourceWidth
      type: System.Int32
      description: "\n<p>The number of columns in the source area. </p>\n"
    - id: sourceHeight
      type: System.Int32
      description: "\n<p>The number of rows in the source area. </p>\n"
    - id: targetLeft
      type: System.Int32
      description: "\n<p>The leftmost column of the destination area. </p>\n"
    - id: targetTop
      type: System.Int32
      description: "\n<p>The topmost row of the destination area. </p>\n"
    - id: sourceChar
      type: System.Char
      description: "\n<p>The character used to fill the source area. </p>\n"
    - id: sourceForeColor
      type: System.ConsoleColor
      description: "\n<p>The foreground color used to fill the source area. </p>\n"
    - id: sourceBackColor
      type: System.ConsoleColor
      description: "\n<p>The background color used to fill the source area. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>One or more of the parameters is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>sourceLeft</em> or <em>targetLeft</em> is greater than or equal to <xref href=\"System.Console.BufferWidth\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>sourceTop</em> or <em>targetTop</em> is greater than or equal to <xref href=\"System.Console.BufferHeight\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>sourceTop</em> + <em>sourceHeight</em> is greater than or equal to <xref href=\"System.Console.BufferHeight\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>sourceLeft</em> + <em>sourceWidth</em> is greater than or equal to <xref href=\"System.Console.BufferWidth\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>One or both of the color parameters is not a member of the <xref href=\"System.ConsoleColor\" data-throw-if-not-resolved=\"false\"></xref> enumeration. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have permission to perform this action. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred.</p>\n"
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.NumberLock
  commentId: P:System.Console.NumberLock
  id: NumberLock
  parent: System.Console
  langs:
  - csharp
  - vb
  name: NumberLock
  nameWithType: Console.NumberLock
  fullName: System.Console.NumberLock
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NumberLock
    path: src/System.Console/src/System/Console.cs
    startLine: 191
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets a value indicating whether the NUM LOCK keyboard toggle is turned on or turned off.</p>\n"
  syntax:
    content: public static bool NumberLock { get; }
    content.vb: Public Shared ReadOnly Property NumberLock As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if NUM LOCK is turned on; <strong>false</strong> if NUM LOCK is turned off.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Console.OpenStandardError
  commentId: M:System.Console.OpenStandardError
  id: OpenStandardError
  parent: System.Console
  langs:
  - csharp
  - vb
  name: OpenStandardError()
  nameWithType: Console.OpenStandardError()
  fullName: System.Console.OpenStandardError()
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OpenStandardError
    path: src/System.Console/src/System/Console.cs
    startLine: 414
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Acquires the standard error stream.</p>\n"
  remarks: "\n<p>This method can be used to reacquire the standard error stream after it has been changed by the <xref href=\"System.Console.SetError(System.IO.TextWriter)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  syntax:
    content: public static Stream OpenStandardError()
    content.vb: Public Shared Function OpenStandardError As Stream
    return:
      type: System.IO.Stream
      description: "\n<p>The standard error stream.</p>\n"
  seealso:
  - type: System.Console.Error
    commentId: P:System.Console.Error
  - type: System.Console.IsErrorRedirected
    commentId: P:System.Console.IsErrorRedirected
  - type: System.Console.SetError(System.IO.TextWriter)
    commentId: M:System.Console.SetError(System.IO.TextWriter)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.OpenStandardInput
  commentId: M:System.Console.OpenStandardInput
  id: OpenStandardInput
  parent: System.Console
  langs:
  - csharp
  - vb
  name: OpenStandardInput()
  nameWithType: Console.OpenStandardInput()
  fullName: System.Console.OpenStandardInput()
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OpenStandardInput
    path: src/System.Console/src/System/Console.cs
    startLine: 404
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Acquires the standard input stream.</p>\n"
  remarks: "\n<p>This method can be used to reacquire the standard input stream after it has been changed by the <xref href=\"System.Console.SetIn(System.IO.TextReader)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public static Stream OpenStandardInput()
    content.vb: Public Shared Function OpenStandardInput As Stream
    return:
      type: System.IO.Stream
      description: "\n<p>The standard input stream.</p>\n"
  seealso:
  - type: System.Console.In
    commentId: P:System.Console.In
  - type: System.Console.IsInputRedirected
    commentId: P:System.Console.IsInputRedirected
  - type: System.Console.SetIn(System.IO.TextReader)
    commentId: M:System.Console.SetIn(System.IO.TextReader)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.OpenStandardOutput
  commentId: M:System.Console.OpenStandardOutput
  id: OpenStandardOutput
  parent: System.Console
  langs:
  - csharp
  - vb
  name: OpenStandardOutput()
  nameWithType: Console.OpenStandardOutput()
  fullName: System.Console.OpenStandardOutput()
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OpenStandardOutput
    path: src/System.Console/src/System/Console.cs
    startLine: 409
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Acquires the standard output stream.</p>\n"
  remarks: "\n<p>This method can be used to reacquire the standard output stream after it has been changed by the <xref href=\"System.Console.SetOut(System.IO.TextWriter)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public static Stream OpenStandardOutput()
    content.vb: Public Shared Function OpenStandardOutput As Stream
    return:
      type: System.IO.Stream
      description: "\n<p>The standard output stream.</p>\n"
  seealso:
  - type: System.Console.Out
    commentId: P:System.Console.Out
  - type: System.Console.IsOutputRedirected
    commentId: P:System.Console.IsOutputRedirected
  - type: System.Console.SetOut(System.IO.TextWriter)
    commentId: M:System.Console.SetOut(System.IO.TextWriter)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.Out
  commentId: P:System.Console.Out
  id: Out
  parent: System.Console
  langs:
  - csharp
  - vb
  name: Out
  nameWithType: Console.Out
  fullName: System.Console.Out
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Out
    path: src/System.Console/src/System/Console.cs
    startLine: 130
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets the standard output stream.</p>\n"
  remarks: "\n<p>This property is set to the standard output stream by default. This property can be set to another stream with the <xref href=\"System.Console.SetOut(System.IO.TextWriter)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Note that calls to <strong>Console.Out.WriteLine</strong> methods are equivalent to calls to the corresponding <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref> methods. </p>\n"
  syntax:
    content: public static TextWriter Out { get; }
    content.vb: Public Shared ReadOnly Property Out As TextWriter
    parameters: []
    return:
      type: System.IO.TextWriter
      description: "\n<p>A <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> that represents the standard output stream.</p>\n"
  seealso:
  - type: System.Console.Error
    commentId: P:System.Console.Error
  - type: System.Console.In
    commentId: P:System.Console.In
  - type: System.Console.SetOut(System.IO.TextWriter)
    commentId: M:System.Console.SetOut(System.IO.TextWriter)
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Console.OutputEncoding
  commentId: P:System.Console.OutputEncoding
  id: OutputEncoding
  parent: System.Console
  langs:
  - csharp
  - vb
  name: OutputEncoding
  nameWithType: Console.OutputEncoding
  fullName: System.Console.OutputEncoding
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OutputEncoding
    path: src/System.Console/src/System/Console.cs
    startLine: 73
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets or sets the encoding the console uses to write output. </p>\n"
  remarks: "\n<p>The console uses the output encoding to translate characters written by an application into corresponding console display characters. The default code page that the console uses is determined by the system locale.</p>\n<p>Starting with the .NET Framework 4, a property get operation may return a cached value instead of the console's current output encoding. This can occur if the value of the <xref href=\"System.Console.OutputEncoding\" data-throw-if-not-resolved=\"false\"></xref> property is modified by some means other than an assignment to the <xref href=\"System.Console.OutputEncoding\" data-throw-if-not-resolved=\"false\"></xref> property, such as calling the Windows <strong>SetConsoleOutputCP</strong> function. </p>\n"
  syntax:
    content: public static Encoding OutputEncoding { get; set; }
    content.vb: Public Shared Property OutputEncoding As Encoding
    parameters: []
    return:
      type: System.Text.Encoding
      description: "\n<p>The encoding used to write console output.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The property value in a set operation is <strong>null</strong>.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An error occurred during the execution of this operation.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>Your application does not have permission to perform this operation.</p>\n"
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.Read
  commentId: M:System.Console.Read
  id: Read
  parent: System.Console
  langs:
  - csharp
  - vb
  name: Read()
  nameWithType: Console.Read()
  fullName: System.Console.Read()
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Read
    path: src/System.Console/src/System/Console.cs
    startLine: 466
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Reads the next character from the standard input stream.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Console.Read\" data-throw-if-not-resolved=\"false\"></xref> method blocks its return while you type input characters; it terminates when you press the <xref href=\"System.ConsoleKey.Enter\" data-throw-if-not-resolved=\"false\"></xref> key. Pressing Enter appends a platform-dependent line termination sequence to your input (for example, Windows appends a carriage return-linefeed sequence). Subsequent calls to the <xref href=\"System.Console.Read\" data-throw-if-not-resolved=\"false\"></xref> method retrieve your input one character at a time. After the final character is retrieved, <xref href=\"System.Console.Read\" data-throw-if-not-resolved=\"false\"></xref> blocks its return again and the cycle repeats.</p>\n<p>The <xref href=\"System.Console.ReadLine\" data-throw-if-not-resolved=\"false\"></xref> method, or the <xref href=\"System.Console.KeyAvailable\" data-throw-if-not-resolved=\"false\"></xref> property and <xref href=\"System.Console.ReadKey\" data-throw-if-not-resolved=\"false\"></xref> method are preferable to using the <xref href=\"System.Console.Read\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Note that the method does not return -1 unless you perform one of the following actions: </p>\n<ul><li>\n<p>Simultaneously press the <xref href=\"System.ConsoleModifiers.Control\" data-throw-if-not-resolved=\"false\"></xref> modifier key and <xref href=\"System.ConsoleKey.Z\" data-throw-if-not-resolved=\"false\"></xref> console key (Ctrl+Z), which signals the end-of-file condition. </p>\n</li><li>\n<p>Press an equivalent key that signals the end-of-file condition, such as the F6 function key in Windows. </p>\n</li><li>\n<p>Redirect the input stream to a source, such as a text file, that has an actual end-of-file character. </p>\n</li></ul>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static int Read()
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Function Read As Integer
    return:
      type: System.Int32
      description: "\n<p>The next character from the input stream, or negative one (-1) if there are currently no more characters to be read.</p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.Write(System.String,System.Object)
    commentId: M:System.Console.Write(System.String,System.Object)
  - type: System.Console.WriteLine
    commentId: M:System.Console.WriteLine
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.ReadKey
  commentId: M:System.Console.ReadKey
  id: ReadKey
  parent: System.Console
  langs:
  - csharp
  - vb
  name: ReadKey()
  nameWithType: Console.ReadKey()
  fullName: System.Console.ReadKey()
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadKey
    path: src/System.Console/src/System/Console.cs
    startLine: 120
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Obtains the next character or function key pressed by the user. The pressed key is displayed in the console window.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Console.ReadKey\" data-throw-if-not-resolved=\"false\"></xref> method waits, that is, blocks on the thread issuing the <xref href=\"System.Console.ReadKey\" data-throw-if-not-resolved=\"false\"></xref> method, until a character or function key is pressed. A character or function key can be pressed in combination with one or more Alt, Ctrl, or Shift modifier keys. However, pressing a modifier key by itself will not cause the <xref href=\"System.Console.ReadKey\" data-throw-if-not-resolved=\"false\"></xref> method to return.</p>\n<p>Depending on your application, you might want to use the <xref href=\"System.Console.ReadKey\" data-throw-if-not-resolved=\"false\"></xref> method in conjunction with the <xref href=\"System.Console.KeyAvailable\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The <xref href=\"System.Console.ReadKey\" data-throw-if-not-resolved=\"false\"></xref> method reads from the keyboard even if the standard input is redirected to a file with the <xref href=\"System.Console.SetIn(System.IO.TextReader)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public static ConsoleKeyInfo ReadKey()
    content.vb: Public Shared Function ReadKey As ConsoleKeyInfo
    return:
      type: System.ConsoleKeyInfo
      description: "\n<p>An object that describes the <xref href=\"System.ConsoleKey\" data-throw-if-not-resolved=\"false\"></xref> constant and Unicode character, if any, that correspond to the pressed console key. The <xref href=\"System.ConsoleKeyInfo\" data-throw-if-not-resolved=\"false\"></xref> object also describes, in a bitwise combination of <xref href=\"System.ConsoleModifiers\" data-throw-if-not-resolved=\"false\"></xref> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Console.In\" data-throw-if-not-resolved=\"false\"></xref> property is redirected from some stream other than the console.</p>\n"
  seealso:
  - type: System.ConsoleKey
    commentId: T:System.ConsoleKey
  - type: System.Console.KeyAvailable
    commentId: P:System.Console.KeyAvailable
  - type: System.Console.TreatControlCAsInput
    commentId: P:System.Console.TreatControlCAsInput
  - type: System.Console.CancelKeyPress
    commentId: E:System.Console.CancelKeyPress
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.ReadKey(System.Boolean)
  commentId: M:System.Console.ReadKey(System.Boolean)
  id: ReadKey(System.Boolean)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: ReadKey(Boolean)
  nameWithType: Console.ReadKey(Boolean)
  fullName: System.Console.ReadKey(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadKey
    path: src/System.Console/src/System/Console.cs
    startLine: 125
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Obtains the next character or function key pressed by the user. The pressed key is optionally displayed in the console window.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Console.ReadKey\" data-throw-if-not-resolved=\"false\"></xref> method waits, that is, blocks on the thread issuing the <xref href=\"System.Console.ReadKey\" data-throw-if-not-resolved=\"false\"></xref> method, until a character or function key is pressed. A character or function key can be pressed in combination with one or more Alt, Ctrl, or Shift modifier keys. However, pressing a modifier key by itself will not cause the <xref href=\"System.Console.ReadKey\" data-throw-if-not-resolved=\"false\"></xref> method to return.</p>\n<p>If the <em>intercept</em> parameter is <strong>true</strong>, the pressed key is intercepted and not displayed in the console window; otherwise, the pressed key is displayed.</p>\n<p>Depending on your application, you might want to use the <xref href=\"System.Console.ReadKey\" data-throw-if-not-resolved=\"false\"></xref> method in conjunction with the <xref href=\"System.Console.KeyAvailable\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The <xref href=\"System.Console.ReadKey\" data-throw-if-not-resolved=\"false\"></xref> method reads from the keyboard even if the standard input is redirected to a file with the <xref href=\"System.Console.SetIn(System.IO.TextReader)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public static ConsoleKeyInfo ReadKey(bool intercept)
    content.vb: Public Shared Function ReadKey(intercept As Boolean) As ConsoleKeyInfo
    parameters:
    - id: intercept
      type: System.Boolean
      description: "\n<p>Determines whether to display the pressed key in the console window. <strong>true</strong> to not display the pressed key; otherwise, <strong>false</strong>. </p>\n"
    return:
      type: System.ConsoleKeyInfo
      description: "\n<p>An object that describes the <xref href=\"System.ConsoleKey\" data-throw-if-not-resolved=\"false\"></xref> constant and Unicode character, if any, that correspond to the pressed console key. The <xref href=\"System.ConsoleKeyInfo\" data-throw-if-not-resolved=\"false\"></xref> object also describes, in a bitwise combination of <xref href=\"System.ConsoleModifiers\" data-throw-if-not-resolved=\"false\"></xref> values, whether one or more Shift, Alt, or Ctrl modifier keys was pressed simultaneously with the console key.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Console.In\" data-throw-if-not-resolved=\"false\"></xref> property is redirected from some stream other than the console.</p>\n"
  seealso:
  - type: System.ConsoleKey
    commentId: T:System.ConsoleKey
  - type: System.Console.KeyAvailable
    commentId: P:System.Console.KeyAvailable
  - type: System.Console.TreatControlCAsInput
    commentId: P:System.Console.TreatControlCAsInput
  - type: System.Console.CancelKeyPress
    commentId: E:System.Console.CancelKeyPress
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.ReadLine
  commentId: M:System.Console.ReadLine
  id: ReadLine
  parent: System.Console
  langs:
  - csharp
  - vb
  name: ReadLine()
  nameWithType: Console.ReadLine()
  fullName: System.Console.ReadLine()
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadLine
    path: src/System.Console/src/System/Console.cs
    startLine: 472
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Reads the next line of characters from the standard input stream.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Console.ReadLine\" data-throw-if-not-resolved=\"false\"></xref> method reads a line from the standard input stream. (For the definition of a line, see the paragraph after the following list.) This means that: </p>\n<ul><li>\n<p>If the standard input device is the keyboard, the <xref href=\"System.Console.ReadLine\" data-throw-if-not-resolved=\"false\"></xref> method blocks until the user presses the Enter key. </p>\n<p>One of the most common uses of the <xref href=\"System.Console.ReadLine\" data-throw-if-not-resolved=\"false\"></xref> method is to pause program execution before clearing the console and displaying new information to it, or to prompt the user to press the Enter key before terminating the application. The following example illustrates this.</p>System.Console.ReadLine#6</li><li>\n<p>If standard input is redirected to a file, the <xref href=\"System.Console.ReadLine\" data-throw-if-not-resolved=\"false\"></xref> method reads a line of text from a file. For example, the following is a text file named ReadLine1.txt:</p>\n<pre><code>This is the first line.\nThis is the second line.\nThis is the third line.\nThis is the fourth line.</code></pre>\n<p>The following example uses the <xref href=\"System.Console.ReadLine\" data-throw-if-not-resolved=\"false\"></xref> method to read input that is redirected from a file. The read operation terminates when the  method returns <strong>null</strong>, which indicates that no lines remain to be read. </p>System.Console.ReadLine#3<p>After compiling the example to an executable named ReadLine1.exe, you can run it from the command line with the syntax</p><pre><code>ReadLine1 < ReadLine1.txt</code></pre><p>to read the contents of the file and display them to the console. </p></li></ul>\n<p>A line is defined as a sequence of characters followed by a carriage return (hexadecimal 0x000d), a line feed (hexadecimal 0x000a), or the value of the <xref href=\"System.Environment.NewLine\" data-throw-if-not-resolved=\"false\"></xref> property. The returned string does not contain the terminating character(s). By default, the method reads input from a 256-character input buffer. Because this includes the <xref href=\"System.Environment.NewLine\" data-throw-if-not-resolved=\"false\"></xref> character(s), the method can read lines that contain up to 254 characters. To read longer lines, call the <xref href=\"System.Console.OpenStandardInput(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>The <xref href=\"System.Console.ReadLine\" data-throw-if-not-resolved=\"false\"></xref> method executes synchronously. That is, it blocks until a line is read or the Ctrl+Z keyboard combination is pressed. The <xref href=\"System.Console.In\" data-throw-if-not-resolved=\"false\"></xref> property returns a <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object that represents the standard input stream and that has both a synchronous <xref href=\"System.IO.TextReader.ReadLine\" data-throw-if-not-resolved=\"false\"></xref> method and an asynchronous <xref href=\"System.IO.TextReader.ReadLineAsync\" data-throw-if-not-resolved=\"false\"></xref> method. However, when used as the console's standard input stream, the <xref href=\"System.IO.TextReader.ReadLineAsync\" data-throw-if-not-resolved=\"false\"></xref> executes synchronously rather than asynchronously and returns a <strong>Task<String></strong> only after the read operation has completed. </p>\n<p>If this method throws an <xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref> exception, the reader's position in the underlying <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object is advanced by the number of characters the method was able to read, but the characters already read into the internal <xref href=\"System.Console.ReadLine\" data-throw-if-not-resolved=\"false\"></xref> buffer are discarded. Since the position of the reader in the stream cannot be changed, the characters already read are unrecoverable, and can be accessed only by reinitializing the <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>. If the initial position within the stream is unknown or the stream does not support seeking, the underlying <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> also needs to be reinitialized. To avoid such a situation and to produce robust code, you should use the <xref href=\"System.Console.KeyAvailable\" data-throw-if-not-resolved=\"false\"></xref> property and <xref href=\"System.Console.ReadKey\" data-throw-if-not-resolved=\"false\"></xref> method and store the read characters in a pre-allocated buffer. </p>\n<p>If the Ctrl+Z character is pressed when the method is reading input from the console, the method returns <strong>null</strong>. This enables the user to prevent further keyboard input when the <xref href=\"System.Console.ReadLine\" data-throw-if-not-resolved=\"false\"></xref> method is called in a loop. The following example illustrates this scenario.</p>System.Console.ReadLine#1"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static string ReadLine()
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Function ReadLine As String
    return:
      type: System.String
      description: "\n<p>The next line of characters from the input stream, or <strong>null</strong> if no more lines are available.</p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is insufficient memory to allocate a buffer for the returned string. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The number of characters in the next line of characters is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.Write(System.String,System.Object)
    commentId: M:System.Console.Write(System.String,System.Object)
  - type: System.Console.WriteLine
    commentId: M:System.Console.WriteLine
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.ResetColor
  commentId: M:System.Console.ResetColor
  id: ResetColor
  parent: System.Console
  langs:
  - csharp
  - vb
  name: ResetColor()
  nameWithType: Console.ResetColor()
  fullName: System.Console.ResetColor()
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ResetColor
    path: src/System.Console/src/System/Console.cs
    startLine: 207
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Sets the foreground and background console colors to their defaults.</p>\n"
  remarks: "\n<p>The foreground and background colors are restored to the colors that existed when the current process began. For more information, see the <xref href=\"System.Console.ForegroundColor\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Console.BackgroundColor\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>\n"
  syntax:
    content: public static void ResetColor()
    content.vb: Public Shared Sub ResetColor
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have permission to perform this action. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.SetBufferSize(System.Int32,System.Int32)
  commentId: M:System.Console.SetBufferSize(System.Int32,System.Int32)
  id: SetBufferSize(System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: SetBufferSize(Int32, Int32)
  nameWithType: Console.SetBufferSize(Int32, Int32)
  fullName: System.Console.SetBufferSize(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetBufferSize
    path: src/System.Console/src/System/Console.cs
    startLine: 224
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Sets the height and width of the screen buffer area to the specified values.</p>\n"
  syntax:
    content: public static void SetBufferSize(int width, int height)
    content.vb: Public Shared Sub SetBufferSize(width As Integer, height As Integer)
    parameters:
    - id: width
      type: System.Int32
      description: "\n<p>The width of the buffer area measured in columns. </p>\n"
    - id: height
      type: System.Int32
      description: "\n<p>The height of the buffer area measured in rows. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>height</em> or <em>width</em> is less than or equal to zero.</p>\n<p>-or- </p>\n<p>\n<em>height</em> or <em>width</em> is greater than or equal to <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>width</em> is less than <xref href=\"System.Console.WindowLeft\" data-throw-if-not-resolved=\"false\"></xref> + <xref href=\"System.Console.WindowWidth\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>height</em> is less than <xref href=\"System.Console.WindowTop\" data-throw-if-not-resolved=\"false\"></xref> + <xref href=\"System.Console.WindowHeight\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have permission to perform this action. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred.</p>\n"
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.SetCursorPosition(System.Int32,System.Int32)
  commentId: M:System.Console.SetCursorPosition(System.Int32,System.Int32)
  id: SetCursorPosition(System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: SetCursorPosition(Int32, Int32)
  nameWithType: Console.SetCursorPosition(Int32, Int32)
  fullName: System.Console.SetCursorPosition(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetCursorPosition
    path: src/System.Console/src/System/Console.cs
    startLine: 357
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Sets the position of the cursor.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Console.SetCursorPosition(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to specify where the next write operation in the console window is to begin. If the specified cursor position is outside the area that is currently visible in the console window, the window origin changes automatically to make the cursor visible.</p>\n<p>The cursor automatically moves to the next character position each time a character is written to the console window. If the cursor is at the bottom right character position of the console window, the next write operation causes the console window to scroll so the cursor remains visible. If you want to write a character to the bottom right character position without causing the console window to scroll, use the <xref href=\"System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to move a character to that position. </p>\n"
  syntax:
    content: public static void SetCursorPosition(int left, int top)
    content.vb: Public Shared Sub SetCursorPosition(left As Integer, top As Integer)
    parameters:
    - id: left
      type: System.Int32
      description: "\n<p>The column position of the cursor. Columns are numbered from left to right starting at 0. </p>\n"
    - id: top
      type: System.Int32
      description: "\n<p>The row position of the cursor. Rows are numbered from top to bottom starting at 0. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>left</em> or <em>top</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>left</em> is greater than or equal to <xref href=\"System.Console.BufferWidth\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>top</em> is greater than or equal to <xref href=\"System.Console.BufferHeight\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have permission to perform this action. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred.</p>\n"
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.SetError(System.IO.TextWriter)
  commentId: M:System.Console.SetError(System.IO.TextWriter)
  id: SetError(System.IO.TextWriter)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: SetError(TextWriter)
  nameWithType: Console.SetError(TextWriter)
  fullName: System.Console.SetError(System.IO.TextWriter)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetError
    path: src/System.Console/src/System/Console.cs
    startLine: 441
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Sets the <xref href=\"System.Console.Error\" data-throw-if-not-resolved=\"false\"></xref> property to the specified <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>By default, the <xref href=\"System.Console.Error\" data-throw-if-not-resolved=\"false\"></xref> property is set to the standard error output stream.</p>\n<p>A <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> that encapsulates a <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> can be used to send error messages to a file.</p>\n"
  syntax:
    content: public static void SetError(TextWriter newError)
    content.vb: Public Shared Sub SetError(newError As TextWriter)
    parameters:
    - id: newError
      type: System.IO.TextWriter
      description: "\n<p>A stream that is the new standard error output. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>newError</em> is <strong>null</strong>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  seealso:
  - type: System.Console.IsErrorRedirected
    commentId: P:System.Console.IsErrorRedirected
  - type: System.Console.Error
    commentId: P:System.Console.Error
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.SetIn(System.IO.TextReader)
  commentId: M:System.Console.SetIn(System.IO.TextReader)
  id: SetIn(System.IO.TextReader)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: SetIn(TextReader)
  nameWithType: Console.SetIn(TextReader)
  fullName: System.Console.SetIn(System.IO.TextReader)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetIn
    path: src/System.Console/src/System/Console.cs
    startLine: 419
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Sets the <xref href=\"System.Console.In\" data-throw-if-not-resolved=\"false\"></xref> property to the specified <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>By default, the <xref href=\"System.Console.In\" data-throw-if-not-resolved=\"false\"></xref> property is set to the standard input stream.</p>\n<p>A <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> that encapsulates a <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> can be used to receive input from a file.</p>\n"
  syntax:
    content: public static void SetIn(TextReader newIn)
    content.vb: Public Shared Sub SetIn(newIn As TextReader)
    parameters:
    - id: newIn
      type: System.IO.TextReader
      description: "\n<p>A stream that is the new standard input. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>newIn</em> is <strong>null</strong>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  seealso:
  - type: System.IO.TextReader
    commentId: T:System.IO.TextReader
  - type: System.Console.In
    commentId: P:System.Console.In
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.SetOut(System.IO.TextWriter)
  commentId: M:System.Console.SetOut(System.IO.TextWriter)
  id: SetOut(System.IO.TextWriter)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: SetOut(TextWriter)
  nameWithType: Console.SetOut(TextWriter)
  fullName: System.Console.SetOut(System.IO.TextWriter)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetOut
    path: src/System.Console/src/System/Console.cs
    startLine: 429
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Sets the <xref href=\"System.Console.Out\" data-throw-if-not-resolved=\"false\"></xref> property to the specified <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>By default, the <xref href=\"System.Console.Out\" data-throw-if-not-resolved=\"false\"></xref> property is set to the standard output stream.</p>\n<p>A <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> that encapsulates a <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> can be used to send output to a file. For example:</p>System.Console.SetOut#1"
  syntax:
    content: public static void SetOut(TextWriter newOut)
    content.vb: Public Shared Sub SetOut(newOut As TextWriter)
    parameters:
    - id: newOut
      type: System.IO.TextWriter
      description: "\n<p>A stream that is the new standard output. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>newOut</em> is <strong>null</strong>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  seealso:
  - type: System.IO.TextWriter
    commentId: T:System.IO.TextWriter
  - type: System.Console.Out
    commentId: P:System.Console.Out
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.SetWindowPosition(System.Int32,System.Int32)
  commentId: M:System.Console.SetWindowPosition(System.Int32,System.Int32)
  id: SetWindowPosition(System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: SetWindowPosition(Int32, Int32)
  nameWithType: Console.SetWindowPosition(Int32, Int32)
  fullName: System.Console.SetWindowPosition(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetWindowPosition
    path: src/System.Console/src/System/Console.cs
    startLine: 273
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Sets the position of the console window relative to the screen buffer.</p>\n"
  remarks: "\n<p>The operating system window displays the console window, and the console window displays a portion of the screen buffer. The <xref href=\"System.Console.SetWindowPosition(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method affects the position of the console window relative to the screen buffer, but does not affect the position of the operating system window relative to the desktop.</p>\n<p>The console and operating system windows generally do not affect each other. However, if the screen buffer cannot be displayed in the current boundaries of the console window, the operating system automatically appends scroll bars to the operating system window. In that case, moving the operating system window scroll bars affects the position of the console window, and moving the console window with the <xref href=\"System.Console.SetWindowPosition(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method affects the position of the operating system window scroll bars.</p>\n"
  syntax:
    content: public static void SetWindowPosition(int left, int top)
    content.vb: Public Shared Sub SetWindowPosition(left As Integer, top As Integer)
    parameters:
    - id: left
      type: System.Int32
      description: "\n<p>The column position of the upper left  corner of the console window. </p>\n"
    - id: top
      type: System.Int32
      description: "\n<p>The row position of the upper left corner of the console window. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>left</em> or <em>top</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>left</em> + <xref href=\"System.Console.WindowWidth\" data-throw-if-not-resolved=\"false\"></xref> is greater than <xref href=\"System.Console.BufferWidth\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>top</em> + <xref href=\"System.Console.WindowHeight\" data-throw-if-not-resolved=\"false\"></xref> is greater than <xref href=\"System.Console.BufferHeight\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have permission to perform this action. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred.</p>\n"
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.SetWindowSize(System.Int32,System.Int32)
  commentId: M:System.Console.SetWindowSize(System.Int32,System.Int32)
  id: SetWindowSize(System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: SetWindowSize(Int32, Int32)
  nameWithType: Console.SetWindowSize(Int32, Int32)
  fullName: System.Console.SetWindowSize(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetWindowSize
    path: src/System.Console/src/System/Console.cs
    startLine: 278
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Sets the height and width of the console window to the specified values.</p>\n"
  syntax:
    content: public static void SetWindowSize(int width, int height)
    content.vb: Public Shared Sub SetWindowSize(width As Integer, height As Integer)
    parameters:
    - id: width
      type: System.Int32
      description: "\n<p>The width of the console window measured in columns. </p>\n"
    - id: height
      type: System.Int32
      description: "\n<p>The height of the console window measured in rows. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>width</em> or <em>height</em> is less than or equal to zero.</p>\n<p>-or- </p>\n<p>\n<em>width</em> plus <xref href=\"System.Console.WindowLeft\" data-throw-if-not-resolved=\"false\"></xref> or <em>height</em> plus <xref href=\"System.Console.WindowTop\" data-throw-if-not-resolved=\"false\"></xref> is greater than or equal to <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>-or-</p>\n<p>\n<em>width</em> or <em>height</em> is greater than the largest possible window width or height for the current screen resolution and console font.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have permission to perform this action. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred.</p>\n"
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.Title
  commentId: P:System.Console.Title
  id: Title
  parent: System.Console
  langs:
  - csharp
  - vb
  name: Title
  nameWithType: Console.Title
  fullName: System.Console.Title
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Title
    path: src/System.Console/src/System/Console.cs
    startLine: 313
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets or sets the title to display in the console title bar.</p>\n"
  syntax:
    content: public static string Title { get; set; }
    content.vb: Public Shared Property Title As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The string to be displayed in the title bar of the console. The maximum length of the title string is 24500 characters.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>In a get operation, the retrieved title is longer than 24500 characters. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>In a set operation, the specified title is longer than 24500 characters. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>In a set operation, the specified title is <strong>null</strong>. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.TreatControlCAsInput
  commentId: P:System.Console.TreatControlCAsInput
  id: TreatControlCAsInput
  parent: System.Console
  langs:
  - csharp
  - vb
  name: TreatControlCAsInput
  nameWithType: Console.TreatControlCAsInput
  fullName: System.Console.TreatControlCAsInput
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TreatControlCAsInput
    path: src/System.Console/src/System/Console.cs
    startLine: 398
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets or sets a value indicating whether the combination of the <xref href=\"System.ConsoleModifiers.Control\" data-throw-if-not-resolved=\"false\"></xref> modifier key and <xref href=\"System.ConsoleKey.C\" data-throw-if-not-resolved=\"false\"></xref> console key (Ctrl+C) is treated as ordinary input or as an interruption that is handled by the operating system.</p>\n"
  remarks: "\n<p>If the value of the <xref href=\"System.Console.TreatControlCAsInput\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong> and Ctrl+C is pressed, the pressed keys are not stored in the input buffer and the operating system terminates the currently executing process. This is the default value. </p>\n<p>Use this property judiciously because setting it to <strong>true</strong> has such a dramatic effect. Most users expect Ctrl+C to terminate a console application. If you disable the effect of Ctrl+C, the user must remember to use Ctrl+Break to terminate the application, which is a less familiar key combination. </p>\n"
  syntax:
    content: public static bool TreatControlCAsInput { get; set; }
    content.vb: Public Shared Property TreatControlCAsInput As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if Ctrl+C is treated as ordinary input; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>Unable to get or set the input mode of the console input buffer. </p>\n"
  seealso:
  - type: System.ConsoleModifiers.Control
    commentId: F:System.ConsoleModifiers.Control
  - type: System.ConsoleKey.C
    commentId: F:System.ConsoleKey.C
  - type: System.Console.CancelKeyPress
    commentId: E:System.Console.CancelKeyPress
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.WindowHeight
  commentId: P:System.Console.WindowHeight
  id: WindowHeight
  parent: System.Console
  langs:
  - csharp
  - vb
  name: WindowHeight
  nameWithType: Console.WindowHeight
  fullName: System.Console.WindowHeight
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WindowHeight
    path: src/System.Console/src/System/Console.cs
    startLine: 257
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets or sets the height of the console window area.</p>\n"
  remarks: "\n<p>Attempting to set the value of the <xref href=\"System.Console.WindowHeight\" data-throw-if-not-resolved=\"false\"></xref> property when output is redirected throws either an <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> or an <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref> exception. To prevent an exception, you can set the value of this property only if the <xref href=\"System.Console.IsOutputRedirected\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>false</strong>. </p>\n"
  syntax:
    content: public static int WindowHeight { get; set; }
    content.vb: Public Shared Property WindowHeight As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The height of the console window measured in rows.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value of the <xref href=\"System.Console.WindowWidth\" data-throw-if-not-resolved=\"false\"></xref> property or the value of the <xref href=\"System.Console.WindowHeight\" data-throw-if-not-resolved=\"false\"></xref> property is less than or equal to 0.</p>\n<p>-or-</p>\n<p>The value of the <xref href=\"System.Console.WindowHeight\" data-throw-if-not-resolved=\"false\"></xref> property plus the value of the <xref href=\"System.Console.WindowTop\" data-throw-if-not-resolved=\"false\"></xref> property is greater than or equal to <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>The value of the <xref href=\"System.Console.WindowWidth\" data-throw-if-not-resolved=\"false\"></xref> property or the value of the <xref href=\"System.Console.WindowHeight\" data-throw-if-not-resolved=\"false\"></xref> property is greater than the largest possible window width or height for the current screen resolution and console font.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>Error reading or writing information.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.WindowWidth
  commentId: P:System.Console.WindowWidth
  id: WindowWidth
  parent: System.Console
  langs:
  - csharp
  - vb
  name: WindowWidth
  nameWithType: Console.WindowWidth
  fullName: System.Console.WindowWidth
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WindowWidth
    path: src/System.Console/src/System/Console.cs
    startLine: 241
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets or sets the width of the console window.</p>\n"
  remarks: "\n<p>Attempting to set the value of the <xref href=\"System.Console.WindowWidth\" data-throw-if-not-resolved=\"false\"></xref> property when output is redirected throws either an <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> or an <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref> exception. To prevent an exception, you can set the value of this property only if the <xref href=\"System.Console.IsOutputRedirected\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>false</strong>. </p>\n"
  syntax:
    content: public static int WindowWidth { get; set; }
    content.vb: Public Shared Property WindowWidth As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The width of the console window measured in columns.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value of the <xref href=\"System.Console.WindowWidth\" data-throw-if-not-resolved=\"false\"></xref> property or the value of the <xref href=\"System.Console.WindowHeight\" data-throw-if-not-resolved=\"false\"></xref> property is less than or equal to 0.</p>\n<p>-or-</p>\n<p>The value of the <xref href=\"System.Console.WindowHeight\" data-throw-if-not-resolved=\"false\"></xref> property plus the value of the <xref href=\"System.Console.WindowTop\" data-throw-if-not-resolved=\"false\"></xref> property is greater than or equal to <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>The value of the <xref href=\"System.Console.WindowWidth\" data-throw-if-not-resolved=\"false\"></xref> property or the value of the <xref href=\"System.Console.WindowHeight\" data-throw-if-not-resolved=\"false\"></xref> property is greater than the largest possible window width or height for the current screen resolution and console font.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>Error reading or writing information.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.WindowLeft
  commentId: P:System.Console.WindowLeft
  id: WindowLeft
  parent: System.Console
  langs:
  - csharp
  - vb
  name: WindowLeft
  nameWithType: Console.WindowLeft
  fullName: System.Console.WindowLeft
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WindowLeft
    path: src/System.Console/src/System/Console.cs
    startLine: 229
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets or sets the leftmost position of the console window area relative to the screen buffer.</p>\n"
  remarks: "\n<p>The console represents a rectangular window into a larger rectangular buffer area. Both the window and the buffer are measured vertically by their number of rows and horizontally by their number of columns. The dimensions of the buffer area are defined by the <xref href=\"System.Console.BufferHeight\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Console.BufferWidth\" data-throw-if-not-resolved=\"false\"></xref> properties. The dimensions of the console area are defined by the <xref href=\"System.Console.WindowHeight\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Console.WindowWidth\" data-throw-if-not-resolved=\"false\"></xref> properties. The <xref href=\"System.Console.WindowLeft\" data-throw-if-not-resolved=\"false\"></xref> property determines which column of the buffer area is displayed in the first column of the console window. The value of the <xref href=\"System.Console.WindowLeft\" data-throw-if-not-resolved=\"false\"></xref> property can range from 0 to <xref href=\"System.Console.BufferWidth\" data-throw-if-not-resolved=\"false\"></xref> - <xref href=\"System.Console.WindowWidth\" data-throw-if-not-resolved=\"false\"></xref>. Attempting to set it to a value outside that range throws an <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>When a console window first opens, the default value of the <xref href=\"System.Console.WindowLeft\" data-throw-if-not-resolved=\"false\"></xref> property is zero, which indicates that the first column shown by the console corresponds to the first column (the column at position zero) in the buffer area. The default width of both the console window and the buffer area is 80 columns. This means that the <xref href=\"System.Console.WindowLeft\" data-throw-if-not-resolved=\"false\"></xref> property can be modified only if the console window is made narrower or the buffer area is made wider.</p>\n<p>Note that if the width of the buffer area exceeds the width of the console window, the value of the <xref href=\"System.Console.WindowLeft\" data-throw-if-not-resolved=\"false\"></xref> property is automatically adjusted when the user uses the horizontal scroll bar to define the window's relationship to the buffer area.</p>\n<p>Attempting to set the value of the <xref href=\"System.Console.WindowLeft\" data-throw-if-not-resolved=\"false\"></xref> property when output is redirected throws an <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref> exception. To prevent the exception, you can set the value of this property only if the <xref href=\"System.Console.IsOutputRedirected\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>false</strong>. </p>\n"
  syntax:
    content: public static int WindowLeft { get; set; }
    content.vb: Public Shared Property WindowLeft As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The leftmost console window position measured in columns.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>In a set operation, the value to be assigned is less than zero.</p>\n<p>-or-</p>\n<p>As a result of the assignment, <xref href=\"System.Console.WindowLeft\" data-throw-if-not-resolved=\"false\"></xref> plus <xref href=\"System.Console.WindowWidth\" data-throw-if-not-resolved=\"false\"></xref> would exceed <xref href=\"System.Console.BufferWidth\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>Error reading or writing information.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.WindowTop
  commentId: P:System.Console.WindowTop
  id: WindowTop
  parent: System.Console
  langs:
  - csharp
  - vb
  name: WindowTop
  nameWithType: Console.WindowTop
  fullName: System.Console.WindowTop
  type: Property
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WindowTop
    path: src/System.Console/src/System/Console.cs
    startLine: 235
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Gets or sets the top position of the console window area relative to the screen buffer.</p>\n"
  remarks: "\n<p>The console represents a rectangular window into a larger rectangular buffer area. Both the window and the buffer are measured vertically by their number of rows and horizontally by their number of columns. The dimensions of the buffer area are defined by the <xref href=\"System.Console.BufferHeight\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Console.BufferWidth\" data-throw-if-not-resolved=\"false\"></xref> properties. The dimensions of the console area are defined by the <xref href=\"System.Console.WindowHeight\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Console.WindowWidth\" data-throw-if-not-resolved=\"false\"></xref> properties. The <xref href=\"System.Console.WindowTop\" data-throw-if-not-resolved=\"false\"></xref> property determines which row of the buffer area is displayed in the first column of the console window. The value of the <xref href=\"System.Console.WindowTop\" data-throw-if-not-resolved=\"false\"></xref> property can range from 0 to <xref href=\"System.Console.BufferHeight\" data-throw-if-not-resolved=\"false\"></xref> - <xref href=\"System.Console.WindowHeight\" data-throw-if-not-resolved=\"false\"></xref>. Attempting to set it to a value outside that range throws an <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>Attempting to set the value of the <xref href=\"System.Console.WindowTop\" data-throw-if-not-resolved=\"false\"></xref> property when output is redirected throws an <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref> exception. To prevent the exception, you can set the value of this property only if the <xref href=\"System.Console.IsOutputRedirected\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>false</strong>. </p>\n"
  syntax:
    content: public static int WindowTop { get; set; }
    content.vb: Public Shared Property WindowTop As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The uppermost console window position measured in rows.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>In a set operation, the value to be assigned is less than zero.</p>\n<p>-or-</p>\n<p>As a result of the assignment, <xref href=\"System.Console.WindowTop\" data-throw-if-not-resolved=\"false\"></xref> plus <xref href=\"System.Console.WindowHeight\" data-throw-if-not-resolved=\"false\"></xref> would exceed <xref href=\"System.Console.BufferHeight\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>Error reading or writing information.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.Write(System.Boolean)
  commentId: M:System.Console.Write(System.Boolean)
  id: Write(System.Boolean)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: Write(Boolean)
  nameWithType: Console.Write(Boolean)
  fullName: System.Console.Write(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Console/src/System/Console.cs
    startLine: 618
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified Boolean value to the standard output stream.</p>\n"
  remarks: "\n<p>The text representation of <em>value</em> is produced by calling <xref href=\"System.Boolean.ToString\" data-throw-if-not-resolved=\"false\"></xref>, which outputs either <xref href=\"System.Boolean.TrueString\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Boolean.FalseString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void Write(bool value)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub Write(value As Boolean)
    parameters:
    - id: value
      type: System.Boolean
      description: "\n<p>The value to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.WriteLine
    commentId: M:System.Console.WriteLine
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.Write(System.Char)
  commentId: M:System.Console.Write(System.Char)
  id: Write(System.Char)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: Write(Char)
  nameWithType: Console.Write(Char)
  fullName: System.Console.Write(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Console/src/System/Console.cs
    startLine: 624
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the specified Unicode character value to the standard output stream.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void Write(char value)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub Write(value As Char)
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The value to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.WriteLine
    commentId: M:System.Console.WriteLine
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.Write(System.Char[])
  commentId: M:System.Console.Write(System.Char[])
  id: Write(System.Char[])
  parent: System.Console
  langs:
  - csharp
  - vb
  name: Write(Char[])
  nameWithType: Console.Write(Char[])
  fullName: System.Console.Write(System.Char[])
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Console/src/System/Console.cs
    startLine: 630
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the specified array of Unicode characters to the standard output stream.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void Write(char[] buffer)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub Write(buffer As Char())
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>A Unicode character array. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.WriteLine
    commentId: M:System.Console.WriteLine
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  nameWithType.vb: Console.Write(Char())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Console.Write(System.Char())
  name.vb: Write(Char())
- uid: System.Console.Write(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Console.Write(System.Char[],System.Int32,System.Int32)
  id: Write(System.Char[],System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: Write(Char[], Int32, Int32)
  nameWithType: Console.Write(Char[], Int32, Int32)
  fullName: System.Console.Write(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Console/src/System/Console.cs
    startLine: 636
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the specified subarray of Unicode characters to the standard output stream.</p>\n"
  remarks: "\n<p>This method writes <em>count</em> characters starting at position <em>index</em> of <em>buffer</em> to the standard output stream.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void Write(char[] buffer, int index, int count)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub Write(buffer As Char(), index As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>An array of Unicode characters. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The starting position in <em>buffer</em>. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of characters to write. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> plus <em>count</em> specify a position that is not within <em>buffer</em>. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.WriteLine
    commentId: M:System.Console.WriteLine
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  nameWithType.vb: Console.Write(Char(), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Console.Write(System.Char(), System.Int32, System.Int32)
  name.vb: Write(Char(), Int32, Int32)
- uid: System.Console.Write(System.Decimal)
  commentId: M:System.Console.Write(System.Decimal)
  id: Write(System.Decimal)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: Write(Decimal)
  nameWithType: Console.Write(Decimal)
  fullName: System.Console.Write(System.Decimal)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Console/src/System/Console.cs
    startLine: 648
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value to the standard output stream.</p>\n"
  remarks: "\n<p>The text representation of <em>value</em> is produced by calling <xref href=\"System.Decimal.ToString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void Write(decimal value)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub Write(value As Decimal)
    parameters:
    - id: value
      type: System.Decimal
      description: "\n<p>The value to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.WriteLine
    commentId: M:System.Console.WriteLine
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.Write(System.Double)
  commentId: M:System.Console.Write(System.Double)
  id: Write(System.Double)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: Write(Double)
  nameWithType: Console.Write(Double)
  fullName: System.Console.Write(System.Double)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Console/src/System/Console.cs
    startLine: 642
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified double-precision floating-point value to the standard output stream.</p>\n"
  remarks: "\n<p>The text representation of <em>value</em> is produced by calling the <xref href=\"System.Double.ToString\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void Write(double value)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub Write(value As Double)
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>The value to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.WriteLine
    commentId: M:System.Console.WriteLine
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.Write(System.Int32)
  commentId: M:System.Console.Write(System.Int32)
  id: Write(System.Int32)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: Write(Int32)
  nameWithType: Console.Write(Int32)
  fullName: System.Console.Write(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Console/src/System/Console.cs
    startLine: 660
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified 32-bit signed integer value to the standard output stream.</p>\n"
  remarks: "\n<p>The text representation of <em>value</em> is produced by calling the <xref href=\"System.Int32.ToString\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void Write(int value)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub Write(value As Integer)
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The value to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.WriteLine
    commentId: M:System.Console.WriteLine
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.Write(System.Int64)
  commentId: M:System.Console.Write(System.Int64)
  id: Write(System.Int64)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: Write(Int64)
  nameWithType: Console.Write(Int64)
  fullName: System.Console.Write(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Console/src/System/Console.cs
    startLine: 673
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified 64-bit signed integer value to the standard output stream.</p>\n"
  remarks: "\n<p>The text representation of <em>value</em> is produced by calling the <xref href=\"System.Int64.ToString\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void Write(long value)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub Write(value As Long)
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The value to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.WriteLine
    commentId: M:System.Console.WriteLine
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.Write(System.Object)
  commentId: M:System.Console.Write(System.Object)
  id: Write(System.Object)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: Write(Object)
  nameWithType: Console.Write(Object)
  fullName: System.Console.Write(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Console/src/System/Console.cs
    startLine: 686
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified object to the standard output stream.</p>\n"
  remarks: "\n<p>If <em>value</em> is <strong>null</strong>, nothing is written and no exception is thrown. Otherwise, the <strong>ToString</strong> method of <em>value</em> is called to produce its string representation, and the resulting string is written to the standard output stream.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void Write(object value)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub Write(value As Object)
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The value to write, or <strong>null</strong>. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.WriteLine
    commentId: M:System.Console.WriteLine
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.Write(System.Single)
  commentId: M:System.Console.Write(System.Single)
  id: Write(System.Single)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: Write(Single)
  nameWithType: Console.Write(Single)
  fullName: System.Console.Write(System.Single)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Console/src/System/Console.cs
    startLine: 654
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified single-precision floating-point value to the standard output stream.</p>\n"
  remarks: "\n<p>The text representation of <em>value</em> is produced by calling the <xref href=\"System.Single.ToString\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void Write(float value)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub Write(value As Single)
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>The value to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.WriteLine
    commentId: M:System.Console.WriteLine
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.Write(System.String)
  commentId: M:System.Console.Write(System.String)
  id: Write(System.String)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: Write(String)
  nameWithType: Console.Write(String)
  fullName: System.Console.Write(System.String)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Console/src/System/Console.cs
    startLine: 692
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the specified string value to the standard output stream.</p>\n"
  remarks: "\n<p>If value is <strong>null</strong>, nothing is written to the standard output stream.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void Write(string value)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub Write(value As String)
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The value to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.WriteLine
    commentId: M:System.Console.WriteLine
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.Write(System.String,System.Object)
  commentId: M:System.Console.Write(System.String,System.Object)
  id: Write(System.String,System.Object)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: Write(String, Object)
  nameWithType: Console.Write(String, Object)
  fullName: System.Console.Write(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Console/src/System/Console.cs
    startLine: 591
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified object to the standard output stream using the specified format information.</p>\n"
  remarks: "\n<p>This method uses the composite formatting feature of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </p>\n<p>The <em>format</em> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </p>\n<p>The syntax of a format item is <strong>{</strong>index[<strong>,</strong>alignment][<strong>:</strong>formatString]<strong>}</strong>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</p>\n<p>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</p>\n<ul><li>\n<p>For more information about the composite formatting feature supported by methods such as <xref href=\"System.String.Format(System.IFormatProvider,System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, and some overloads of <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref>, see Composite Formatting. </p>\n</li><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about date and time format specifiers, see Standard Date and Time Format Strings and Custom Date and Time Format Strings. </p>\n</li><li>\n<p>For more information about enumeration format specifiers, see Enumeration Format Strings.</p>\n</li><li>\n<p>For more information about formatting, see Formatting Types in the .NET Framework. </p>\n</li></ul>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void Write(string format, object arg0)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub Write(format As String, arg0 As Object)
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks). </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>An object to write using <em>format</em>. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The format specification in <em>format</em> is invalid. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.WriteLine
    commentId: M:System.Console.WriteLine
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.Write(System.String,System.Object,System.Object)
  commentId: M:System.Console.Write(System.String,System.Object,System.Object)
  id: Write(System.String,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: Write(String, Object, Object)
  nameWithType: Console.Write(String, Object, Object)
  fullName: System.Console.Write(System.String, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Console/src/System/Console.cs
    startLine: 597
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified objects to the standard output stream using the specified format information.</p>\n"
  remarks: "\n<p>This method uses the composite formatting feature of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </p>\n<p>The <em>format</em> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </p>\n<p>The syntax of a format item is <strong>{</strong>index[<strong>,</strong>alignment][<strong>:</strong>formatString]<strong>}</strong>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</p>\n<p>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</p>\n<ul><li>\n<p>For more information about the composite formatting feature supported by methods such as <xref href=\"System.String.Format(System.IFormatProvider,System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, and some overloads of <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref>, see Composite Formatting. </p>\n</li><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about date and time format specifiers, see Standard Date and Time Format Strings and Custom Date and Time Format Strings. </p>\n</li><li>\n<p>For more information about enumeration format specifiers, see Enumeration Format Strings.</p>\n</li><li>\n<p>For more information about formatting, see Formatting Types in the .NET Framework. </p>\n</li></ul>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void Write(string format, object arg0, object arg1)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub Write(format As String, arg0 As Object, arg1 As Object)
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks).</p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to write using <em>format</em>. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to write using <em>format</em>. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The format specification in <em>format</em> is invalid. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.WriteLine
    commentId: M:System.Console.WriteLine
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.Write(System.String,System.Object,System.Object,System.Object)
  commentId: M:System.Console.Write(System.String,System.Object,System.Object,System.Object)
  id: Write(System.String,System.Object,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: Write(String, Object, Object, Object)
  nameWithType: Console.Write(String, Object, Object, Object)
  fullName: System.Console.Write(System.String, System.Object, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Console/src/System/Console.cs
    startLine: 603
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified objects to the standard output stream using the specified format information.</p>\n"
  remarks: "\n<p>This method uses the composite formatting feature of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </p>\n<p>The <em>format</em> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </p>\n<p>The syntax of a format item is <strong>{</strong>index[<strong>,</strong>alignment][<strong>:</strong>formatString]<strong>}</strong>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</p>\n<p>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</p>\n<ul><li>\n<p>For more information about the composite formatting feature supported by methods such as <xref href=\"System.String.Format(System.IFormatProvider,System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, and some overloads of <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref>, see Composite Formatting. </p>\n</li><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about date and time format specifiers, see Standard Date and Time Format Strings and Custom Date and Time Format Strings. </p>\n</li><li>\n<p>For more information about enumeration format specifiers, see Enumeration Format Strings.</p>\n</li><li>\n<p>For more information about formatting, see Formatting Types in the .NET Framework. </p>\n</li></ul>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void Write(string format, object arg0, object arg1, object arg2)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub Write(format As String, arg0 As Object, arg1 As Object, arg2 As Object)
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks).</p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to write using <em>format</em>. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to write using <em>format</em>. </p>\n"
    - id: arg2
      type: System.Object
      description: "\n<p>The third object to write using <em>format</em>. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The format specification in <em>format</em> is invalid. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.WriteLine
    commentId: M:System.Console.WriteLine
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.Write(System.String,System.Object[])
  commentId: M:System.Console.Write(System.String,System.Object[])
  id: Write(System.String,System.Object[])
  parent: System.Console
  langs:
  - csharp
  - vb
  name: Write(String, Object[])
  nameWithType: Console.Write(String, Object[])
  fullName: System.Console.Write(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Console/src/System/Console.cs
    startLine: 609
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified array of objects to the standard output stream using the specified format information.</p>\n"
  remarks: "\n<p>This method uses the  composite formatting feature of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </p>\n<p>The <em>format</em> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </p>\n<p>The syntax of a format item is <strong>{</strong>index[<strong>,</strong>alignment][<strong>:</strong>formatString]<strong>}</strong>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</p>\n<p>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</p>\n<ul><li>\n<p>For more information about the composite formatting feature supported by methods such as <xref href=\"System.String.Format(System.IFormatProvider,System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, and some overloads of <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref>, see Composite Formatting. </p>\n</li><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about date and time format specifiers, see Standard Date and Time Format Strings and Custom Date and Time Format Strings. </p>\n</li><li>\n<p>For more information about enumeration format specifiers, see Enumeration Format Strings.</p>\n</li><li>\n<p>For more information about formatting, see Formatting Types in the .NET Framework. </p>\n</li></ul>\n<p>The <em>arg</em> parameter is a parameter array. Arguments  can be passed to the method either as an array or as list of five or more items. The examples illustrate both forms of method call.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void Write(string format, params object[] arg)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub Write(format As String, ParamArray arg As Object())
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks).</p>\n"
    - id: arg
      type: System.Object[]
      description: "\n<p>An array of objects to write using <em>format</em>. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> or <em>arg</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The format specification in <em>format</em> is invalid. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.WriteLine
    commentId: M:System.Console.WriteLine
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  nameWithType.vb: Console.Write(String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Console.Write(System.String, System.Object())
  name.vb: Write(String, Object())
- uid: System.Console.Write(System.UInt32)
  commentId: M:System.Console.Write(System.UInt32)
  id: Write(System.UInt32)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: Write(UInt32)
  nameWithType: Console.Write(UInt32)
  fullName: System.Console.Write(System.UInt32)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Console/src/System/Console.cs
    startLine: 666
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified 32-bit unsigned integer value to the standard output stream.</p>\n"
  remarks: "\n<p>The text representation of <em>value</em> is produced by calling the <xref href=\"System.UInt32.ToString\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void Write(uint value)
    content.vb: >-
      <CLSCompliant(False)>

      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub Write(value As UInteger)
    parameters:
    - id: value
      type: System.UInt32
      description: "\n<p>The value to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.WriteLine
    commentId: M:System.Console.WriteLine
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.Write(System.UInt64)
  commentId: M:System.Console.Write(System.UInt64)
  id: Write(System.UInt64)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: Write(UInt64)
  nameWithType: Console.Write(UInt64)
  fullName: System.Console.Write(System.UInt64)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Console/src/System/Console.cs
    startLine: 679
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified 64-bit unsigned integer value to the standard output stream.</p>\n"
  remarks: "\n<p>The text representation of <em>value</em> is produced by calling the <xref href=\"System.UInt64.ToString\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void Write(ulong value)
    content.vb: >-
      <CLSCompliant(False)>

      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub Write(value As ULong)
    parameters:
    - id: value
      type: System.UInt64
      description: "\n<p>The value to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.WriteLine
    commentId: M:System.Console.WriteLine
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.WriteLine
  commentId: M:System.Console.WriteLine
  id: WriteLine
  parent: System.Console
  langs:
  - csharp
  - vb
  name: WriteLine()
  nameWithType: Console.WriteLine()
  fullName: System.Console.WriteLine()
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.Console/src/System/Console.cs
    startLine: 478
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the current line terminator to the standard output stream.</p>\n"
  remarks: "\n<p>The default line terminator is a string whose value is a carriage return followed by a line feed (\"\\r\\n\" in C#, or <strong>vbCrLf</strong> in Visual Basic). You can change the line terminator by setting the <xref href=\"System.IO.TextWriter.NewLine\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.Console.Out\" data-throw-if-not-resolved=\"false\"></xref> property to another string. The example provides an illustration.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void WriteLine()
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub WriteLine
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.Write(System.String,System.Object)
    commentId: M:System.Console.Write(System.String,System.Object)
  - type: System.IO.TextWriter.NewLine
    commentId: P:System.IO.TextWriter.NewLine
  - type: System.Console.Out
    commentId: P:System.Console.Out
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.WriteLine(System.Boolean)
  commentId: M:System.Console.WriteLine(System.Boolean)
  id: WriteLine(System.Boolean)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: WriteLine(Boolean)
  nameWithType: Console.WriteLine(Boolean)
  fullName: System.Console.WriteLine(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.Console/src/System/Console.cs
    startLine: 484
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified Boolean value, followed by the current line terminator, to the standard output stream.</p>\n"
  remarks: "\n<p>The text representation of <em>value</em> is produced by calling the <xref href=\"System.Boolean.ToString\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>For more information about the line terminator, see the Remarks section of the <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref> method that takes no parameters.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void WriteLine(bool value)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub WriteLine(value As Boolean)
    parameters:
    - id: value
      type: System.Boolean
      description: "\n<p>The value to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.Write(System.String,System.Object)
    commentId: M:System.Console.Write(System.String,System.Object)
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.WriteLine(System.Char)
  commentId: M:System.Console.WriteLine(System.Char)
  id: WriteLine(System.Char)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: WriteLine(Char)
  nameWithType: Console.WriteLine(Char)
  fullName: System.Console.WriteLine(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.Console/src/System/Console.cs
    startLine: 490
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the specified Unicode character, followed by the current line terminator, value to the standard output stream.</p>\n"
  remarks: "\n<p>For more information about the line terminator, see the Remarks section of the <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref> method that takes no parameters.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void WriteLine(char value)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub WriteLine(value As Char)
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The value to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.Write(System.String,System.Object)
    commentId: M:System.Console.Write(System.String,System.Object)
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.WriteLine(System.Char[])
  commentId: M:System.Console.WriteLine(System.Char[])
  id: WriteLine(System.Char[])
  parent: System.Console
  langs:
  - csharp
  - vb
  name: WriteLine(Char[])
  nameWithType: Console.WriteLine(Char[])
  fullName: System.Console.WriteLine(System.Char[])
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.Console/src/System/Console.cs
    startLine: 496
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the specified array of Unicode characters, followed by the current line terminator, to the standard output stream.</p>\n"
  remarks: "\n<p>For more information about the line terminator, see the Remarks section of the <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref> method that takes no parameters.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void WriteLine(char[] buffer)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub WriteLine(buffer As Char())
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>A Unicode character array. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.Write(System.String,System.Object)
    commentId: M:System.Console.Write(System.String,System.Object)
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  nameWithType.vb: Console.WriteLine(Char())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Console.WriteLine(System.Char())
  name.vb: WriteLine(Char())
- uid: System.Console.WriteLine(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Console.WriteLine(System.Char[],System.Int32,System.Int32)
  id: WriteLine(System.Char[],System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: WriteLine(Char[], Int32, Int32)
  nameWithType: Console.WriteLine(Char[], Int32, Int32)
  fullName: System.Console.WriteLine(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.Console/src/System/Console.cs
    startLine: 502
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the specified subarray of Unicode characters, followed by the current line terminator, to the standard output stream.</p>\n"
  remarks: "\n<p>This method writes <em>count</em> characters starting at position <em>index</em> of <em>buffer</em> to the standard output stream.</p>\n<p>For more information about the line terminator, see the Remarks section of the <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref> method that takes no parameters.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void WriteLine(char[] buffer, int index, int count)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub WriteLine(buffer As Char(), index As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>An array of Unicode characters. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The starting position in <em>buffer</em>. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of characters to write. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> plus <em>count</em> specify a position that is not within <em>buffer</em>. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.Write(System.String,System.Object)
    commentId: M:System.Console.Write(System.String,System.Object)
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  nameWithType.vb: Console.WriteLine(Char(), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Console.WriteLine(System.Char(), System.Int32, System.Int32)
  name.vb: WriteLine(Char(), Int32, Int32)
- uid: System.Console.WriteLine(System.Decimal)
  commentId: M:System.Console.WriteLine(System.Decimal)
  id: WriteLine(System.Decimal)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: WriteLine(Decimal)
  nameWithType: Console.WriteLine(Decimal)
  fullName: System.Console.WriteLine(System.Decimal)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.Console/src/System/Console.cs
    startLine: 508
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> value, followed by the current line terminator, to the standard output stream.</p>\n"
  remarks: "\n<p>The text representation of <em>value</em> is produced by calling the <xref href=\"System.Decimal.ToString\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>For more information about the line terminator, see the Remarks section of the <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref> method that takes no parameters.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void WriteLine(decimal value)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub WriteLine(value As Decimal)
    parameters:
    - id: value
      type: System.Decimal
      description: "\n<p>The value to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.Write(System.String,System.Object)
    commentId: M:System.Console.Write(System.String,System.Object)
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.WriteLine(System.Double)
  commentId: M:System.Console.WriteLine(System.Double)
  id: WriteLine(System.Double)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: WriteLine(Double)
  nameWithType: Console.WriteLine(Double)
  fullName: System.Console.WriteLine(System.Double)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.Console/src/System/Console.cs
    startLine: 514
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified double-precision floating-point value, followed by the current line terminator, to the standard output stream.</p>\n"
  remarks: "\n<p>The text representation of <em>value</em> is produced by calling the <xref href=\"System.Double.ToString\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>For more information about the line terminator, see the Remarks section of the <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref> method that takes no parameters.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void WriteLine(double value)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub WriteLine(value As Double)
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>The value to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.Write(System.String,System.Object)
    commentId: M:System.Console.Write(System.String,System.Object)
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.WriteLine(System.Int32)
  commentId: M:System.Console.WriteLine(System.Int32)
  id: WriteLine(System.Int32)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: WriteLine(Int32)
  nameWithType: Console.WriteLine(Int32)
  fullName: System.Console.WriteLine(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.Console/src/System/Console.cs
    startLine: 526
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified 32-bit signed integer value, followed by the current line terminator, to the standard output stream.</p>\n"
  remarks: "\n<p>The text representation of <em>value</em> is produced by calling the <xref href=\"System.Int32.ToString\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>For more information about the line terminator, see the Remarks section of the <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref> method that takes no parameters.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void WriteLine(int value)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub WriteLine(value As Integer)
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The value to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.Write(System.String,System.Object)
    commentId: M:System.Console.Write(System.String,System.Object)
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.WriteLine(System.Int64)
  commentId: M:System.Console.WriteLine(System.Int64)
  id: WriteLine(System.Int64)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: WriteLine(Int64)
  nameWithType: Console.WriteLine(Int64)
  fullName: System.Console.WriteLine(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.Console/src/System/Console.cs
    startLine: 539
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified 64-bit signed integer value, followed by the current line terminator, to the standard output stream.</p>\n"
  remarks: "\n<p>The text representation of <em>value</em> is produced by calling the <xref href=\"System.Int64.ToString\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>For more information about the line terminator, see the Remarks section of the <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref> method that takes no parameters.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void WriteLine(long value)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub WriteLine(value As Long)
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The value to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.Write(System.String,System.Object)
    commentId: M:System.Console.Write(System.String,System.Object)
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.WriteLine(System.Object)
  commentId: M:System.Console.WriteLine(System.Object)
  id: WriteLine(System.Object)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: WriteLine(Object)
  nameWithType: Console.WriteLine(Object)
  fullName: System.Console.WriteLine(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.Console/src/System/Console.cs
    startLine: 552
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream.</p>\n"
  remarks: "\n<p>If <em>value</em> is <strong>null</strong>, only the line terminator is written. Otherwise, the <strong>ToString</strong> method of <em>value</em> is called to produce its string representation, and the resulting string is written to the standard output stream.</p>\n<p>For more information about the line terminator, see the Remarks section of the <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref> method that takes no parameters.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void WriteLine(object value)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub WriteLine(value As Object)
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The value to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.Write(System.String,System.Object)
    commentId: M:System.Console.Write(System.String,System.Object)
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.WriteLine(System.Single)
  commentId: M:System.Console.WriteLine(System.Single)
  id: WriteLine(System.Single)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: WriteLine(Single)
  nameWithType: Console.WriteLine(Single)
  fullName: System.Console.WriteLine(System.Single)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.Console/src/System/Console.cs
    startLine: 520
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified single-precision floating-point value, followed by the current line terminator, to the standard output stream.</p>\n"
  remarks: "\n<p>The text representation of <em>value</em> is produced by calling the <xref href=\"System.Single.ToString\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>For more information about the line terminator, see the Remarks section of the <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref> method that takes no parameters.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void WriteLine(float value)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub WriteLine(value As Single)
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>The value to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.Write(System.String,System.Object)
    commentId: M:System.Console.Write(System.String,System.Object)
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.WriteLine(System.String)
  commentId: M:System.Console.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: WriteLine(String)
  nameWithType: Console.WriteLine(String)
  fullName: System.Console.WriteLine(System.String)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.Console/src/System/Console.cs
    startLine: 558
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the specified string value, followed by the current line terminator, to the standard output stream.</p>\n"
  remarks: "\n<p>If value is <strong>null</strong>, only the line terminator is written to the standard output stream.</p>\n<p>For more information about the line terminator, see the Remarks section of the <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void WriteLine(string value)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub WriteLine(value As String)
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The value to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.Write(System.String,System.Object)
    commentId: M:System.Console.Write(System.String,System.Object)
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.WriteLine(System.String,System.Object)
  commentId: M:System.Console.WriteLine(System.String,System.Object)
  id: WriteLine(System.String,System.Object)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: WriteLine(String, Object)
  nameWithType: Console.WriteLine(String, Object)
  fullName: System.Console.WriteLine(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.Console/src/System/Console.cs
    startLine: 564
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified object, followed by the current line terminator, to the standard output stream using the specified format information.</p>\n"
  remarks: "\n<p>This method uses the composite formatting feature of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </p>\n<p>The <em>format</em> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </p>\n<p>The syntax of a format item is <strong>{</strong>index[<strong>,</strong>alignment][<strong>:</strong>formatString]<strong>}</strong>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</p>\n<p>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</p>\n<ul><li>\n<p>For more information about the composite formatting feature supported by methods such as <xref href=\"System.String.Format(System.IFormatProvider,System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, and some overloads of <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref>, see Composite Formatting. </p>\n</li><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about date and time format specifiers, see Standard Date and Time Format Strings and Custom Date and Time Format Strings. </p>\n</li><li>\n<p>For more information about enumeration format specifiers, see Enumeration Format Strings.</p>\n</li><li>\n<p>For more information about formatting, see Formatting Types in the .NET Framework. </p>\n</li></ul>\n<p>For more information about the line terminator, see the Remarks section of the <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref> method that takes no parameters.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void WriteLine(string format, object arg0)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub WriteLine(format As String, arg0 As Object)
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks).</p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>An object to write using <em>format</em>. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The format specification in <em>format</em> is invalid. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.Write(System.String,System.Object)
    commentId: M:System.Console.Write(System.String,System.Object)
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.WriteLine(System.String,System.Object,System.Object)
  commentId: M:System.Console.WriteLine(System.String,System.Object,System.Object)
  id: WriteLine(System.String,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: WriteLine(String, Object, Object)
  nameWithType: Console.WriteLine(String, Object, Object)
  fullName: System.Console.WriteLine(System.String, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.Console/src/System/Console.cs
    startLine: 570
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</p>\n"
  remarks: "\n<p>This method uses the composite formatting feature of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </p>\n<p>The <em>format</em> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </p>\n<p>The syntax of a format item is <strong>{</strong>index[<strong>,</strong>alignment][<strong>:</strong>formatString]<strong>}</strong>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</p>\n<p>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</p>\n<ul><li>\n<p>For more information about the composite formatting feature supported by methods such as <xref href=\"System.String.Format(System.IFormatProvider,System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, and some overloads of <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref>, see Composite Formatting. </p>\n</li><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about date and time format specifiers, see Standard Date and Time Format Strings and Custom Date and Time Format Strings. </p>\n</li><li>\n<p>For more information about enumeration format specifiers, see Enumeration Format Strings.</p>\n</li><li>\n<p>For more information about formatting, see Formatting Types in the .NET Framework. </p>\n</li></ul>\n<p>For more information about the line terminator, see the Remarks section of the <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref> method that takes no parameters.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void WriteLine(string format, object arg0, object arg1)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub WriteLine(format As String, arg0 As Object, arg1 As Object)
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks).</p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to write using <em>format</em>. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to write using <em>format</em>. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The format specification in <em>format</em> is invalid. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.Write(System.String,System.Object)
    commentId: M:System.Console.Write(System.String,System.Object)
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)
  commentId: M:System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)
  id: WriteLine(System.String,System.Object,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: WriteLine(String, Object, Object, Object)
  nameWithType: Console.WriteLine(String, Object, Object, Object)
  fullName: System.Console.WriteLine(System.String, System.Object, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.Console/src/System/Console.cs
    startLine: 576
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified objects, followed by the current line terminator, to the standard output stream using the specified format information.</p>\n"
  remarks: "\n<p>This method uses the composite formatting feature of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </p>\n<p>The <em>format</em> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </p>\n<p>The syntax of a format item is <strong>{</strong>index[<strong>,</strong>alignment][<strong>:</strong>formatString]<strong>}</strong>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</p>\n<p>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</p>\n<ul><li>\n<p>For more information about the composite formatting feature supported by methods such as <xref href=\"System.String.Format(System.IFormatProvider,System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, and some overloads of <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref>, see Composite Formatting. </p>\n</li><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about date and time format specifiers, see Standard Date and Time Format Strings and Custom Date and Time Format Strings. </p>\n</li><li>\n<p>For more information about enumeration format specifiers, see Enumeration Format Strings.</p>\n</li><li>\n<p>For more information about formatting, see Formatting Types in the .NET Framework. </p>\n</li></ul>\n<p>For more information about the line terminator, see the Remarks section of the <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref> method that takes no parameters.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void WriteLine(string format, object arg0, object arg1, object arg2)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub WriteLine(format As String, arg0 As Object, arg1 As Object, arg2 As Object)
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks).</p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to write using <em>format</em>. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to write using <em>format</em>. </p>\n"
    - id: arg2
      type: System.Object
      description: "\n<p>The third object to write using <em>format</em>. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The format specification in <em>format</em> is invalid. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.Write(System.String,System.Object)
    commentId: M:System.Console.Write(System.String,System.Object)
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.WriteLine(System.String,System.Object[])
  commentId: M:System.Console.WriteLine(System.String,System.Object[])
  id: WriteLine(System.String,System.Object[])
  parent: System.Console
  langs:
  - csharp
  - vb
  name: WriteLine(String, Object[])
  nameWithType: Console.WriteLine(String, Object[])
  fullName: System.Console.WriteLine(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.Console/src/System/Console.cs
    startLine: 582
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified array of objects, followed by the current line terminator, to the standard output stream using the specified format information.</p>\n"
  remarks: "\n<p>This method uses the  composite formatting feature of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream. </p>\n<p>The <em>format</em> parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object. </p>\n<p>The syntax of a format item is <strong>{</strong>index[<strong>,</strong>alignment][<strong>:</strong>formatString]<strong>}</strong>, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.</p>\n<p>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.</p>\n<ul><li>\n<p>For more information about the composite formatting feature supported by methods such as <xref href=\"System.String.Format(System.IFormatProvider,System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, and some overloads of <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref>, see Composite Formatting. </p>\n</li><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about date and time format specifiers, see Standard Date and Time Format Strings and Custom Date and Time Format Strings. </p>\n</li><li>\n<p>For more information about enumeration format specifiers, see Enumeration Format Strings.</p>\n</li><li>\n<p>For more information about formatting, see Formatting Types in the .NET Framework. </p>\n</li></ul>\n<p>For more information about the line terminator, see the Remarks section of the <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref> method that takes no parameters.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void WriteLine(string format, params object[] arg)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub WriteLine(format As String, ParamArray arg As Object())
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks).</p>\n"
    - id: arg
      type: System.Object[]
      description: "\n<p>An array of objects to write using <em>format</em>. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> or <em>arg</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The format specification in <em>format</em> is invalid. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.Write(System.String,System.Object)
    commentId: M:System.Console.Write(System.String,System.Object)
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  nameWithType.vb: Console.WriteLine(String, Object())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Console.WriteLine(System.String, System.Object())
  name.vb: WriteLine(String, Object())
- uid: System.Console.WriteLine(System.UInt32)
  commentId: M:System.Console.WriteLine(System.UInt32)
  id: WriteLine(System.UInt32)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: WriteLine(UInt32)
  nameWithType: Console.WriteLine(UInt32)
  fullName: System.Console.WriteLine(System.UInt32)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.Console/src/System/Console.cs
    startLine: 532
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified 32-bit unsigned integer value, followed by the current line terminator, to the standard output stream.</p>\n"
  remarks: "\n<p>The text representation of <em>value</em> is produced by calling the <xref href=\"System.UInt32.ToString\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>For more information about the line terminator, see the Remarks section of the <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref> method that takes no parameters.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void WriteLine(uint value)
    content.vb: >-
      <CLSCompliant(False)>

      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub WriteLine(value As UInteger)
    parameters:
    - id: value
      type: System.UInt32
      description: "\n<p>The value to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.Write(System.String,System.Object)
    commentId: M:System.Console.Write(System.String,System.Object)
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Console.WriteLine(System.UInt64)
  commentId: M:System.Console.WriteLine(System.UInt64)
  id: WriteLine(System.UInt64)
  parent: System.Console
  langs:
  - csharp
  - vb
  name: WriteLine(UInt64)
  nameWithType: Console.WriteLine(UInt64)
  fullName: System.Console.WriteLine(System.UInt64)
  type: Method
  source:
    remote:
      path: src/System.Console/src/System/Console.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteLine
    path: src/System.Console/src/System/Console.cs
    startLine: 545
  assemblies:
  - System.Console
  namespace: System
  summary: "\n<p>Writes the text representation of the specified 64-bit unsigned integer value, followed by the current line terminator, to the standard output stream.</p>\n"
  remarks: "\n<p>The text representation of <em>value</em> is produced by calling the <xref href=\"System.UInt64.ToString\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>For more information about the line terminator, see the Remarks section of the <xref href=\"System.Console.WriteLine\" data-throw-if-not-resolved=\"false\"></xref> method that takes no parameters.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      [MethodImpl(MethodImplOptions.NoInlining)]

      public static void WriteLine(ulong value)
    content.vb: >-
      <CLSCompliant(False)>

      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Sub WriteLine(value As ULong)
    parameters:
    - id: value
      type: System.UInt64
      description: "\n<p>The value to write. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  seealso:
  - type: System.Console.Read
    commentId: M:System.Console.Read
  - type: System.Console.ReadLine
    commentId: M:System.Console.ReadLine
  - type: System.Console.Write(System.String,System.Object)
    commentId: M:System.Console.Write(System.String,System.Object)
  see:
  - type: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
  commentId: N:System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
  commentId: T:System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
- uid: System.ConsoleColor
  parent: System
  isExternal: false
  name: ConsoleColor
  nameWithType: ConsoleColor
  fullName: System.ConsoleColor
  commentId: T:System.ConsoleColor
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
  commentId: T:System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
  commentId: T:System.Boolean
- uid: System.ConsoleCancelEventHandler
  parent: System
  isExternal: false
  name: ConsoleCancelEventHandler
  nameWithType: ConsoleCancelEventHandler
  fullName: System.ConsoleCancelEventHandler
  commentId: T:System.ConsoleCancelEventHandler
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: false
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
  commentId: T:System.IO.TextWriter
- uid: System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
  commentId: N:System.IO
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: false
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
  commentId: T:System.Text.Encoding
- uid: System.Text
  isExternal: false
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
  commentId: N:System.Text
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: false
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
  commentId: T:System.IO.TextReader
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
  commentId: T:System.Char
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
  commentId: T:System.IO.Stream
- uid: System.ConsoleKeyInfo
  parent: System
  isExternal: false
  name: ConsoleKeyInfo
  nameWithType: ConsoleKeyInfo
  fullName: System.ConsoleKeyInfo
  commentId: T:System.ConsoleKeyInfo
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
  commentId: T:System.String
- uid: System.Char[]
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  nameWithType.vb: Char()
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
  commentId: T:System.Decimal
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
  commentId: T:System.Double
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
  commentId: T:System.Int64
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
  commentId: T:System.Single
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
  commentId: T:System.UInt32
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
  commentId: T:System.UInt64
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
  commentId: T:System.Security.SecurityException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  nameWithType: IOException
  fullName: System.IO.IOException
  commentId: T:System.IO.IOException
- uid: System.Security.HostProtectionException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  nameWithType: OutOfMemoryException
  fullName: System.OutOfMemoryException
  commentId: T:System.OutOfMemoryException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  nameWithType: FormatException
  fullName: System.FormatException
  commentId: T:System.FormatException
