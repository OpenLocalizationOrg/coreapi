items:
- uid: System.Data.Common.DbConnectionStringBuilder
  commentId: T:System.Data.Common.DbConnectionStringBuilder
  id: DbConnectionStringBuilder
  parent: System.Data.Common
  children:
  - System.Data.Common.DbConnectionStringBuilder.#ctor
  - System.Data.Common.DbConnectionStringBuilder.Add(System.String,System.Object)
  - System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String)
  - System.Data.Common.DbConnectionStringBuilder.Clear
  - System.Data.Common.DbConnectionStringBuilder.ConnectionString
  - System.Data.Common.DbConnectionStringBuilder.ContainsKey(System.String)
  - System.Data.Common.DbConnectionStringBuilder.Count
  - System.Data.Common.DbConnectionStringBuilder.EquivalentTo(System.Data.Common.DbConnectionStringBuilder)
  - System.Data.Common.DbConnectionStringBuilder.Item(System.String)
  - System.Data.Common.DbConnectionStringBuilder.Keys
  - System.Data.Common.DbConnectionStringBuilder.Remove(System.String)
  - System.Data.Common.DbConnectionStringBuilder.ShouldSerialize(System.String)
  - System.Data.Common.DbConnectionStringBuilder.ToString
  - System.Data.Common.DbConnectionStringBuilder.TryGetValue(System.String,System.Object@)
  - System.Data.Common.DbConnectionStringBuilder.Values
  langs:
  - csharp
  - vb
  name: DbConnectionStringBuilder
  fullName: System.Data.Common.DbConnectionStringBuilder
  type: Class
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DbConnectionStringBuilder
    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
    startLine: 21
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Provides a base class for strongly typed connection string builders.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class provides the base class from which the strongly typed connection string builders (<xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Data.OleDb.OleDbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>, and so on) derive. The connection string builders let developers programmatically create syntactically correct connection strings, and parse and rebuild existing connection strings. </p>\n<p>The <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> has been defined in a database-agnostic manner. Because of the addition of the <xref href=\"System.Data.Common\" data-throw-if-not-resolved=\"false\"></xref> namespace, developers require a base class against which they can program in order to build connection strings that can work against an arbitrary database. Therefore, the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class lets users assign arbitrary key/value pairs and pass the resulting connection string to a strongly typed provider. All the data providers that are included as part of the .NET Framework provide a strongly typed class that inherits from <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>: <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Data.OracleClient.OracleConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Data.Odbc.OdbcConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Data.OleDb.OleDbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The developer can build, assign, and edit connection strings for any arbitrary provider. For providers that support specific key/value pairs, the connection string builder provides strongly typed properties corresponding to the known pairs. In order to support providers that require the ability to support unknown values, developers can also supply arbitrary key/value pairs.</p>\n<p>The <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class implements the <xref href=\"System.ComponentModel.ICustomTypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> interface. This means that the class works with Visual Studio designers at design time. When developers use the designer to build strongly typed DataSets and strongly typed connections within Visual Studio, the strongly typed connection string builder class will display the properties associated with its type and will also have converters that can map common values for known keys.</p>\n<p>Developers needing to create connection strings as part of applications can use the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class or one of its strongly typed derivatives to build and modify connection strings. The <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class also makes it easy to manage connection strings stored in an application configuration file.</p>\n<p>Developers can create connection strings using either a strongly typed connection string builder class, or they can use the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class. The <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> performs no checks for valid key/value pairs. Therefore, it is possible using this class to create invalid connection strings. The <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> supports only key/value pairs that are supported by SQL Server; trying to add invalid pairs will throw an exception.</p>\n<p>Both the <xref href=\"System.Data.Common.DbConnectionStringBuilder.Add(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method and <xref href=\"System.Data.Common.DbConnectionStringBuilder.Item(System.String)\" data-throw-if-not-resolved=\"false\"></xref> property handle tries to insert malicious entries. For example, the following code correctly escapes the nested key/value pair:</p>\n<p>[Visual Basic]</p>\n<pre><code>Dim builder As New System.Data.Common.DbConnectionStringBuilder\nbuilder(\"Data Source\") = \"(local)\"\nbuilder(\"integrated sSecurity\") = True\nbuilder(\"Initial Catalog\") = \"AdventureWorks;NewValue=Bad\"</code></pre>\n<p>[C#]</p>\n<pre><code>System.Data.Common.DbConnectionStringBuilder builder = \nnew System.Data.Common.DbConnectionStringBuilder();\nbuilder[\"Data Source\"] = \"(local)\";\nbuilder[\"integrated Security\"] = true;\nbuilder[\"Initial Catalog\"] = \"AdventureWorks;NewValue=Bad\";</code></pre>\n<p>The result is the following connection string that handles the invalid value in a safe manner:</p>\n<pre><code>data source=(local);integrated security=True;\ninitial catalog=\"AdventureWorks;NewValue=Bad\"</code></pre>\n"
  example:
  - "\n<p>The following console application builds two connection strings, one for a Microsoft Jet database, and one for a SQL Server database. In each case, the code uses a generic <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class to create the connection string, and then passes the <xref href=\"System.Data.Common.DbConnectionStringBuilder.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> instance to the constructor of the strongly type connection class. This is not required; the code could also have created individual strongly typed connection string builder instances. The example also parses an existing connection string, and demonstrates various ways of manipulating the connection string's contents.</p>DataWorks DbConnectionStringBuilder#1"
  syntax:
    content: 'public class DbConnectionStringBuilder : Collections.ICollection, Collections.IDictionary, Collections.IEnumerable, Collections.ICollection'
    content.vb: >-
      Public Class DbConnectionStringBuilder
          Inherits Collections.ICollection
          Implements Collections.IDictionary, Collections.IEnumerable, Collections.ICollection
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  - System.Collections.IEnumerable
  - System.Collections.ICollection
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Data.Common.DbConnectionStringBuilder.#ctor
  commentId: M:System.Data.Common.DbConnectionStringBuilder.#ctor
  id: '#ctor'
  parent: System.Data.Common.DbConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: DbConnectionStringBuilder()
  fullName: System.Data.Common.DbConnectionStringBuilder.DbConnectionStringBuilder()
  type: Constructor
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
    startLine: 31
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public DbConnectionStringBuilder()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.Common.DbConnectionStringBuilder.ConnectionString
  commentId: P:System.Data.Common.DbConnectionStringBuilder.ConnectionString
  id: ConnectionString
  parent: System.Data.Common.DbConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: ConnectionString
  fullName: System.Data.Common.DbConnectionStringBuilder.ConnectionString
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConnectionString
    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
    startLine: 91
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets or sets the connection string associated with the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This property returns a semicolon-delimited list of key/value pairs stored within the collection maintained by the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>. Each pair contains the key and value, separated by an equal sign. The following example illustrates a typical connection string.</p>\n<pre><code>\"Persist Security Info=False;Integrated Security=SSPI;Initial Catalog=AdventureWorks;Data Source=(local)\"</code></pre>\n<p>Data providers may expect specific keys and values for each connection string property. , These values are documented individually. The <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class does not validate the key/value pairs associated with its connection string, although classes that inherit from it can.</p>\n<p>The <xref href=\"System.Data.Common.DbConnectionStringBuilder.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class acts generally as a mechanism for creating and parsing semicolon-delimited lists of key/value pairs separated with equal signs. It provides no validation or other support specific to connection strings. If you add items to the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> collection, the <xref href=\"System.Data.Common.DbConnectionStringBuilder.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref> property will reflect the changes. If you assign a value to the <xref href=\"System.Data.Common.DbConnectionStringBuilder.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref> property, the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> will try to parse the value, using the semicolon and equal-sign delimiters.</p>\n"
  example:
  - "\n<p>The following example demonstrates possible behaviors of the <xref href=\"System.Data.Common.DbConnectionStringBuilder.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref> property. The example:</p>\n<ul><li>\n<p>Creates a connection string by adding key/value pairs, one at a time, to an empty <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n</li><li>\n<p>Assigns a complete connection string to the <xref href=\"System.Data.Common.DbConnectionStringBuilder.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> instance, and modifies a single key/value pair within the string.</p>\n</li><li>\n<p>Assigns an arbitrary set of key/value pairs to the <xref href=\"System.Data.Common.DbConnectionStringBuilder.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref> property (that is, a string that is not anything remotely like a connection string), and modifies one of the values.</p>\n</li><li>\n<p>Assigns an invalid connection string to the <xref href=\"System.Data.Common.DbConnectionStringBuilder.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref> property, demonstrating the exception that is thrown.</p>\n</li></ul>\n<p> This example includes a password to demonstrate how <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> works with connection strings. In your applications, we recommend that you use Windows Authentication. If you must use a password, do not include a hard-coded password in your application.</p>DataWorks DbConnectionStringBuilder.ConnectionString#1"
  syntax:
    content: public string ConnectionString { get; set; }
    content.vb: Public Property ConnectionString As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The current connection string, created from the key/value pairs that are contained within the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>. The default value is an empty string.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An invalid connection string argument has been supplied.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.Common.DbConnectionStringBuilder.Count
  commentId: P:System.Data.Common.DbConnectionStringBuilder.Count
  id: Count
  parent: System.Data.Common.DbConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Data.Common.DbConnectionStringBuilder.Count
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
    startLine: 142
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the current number of keys that are contained within the <xref href=\"System.Data.Common.DbConnectionStringBuilder.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.Data.Common.DbConnectionStringBuilder.Count\" data-throw-if-not-resolved=\"false\"></xref> property both before and after you modify the contents of the <xref href=\"System.Data.Common.DbConnectionStringBuilder.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref> property.</p>DataWorks DbConnectionStringBuilder.Count#1"
  syntax:
    content: public virtual int Count { get; }
    content.vb: Public Overridable ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of keys that are contained within the connection string maintained by the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Data.Common.DbConnectionStringBuilder.Item(System.String)
  commentId: P:System.Data.Common.DbConnectionStringBuilder.Item(System.String)
  id: Item(System.String)
  parent: System.Data.Common.DbConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: Item[String]
  fullName: System.Data.Common.DbConnectionStringBuilder.Item[System.String]
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
    startLine: 65
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets or sets the value associated with the specified key.</p>\n"
  remarks: "\n<p>When you set this property, if the specified key already exists in the dictionary, the value is replaced; otherwise, a new element is created.</p>\n"
  example:
  - "\n<p>The following console application creates a new <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> and adds key/value pairs to its connection string, using the <xref href=\"System.Data.Common.DbConnectionStringBuilder.Item(System.String)\" data-throw-if-not-resolved=\"false\"></xref> property.</p>DataWorks DbConnectionStringBuilder.Item#1"
  syntax:
    content: public virtual object this[string keyword] { get; set; }
    content.vb: Public Overridable Property Item(keyword As String) As Object
    parameters:
    - id: keyword
      type: System.String
      description: "\n<p>The key of the item to get or set.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The value associated with the specified key. If the specified key is not found, trying to get it returns a null reference (<strong>Nothing</strong> in Visual Basic), and trying to set it creates a new element using the specified key.</p>\n<p>Passing a null (<strong>Nothing</strong> in Visual Basic) key throws an <xref href=\"System.ArgumentNullException\" data-throw-if-not-resolved=\"false\"></xref>. Assigning a null value removes the key/value pair.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>keyword</em> is a null reference (<strong>Nothing</strong> in Visual Basic).</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The property is set, and the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> is read-only. </p>\n<p>-or-</p>\n<p>The property is set, <em>keyword</em> does not exist in the collection, and the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Data.Common.DbConnectionStringBuilder.Item(System.String)
  name.vb: Item(String)
- uid: System.Data.Common.DbConnectionStringBuilder.Keys
  commentId: P:System.Data.Common.DbConnectionStringBuilder.Keys
  id: Keys
  parent: System.Data.Common.DbConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: Keys
  fullName: System.Data.Common.DbConnectionStringBuilder.Keys
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Keys
    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
    startLine: 161
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the keys in the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The order of the values in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is unspecified, but it is the same order as the associated values in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> returned by the <xref href=\"System.Data.Common.DbConnectionStringBuilder.Values\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The returned <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is not a static copy; instead, the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> refers back to the keys in the original <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, changes to the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> are reflected in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following console application example creates a new <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>, and adds some keys. The code loops through the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> returned by the <xref href=\"System.Data.Common.DbConnectionStringBuilder.Keys\" data-throw-if-not-resolved=\"false\"></xref> property displaying the key/value pairs, and then adds a new key. Because the <xref href=\"System.Data.Common.DbConnectionStringBuilder.Keys\" data-throw-if-not-resolved=\"false\"></xref> property returns a dynamic <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>, the second loop displays all the key/value pairs, including the newest item.</p>DataWorks DbConnectionStringBuilder.Keys#1"
  syntax:
    content: public virtual Collections.ICollection Keys { get; }
    content.vb: Public Overridable ReadOnly Property Keys As Collections.ICollection
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "\n<p>An <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the keys in the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Data.Common.DbConnectionStringBuilder.Values
  commentId: P:System.Data.Common.DbConnectionStringBuilder.Values
  id: Values
  parent: System.Data.Common.DbConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: Values
  fullName: System.Data.Common.DbConnectionStringBuilder.Values
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Values
    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
    startLine: 175
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the values in the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The order of the values in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is unspecified, but it is the same order as the associated keys in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> returned by the <xref href=\"System.Data.Common.DbConnectionStringBuilder.Keys\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The returned <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is not a static copy; instead, the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> refers back to the values in the original <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, changes to the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> are reflected in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p> This example includes a password to demonstrate how <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> works with connection strings. In your applications, we recommend that you use Windows Authentication. If you must use a password, do not include a hard-coded password in your application.</p>DataWorks DbConnectionStringBuilder.Values#1<p>Displays the following output:</p><pre><code>MSDataShape.1\nfalse\nMSDAORA\norac\nusername\n*******</code></pre>"
  syntax:
    content: public virtual Collections.ICollection Values { get; }
    content.vb: Public Overridable ReadOnly Property Values As Collections.ICollection
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "\n<p>An <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the values in the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Data.Common.DbConnectionStringBuilder.Add(System.String,System.Object)
  commentId: M:System.Data.Common.DbConnectionStringBuilder.Add(System.String,System.Object)
  id: Add(System.String,System.Object)
  parent: System.Data.Common.DbConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: Add(String, Object)
  fullName: System.Data.Common.DbConnectionStringBuilder.Add(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
    startLine: 196
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Adds an entry with the specified key and value into the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.Common.DbConnectionStringBuilder.Item(System.String)\" data-throw-if-not-resolved=\"false\"></xref> property can also be used to add new elements by setting the value of a key that does not exist in the dictionary. For example: <code>myCollection[\"myNonexistentKey\"] = myValue</code>. </p>\n<p>Calling the <xref href=\"System.Data.Common.DbConnectionStringBuilder.Add(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method by passing a null (<strong>Nothing</strong> in Visual Basic) key throws an <xref href=\"System.ArgumentNullException\" data-throw-if-not-resolved=\"false\"></xref>. However, calling the <xref href=\"System.Data.Common.DbConnectionStringBuilder.Add(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method by passing a null value removes the key/value pair. </p>\n"
  example:
  - "\n<p>The following example creates a new <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> and adds items. The code also demonstrates overwriting an existing item using the <xref href=\"System.Data.Common.DbConnectionStringBuilder.Add(System.String,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method, and includes a commented block that would throw an <xref href=\"System.ArgumentNullException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p> This example includes a password to demonstrate how <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> works with connection strings. In your applications, we recommend that you use Windows Authentication. If you must use a password, do not include a hard-coded password in your application.</p>DataWorks DbConnectionStringBuilder.Add#1"
  syntax:
    content: public void Add(string keyword, object value)
    content.vb: Public Sub Add(keyword As String, value As Object)
    parameters:
    - id: keyword
      type: System.String
      description: "\n<p>The key to add to the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value for the specified key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>keyword</em> is a null reference (<strong>Nothing</strong> in Visual Basic).</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> is read-only. </p>\n<p>-or-</p>\n<p>The <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String)
  commentId: M:System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String)
  id: AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String)
  parent: System.Data.Common.DbConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: AppendKeyValuePair(Text.StringBuilder, String, String)
  fullName: System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/ref/System.Data.Common.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AppendKeyValuePair
    path: src/System.Data.Common/ref/System.Data.Common.cs
    startLine: 294
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Provides an efficient and safe way to append a key and value to an existing <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>This method allows developers using a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> to create a collection of key/value pairs to be able to take advantage of the features included in the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class when you add key/value pairs, without having to incur the overhead of creating and maintaining a <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> instance. The <strong>AppendKeyValuePair</strong> method formats the key and value correctly and adds the new string to the supplied <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  example:
  - "\n<p>If some process has created a connection string, but now an application must perform a simple modification to that connection string, it may be more efficient to just add the key/value pair using a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object. Instead of creating a new <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>, developers can call the <strong>AppendKeyValuePair</strong> method, passing in a <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> that contains the supplied connection string. The following procedure shows a simple example of this technique.</p>DataWorks DbConnectionStringBuilder.AppendKeyValuePair#1"
  syntax:
    content: public static void AppendKeyValuePair(Text.StringBuilder builder, string keyword, string value)
    content.vb: Public Shared Sub AppendKeyValuePair(builder As Text.StringBuilder, keyword As String, value As String)
    parameters:
    - id: builder
      type: System.Text.StringBuilder
      description: "\n<p>The <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> to which to add the key/value pair.</p>\n"
    - id: keyword
      type: System.String
      description: "\n<p>The key to be added.</p>\n"
    - id: value
      type: System.String
      description: "\n<p>The value for the supplied key.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Data.Common.DbConnectionStringBuilder.Clear
  commentId: M:System.Data.Common.DbConnectionStringBuilder.Clear
  id: Clear
  parent: System.Data.Common.DbConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Data.Common.DbConnectionStringBuilder.Clear()
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
    startLine: 207
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Clears the contents of the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.Common.DbConnectionStringBuilder.Clear\" data-throw-if-not-resolved=\"false\"></xref> method removes all key/value pairs from the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> and resets all corresponding properties. This includes setting the <xref href=\"System.Data.Common.DbConnectionStringBuilder.Count\" data-throw-if-not-resolved=\"false\"></xref> property to 0 and the <xref href=\"System.Data.Common.DbConnectionStringBuilder.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref> property to an empty string.</p>\n"
  syntax:
    content: public virtual void Clear()
    content.vb: Public Overridable Sub Clear
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.Common.DbConnectionStringBuilder.ContainsKey(System.String)
  commentId: M:System.Data.Common.DbConnectionStringBuilder.ContainsKey(System.String)
  id: ContainsKey(System.String)
  parent: System.Data.Common.DbConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: ContainsKey(String)
  fullName: System.Data.Common.DbConnectionStringBuilder.ContainsKey(System.String)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContainsKey
    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
    startLine: 219
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Determines whether the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> contains a specific key.</p>\n"
  example:
  - "DataWorks DbConnectionStringBuilder.ContainsKey#1<p>This code produces the following output:</p><pre><code>Contents of the DbConnectionStringBuilder:\nprovider=\"Provider=Microsoft.Jet.OLEDB.4.0\";data \nsource=C:\\MyExcel.xls;extended\nproperties=\"Excel 8.0;HDR=Yes;IMEX=1\"\nThe collection contains the key \"Data Source\".</code></pre>"
  syntax:
    content: public virtual bool ContainsKey(string keyword)
    content.vb: Public Overridable Function ContainsKey(keyword As String) As Boolean
    parameters:
    - id: keyword
      type: System.String
      description: "\n<p>The key to locate in the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> contains an entry with the specified key; otherwise <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>keyword</em> is a null reference (<strong>Nothing</strong> in Visual Basic).</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.Common.DbConnectionStringBuilder.EquivalentTo(System.Data.Common.DbConnectionStringBuilder)
  commentId: M:System.Data.Common.DbConnectionStringBuilder.EquivalentTo(System.Data.Common.DbConnectionStringBuilder)
  id: EquivalentTo(System.Data.Common.DbConnectionStringBuilder)
  parent: System.Data.Common.DbConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: EquivalentTo(DbConnectionStringBuilder)
  fullName: System.Data.Common.DbConnectionStringBuilder.EquivalentTo(System.Data.Common.DbConnectionStringBuilder)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EquivalentTo
    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
    startLine: 230
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Compares the connection information in this <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object with the connection information in the supplied object.</p>\n"
  remarks: "\n<p>Comparisons on key names are case insensitive; value comparisons are case sensitive.</p>\n<p>The <xref href=\"System.Data.Common.DbConnectionStringBuilder.EquivalentTo(System.Data.Common.DbConnectionStringBuilder)\" data-throw-if-not-resolved=\"false\"></xref> method returns <strong>true</strong> if the key/value pairs are equal, regardless of their order. The connection behavior of the two connection strings are equivalent, because order is never significant within connection strings. However, different order may affect connection pooling behavior of connections based on these connection strings.</p>\n"
  example:
  - >-
    DataWorks DbConnectionStringBuilder.EquivalentTo#1<p>This sample displays the following output:</p><pre><code>builder1 = value1=SomeValue;value2=20;value3=30;value4=40

    builder2 = value2=20;value3=30;value4=40;value1=SomeValue

    builder3 = value2=20;value3=30;value4=40;value1=SOMEVALUE

    builder1.EquivalentTo(builder2) = True

    builder2.EquivalentTo(builder3) = False</code></pre>
  syntax:
    content: public virtual bool EquivalentTo(DbConnectionStringBuilder connectionStringBuilder)
    content.vb: Public Overridable Function EquivalentTo(connectionStringBuilder As DbConnectionStringBuilder) As Boolean
    parameters:
    - id: connectionStringBuilder
      type: System.Data.Common.DbConnectionStringBuilder
      description: "\n<p>The <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> to be compared with this <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the connection information in both of the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> objects causes an equivalent connection string; otherwise <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.Common.DbConnectionStringBuilder.Remove(System.String)
  commentId: M:System.Data.Common.DbConnectionStringBuilder.Remove(System.String)
  id: Remove(System.String)
  parent: System.Data.Common.DbConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: Remove(String)
  fullName: System.Data.Common.DbConnectionStringBuilder.Remove(System.String)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
    startLine: 276
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Removes the entry with the specified key from the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>Because the <xref href=\"System.Data.Common.DbConnectionStringBuilder.Remove(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method returns a value that indicates its success, it is not required to look for the key before trying to remove the key/value pair from the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  example:
  - >-
    DataWorks DbConnectionStringBuilder.Remove#1<p>This sample displays the following output:</p><pre><code>Removed 'Provider'

    data source=C:\Demo.mdb;jet oledb:system database=system.mdw

    Unable to remove 'User ID'

    data source=C:\Demo.mdb;jet oledb:system database=system.mdw

    Removed 'DATA SOURCE'

    jet oledb:system database=system.mdw</code></pre>
  syntax:
    content: public virtual bool Remove(string keyword)
    content.vb: Public Overridable Function Remove(keyword As String) As Boolean
    parameters:
    - id: keyword
      type: System.String
      description: "\n<p>The key of the key/value pair to be removed from the connection string in this <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the key existed within the connection string and was removed; <strong>false</strong> if the key did not exist.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>keyword</em> is null (<strong>Nothing</strong> in Visual Basic)</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> is read-only, or the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.Common.DbConnectionStringBuilder.ShouldSerialize(System.String)
  commentId: M:System.Data.Common.DbConnectionStringBuilder.ShouldSerialize(System.String)
  id: ShouldSerialize(System.String)
  parent: System.Data.Common.DbConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: ShouldSerialize(String)
  fullName: System.Data.Common.DbConnectionStringBuilder.ShouldSerialize(System.String)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ShouldSerialize
    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
    startLine: 288
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Indicates whether the specified key exists in this <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>This method behaves identically to the <xref href=\"System.Data.Common.DbConnectionStringBuilder.ContainsKey(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public virtual bool ShouldSerialize(string keyword)
    content.vb: Public Overridable Function ShouldSerialize(keyword As String) As Boolean
    parameters:
    - id: keyword
      type: System.String
      description: "\n<p>The key to locate in the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> contains an entry with the specified key; otherwise <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.Common.DbConnectionStringBuilder.ToString
  commentId: M:System.Data.Common.DbConnectionStringBuilder.ToString
  id: ToString
  parent: System.Data.Common.DbConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Data.Common.DbConnectionStringBuilder.ToString()
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
    startLine: 294
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Returns the connection string associated with this <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The current <xref href=\"System.Data.Common.DbConnectionStringBuilder.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.Common.DbConnectionStringBuilder.TryGetValue(System.String,System.Object@)
  commentId: M:System.Data.Common.DbConnectionStringBuilder.TryGetValue(System.String,System.Object@)
  id: TryGetValue(System.String,System.Object@)
  parent: System.Data.Common.DbConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: TryGetValue(String, out Object)
  fullName: System.Data.Common.DbConnectionStringBuilder.TryGetValue(System.String, out System.Object)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryGetValue
    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs
    startLine: 299
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Retrieves a value corresponding to the supplied key from this <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.Common.DbConnectionStringBuilder.TryGetValue(System.String,System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> method lets developers safely retrieve a value from a <xref href=\"System.Data.Common.DbConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> without needing to first call the <xref href=\"System.Data.Common.DbConnectionStringBuilder.ContainsKey(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. Because <xref href=\"System.Data.Common.DbConnectionStringBuilder.TryGetValue(System.String,System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> does not raise an exception when you call it, passing in a nonexistent key, you do not have to look for a key before retrieving its value. Calling <xref href=\"System.Data.Common.DbConnectionStringBuilder.TryGetValue(System.String,System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> with a nonexistent key will place the null value (<strong>Nothing</strong> in Visual Basic) in the <em>value</em> parameter.</p>\n"
  example:
  - "\n<p>The following example calls the <xref href=\"System.Data.Common.DbConnectionStringBuilder.TryGetValue(System.String,System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> method, demonstrating several possible outcomes.</p>DataWorks DbConnectionStringBuilder.TryGetValue#1<p>The sample displays the following results:</p><pre><code>Provider=sqloledb\nDATA SOURCE=192.168.168.1,1433\nUnable to retrieve value for //InvalidKey//\nUnable to retrieve value for null key.</code></pre>"
  syntax:
    content: public virtual bool TryGetValue(string keyword, out object value)
    content.vb: Public Overridable Function TryGetValue(keyword As String, ByRef value As Object) As Boolean
    parameters:
    - id: keyword
      type: System.String
      description: "\n<p>The key of the item to retrieve.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value corresponding to the <em>key</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>keyword</em> was found within the connection string, <strong>false</strong> otherwise.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>keyword</em> contains a null value (<strong>Nothing</strong> in Visual Basic).</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Data.Common.DbConnectionStringBuilder.TryGetValue(System.String, ByRef System.Object)
  name.vb: TryGetValue(String, ByRef Object)
references:
- uid: System.Data.Common
  isExternal: false
  name: System.Data.Common
  fullName: System.Data.Common
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: Text.StringBuilder
  fullName: System.Text.StringBuilder
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Data.Common.DbConnectionStringBuilder
  parent: System.Data.Common
  isExternal: false
  name: DbConnectionStringBuilder
  fullName: System.Data.Common.DbConnectionStringBuilder
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
