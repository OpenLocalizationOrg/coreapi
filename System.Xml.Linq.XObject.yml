items:
- uid: System.Xml.Linq.XObject
  commentId: T:System.Xml.Linq.XObject
  id: XObject
  parent: System.Xml.Linq
  children:
  - System.Xml.Linq.XObject.AddAnnotation(System.Object)
  - System.Xml.Linq.XObject.Annotation(System.Type)
  - System.Xml.Linq.XObject.Annotation``1
  - System.Xml.Linq.XObject.Annotations(System.Type)
  - System.Xml.Linq.XObject.Annotations``1
  - System.Xml.Linq.XObject.BaseUri
  - System.Xml.Linq.XObject.Changed
  - System.Xml.Linq.XObject.Changing
  - System.Xml.Linq.XObject.Document
  - System.Xml.Linq.XObject.NodeType
  - System.Xml.Linq.XObject.Parent
  - System.Xml.Linq.XObject.RemoveAnnotations(System.Type)
  - System.Xml.Linq.XObject.RemoveAnnotations``1
  langs:
  - csharp
  - vb
  name: XObject
  nameWithType: XObject
  fullName: System.Xml.Linq.XObject
  type: Class
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XObject
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 388
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Represents a node or an attribute in an XML tree. </p>\n"
  remarks: "\n<p>This class is the abstract common base class for <xref href=\"System.Xml.Linq.XNode\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.Linq.XAttribute\" data-throw-if-not-resolved=\"false\"></xref>. It provides some basic functionality that is common to both classes, such as annotations, and raising events when nodes have changed.</p>\n<p>Note that annotations are not part of the XML infoset; they are not serialized or deserialized.</p>\n"
  syntax:
    content: 'public abstract class XObject : IXmlLineInfo'
    content.vb: >-
      Public MustInherit Class XObject
          Inherits IXmlLineInfo
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Xml.Linq.XObject.BaseUri
  commentId: P:System.Xml.Linq.XObject.BaseUri
  id: BaseUri
  parent: System.Xml.Linq.XObject
  langs:
  - csharp
  - vb
  name: BaseUri
  nameWithType: XObject.BaseUri
  fullName: System.Xml.Linq.XObject.BaseUri
  type: Property
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BaseUri
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 391
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets the base URI for this <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Using LINQ to XML, you can deserialize XML in a number of fashions. You can parse it from a string, load it from a file, or read it from a <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> or an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>. In all of these cases, LINQ to XML uses one or another of the concrete subclasses of <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Sometimes the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> has the base URI, and sometimes it does not. For instance, when loading from a file, the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> knows the base URI, but when reading from an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> that was created because of calling the <see cref=\"Overload:System.Xml.Linq.XElement.Parse\"></see> method, there is no possibility of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> reporting a base URI; the XML was in a string.</p>\n<p>If, when parsing or loading the XML, you specify <xref href=\"System.Xml.Linq.LoadOptions.SetBaseUri\" data-throw-if-not-resolved=\"false\"></xref>, LINQ to XML will request the base URI for each node as the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> returns the node. If the reader has the base URI, LINQ to XML will save the information with the LINQ to XML node. This property returns that information. If the underlying <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> does not have the base URI, then this property will return an empty string.</p>\n<p>Setting <xref href=\"System.Xml.Linq.LoadOptions.SetBaseUri\" data-throw-if-not-resolved=\"false\"></xref> when loading an XML tree will result in slower parsing.</p>\n<p>When setting the base URI for an XML tree, LINQ to XML puts an annotation on the root of the tree. This property is a computed property, and navigates up the tree to find the base URI. </p>\n"
  syntax:
    content: public string BaseUri { get; }
    content.vb: Public ReadOnly Property BaseUri As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that contains the base URI for this <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Xml.Linq.XObject.Document
  commentId: P:System.Xml.Linq.XObject.Document
  id: Document
  parent: System.Xml.Linq.XObject
  langs:
  - csharp
  - vb
  name: Document
  nameWithType: XObject.Document
  fullName: System.Xml.Linq.XObject.Document
  type: Property
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Document
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 392
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets the <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> for this <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public XDocument Document { get; }
    content.vb: Public ReadOnly Property Document As XDocument
    parameters: []
    return:
      type: System.Xml.Linq.XDocument
      description: "\n<p>The <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> for this <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Xml.Linq.XObject.NodeType
  commentId: P:System.Xml.Linq.XObject.NodeType
  id: NodeType
  parent: System.Xml.Linq.XObject
  langs:
  - csharp
  - vb
  name: NodeType
  nameWithType: XObject.NodeType
  fullName: System.Xml.Linq.XObject.NodeType
  type: Property
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NodeType
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 393
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets the node type for this <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Because all classes that derive from <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref> contain a <xref href=\"System.Xml.Linq.XObject.NodeType\" data-throw-if-not-resolved=\"false\"></xref> property, you can write code that operates on collections of concrete subclass of <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref>. Your code can then test for the node type of each node in the collection.</p>\n"
  syntax:
    content: public abstract XmlNodeType NodeType { get; }
    content.vb: Public MustOverride ReadOnly Property NodeType As XmlNodeType
    parameters: []
    return:
      type: System.Xml.XmlNodeType
      description: "\n<p>The node type for this <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.Linq.XObject.Parent
  commentId: P:System.Xml.Linq.XObject.Parent
  id: Parent
  parent: System.Xml.Linq.XObject
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: XObject.Parent
  fullName: System.Xml.Linq.XObject.Parent
  type: Property
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parent
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 394
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets the parent <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> of this <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>If this <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref> has no parent element, this property returns <strong>null</strong>.</p>\n<p>This property returns the parent element, and as children nodes of an <xref href=\"System.Xml.Linq.XDocument\" data-throw-if-not-resolved=\"false\"></xref> have no parent element, this property returns <strong>null</strong> for them.</p>\n"
  syntax:
    content: public XElement Parent { get; }
    content.vb: Public ReadOnly Property Parent As XElement
    parameters: []
    return:
      type: System.Xml.Linq.XElement
      description: "\n<p>The parent <xref href=\"System.Xml.Linq.XElement\" data-throw-if-not-resolved=\"false\"></xref> of this <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Xml.Linq.XObject.Changed
  commentId: E:System.Xml.Linq.XObject.Changed
  id: Changed
  parent: System.Xml.Linq.XObject
  langs:
  - csharp
  - vb
  name: Changed
  nameWithType: XObject.Changed
  fullName: System.Xml.Linq.XObject.Changed
  type: Event
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Changed
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 397
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Raised when this <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref> or any of its descendants have changed.</p>\n"
  remarks: "\n<p>Events are raised only when an XML tree is modified, not when it is constructed. This is because you have to add an event handler to an event before you can receive events, and you cannot add an event handler before you have a reference to an <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref>. You cannot get a reference to an <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref> before the XML tree is constructed. This means that during functional construction of an XML tree, you will not receive events.</p>\n<p>You should be careful when modifying an XML tree within one of these events, because doing this might lead to unexpected results. For example, if you receive a <xref href=\"System.Xml.Linq.XObject.Changing\" data-throw-if-not-resolved=\"false\"></xref> event, and while the event is being processed you remove the node from the tree, you might not receive the <xref href=\"System.Xml.Linq.XObject.Changed\" data-throw-if-not-resolved=\"false\"></xref> event. When an event is being processed, it is valid to modify an XML tree other than the one that contains the node that is receiving the event; it is even valid to modify the same tree provided the modifications do not affect the specific nodes on which the event was raised. However, if you modify the area of the tree that contains the node receiving the event, the events that you receive and the impact to the tree are undefined.</p>\n"
  syntax:
    content: public event EventHandler<XObjectChangeEventArgs> Changed
    content.vb: Public Event Changed As EventHandler(Of XObjectChangeEventArgs)
    return:
      type: System.EventHandler{System.Xml.Linq.XObjectChangeEventArgs}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XObject.Changing
  commentId: E:System.Xml.Linq.XObject.Changing
  id: Changing
  parent: System.Xml.Linq.XObject
  langs:
  - csharp
  - vb
  name: Changing
  nameWithType: XObject.Changing
  fullName: System.Xml.Linq.XObject.Changing
  type: Event
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Changing
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 398
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Raised when this <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref> or any of its descendants are about to change.</p>\n"
  remarks: "\n<p>Events are raised only from modification of an XML tree, not from construction of an XML tree. You have to add an event handler to an event before you can receive events, and you can't add an event handler before you have a reference to an <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref>. You can't get a reference to an <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref> before the XML tree is constructed. This means that during functional construction of an XML tree, you will not receive events.</p>\n<p>You should be careful when modifying an XML tree within one of these events, because doing this might lead to unexpected results. For example, if you receive a <xref href=\"System.Xml.Linq.XObject.Changing\" data-throw-if-not-resolved=\"false\"></xref> event, and while the event is being processed you remove the node from the tree, you might not receive the <xref href=\"System.Xml.Linq.XObject.Changed\" data-throw-if-not-resolved=\"false\"></xref> event. When an event is being processed, it is valid to modify an XML tree other than the one that contains the node that is receiving the event; it is even valid to modify the same tree provided the modifications do not affect the specific nodes on which the event was raised. However, if you modify the area of the tree that contains the node receiving the event, the events that you receive and the impact to the tree are undefined.</p>\n"
  syntax:
    content: public event EventHandler<XObjectChangeEventArgs> Changing
    content.vb: Public Event Changing As EventHandler(Of XObjectChangeEventArgs)
    return:
      type: System.EventHandler{System.Xml.Linq.XObjectChangeEventArgs}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XObject.AddAnnotation(System.Object)
  commentId: M:System.Xml.Linq.XObject.AddAnnotation(System.Object)
  id: AddAnnotation(System.Object)
  parent: System.Xml.Linq.XObject
  langs:
  - csharp
  - vb
  name: AddAnnotation(Object)
  nameWithType: XObject.AddAnnotation(Object)
  fullName: System.Xml.Linq.XObject.AddAnnotation(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAnnotation
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 399
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Adds an object to the annotation list of this <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Note that annotations are not part of the infoset; they are not persisted, or displayed by <see cref=\"Overload:System.Xml.Linq.XNode.ToString\"></see>. Also, if you import an XML Namespace into your VB project and call AddAnnotation with the SaveOptions.OmitDuplicateNamespaces enumeration value, then only one element will contain the XML Namespace attribute instead of every element. For more information, see <see href=\"http://blogs.msdn.com/b/vbteam/archive/2010/06/09/removing-duplicate-namespaces-in-xml-literals-shyam-namboodiripad.aspx\">Removing duplicate namespaces in XML Literals</see>.</p>\n"
  syntax:
    content: public void AddAnnotation(object annotation)
    content.vb: Public Sub AddAnnotation(annotation As Object)
    parameters:
    - id: annotation
      type: System.Object
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that contains the annotation to add.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XObject.Annotation(System.Type)
  commentId: M:System.Xml.Linq.XObject.Annotation(System.Type)
  id: Annotation(System.Type)
  parent: System.Xml.Linq.XObject
  langs:
  - csharp
  - vb
  name: Annotation(Type)
  nameWithType: XObject.Annotation(Type)
  fullName: System.Xml.Linq.XObject.Annotation(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Annotation
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 400
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets the first annotation object of the specified type from this <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public object Annotation(Type type)
    content.vb: Public Function Annotation(type As Type) As Object
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of the annotation to retrieve.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that contains the first annotation object that matches the specified type, or <strong>null</strong> if no annotation is of the specified type.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XObject.Annotation``1
  commentId: M:System.Xml.Linq.XObject.Annotation``1
  id: Annotation``1
  parent: System.Xml.Linq.XObject
  langs:
  - csharp
  - vb
  name: Annotation<T>()
  nameWithType: XObject.Annotation<T>()
  fullName: System.Xml.Linq.XObject.Annotation<T>()
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Annotation
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 401
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Get the first annotation object of the specified type from this <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  syntax:
    content: 'public T Annotation<T>()where T : class'
    content.vb: Public Function Annotation(Of T As Class) As T
    typeParameters:
    - id: T
      description: "\n<p>The type of the annotation to retrieve.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>The first annotation object that matches the specified type, or <strong>null</strong> if no annotation is of the specified type.</p>\n"
  nameWithType.vb: XObject.Annotation(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Xml.Linq.XObject.Annotation(Of T)()
  name.vb: Annotation(Of T)()
- uid: System.Xml.Linq.XObject.Annotations(System.Type)
  commentId: M:System.Xml.Linq.XObject.Annotations(System.Type)
  id: Annotations(System.Type)
  parent: System.Xml.Linq.XObject
  langs:
  - csharp
  - vb
  name: Annotations(Type)
  nameWithType: XObject.Annotations(Type)
  fullName: System.Xml.Linq.XObject.Annotations(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Annotations
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 402
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets a collection of annotations of the specified type for this <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public IEnumerable<object> Annotations(Type type)
    content.vb: Public Function Annotations(type As Type) As IEnumerable(Of Object)
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of the annotations to retrieve.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that contains the annotations that match the specified type for this <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XObject.Annotations``1
  commentId: M:System.Xml.Linq.XObject.Annotations``1
  id: Annotations``1
  parent: System.Xml.Linq.XObject
  langs:
  - csharp
  - vb
  name: Annotations<T>()
  nameWithType: XObject.Annotations<T>()
  fullName: System.Xml.Linq.XObject.Annotations<T>()
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Annotations
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 403
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets a collection of annotations of the specified type for this <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: 'public IEnumerable<T> Annotations<T>()where T : class'
    content.vb: Public Function Annotations(Of T As Class) As IEnumerable(Of T)
    typeParameters:
    - id: T
      description: "\n<p>The type of the annotations to retrieve.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the annotations for this <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  nameWithType.vb: XObject.Annotations(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Xml.Linq.XObject.Annotations(Of T)()
  name.vb: Annotations(Of T)()
- uid: System.Xml.Linq.XObject.RemoveAnnotations(System.Type)
  commentId: M:System.Xml.Linq.XObject.RemoveAnnotations(System.Type)
  id: RemoveAnnotations(System.Type)
  parent: System.Xml.Linq.XObject
  langs:
  - csharp
  - vb
  name: RemoveAnnotations(Type)
  nameWithType: XObject.RemoveAnnotations(Type)
  fullName: System.Xml.Linq.XObject.RemoveAnnotations(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAnnotations
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 404
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Removes the annotations of the specified type from this <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void RemoveAnnotations(Type type)
    content.vb: Public Sub RemoveAnnotations(type As Type)
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of annotations to remove.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Linq.XObject.RemoveAnnotations``1
  commentId: M:System.Xml.Linq.XObject.RemoveAnnotations``1
  id: RemoveAnnotations``1
  parent: System.Xml.Linq.XObject
  langs:
  - csharp
  - vb
  name: RemoveAnnotations<T>()
  nameWithType: XObject.RemoveAnnotations<T>()
  fullName: System.Xml.Linq.XObject.RemoveAnnotations<T>()
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAnnotations
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 405
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Removes the annotations of the specified type from this <xref href=\"System.Xml.Linq.XObject\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: 'public void RemoveAnnotations<T>()where T : class'
    content.vb: Public Sub RemoveAnnotations(Of T As Class)
    typeParameters:
    - id: T
      description: "\n<p>The type of annotations to remove.</p>\n"
  nameWithType.vb: XObject.RemoveAnnotations(Of T)()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Xml.Linq.XObject.RemoveAnnotations(Of T)()
  name.vb: RemoveAnnotations(Of T)()
references:
- uid: System.Xml.Linq
  isExternal: false
  name: System.Xml.Linq
  nameWithType: System.Xml.Linq
  fullName: System.Xml.Linq
  commentId: N:System.Xml.Linq
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
  commentId: T:System.Object
- uid: System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
  commentId: N:System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
  commentId: T:System.String
- uid: System.Xml.Linq.XDocument
  parent: System.Xml.Linq
  isExternal: false
  name: XDocument
  nameWithType: XDocument
  fullName: System.Xml.Linq.XDocument
  commentId: T:System.Xml.Linq.XDocument
- uid: System.Xml.XmlNodeType
  parent: System.Xml
  isExternal: false
  name: XmlNodeType
  nameWithType: XmlNodeType
  fullName: System.Xml.XmlNodeType
  commentId: T:System.Xml.XmlNodeType
- uid: System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
  commentId: N:System.Xml
- uid: System.Xml.Linq.XElement
  parent: System.Xml.Linq
  isExternal: false
  name: XElement
  nameWithType: XElement
  fullName: System.Xml.Linq.XElement
  commentId: T:System.Xml.Linq.XElement
- uid: System.EventHandler{System.Xml.Linq.XObjectChangeEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<XObjectChangeEventArgs>
  nameWithType: EventHandler<XObjectChangeEventArgs>
  fullName: System.EventHandler<System.Xml.Linq.XObjectChangeEventArgs>
  nameWithType.vb: EventHandler(Of XObjectChangeEventArgs)
  fullname.vb: System.EventHandler(Of System.Xml.Linq.XObjectChangeEventArgs)
  name.vb: EventHandler(Of XObjectChangeEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xml.Linq.XObjectChangeEventArgs
    name: XObjectChangeEventArgs
    nameWithType: XObjectChangeEventArgs
    fullName: System.Xml.Linq.XObjectChangeEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Xml.Linq.XObjectChangeEventArgs
    name: XObjectChangeEventArgs
    nameWithType: XObjectChangeEventArgs
    fullName: System.Xml.Linq.XObjectChangeEventArgs
  - name: )
    nameWithType: )
    fullName: )
  commentId: T:System.EventHandler{System.Xml.Linq.XObjectChangeEventArgs}
- uid: System.EventHandler`1
  isExternal: false
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullname.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
  commentId: T:System.EventHandler`1
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
  commentId: T:System.Type
- uid: '{T}'
  definition: T
  name: T
  nameWithType: T
  fullName: T
  commentId: '!:T'
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.IEnumerable{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Object>
  nameWithType: IEnumerable<Object>
  fullName: System.Collections.Generic.IEnumerable<System.Object>
  nameWithType.vb: IEnumerable(Of Object)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Object)
  name.vb: IEnumerable(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: T:System.Collections.Generic.IEnumerable{System.Object}
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  commentId: T:System.Collections.Generic.IEnumerable`1
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  commentId: N:System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  commentId: T:System.Collections.Generic.IEnumerable{`0}
