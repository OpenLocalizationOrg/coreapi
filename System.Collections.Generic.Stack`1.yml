items:
- uid: System.Collections.Generic.Stack`1
  commentId: T:System.Collections.Generic.Stack`1
  id: Stack`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.Stack`1.#ctor
  - System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.Stack`1.#ctor(System.Int32)
  - System.Collections.Generic.Stack`1.Clear
  - System.Collections.Generic.Stack`1.Contains(`0)
  - System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.Stack`1.Count
  - System.Collections.Generic.Stack`1.GetEnumerator
  - System.Collections.Generic.Stack`1.Peek
  - System.Collections.Generic.Stack`1.Pop
  - System.Collections.Generic.Stack`1.Push(`0)
  - System.Collections.Generic.Stack`1.ToArray
  - System.Collections.Generic.Stack`1.TrimExcess
  langs:
  - csharp
  - vb
  name: Stack<T>
  fullName: System.Collections.Generic.Stack<T>
  type: Class
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Stack
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 20
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Represents a variable size last-in-first-out (LIFO) collection of instances of the same specified type.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> is implemented as an array.</p>\n<p>Stacks and queues are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value. Use <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref> if you need to access the information in the same order that it is stored in the collection. Use <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> if you need to access the information in reverse order.</p>\n<p>Use the <xref href=\"System.Collections.Concurrent.ConcurrentStack`1\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Concurrent.ConcurrentQueue`1\" data-throw-if-not-resolved=\"false\"></xref> types when you need to access the collection from multiple threads concurrently.</p>\n<p>A common use for <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> is to preserve variable states during calls to other procedures.</p>\n<p>Three main operations can be performed on a <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> and its elements:  </p>\n<ul><li>\n<p>\n<xref href=\"System.Collections.Generic.Stack`1.Push(`0)\" data-throw-if-not-resolved=\"false\"></xref> inserts an element at the top of the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li><li>\n<p>\n<xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> removes an element from the top of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li><li>\n<p>\n<xref href=\"System.Collections.Generic.Stack`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> returns an element that is at the top of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> but does not remove it from the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li></ul>\n<p>The capacity of a <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array. The capacity can be decreased by calling <xref href=\"System.Collections.Generic.Stack`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref> is less than the capacity of the stack, <xref href=\"System.Collections.Generic.Stack`1.Push(`0)\" data-throw-if-not-resolved=\"false\"></xref> is an O(1) operation. If the capacity needs to be increased to accommodate the new element, <xref href=\"System.Collections.Generic.Stack`1.Push(`0)\" data-throw-if-not-resolved=\"false\"></xref> becomes an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref>. <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> is an O(1) operation.</p>\n<p>\n<xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid value for reference types and allows duplicate elements.</p>\n"
  example:
  - "\n<p>The following code example demonstrates several methods of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> generic class. The code example creates a stack of strings with default capacity and uses the <xref href=\"System.Collections.Generic.Stack`1.Push(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to push five strings onto the stack. The elements of the stack are enumerated, which does not change the state of the stack. The <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method is used to pop the first string off the stack. The <xref href=\"System.Collections.Generic.Stack`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method is used to look at the next item on the stack, and then the <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method is used to pop it off.</p>\n<p>The <xref href=\"System.Collections.Generic.Stack`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref href=\"System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor that takes <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, creating a copy of the stack with the order of the elements reversed. The elements of the copy are displayed.</p>\n<p>An array twice the size of the stack is created, and the <xref href=\"System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to copy the array elements beginning at the middle of the array. The <xref href=\"System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</p>\n<p>The <xref href=\"System.Collections.Generic.Stack`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to show that the string \"four\" is in the first copy of the stack, after which the <xref href=\"System.Collections.Generic.Stack`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method clears the copy and the <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property shows that the stack is empty.</p>Generic.Stack#1"
  syntax:
    content: 'public class Stack<T> : IEnumerable<T>, IReadOnlyCollection<T>, ICollection, IEnumerable'
    content.vb: >-
      Public Class Stack(Of T)
          Inherits IEnumerable(Of T)
          Implements IReadOnlyCollection(Of T), ICollection, IEnumerable
    typeParameters:
    - id: T
      description: "\n<p>Specifies the type of elements in the stack.</p>\n"
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Collections.Generic.Stack(Of T)
  name.vb: Stack(Of T)
- uid: System.Collections.Generic.Stack`1.#ctor
  commentId: M:System.Collections.Generic.Stack`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: Stack()
  fullName: System.Collections.Generic.Stack<T>.Stack()
  type: Constructor
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 34
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> class that is empty and has the default initial capacity.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The capacity can be decreased by calling <xref href=\"System.Collections.Generic.Stack`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example demonstrates this constructor and several methods of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> generic class. </p>\n<p>The code example creates a stack of strings with default capacity and uses the <xref href=\"System.Collections.Generic.Stack`1.Push(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to push five strings onto the stack. The elements of the stack are enumerated, which does not change the state of the stack. The <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method is used to pop the first string off the stack. The <xref href=\"System.Collections.Generic.Stack`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method is used to look at the next item on the stack, and then the <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method is used to pop it off.</p>\n<p>The <xref href=\"System.Collections.Generic.Stack`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref href=\"System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor that takes <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, creating a copy of the stack with the order of the elements reversed. The elements of the copy are displayed.</p>\n<p>An array twice the size of the stack is created, and the <xref href=\"System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to copy the array elements beginning at the middle of the array. The <xref href=\"System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</p>\n<p>The <xref href=\"System.Collections.Generic.Stack`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to show that the string \"four\" is in the first copy of the stack, after which the <xref href=\"System.Collections.Generic.Stack`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method clears the copy and the <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property shows that the stack is empty.</p>Generic.Stack#1"
  syntax:
    content: public Stack()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Stack(Of T).Stack()
- uid: System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: Stack(IEnumerable<T>)
  fullName: System.Collections.Generic.Stack<T>.Stack(System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 571
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The capacity can be decreased by calling <xref href=\"System.Collections.Generic.Stack`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The elements are copied onto the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> in the same order they are read by the <xref href=\"System.Collections.Generic.IEnumerator`1\" data-throw-if-not-resolved=\"false\"></xref> of the collection.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in <em>collection</em>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates this constructor and several methods of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> generic class. </p>\n<p>The code example creates a stack of strings with default capacity and uses the <xref href=\"System.Collections.Generic.Stack`1.Push(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to push five strings onto the stack. The elements of the stack are enumerated, which does not change the state of the stack. The <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method is used to pop the first string off the stack. The <xref href=\"System.Collections.Generic.Stack`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method is used to look at the next item on the stack, and then the <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method is used to pop it off.</p>\n<p>The <xref href=\"System.Collections.Generic.Stack`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref href=\"System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor that takes <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, creating a copy of the stack with the order of the elements reversed. The elements of the copy are displayed.</p>\n<p>An array twice the size of the stack is created, and the <xref href=\"System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to copy the array elements beginning at the middle of the array. The <xref href=\"System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</p>\n<p>The <xref href=\"System.Collections.Generic.Stack`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to show that the string \"four\" is in the first copy of the stack, after which the <xref href=\"System.Collections.Generic.Stack`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method clears the copy and the <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property shows that the stack is empty.</p>Generic.Stack#1"
  syntax:
    content: public Stack(IEnumerable<T> collection)
    content.vb: Public Sub New(collection As IEnumerable(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>The collection to copy elements from.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>collection</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.ICollection`1
    commentId: T:System.Collections.Generic.ICollection`1
  - type: System.Collections.Generic.IEnumerator`1
    commentId: T:System.Collections.Generic.IEnumerator`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Stack(Of T).Stack(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Stack(IEnumerable(Of T))
- uid: System.Collections.Generic.Stack`1.#ctor(System.Int32)
  commentId: M:System.Collections.Generic.Stack`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: Stack(Int32)
  fullName: System.Collections.Generic.Stack<T>.Stack(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 42
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The capacity can be decreased by calling <xref href=\"System.Collections.Generic.Stack`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is <em>capacity</em>.</p>\n"
  syntax:
    content: public Stack(int capacity)
    content.vb: Public Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
      description: "\n<p>The initial number of elements that the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> can contain.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than zero.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Stack(Of T).Stack(System.Int32)
- uid: System.Collections.Generic.Stack`1.Count
  commentId: P:System.Collections.Generic.Stack`1.Count
  id: Count
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.Generic.Stack<T>.Count
  type: Property
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 61
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the number of elements contained in the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The capacity of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> can store. <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that are actually in the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The capacity is always greater than or equal to <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref>. If <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref> exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example demonstrates several properties and methods of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> generic class, including the <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n<p>The code example creates a stack of strings with default capacity and uses the <xref href=\"System.Collections.Generic.Stack`1.Push(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to push five strings onto the stack. The elements of the stack are enumerated, which does not change the state of the stack. The <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method is used to pop the first string off the stack. The <xref href=\"System.Collections.Generic.Stack`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method is used to look at the next item on the stack, and then the <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method is used to pop it off.</p>\n<p>The <xref href=\"System.Collections.Generic.Stack`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref href=\"System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor that takes <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, creating a copy of the stack with the order of the elements reversed. The elements of the copy are displayed.</p>\n<p>An array twice the size of the stack is created, and the <xref href=\"System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to copy the array elements beginning at the middle of the array. The <xref href=\"System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</p>\n<p>The <xref href=\"System.Collections.Generic.Stack`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to show that the string \"four\" is in the first copy of the stack, after which the <xref href=\"System.Collections.Generic.Stack`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method clears the copy and the <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property shows that the stack is empty.</p>Generic.Stack#1"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of elements contained in the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.Stack(Of T).Count
- uid: System.Collections.Generic.Stack`1.Clear
  commentId: M:System.Collections.Generic.Stack`1.Clear
  id: Clear
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.Generic.Stack<T>.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 87
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes all objects from the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref> is set to zero, and references to other objects from elements of the collection are also released.</p>\n<p>The capacity remains unchanged. To reset the capacity of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>, call <xref href=\"System.Collections.Generic.Stack`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref>. Trimming an empty <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> sets the capacity of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> to the default capacity.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates several methods of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> generic class, including the <xref href=\"System.Collections.Generic.Stack`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>The code example creates a stack of strings with default capacity and uses the <xref href=\"System.Collections.Generic.Stack`1.Push(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to push five strings onto the stack. The elements of the stack are enumerated, which does not change the state of the stack. The <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method is used to pop the first string off the stack. The <xref href=\"System.Collections.Generic.Stack`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method is used to look at the next item on the stack, and then the <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method is used to pop it off.</p>\n<p>The <xref href=\"System.Collections.Generic.Stack`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref href=\"System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor that takes <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, creating a copy of the stack with the order of the elements reversed. The elements of the copy are displayed.</p>\n<p>An array twice the size of the stack is created, and the <xref href=\"System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to copy the array elements beginning at the middle of the array. The <xref href=\"System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</p>\n<p>The <xref href=\"System.Collections.Generic.Stack`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to show that the string \"four\" is in the first copy of the stack, after which the <xref href=\"System.Collections.Generic.Stack`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method clears the copy and the <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property shows that the stack is empty.</p>Generic.Stack#1"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Stack(Of T).Clear()
- uid: System.Collections.Generic.Stack`1.Contains(`0)
  commentId: M:System.Collections.Generic.Stack`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  fullName: System.Collections.Generic.Stack<T>.Contains(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 95
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Determines whether an element is in the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method determines equality using the default equality comparer <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> for <em>T</em>, the type of values in the list.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates several methods of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> generic class, including the <xref href=\"System.Collections.Generic.Stack`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>The code example creates a stack of strings with default capacity and uses the <xref href=\"System.Collections.Generic.Stack`1.Push(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to push five strings onto the stack. The elements of the stack are enumerated, which does not change the state of the stack. The <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method is used to pop the first string off the stack. The <xref href=\"System.Collections.Generic.Stack`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method is used to look at the next item on the stack, and then the <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method is used to pop it off.</p>\n<p>The <xref href=\"System.Collections.Generic.Stack`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref href=\"System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor that takes <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, creating a copy of the stack with the order of the elements reversed. The elements of the copy are displayed.</p>\n<p>An array twice the size of the stack is created, and the <xref href=\"System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to copy the array elements beginning at the middle of the array. The <xref href=\"System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</p>\n<p>The <xref href=\"System.Collections.Generic.Stack`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to show that the string \"four\" is in the first copy of the stack, after which the <xref href=\"System.Collections.Generic.Stack`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method clears the copy and the <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property shows that the stack is empty.</p>Generic.Stack#1"
  syntax:
    content: public bool Contains(T item)
    content.vb: Public Function Contains(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The object to locate in the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong> for reference types.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>item</em> is found in the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Stack(Of T).Contains(T)
- uid: System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  fullName: System.Collections.Generic.Stack<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 112
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Copies the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> to an existing one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>, starting at the specified array index.</p>\n"
  remarks: "\n<p>The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates several methods of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> generic class, including the <xref href=\"System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>The code example creates a stack of strings with default capacity and uses the <xref href=\"System.Collections.Generic.Stack`1.Push(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to push five strings onto the stack. The elements of the stack are enumerated, which does not change the state of the stack. The <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method is used to pop the first string off the stack. The <xref href=\"System.Collections.Generic.Stack`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method is used to look at the next item on the stack, and then the <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method is used to pop it off.</p>\n<p>The <xref href=\"System.Collections.Generic.Stack`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref href=\"System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor that takes <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, creating a copy of the stack with the order of the elements reversed. The elements of the copy are displayed.</p>\n<p>An array twice the size of the stack is created, and the <xref href=\"System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to copy the array elements beginning at the middle of the array. The <xref href=\"System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</p>\n<p>The <xref href=\"System.Collections.Generic.Stack`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to show that the string \"four\" is in the first copy of the stack, after which the <xref href=\"System.Collections.Generic.Stack`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method clears the copy and the <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property shows that the stack is empty.</p>Generic.Stack#1"
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex)
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> must have zero-based indexing.</p>\n"
    - id: arrayIndex
      type: System.Int32
      description: "\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>arrayIndex</em> is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The number of elements in the source <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>.</p>\n"
  seealso:
  - type: System.Collections.Generic.Stack`1.ToArray
    commentId: M:System.Collections.Generic.Stack`1.ToArray
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Stack(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: System.Collections.Generic.Stack`1.GetEnumerator
  commentId: M:System.Collections.Generic.Stack`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.Generic.Stack<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 176
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Returns an enumerator for the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in C++, <strong>For Each</strong> in Visual Basic) hides the complexity of the enumerators. Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. At this position, <xref href=\"System.Collections.Generic.Stack`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. Therefore, you must call <xref href=\"System.Collections.Generic.Stack`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.Generic.Stack`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.Generic.Stack`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until <xref href=\"System.Collections.Generic.Stack`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.Generic.Stack`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.Generic.Stack`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.Generic.Stack`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.Generic.Stack`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.Generic.Stack`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.Generic.Stack`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.Generic.Stack`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. You cannot set <xref href=\"System.Collections.Generic.Stack`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again; you must create a new enumerator instance instead.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>Default implementations of collections in <xref href=\"System.Collections.Generic\" data-throw-if-not-resolved=\"false\"></xref> are not synchronized.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example demonstrates that the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> generic class is enumerable. The <strong>foreach</strong> statement (<strong>For Each</strong> in Visual Basic, <strong>for each</strong> in C++) is used to enumerate the queue. </p>\n<p>The code example creates a stack of strings with default capacity and uses the <xref href=\"System.Collections.Generic.Stack`1.Push(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to push five strings onto the stack. The elements of the stack are enumerated, which does not change the state of the stack. The <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method is used to pop the first string off the stack. The <xref href=\"System.Collections.Generic.Stack`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method is used to look at the next item on the stack, and then the <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method is used to pop it off.</p>\n<p>The <xref href=\"System.Collections.Generic.Stack`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref href=\"System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor that takes <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, creating a copy of the stack with the order of the elements reversed. The elements of the copy are displayed.</p>\n<p>An array twice the size of the stack is created, and the <xref href=\"System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to copy the array elements beginning at the middle of the array. The <xref href=\"System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</p>\n<p>The <xref href=\"System.Collections.Generic.Stack`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to show that the string \"four\" is in the first copy of the stack, after which the <xref href=\"System.Collections.Generic.Stack`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method clears the copy and the <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property shows that the stack is empty.</p>Generic.Stack#1"
  syntax:
    content: public Stack<T>.Enumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As Stack(Of T).Enumerator
    return:
      type: System.Collections.Generic.Stack`1.Enumerator
      description: "\n<p>An <xref href=\"System.Collections.Generic.Stack`1.Enumerator\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.Stack`1.Enumerator
    commentId: T:System.Collections.Generic.Stack`1.Enumerator
  - type: System.Collections.Generic.IEnumerator`1
    commentId: T:System.Collections.Generic.IEnumerator`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Stack(Of T).GetEnumerator()
- uid: System.Collections.Generic.Stack`1.Peek
  commentId: M:System.Collections.Generic.Stack`1.Peek
  id: Peek
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: Peek()
  fullName: System.Collections.Generic.Stack<T>.Peek()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Peek
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 206
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Returns the object at the top of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> without removing it.</p>\n"
  remarks: "\n<p>This method is similar to the <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method, but <xref href=\"System.Collections.Generic.Stack`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> does not modify the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If type <em>T</em> is a reference type, <strong>null</strong> can be pushed onto the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> as a placeholder, if needed.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example demonstrates several methods of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> generic class, including the <xref href=\"System.Collections.Generic.Stack`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>The code example creates a stack of strings with default capacity and uses the <xref href=\"System.Collections.Generic.Stack`1.Push(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to push five strings onto the stack. The elements of the stack are enumerated, which does not change the state of the stack. The <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method is used to pop the first string off the stack. The <xref href=\"System.Collections.Generic.Stack`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method is used to look at the next item on the stack, and then the <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method is used to pop it off.</p>\n<p>The <xref href=\"System.Collections.Generic.Stack`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref href=\"System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor that takes <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, creating a copy of the stack with the order of the elements reversed. The elements of the copy are displayed.</p>\n<p>An array twice the size of the stack is created, and the <xref href=\"System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to copy the array elements beginning at the middle of the array. The <xref href=\"System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</p>\n<p>The <xref href=\"System.Collections.Generic.Stack`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to show that the string \"four\" is in the first copy of the stack, after which the <xref href=\"System.Collections.Generic.Stack`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method clears the copy and the <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property shows that the stack is empty.</p>Generic.Stack#1"
  syntax:
    content: public T Peek()
    content.vb: Public Function Peek As T
    return:
      type: '{T}'
      description: "\n<p>The object at the top of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> is empty.</p>\n"
  seealso:
  - type: System.Collections.Generic.Stack`1.Pop
    commentId: M:System.Collections.Generic.Stack`1.Pop
  - type: System.Collections.Generic.Stack`1.Push(`0)
    commentId: M:System.Collections.Generic.Stack`1.Push(`0)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Stack(Of T).Peek()
- uid: System.Collections.Generic.Stack`1.Pop
  commentId: M:System.Collections.Generic.Stack`1.Pop
  id: Pop
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: Pop()
  fullName: System.Collections.Generic.Stack<T>.Pop()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Pop
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 216
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes and returns the object at the top of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method is similar to the <xref href=\"System.Collections.Generic.Stack`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method, but <xref href=\"System.Collections.Generic.Stack`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> does not modify the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If type <em>T</em> is a reference type, <strong>null</strong> can be pushed onto the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> as a placeholder, if needed.</p>\n<p>\n<xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> is implemented as an array. This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example demonstrates several methods of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> generic class, including the <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>The code example creates a stack of strings with default capacity and uses the <xref href=\"System.Collections.Generic.Stack`1.Push(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to push five strings onto the stack. The elements of the stack are enumerated, which does not change the state of the stack. The <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method is used to pop the first string off the stack. The <xref href=\"System.Collections.Generic.Stack`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method is used to look at the next item on the stack, and then the <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method is used to pop it off.</p>\n<p>The <xref href=\"System.Collections.Generic.Stack`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref href=\"System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor that takes <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, creating a copy of the stack with the order of the elements reversed. The elements of the copy are displayed.</p>\n<p>An array twice the size of the stack is created, and the <xref href=\"System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to copy the array elements beginning at the middle of the array. The <xref href=\"System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</p>\n<p>The <xref href=\"System.Collections.Generic.Stack`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to show that the string \"four\" is in the first copy of the stack, after which the <xref href=\"System.Collections.Generic.Stack`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method clears the copy and the <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property shows that the stack is empty.</p>Generic.Stack#1"
  syntax:
    content: public T Pop()
    content.vb: Public Function Pop As T
    return:
      type: '{T}'
      description: "\n<p>The object removed from the top of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> is empty.</p>\n"
  seealso:
  - type: System.Collections.Generic.Stack`1.Peek
    commentId: M:System.Collections.Generic.Stack`1.Peek
  - type: System.Collections.Generic.Stack`1.Push(`0)
    commentId: M:System.Collections.Generic.Stack`1.Push(`0)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Stack(Of T).Pop()
- uid: System.Collections.Generic.Stack`1.Push(`0)
  commentId: M:System.Collections.Generic.Stack`1.Push(`0)
  id: Push(`0)
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: Push(T)
  fullName: System.Collections.Generic.Stack<T>.Push(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Push
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 229
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Inserts an object at the top of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> is implemented as an array.</p>\n<p>If <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref> already equals the capacity, the capacity of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</p>\n<p>If type <em>T</em> is a reference type, <strong>null</strong> can be pushed onto the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> as a placeholder, if needed. It occupies a slot in the stack and is treated like any object.</p>\n<p>If <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref> is less than the capacity of the stack, <xref href=\"System.Collections.Generic.Stack`1.Push(`0)\" data-throw-if-not-resolved=\"false\"></xref> is an O(1) operation. If the capacity needs to be increased to accommodate the new element, <xref href=\"System.Collections.Generic.Stack`1.Push(`0)\" data-throw-if-not-resolved=\"false\"></xref> becomes an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates several methods of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> generic class, including the <xref href=\"System.Collections.Generic.Stack`1.Push(`0)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>The code example creates a stack of strings with default capacity and uses the <xref href=\"System.Collections.Generic.Stack`1.Push(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to push five strings onto the stack. The elements of the stack are enumerated, which does not change the state of the stack. The <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method is used to pop the first string off the stack. The <xref href=\"System.Collections.Generic.Stack`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method is used to look at the next item on the stack, and then the <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method is used to pop it off.</p>\n<p>The <xref href=\"System.Collections.Generic.Stack`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref href=\"System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor that takes <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, creating a copy of the stack with the order of the elements reversed. The elements of the copy are displayed.</p>\n<p>An array twice the size of the stack is created, and the <xref href=\"System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to copy the array elements beginning at the middle of the array. The <xref href=\"System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</p>\n<p>The <xref href=\"System.Collections.Generic.Stack`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to show that the string \"four\" is in the first copy of the stack, after which the <xref href=\"System.Collections.Generic.Stack`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method clears the copy and the <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property shows that the stack is empty.</p>Generic.Stack#1"
  syntax:
    content: public void Push(T item)
    content.vb: Public Sub Push(item As T)
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The object to push onto the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong> for reference types.</p>\n"
  seealso:
  - type: System.Collections.Generic.Stack`1.Peek
    commentId: M:System.Collections.Generic.Stack`1.Peek
  - type: System.Collections.Generic.Stack`1.Pop
    commentId: M:System.Collections.Generic.Stack`1.Pop
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Stack(Of T).Push(T)
- uid: System.Collections.Generic.Stack`1.ToArray
  commentId: M:System.Collections.Generic.Stack`1.ToArray
  id: ToArray
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: ToArray()
  fullName: System.Collections.Generic.Stack<T>.ToArray()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToArray
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 240
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Copies the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> to a new array.</p>\n"
  remarks: "\n<p>The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates several methods of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> generic class, including the <xref href=\"System.Collections.Generic.Stack`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>The code example creates a stack of strings with default capacity and uses the <xref href=\"System.Collections.Generic.Stack`1.Push(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to push five strings onto the stack. The elements of the stack are enumerated, which does not change the state of the stack. The <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method is used to pop the first string off the stack. The <xref href=\"System.Collections.Generic.Stack`1.Peek\" data-throw-if-not-resolved=\"false\"></xref> method is used to look at the next item on the stack, and then the <xref href=\"System.Collections.Generic.Stack`1.Pop\" data-throw-if-not-resolved=\"false\"></xref> method is used to pop it off.</p>\n<p>The <xref href=\"System.Collections.Generic.Stack`1.ToArray\" data-throw-if-not-resolved=\"false\"></xref> method is used to create an array and copy the stack elements to it, then the array is passed to the <xref href=\"System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor that takes <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, creating a copy of the stack with the order of the elements reversed. The elements of the copy are displayed.</p>\n<p>An array twice the size of the stack is created, and the <xref href=\"System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is used to copy the array elements beginning at the middle of the array. The <xref href=\"System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</p>\n<p>The <xref href=\"System.Collections.Generic.Stack`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is used to show that the string \"four\" is in the first copy of the stack, after which the <xref href=\"System.Collections.Generic.Stack`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method clears the copy and the <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property shows that the stack is empty.</p>Generic.Stack#1"
  syntax:
    content: public T[] ToArray()
    content.vb: Public Function ToArray As T()
    return:
      type: '{T}[]'
      description: "\n<p>A new array containing copies of the elements of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)
    commentId: M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)
  - type: System.Collections.Generic.Stack`1.Pop
    commentId: M:System.Collections.Generic.Stack`1.Pop
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Stack(Of T).ToArray()
- uid: System.Collections.Generic.Stack`1.TrimExcess
  commentId: M:System.Collections.Generic.Stack`1.TrimExcess
  id: TrimExcess
  parent: System.Collections.Generic.Stack`1
  langs:
  - csharp
  - vb
  name: TrimExcess()
  fullName: System.Collections.Generic.Stack<T>.TrimExcess()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TrimExcess
    path: src/System.Collections/src/System/Collections/Generic/Stack.cs
    startLine: 193
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Sets the capacity to the actual number of elements in the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>, if that number is less than 90 percent of current capacity.</p>\n"
  remarks: "\n<p>This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection. The cost of reallocating and copying a large <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> can be considerable, however, so the <xref href=\"System.Collections.Generic.Stack`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> method does nothing if the list is at more than 90 percent of capacity. This avoids incurring a large reallocation cost for a relatively small gain.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.Stack`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>To reset a <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> to its initial state, call the <xref href=\"System.Collections.Generic.Stack`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method before calling <xref href=\"System.Collections.Generic.Stack`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> method. Trimming an empty <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> sets the capacity of the <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref> to the default capacity.</p>\n"
  syntax:
    content: public void TrimExcess()
    content.vb: Public Sub TrimExcess
  seealso:
  - type: System.Collections.Generic.Stack`1.Clear
    commentId: M:System.Collections.Generic.Stack`1.Clear
  - type: System.Collections.Generic.Stack`1.Count
    commentId: P:System.Collections.Generic.Stack`1.Count
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Stack(Of T).TrimExcess()
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: Generic.IReadOnlyCollection<>
  fullName: System.Collections.Generic.IReadOnlyCollection<>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of )
  name.vb: Generic.IReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: '{T}[]'
  isExternal: false
  name: T[]
  fullName: T[]
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.Stack`1.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: Stack.Enumerator<>
  fullName: System.Collections.Generic.Stack.Enumerator<>
  fullname.vb: System.Collections.Generic.Stack.Enumerator(Of )
  name.vb: Stack.Enumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.Stack`1.Enumerator
    name: Stack.Enumerator
    fullName: System.Collections.Generic.Stack.Enumerator
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Stack`1.Enumerator
    name: Stack.Enumerator
    fullName: System.Collections.Generic.Stack.Enumerator
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
