items:
- uid: System.IObserver`1
  commentId: T:System.IObserver`1
  id: IObserver`1
  parent: System
  children:
  - System.IObserver`1.OnCompleted
  - System.IObserver`1.OnError(System.Exception)
  - System.IObserver`1.OnNext(`0)
  langs:
  - csharp
  - vb
  name: IObserver<T>
  fullName: System.IObserver<T>
  type: Interface
  source:
    remote:
      path: src/mscorlib/src/System/IObserver.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IObserver
    path: src/mscorlib/src/System/IObserver.cs
    startLine: 20
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Provides a mechanism for receiving push-based notifications.</p>\n"
  example:
  - "\n<p>The following example illustrates the observer design pattern. It defines a <code>Location</code> class that contains latitude and longitude information.</p>System.IObserver.Class#5<p>The <code>LocationReporter</code> class provides the <xref href=\"System.IObserver`1\" data-throw-if-not-resolved=\"false\"></xref> implementation. It displays information about the current location to the console. Its constructor includes a <em>name</em> parameter, which allows the <code>LocationReporter</code> instance to identify itself in its string output. It also includes a <code>Subscribe</code> method, which wraps a call to the provider's <xref href=\"System.IObservable`1.Subscribe(System.IObserver{`0})\" data-throw-if-not-resolved=\"false\"></xref> method. This enables the method to assign the returned <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> reference to a private variable. The <code>LocationReporter</code> class also includes an <code>Unsubscribe</code> method, which calls the <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method of the object returned by the <xref href=\"System.IObservable`1.Subscribe(System.IObserver{`0})\" data-throw-if-not-resolved=\"false\"></xref> method. The following code defines the <code>LocationReporter</code> class. </p>System.IObserver.Class#8<p>The <code>LocationTracker</code> class provides the <xref href=\"System.IObservable`1\" data-throw-if-not-resolved=\"false\"></xref> implementation. Its <code>TrackLocation</code> method is passed a nullable <code>Location</code> object that contains the latitude and longitude data. If the <code>Location</code> value is not <strong>null</strong>, the <code>TrackLocation</code> method calls the <xref href=\"System.IObserver`1.OnNext(`0)\" data-throw-if-not-resolved=\"false\"></xref> method of each observer. </p>System.IObserver.Class#6<p>If the <code>Location</code> value is <strong>null</strong>, the <code>TrackLocation</code> method instantiates a <code>LocationNotFoundException</code> object, which is shown in the following example. It then calls each observer's <xref href=\"System.IObserver`1.OnError(System.Exception)\" data-throw-if-not-resolved=\"false\"></xref> method and passes it the <code>LocationNotFoundException</code> object. Note that <code>LocationNotFoundException</code> derives from <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> but does not add any new members.</p>System.IObserver.Class#7<p>Observers register to receive notifications from a <code>TrackLocation</code> object by calling its <xref href=\"System.IObservable`1.Subscribe(System.IObserver{`0})\" data-throw-if-not-resolved=\"false\"></xref> method, which assigns a reference to the observer object to a private generic <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> object. The method returns an <code>Unsubscriber</code> object, which is an <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> implementation that enables observers to stop receiving notifications. The <code>LocationTracker</code> class also includes an <code>EndTransmission</code> method. When no further location data is available, the method calls each observer's <xref href=\"System.IObserver`1.OnCompleted\" data-throw-if-not-resolved=\"false\"></xref> method and then clears the internal list of observers.</p><p>The following code then instantiates the provider and the observer.</p>System.IObserver.Class#9"
  syntax:
    content: public interface IObserver<in T>
    content.vb: Public Interface IObserver(Of In T)
    typeParameters:
    - id: T
      description: "\n<p>The object that provides notification information.</p>\n"
  seealso:
  - type: System.IObservable`1
    commentId: T:System.IObservable`1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: System.IObserver(Of T)
  name.vb: IObserver(Of T)
  nameWithType: IObserver<T>
  nameWithType.vb: IObserver(Of T)
- uid: System.IObserver`1.OnCompleted
  commentId: M:System.IObserver`1.OnCompleted
  id: OnCompleted
  parent: System.IObserver`1
  langs:
  - csharp
  - vb
  name: OnCompleted()
  fullName: System.IObserver<T>.OnCompleted()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IObserver.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OnCompleted
    path: src/mscorlib/src/System/IObserver.cs
    startLine: 24
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Notifies the observer that the provider has finished sending push-based notifications.</p>\n"
  example:
  - "\n<p>The following example provides an implementation of the <xref href=\"System.IObserver`1.OnCompleted\" data-throw-if-not-resolved=\"false\"></xref> method in a latitude/longitude tracking application. The method simply reports that no further data is available and calls the provider's <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> implementation. See the Example section of the <xref href=\"System.IObserver`1\" data-throw-if-not-resolved=\"false\"></xref> topic for the complete example.</p>System.IObserver.Class#11"
  syntax:
    content: void OnCompleted()
    content.vb: Sub OnCompleted
  fullName.vb: System.IObserver(Of T).OnCompleted()
  nameWithType: IObserver<T>.OnCompleted()
  nameWithType.vb: IObserver(Of T).OnCompleted()
- uid: System.IObserver`1.OnError(System.Exception)
  commentId: M:System.IObserver`1.OnError(System.Exception)
  id: OnError(System.Exception)
  parent: System.IObserver`1
  langs:
  - csharp
  - vb
  name: OnError(Exception)
  fullName: System.IObserver<T>.OnError(System.Exception)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IObserver.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OnError
    path: src/mscorlib/src/System/IObserver.cs
    startLine: 23
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Notifies the observer that the provider has experienced an error condition.</p>\n"
  example:
  - "\n<p>The following example provides an implementation of the <xref href=\"System.IObserver`1.OnError(System.Exception)\" data-throw-if-not-resolved=\"false\"></xref> method in a latitude/longitude tracking application. The method simply reports that data is currently unavailable; it does not make use of the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> object passed to it as a parameter. See the Example section of the <xref href=\"System.IObserver`1\" data-throw-if-not-resolved=\"false\"></xref> topic for the complete example.</p>System.IObserver.Class#10"
  syntax:
    content: void OnError(Exception error)
    content.vb: Sub OnError(error As Exception)
    parameters:
    - id: error
      type: System.Exception
      description: "\n<p>An object that provides additional information about the error.</p>\n"
  fullName.vb: System.IObserver(Of T).OnError(System.Exception)
  nameWithType: IObserver<T>.OnError(Exception)
  nameWithType.vb: IObserver(Of T).OnError(Exception)
- uid: System.IObserver`1.OnNext(`0)
  commentId: M:System.IObserver`1.OnNext(`0)
  id: OnNext(`0)
  parent: System.IObserver`1
  langs:
  - csharp
  - vb
  name: OnNext(T)
  fullName: System.IObserver<T>.OnNext(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IObserver.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OnNext
    path: src/mscorlib/src/System/IObserver.cs
    startLine: 22
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Provides the observer with new data.</p>\n"
  example:
  - "\n<p>The following example provides an implementation of the <xref href=\"System.IObserver`1.OnNext(`0)\" data-throw-if-not-resolved=\"false\"></xref> method in a latitude/longitude tracking application. See the Example section of the <xref href=\"System.IObserver`1\" data-throw-if-not-resolved=\"false\"></xref> topic for the complete example.</p>System.IObserver.Class#12"
  syntax:
    content: void OnNext(T value)
    content.vb: Sub OnNext(value As T)
    parameters:
    - id: value
      type: '{T}'
      description: "\n<p>The current notification information.</p>\n"
  fullName.vb: System.IObserver(Of T).OnNext(T)
  nameWithType: IObserver<T>.OnNext(T)
  nameWithType.vb: IObserver(Of T).OnNext(T)
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
  nameWithType: Exception
  commentId: T:System.Exception
- uid: '{T}'
  definition: T
  name: T
  fullName: T
  nameWithType: T
  commentId: '!:T'
- uid: T
  isExternal: false
  name: T
  fullName: T
  nameWithType: T
