items:
- uid: System.Collections.Generic.LinkedList`1
  commentId: T:System.Collections.Generic.LinkedList`1
  id: LinkedList`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.LinkedList`1.#ctor
  - System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)
  - System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
  - System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)
  - System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
  - System.Collections.Generic.LinkedList`1.AddFirst(`0)
  - System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})
  - System.Collections.Generic.LinkedList`1.AddLast(`0)
  - System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})
  - System.Collections.Generic.LinkedList`1.Clear
  - System.Collections.Generic.LinkedList`1.Contains(`0)
  - System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.LinkedList`1.Count
  - System.Collections.Generic.LinkedList`1.Find(`0)
  - System.Collections.Generic.LinkedList`1.FindLast(`0)
  - System.Collections.Generic.LinkedList`1.First
  - System.Collections.Generic.LinkedList`1.GetEnumerator
  - System.Collections.Generic.LinkedList`1.Last
  - System.Collections.Generic.LinkedList`1.Remove(`0)
  - System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})
  - System.Collections.Generic.LinkedList`1.RemoveFirst
  - System.Collections.Generic.LinkedList`1.RemoveLast
  langs:
  - csharp
  - vb
  name: LinkedList<T>
  fullName: System.Collections.Generic.LinkedList<T>
  type: Class
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LinkedList
    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
    startLine: 10
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Represents a doubly linked list.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> is a general-purpose linked list. It supports enumerators and implements the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> interface, consistent with other collection classes in the .NET Framework.</p>\n<p>\n<xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> provides separate nodes of type <xref href=\"System.Collections.Generic.LinkedListNode`1\" data-throw-if-not-resolved=\"false\"></xref>, so insertion and removal are O(1) operations.</p>\n<p>You can remove nodes and reinsert them, either in the same list or in another list, which results in no additional objects allocated on the heap. Because the list also maintains an internal count, getting the <xref href=\"System.Collections.Generic.LinkedList`1.Count\" data-throw-if-not-resolved=\"false\"></xref> property is an O(1) operation. </p>\n<p>Each node in a <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> object is of the type <xref href=\"System.Collections.Generic.LinkedListNode`1\" data-throw-if-not-resolved=\"false\"></xref>. Because the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> is doubly linked, each node points forward to the <xref href=\"System.Collections.Generic.LinkedListNode`1.Next\" data-throw-if-not-resolved=\"false\"></xref> node and backward to the <xref href=\"System.Collections.Generic.LinkedListNode`1.Previous\" data-throw-if-not-resolved=\"false\"></xref> node. </p>\n<p>Lists that contain reference types perform better when a node and its value are created at the same time. <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid <xref href=\"System.Collections.Generic.LinkedListNode`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property for reference types and allows duplicate values. </p>\n<p>If the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> is empty, the <xref href=\"System.Collections.Generic.LinkedList`1.First\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Generic.LinkedList`1.Last\" data-throw-if-not-resolved=\"false\"></xref> properties contain <strong>null</strong>.</p>\n<p>The <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> class does not support chaining, splitting, cycles, or other features that can leave the list in an inconsistent state. The list remains consistent on a single thread. The only multithreaded scenario supported by <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> is multithreaded read operations. </p>\n"
  example:
  - "\n<p>The following code example demonstrates many features of the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> class. </p>Generic.LinkedList#1"
  syntax:
    content: 'public class LinkedList<T> : ICollection<T>, IEnumerable<T>, IReadOnlyCollection<T>, ICollection, IEnumerable'
    content.vb: >-
      Public Class LinkedList(Of T)
          Inherits ICollection(Of T)
          Implements IEnumerable(Of T), IReadOnlyCollection(Of T), ICollection, IEnumerable
    typeParameters:
    - id: T
      description: "\n<p>Specifies the element type of the linked list.</p>\n"
  seealso:
  - type: System.Collections.Generic.LinkedListNode`1
    commentId: T:System.Collections.Generic.LinkedListNode`1
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Collections.Generic.LinkedList(Of T)
  name.vb: LinkedList(Of T)
- uid: System.Collections.Generic.LinkedList`1.#ctor
  commentId: M:System.Collections.Generic.LinkedList`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: LinkedList()
  fullName: System.Collections.Generic.LinkedList<T>.LinkedList()
  type: Constructor
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
    startLine: 20
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> class that is empty.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid <xref href=\"System.Collections.Generic.LinkedListNode`1.Value\" data-throw-if-not-resolved=\"false\"></xref> for reference types and allows duplicate values.</p>\n<p>If the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> is empty, the <xref href=\"System.Collections.Generic.LinkedList`1.First\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Generic.LinkedList`1.Last\" data-throw-if-not-resolved=\"false\"></xref> properties contain <strong>null</strong>.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example creates and initializes a <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> of type <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>, adds several nodes, and then displays its contents.</p>System.Collections.Generic.LinkedList.ctor#1"
  syntax:
    content: public LinkedList()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).LinkedList()
- uid: System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: LinkedList(IEnumerable<T>)
  fullName: System.Collections.Generic.LinkedList<T>.LinkedList(System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 211
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> class that contains elements copied from the specified <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> and has sufficient capacity to accommodate the number of elements copied. </p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid <xref href=\"System.Collections.Generic.LinkedListNode`1.Value\" data-throw-if-not-resolved=\"false\"></xref> for reference types and allows duplicate values.</p>\n<p>If <em>collection</em> has no elements then the new <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> is empty, and the <xref href=\"System.Collections.Generic.LinkedList`1.First\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Generic.LinkedList`1.Last\" data-throw-if-not-resolved=\"false\"></xref> properties contain <strong>null</strong>.</p>\n<p>This constructor is an O(n) operation, where <em>n</em> is the number of elements in <em>collection</em>.</p>\n"
  example:
  - "\n<p>For an example that includes this constructor, see the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public LinkedList(IEnumerable<T> collection)
    content.vb: Public Sub New(collection As IEnumerable(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>The <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> whose elements are copied to the new <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>collection</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).LinkedList(System.Collections.Generic.IEnumerable(Of T))
  name.vb: LinkedList(IEnumerable(Of T))
- uid: System.Collections.Generic.LinkedList`1.Count
  commentId: P:System.Collections.Generic.LinkedList`1.Count
  id: Count
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.Generic.LinkedList<T>.Count
  type: Property
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
    startLine: 37
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the number of nodes actually contained in the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  example:
  - "\n<p>For an example that includes this property, see the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of nodes actually contained in the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.LinkedList(Of T).Count
- uid: System.Collections.Generic.LinkedList`1.First
  commentId: P:System.Collections.Generic.LinkedList`1.First
  id: First
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: First
  fullName: System.Collections.Generic.LinkedList<T>.First
  type: Property
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: First
    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
    startLine: 42
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the first node of the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid <xref href=\"System.Collections.Generic.LinkedListNode`1.Value\" data-throw-if-not-resolved=\"false\"></xref> for reference types and allows duplicate values.</p>\n<p>If the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> is empty, the <xref href=\"System.Collections.Generic.LinkedList`1.First\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Generic.LinkedList`1.Last\" data-throw-if-not-resolved=\"false\"></xref> properties contain <strong>null</strong>.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  example:
  - "\n<p>For an example that includes this property, see the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public LinkedListNode<T> First { get; }
    content.vb: Public ReadOnly Property First As LinkedListNode(Of T)
    parameters: []
    return:
      type: System.Collections.Generic.LinkedListNode{{T}}
      description: "\n<p>The first <xref href=\"System.Collections.Generic.LinkedListNode`1\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.LinkedList(Of T).First
- uid: System.Collections.Generic.LinkedList`1.Last
  commentId: P:System.Collections.Generic.LinkedList`1.Last
  id: Last
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: Last
  fullName: System.Collections.Generic.LinkedList<T>.Last
  type: Property
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Last
    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
    startLine: 47
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the last node of the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid <xref href=\"System.Collections.Generic.LinkedListNode`1.Value\" data-throw-if-not-resolved=\"false\"></xref> for reference types and allows duplicate values.</p>\n<p>If the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> is empty, the <xref href=\"System.Collections.Generic.LinkedList`1.First\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Generic.LinkedList`1.Last\" data-throw-if-not-resolved=\"false\"></xref> properties contain <strong>null</strong>.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  example:
  - "\n<p>For an example that includes this property, see the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public LinkedListNode<T> Last { get; }
    content.vb: Public ReadOnly Property Last As LinkedListNode(Of T)
    parameters: []
    return:
      type: System.Collections.Generic.LinkedListNode{{T}}
      description: "\n<p>The last <xref href=\"System.Collections.Generic.LinkedListNode`1\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.LinkedList(Of T).Last
- uid: System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)
  commentId: M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)
  id: AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: AddAfter(LinkedListNode<T>, T)
  fullName: System.Collections.Generic.LinkedList<T>.AddAfter(System.Collections.Generic.LinkedListNode<T>, T)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAfter
    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
    startLine: 62
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Adds a new node containing the specified value after the specified existing node in the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid <xref href=\"System.Collections.Generic.LinkedListNode`1.Value\" data-throw-if-not-resolved=\"false\"></xref> for reference types and allows duplicate values.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>For an example that includes this method, see the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public LinkedListNode<T> AddAfter(LinkedListNode<T> node, T value)
    content.vb: Public Function AddAfter(node As LinkedListNode(Of T), value As T) As LinkedListNode(Of T)
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode{{T}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.LinkedListNode`1\" data-throw-if-not-resolved=\"false\"></xref> after which to insert a new <xref href=\"System.Collections.Generic.LinkedListNode`1\" data-throw-if-not-resolved=\"false\"></xref> containing <em>value</em>.</p>\n"
    - id: value
      type: '{T}'
      description: "\n<p>The value to add to the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Collections.Generic.LinkedListNode{{T}}
      description: "\n<p>The new <xref href=\"System.Collections.Generic.LinkedListNode`1\" data-throw-if-not-resolved=\"false\"></xref> containing <em>value</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>node</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>node</em> is not in the current <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).AddAfter(System.Collections.Generic.LinkedListNode(Of T), T)
  name.vb: AddAfter(LinkedListNode(Of T), T)
- uid: System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
  commentId: M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
  id: AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: AddAfter(LinkedListNode<T>, LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.AddAfter(System.Collections.Generic.LinkedListNode<T>, System.Collections.Generic.LinkedListNode<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAfter
    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
    startLine: 70
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Adds the specified new node after the specified existing node in the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid <xref href=\"System.Collections.Generic.LinkedListNode`1.Value\" data-throw-if-not-resolved=\"false\"></xref> for reference types and allows duplicate values.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>For an example that includes this method, see the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public void AddAfter(LinkedListNode<T> node, LinkedListNode<T> newNode)
    content.vb: Public Sub AddAfter(node As LinkedListNode(Of T), newNode As LinkedListNode(Of T))
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode{{T}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.LinkedListNode`1\" data-throw-if-not-resolved=\"false\"></xref> after which to insert <em>newNode</em>.</p>\n"
    - id: newNode
      type: System.Collections.Generic.LinkedListNode{{T}}
      description: "\n<p>The new <xref href=\"System.Collections.Generic.LinkedListNode`1\" data-throw-if-not-resolved=\"false\"></xref> to add to the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>node</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>newNode</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>node</em> is not in the current <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>newNode</em> belongs to another <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).AddAfter(System.Collections.Generic.LinkedListNode(Of T), System.Collections.Generic.LinkedListNode(Of T))
  name.vb: AddAfter(LinkedListNode(Of T), LinkedListNode(Of T))
- uid: System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)
  commentId: M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)
  id: AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: AddBefore(LinkedListNode<T>, T)
  fullName: System.Collections.Generic.LinkedList<T>.AddBefore(System.Collections.Generic.LinkedListNode<T>, T)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddBefore
    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
    startLine: 78
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Adds a new node containing the specified value before the specified existing node in the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid <xref href=\"System.Collections.Generic.LinkedListNode`1.Value\" data-throw-if-not-resolved=\"false\"></xref> for reference types and allows duplicate values.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>For an example that includes this method, see the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public LinkedListNode<T> AddBefore(LinkedListNode<T> node, T value)
    content.vb: Public Function AddBefore(node As LinkedListNode(Of T), value As T) As LinkedListNode(Of T)
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode{{T}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.LinkedListNode`1\" data-throw-if-not-resolved=\"false\"></xref> before which to insert a new <xref href=\"System.Collections.Generic.LinkedListNode`1\" data-throw-if-not-resolved=\"false\"></xref> containing <em>value</em>.</p>\n"
    - id: value
      type: '{T}'
      description: "\n<p>The value to add to the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Collections.Generic.LinkedListNode{{T}}
      description: "\n<p>The new <xref href=\"System.Collections.Generic.LinkedListNode`1\" data-throw-if-not-resolved=\"false\"></xref> containing <em>value</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>node</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>node</em> is not in the current <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).AddBefore(System.Collections.Generic.LinkedListNode(Of T), T)
  name.vb: AddBefore(LinkedListNode(Of T), T)
- uid: System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
  commentId: M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
  id: AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: AddBefore(LinkedListNode<T>, LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.AddBefore(System.Collections.Generic.LinkedListNode<T>, System.Collections.Generic.LinkedListNode<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddBefore
    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
    startLine: 90
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Adds the specified new node before the specified existing node in the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid <xref href=\"System.Collections.Generic.LinkedListNode`1.Value\" data-throw-if-not-resolved=\"false\"></xref> for reference types and allows duplicate values.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>For an example that includes this method, see the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public void AddBefore(LinkedListNode<T> node, LinkedListNode<T> newNode)
    content.vb: Public Sub AddBefore(node As LinkedListNode(Of T), newNode As LinkedListNode(Of T))
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode{{T}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.LinkedListNode`1\" data-throw-if-not-resolved=\"false\"></xref> before which to insert <em>newNode</em>.</p>\n"
    - id: newNode
      type: System.Collections.Generic.LinkedListNode{{T}}
      description: "\n<p>The new <xref href=\"System.Collections.Generic.LinkedListNode`1\" data-throw-if-not-resolved=\"false\"></xref> to add to the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>node</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>newNode</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>node</em> is not in the current <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>newNode</em> belongs to another <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).AddBefore(System.Collections.Generic.LinkedListNode(Of T), System.Collections.Generic.LinkedListNode(Of T))
  name.vb: AddBefore(LinkedListNode(Of T), LinkedListNode(Of T))
- uid: System.Collections.Generic.LinkedList`1.AddFirst(`0)
  commentId: M:System.Collections.Generic.LinkedList`1.AddFirst(`0)
  id: AddFirst(`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: AddFirst(T)
  fullName: System.Collections.Generic.LinkedList<T>.AddFirst(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddFirst
    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
    startLine: 102
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Adds a new node containing the specified value at the start of the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid <xref href=\"System.Collections.Generic.LinkedListNode`1.Value\" data-throw-if-not-resolved=\"false\"></xref> for reference types and allows duplicate values.</p>\n<p>If the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> is empty, the new node becomes the <xref href=\"System.Collections.Generic.LinkedList`1.First\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Collections.Generic.LinkedList`1.Last\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>For an example that includes this method, see the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public LinkedListNode<T> AddFirst(T value)
    content.vb: Public Function AddFirst(value As T) As LinkedListNode(Of T)
    parameters:
    - id: value
      type: '{T}'
      description: "\n<p>The value to add at the start of the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Collections.Generic.LinkedListNode{{T}}
      description: "\n<p>The new <xref href=\"System.Collections.Generic.LinkedListNode`1\" data-throw-if-not-resolved=\"false\"></xref> containing <em>value</em>.</p>\n"
  seealso:
  - type: System.Collections.Generic.LinkedList`1.RemoveFirst
    commentId: M:System.Collections.Generic.LinkedList`1.RemoveFirst
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).AddFirst(T)
- uid: System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})
  commentId: M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})
  id: AddFirst(System.Collections.Generic.LinkedListNode{`0})
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: AddFirst(LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.AddFirst(System.Collections.Generic.LinkedListNode<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddFirst
    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
    startLine: 117
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Adds the specified new node at the start of the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid <xref href=\"System.Collections.Generic.LinkedListNode`1.Value\" data-throw-if-not-resolved=\"false\"></xref> for reference types and allows duplicate values.</p>\n<p>If the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> is empty, the new node becomes the <xref href=\"System.Collections.Generic.LinkedList`1.First\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Collections.Generic.LinkedList`1.Last\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>For an example that includes this method, see the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public void AddFirst(LinkedListNode<T> node)
    content.vb: Public Sub AddFirst(node As LinkedListNode(Of T))
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode{{T}}
      description: "\n<p>The new <xref href=\"System.Collections.Generic.LinkedListNode`1\" data-throw-if-not-resolved=\"false\"></xref> to add at the start of the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>node</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>node</em> belongs to another <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.LinkedList`1.RemoveFirst
    commentId: M:System.Collections.Generic.LinkedList`1.RemoveFirst
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).AddFirst(System.Collections.Generic.LinkedListNode(Of T))
  name.vb: AddFirst(LinkedListNode(Of T))
- uid: System.Collections.Generic.LinkedList`1.AddLast(`0)
  commentId: M:System.Collections.Generic.LinkedList`1.AddLast(`0)
  id: AddLast(`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: AddLast(T)
  fullName: System.Collections.Generic.LinkedList<T>.AddLast(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddLast
    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
    startLine: 133
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Adds a new node containing the specified value at the end of the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid <xref href=\"System.Collections.Generic.LinkedListNode`1.Value\" data-throw-if-not-resolved=\"false\"></xref> for reference types and allows duplicate values.</p>\n<p>If the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> is empty, the new node becomes the <xref href=\"System.Collections.Generic.LinkedList`1.First\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Collections.Generic.LinkedList`1.Last\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>For an example that includes this method, see the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public LinkedListNode<T> AddLast(T value)
    content.vb: Public Function AddLast(value As T) As LinkedListNode(Of T)
    parameters:
    - id: value
      type: '{T}'
      description: "\n<p>The value to add at the end of the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Collections.Generic.LinkedListNode{{T}}
      description: "\n<p>The new <xref href=\"System.Collections.Generic.LinkedListNode`1\" data-throw-if-not-resolved=\"false\"></xref> containing <em>value</em>.</p>\n"
  seealso:
  - type: System.Collections.Generic.LinkedList`1.RemoveLast
    commentId: M:System.Collections.Generic.LinkedList`1.RemoveLast
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).AddLast(T)
- uid: System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})
  commentId: M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})
  id: AddLast(System.Collections.Generic.LinkedListNode{`0})
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: AddLast(LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.AddLast(System.Collections.Generic.LinkedListNode<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddLast
    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
    startLine: 147
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Adds the specified new node at the end of the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid <xref href=\"System.Collections.Generic.LinkedListNode`1.Value\" data-throw-if-not-resolved=\"false\"></xref> for reference types and allows duplicate values.</p>\n<p>If the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> is empty, the new node becomes the <xref href=\"System.Collections.Generic.LinkedList`1.First\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Collections.Generic.LinkedList`1.Last\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>For an example that includes this method, see the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public void AddLast(LinkedListNode<T> node)
    content.vb: Public Sub AddLast(node As LinkedListNode(Of T))
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode{{T}}
      description: "\n<p>The new <xref href=\"System.Collections.Generic.LinkedListNode`1\" data-throw-if-not-resolved=\"false\"></xref> to add at the end of the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>node</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>node</em> belongs to another <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.LinkedList`1.RemoveLast
    commentId: M:System.Collections.Generic.LinkedList`1.RemoveLast
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).AddLast(System.Collections.Generic.LinkedListNode(Of T))
  name.vb: AddLast(LinkedListNode(Of T))
- uid: System.Collections.Generic.LinkedList`1.Clear
  commentId: M:System.Collections.Generic.LinkedList`1.Clear
  id: Clear
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.Generic.LinkedList<T>.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
    startLine: 162
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes all nodes from the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.LinkedList`1.Count\" data-throw-if-not-resolved=\"false\"></xref> is set to zero, and references to other objects from elements of the collection are also released.  <xref href=\"System.Collections.Generic.LinkedList`1.First\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Generic.LinkedList`1.Last\" data-throw-if-not-resolved=\"false\"></xref> are set to <strong>null</strong>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.LinkedList`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>For an example that includes this method, see the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  seealso:
  - type: System.Collections.Generic.LinkedList`1.RemoveFirst
    commentId: M:System.Collections.Generic.LinkedList`1.RemoveFirst
  - type: System.Collections.Generic.LinkedList`1.RemoveLast
    commentId: M:System.Collections.Generic.LinkedList`1.RemoveLast
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).Clear()
- uid: System.Collections.Generic.LinkedList`1.Contains(`0)
  commentId: M:System.Collections.Generic.LinkedList`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  fullName: System.Collections.Generic.LinkedList<T>.Contains(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
    startLine: 177
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Determines whether a value is in the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.LinkedList`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>For an example that includes this method, see the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public bool Contains(T value)
    content.vb: Public Function Contains(value As T) As Boolean
    parameters:
    - id: value
      type: '{T}'
      description: "\n<p>The value to locate in the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong> for reference types.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value</em> is found in the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.LinkedList`1.Find(`0)
    commentId: M:System.Collections.Generic.LinkedList`1.Find(`0)
  - type: System.Collections.Generic.LinkedList`1.FindLast(`0)
    commentId: M:System.Collections.Generic.LinkedList`1.FindLast(`0)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).Contains(T)
- uid: System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  fullName: System.Collections.Generic.LinkedList<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
    startLine: 182
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Copies the entire <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> to a compatible one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>, starting at the specified index of the target array.</p>\n"
  remarks: "\n<p>This method uses <see cref=\"Overload:System.Array.Copy\"></see> to copy the elements.</p>\n<p>The elements are copied to the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> in the same order in which the enumerator iterates through the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.LinkedList`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>For an example that includes this method, see the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public void CopyTo(T[] array, int index)
    content.vb: Public Sub CopyTo(array As T(), index As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> must have zero-based indexing.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The number of elements in the source <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: System.Collections.Generic.LinkedList`1.Find(`0)
  commentId: M:System.Collections.Generic.LinkedList`1.Find(`0)
  id: Find(`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: Find(T)
  fullName: System.Collections.Generic.LinkedList<T>.Find(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Find
    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
    startLine: 215
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Finds the first node that contains the specified value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> is searched forward starting at <xref href=\"System.Collections.Generic.LinkedList`1.First\" data-throw-if-not-resolved=\"false\"></xref> and ending at <xref href=\"System.Collections.Generic.LinkedList`1.Last\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.LinkedList`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>For an example that includes this method, see the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public LinkedListNode<T> Find(T value)
    content.vb: Public Function Find(value As T) As LinkedListNode(Of T)
    parameters:
    - id: value
      type: '{T}'
      description: "\n<p>The value to locate in the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Collections.Generic.LinkedListNode{{T}}
      description: "\n<p>The first <xref href=\"System.Collections.Generic.LinkedListNode`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified value, if found; otherwise, <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.LinkedList`1.FindLast(`0)
    commentId: M:System.Collections.Generic.LinkedList`1.FindLast(`0)
  - type: System.Collections.Generic.LinkedList`1.Contains(`0)
    commentId: M:System.Collections.Generic.LinkedList`1.Contains(`0)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).Find(T)
- uid: System.Collections.Generic.LinkedList`1.FindLast(`0)
  commentId: M:System.Collections.Generic.LinkedList`1.FindLast(`0)
  id: FindLast(`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: FindLast(T)
  fullName: System.Collections.Generic.LinkedList<T>.FindLast(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindLast
    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
    startLine: 247
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Finds the last node that contains the specified value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> is searched backward starting at <xref href=\"System.Collections.Generic.LinkedList`1.Last\" data-throw-if-not-resolved=\"false\"></xref> and ending at <xref href=\"System.Collections.Generic.LinkedList`1.First\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.LinkedList`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>For an example that includes this method, see the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public LinkedListNode<T> FindLast(T value)
    content.vb: Public Function FindLast(value As T) As LinkedListNode(Of T)
    parameters:
    - id: value
      type: '{T}'
      description: "\n<p>The value to locate in the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Collections.Generic.LinkedListNode{{T}}
      description: "\n<p>The last <xref href=\"System.Collections.Generic.LinkedListNode`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified value, if found; otherwise, <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.LinkedList`1.Find(`0)
    commentId: M:System.Collections.Generic.LinkedList`1.Find(`0)
  - type: System.Collections.Generic.LinkedList`1.Contains(`0)
    commentId: M:System.Collections.Generic.LinkedList`1.Contains(`0)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).FindLast(T)
- uid: System.Collections.Generic.LinkedList`1.GetEnumerator
  commentId: M:System.Collections.Generic.LinkedList`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.Generic.LinkedList<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
    startLine: 283
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Returns an enumerator that iterates through the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in C++, <strong>For Each</strong> in Visual Basic) hides the complexity of the enumerators. Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. At this position, <xref href=\"System.Collections.Generic.LinkedList`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. Therefore, you must call <xref href=\"System.Collections.Generic.LinkedList`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.Generic.LinkedList`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.Generic.LinkedList`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until <xref href=\"System.Collections.Generic.LinkedList`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.Generic.LinkedList`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.Generic.LinkedList`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.Generic.LinkedList`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.Generic.LinkedList`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.Generic.LinkedList`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.Generic.LinkedList`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.Generic.LinkedList`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. You cannot set <xref href=\"System.Collections.Generic.LinkedList`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again; you must create a new enumerator instance instead.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>Default implementations of collections in <xref href=\"System.Collections.Generic\" data-throw-if-not-resolved=\"false\"></xref> are not synchronized.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - 
  syntax:
    content: public LinkedList<T>.Enumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As LinkedList(Of T).Enumerator
    return:
      type: System.Collections.Generic.LinkedList`1.Enumerator
      description: "\n<p>An <xref href=\"System.Collections.Generic.LinkedList`1.Enumerator\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.LinkedList`1.Enumerator
    commentId: T:System.Collections.Generic.LinkedList`1.Enumerator
  - type: System.Collections.Generic.IEnumerator`1
    commentId: T:System.Collections.Generic.IEnumerator`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).GetEnumerator()
- uid: System.Collections.Generic.LinkedList`1.Remove(`0)
  commentId: M:System.Collections.Generic.LinkedList`1.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  fullName: System.Collections.Generic.LinkedList<T>.Remove(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
    startLine: 293
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes the first occurrence of the specified value from the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.LinkedList`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>For an example that includes this method, see the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public bool Remove(T value)
    content.vb: Public Function Remove(value As T) As Boolean
    parameters:
    - id: value
      type: '{T}'
      description: "\n<p>The value to remove from the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the element containing <em>value</em> is successfully removed; otherwise, <strong>false</strong>.  This method also returns <strong>false</strong> if <em>value</em> was not found in the original <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.LinkedList`1.RemoveFirst
    commentId: M:System.Collections.Generic.LinkedList`1.RemoveFirst
  - type: System.Collections.Generic.LinkedList`1.RemoveLast
    commentId: M:System.Collections.Generic.LinkedList`1.RemoveLast
  - type: System.Collections.Generic.LinkedList`1.Clear
    commentId: M:System.Collections.Generic.LinkedList`1.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).Remove(T)
- uid: System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})
  commentId: M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})
  id: Remove(System.Collections.Generic.LinkedListNode{`0})
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: Remove(LinkedListNode<T>)
  fullName: System.Collections.Generic.LinkedList<T>.Remove(System.Collections.Generic.LinkedListNode<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
    startLine: 304
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes the specified node from the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>For an example that includes this method, see the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public void Remove(LinkedListNode<T> node)
    content.vb: Public Sub Remove(node As LinkedListNode(Of T))
    parameters:
    - id: node
      type: System.Collections.Generic.LinkedListNode{{T}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.LinkedListNode`1\" data-throw-if-not-resolved=\"false\"></xref> to remove from the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>node</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>node</em> is not in the current <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.LinkedList`1.RemoveFirst
    commentId: M:System.Collections.Generic.LinkedList`1.RemoveFirst
  - type: System.Collections.Generic.LinkedList`1.RemoveLast
    commentId: M:System.Collections.Generic.LinkedList`1.RemoveLast
  - type: System.Collections.Generic.LinkedList`1.Clear
    commentId: M:System.Collections.Generic.LinkedList`1.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).Remove(System.Collections.Generic.LinkedListNode(Of T))
  name.vb: Remove(LinkedListNode(Of T))
- uid: System.Collections.Generic.LinkedList`1.RemoveFirst
  commentId: M:System.Collections.Generic.LinkedList`1.RemoveFirst
  id: RemoveFirst
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: RemoveFirst()
  fullName: System.Collections.Generic.LinkedList<T>.RemoveFirst()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveFirst
    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
    startLine: 310
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes the node at the start of the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>For an example that includes this method, see the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public void RemoveFirst()
    content.vb: Public Sub RemoveFirst
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> is empty.</p>\n"
  seealso:
  - type: System.Collections.Generic.LinkedList`1.RemoveLast
    commentId: M:System.Collections.Generic.LinkedList`1.RemoveLast
  - type: System.Collections.Generic.LinkedList`1.Clear
    commentId: M:System.Collections.Generic.LinkedList`1.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).RemoveFirst()
- uid: System.Collections.Generic.LinkedList`1.RemoveLast
  commentId: M:System.Collections.Generic.LinkedList`1.RemoveLast
  id: RemoveLast
  parent: System.Collections.Generic.LinkedList`1
  langs:
  - csharp
  - vb
  name: RemoveLast()
  fullName: System.Collections.Generic.LinkedList<T>.RemoveLast()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveLast
    path: src/System.Collections/src/System/Collections/Generic/LinkedList.cs
    startLine: 316
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes the node at the end of the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>For an example that includes this method, see the <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public void RemoveLast()
    content.vb: Public Sub RemoveLast
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Generic.LinkedList`1\" data-throw-if-not-resolved=\"false\"></xref> is empty.</p>\n"
  seealso:
  - type: System.Collections.Generic.LinkedList`1.RemoveFirst
    commentId: M:System.Collections.Generic.LinkedList`1.RemoveFirst
  - type: System.Collections.Generic.LinkedList`1.Clear
    commentId: M:System.Collections.Generic.LinkedList`1.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.LinkedList(Of T).RemoveLast()
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: Generic.IReadOnlyCollection<>
  fullName: System.Collections.Generic.IReadOnlyCollection<>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of )
  name.vb: Generic.IReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.LinkedListNode{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.LinkedListNode`1
  name: LinkedListNode<T>
  fullName: System.Collections.Generic.LinkedListNode<T>
  fullname.vb: System.Collections.Generic.LinkedListNode(Of T)
  name.vb: LinkedListNode(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.LinkedListNode`1
    name: LinkedListNode
    fullName: System.Collections.Generic.LinkedListNode
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.LinkedListNode`1
    name: LinkedListNode
    fullName: System.Collections.Generic.LinkedListNode
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.LinkedListNode`1
  parent: System.Collections.Generic
  isExternal: false
  name: LinkedListNode<T>
  fullName: System.Collections.Generic.LinkedListNode<T>
  fullname.vb: System.Collections.Generic.LinkedListNode(Of T)
  name.vb: LinkedListNode(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.LinkedListNode`1
    name: LinkedListNode
    fullName: System.Collections.Generic.LinkedListNode
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.LinkedListNode`1
    name: LinkedListNode
    fullName: System.Collections.Generic.LinkedListNode
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: '{T}[]'
  isExternal: false
  name: T[]
  fullName: T[]
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.LinkedList`1.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: LinkedList.Enumerator<>
  fullName: System.Collections.Generic.LinkedList.Enumerator<>
  fullname.vb: System.Collections.Generic.LinkedList.Enumerator(Of )
  name.vb: LinkedList.Enumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.LinkedList`1.Enumerator
    name: LinkedList.Enumerator
    fullName: System.Collections.Generic.LinkedList.Enumerator
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.LinkedList`1.Enumerator
    name: LinkedList.Enumerator
    fullName: System.Collections.Generic.LinkedList.Enumerator
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
