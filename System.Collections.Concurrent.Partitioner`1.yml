items:
- uid: System.Collections.Concurrent.Partitioner`1
  id: Partitioner`1
  parent: System.Collections.Concurrent
  children:
  - System.Collections.Concurrent.Partitioner`1.#ctor
  - System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
  - System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
  - System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions
  href: System.Collections.Concurrent.Partitioner`1.yml
  name: Partitioner<TSource>
  name.vb: Partitioner(Of TSource)
  fullName: System.Collections.Concurrent.Partitioner<TSource>
  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource)
  type: Class
  source:
    remote: &o0
      path: src/mscorlib/src/System/Collections/Concurrent/Partitioner.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    path: src/mscorlib/src/System/Collections/Concurrent/Partitioner.cs
    startLine: 46
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Represents a particular manner of splitting a data source into multiple partitions.
  syntax:
    content: 'public abstract class Partitioner<TSource> : object'
    content.vb: Public MustInherit Class Partitioner(Of TSource) Inherits Object
    typeParameters:
    - id: TSource
  inheritance:
  - System.Object
- uid: System.Collections.Concurrent.Partitioner`1.#ctor
  id: '#ctor'
  parent: System.Collections.Concurrent.Partitioner`1
  href: System.Collections.Concurrent.Partitioner`1.yml
  name: Partitioner()
  fullName: System.Collections.Concurrent.Partitioner<TSource>.Partitioner()
  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource).Partitioner()
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 201
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Creates a new partitioner instance.
  syntax:
    content: protected Partitioner()
    content.vb: Protected Sub New
- uid: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions
  id: SupportsDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner`1
  href: System.Collections.Concurrent.Partitioner`1.yml
  name: SupportsDynamicPartitions
  fullName: System.Collections.Concurrent.Partitioner<TSource>.SupportsDynamicPartitions
  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource).SupportsDynamicPartitions
  type: Property
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/Partitioner.cs
    startLine: 71
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets whether additional partitions can be created dynamically.
  syntax:
    content: public virtual bool SupportsDynamicPartitions { get; }
    content.vb: Public Overridable ReadOnly Property SupportsDynamicPartitions As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the @'System.Collections.Concurrent.Partitioner`1' can create partitions dynamically as they are requested; false if the @'System.Collections.Concurrent.Partitioner`1' can only allocate partitions statically.
- uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
  id: GetDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner`1
  href: System.Collections.Concurrent.Partitioner`1.yml
  name: GetDynamicPartitions()
  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetDynamicPartitions()
  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource).GetDynamicPartitions()
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/Partitioner.cs
    startLine: 96
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Creates an object that can partition the underlying collection into a variable number of partitions.
  syntax:
    content: public virtual Generic.IEnumerable<TSource> GetDynamicPartitions()
    content.vb: Public Overridable Function GetDynamicPartitions As Generic.IEnumerable(Of TSource)
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An object that can create partitions over the underlying data source.
  exceptions:
  - type: System.NotSupportedException
    description: Dynamic partitioning is not supported by the base class. You must implement it in a derived class.
- uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
  id: GetPartitions(System.Int32)
  parent: System.Collections.Concurrent.Partitioner`1
  href: System.Collections.Concurrent.Partitioner`1.yml
  name: GetPartitions(Int32)
  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetPartitions(System.Int32)
  fullName.vb: System.Collections.Concurrent.Partitioner(Of TSource).GetPartitions(System.Int32)
  type: Method
  source:
    remote: *o0
    path: src/mscorlib/src/System/Collections/Concurrent/Partitioner.cs
    startLine: 54
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Partitions the underlying collection into the given number of partitions.
  syntax:
    content: public abstract Generic.IList<Generic.IEnumerator<TSource>> GetPartitions(int partitionCount)
    content.vb: Public MustOverride Function GetPartitions(partitionCount As Integer) As Generic.IList(Of Generic.IEnumerator(Of TSource))
    parameters:
    - id: partitionCount
      type: System.Int32
      description: The number of partitions to create.
    return:
      type: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{{TSource}}}
      description: A list containing *partitionCount* enumerators.
references:
- uid: System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  href: System.Boolean.yml
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TSource>
  name.vb: Collections.Generic.IEnumerable(Of TSource)
  fullName: System.Collections.Generic.IEnumerable<TSource>
  fullName.vb: System.Collections.Generic.IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.IEnumerable`1.yml
  name: Collections.Generic.IEnumerable<>
  name.vb: Collections.Generic.IEnumerable(Of )
  fullName: System.Collections.Generic.IEnumerable<>
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Int32
  parent: System
  isExternal: false
  href: System.Int32.yml
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{{TSource}}}
  definition: System.Collections.Generic.IList`1
  name: Generic.IList<Generic.IEnumerator<TSource>>
  name.vb: Generic.IList(Of Generic.IEnumerator(Of TSource))
  fullName: System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>>
  fullName.vb: System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerator(Of TSource))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: Generic.IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: Generic.IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.IList`1.yml
  name: Collections.Generic.IList<>
  name.vb: Collections.Generic.IList(Of )
  fullName: System.Collections.Generic.IList<>
  fullName.vb: System.Collections.Generic.IList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
    href: System.Collections.Generic.IList`1.yml
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
    href: System.Collections.Generic.IList`1.yml
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  href: System.NotSupportedException.yml
  name: NotSupportedException
  fullName: System.NotSupportedException
  summary: The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality.
