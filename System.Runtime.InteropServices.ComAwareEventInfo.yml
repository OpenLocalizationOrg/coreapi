items:
- uid: System.Runtime.InteropServices.ComAwareEventInfo
  commentId: T:System.Runtime.InteropServices.ComAwareEventInfo
  id: ComAwareEventInfo
  parent: System.Runtime.InteropServices
  children:
  - System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)
  - System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)
  - System.Runtime.InteropServices.ComAwareEventInfo.Attributes
  - System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType
  - System.Runtime.InteropServices.ComAwareEventInfo.Name
  - System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)
  langs:
  - csharp
  - vb
  name: ComAwareEventInfo
  fullName: System.Runtime.InteropServices.ComAwareEventInfo
  type: Class
  source:
    remote:
      path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/ComAwareEventInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ComAwareEventInfo
    path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/ComAwareEventInfo.cs
    startLine: 6
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Permits late-bound registration of an event handler.</p>\n"
  remarks: "\n<p>Normally, compilers will automatically embed calls to the <xref href=\"System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)\" data-throw-if-not-resolved=\"false\"></xref> methods instead of using regular add handler and remove handler methods for events. This occurs if the interface that the corresponding event is defined on needs to be embedded.</p>\n<p>You can specify this by embedding the entire assembly that contains the interface by using the /link option on the compilers or by setting the Embed Interop Types property to <strong>True</strong> in Visual Studio.</p>\n<p>The <xref href=\"System.Runtime.InteropServices.ComAwareEventInfo\" data-throw-if-not-resolved=\"false\"></xref> type derives from the <xref href=\"System.Reflection.EventInfo\" data-throw-if-not-resolved=\"false\"></xref> class and overrides the <xref href=\"System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n"
  example:
  - 
  syntax:
    content: 'public class ComAwareEventInfo : EventInfo'
    content.vb: >-
      Public Class ComAwareEventInfo
          Inherits EventInfo
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)
  commentId: M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)
  id: '#ctor(System.Type,System.String)'
  parent: System.Runtime.InteropServices.ComAwareEventInfo
  langs:
  - csharp
  - vb
  name: ComAwareEventInfo(Type, String)
  fullName: System.Runtime.InteropServices.ComAwareEventInfo.ComAwareEventInfo(System.Type, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 97
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.ComAwareEventInfo\" data-throw-if-not-resolved=\"false\"></xref> class by using the specified type and a name of the event on the type.</p>\n"
  example:
  - 
  syntax:
    content: public ComAwareEventInfo(Type type, string eventName)
    content.vb: Public Sub New(type As Type, eventName As String)
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type of object.</p>\n"
    - id: eventName
      type: System.String
      description: "\n<p>The name of an event on <em>type</em>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.ComAwareEventInfo.Attributes
  commentId: P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes
  id: Attributes
  parent: System.Runtime.InteropServices.ComAwareEventInfo
  langs:
  - csharp
  - vb
  name: Attributes
  fullName: System.Runtime.InteropServices.ComAwareEventInfo.Attributes
  type: Property
  source:
    remote:
      path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/ComAwareEventInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Attributes
    path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/ComAwareEventInfo.cs
    startLine: 53
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Gets the attributes for this event.</p>\n"
  remarks: "\n<p>The attributes are returned in a 4-byte integer, which represents a bitmap of the attributes set for the event that is reflected by this instance.</p>\n"
  syntax:
    content: public override EventAttributes Attributes { get; }
    content.vb: Public Overrides ReadOnly Property Attributes As EventAttributes
    parameters: []
    return:
      type: System.Reflection.EventAttributes
      description: "\n<p>The read-only attributes for this event.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType
  commentId: P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType
  id: DeclaringType
  parent: System.Runtime.InteropServices.ComAwareEventInfo
  langs:
  - csharp
  - vb
  name: DeclaringType
  fullName: System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType
  type: Property
  source:
    remote:
      path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/ComAwareEventInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeclaringType
    path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/ComAwareEventInfo.cs
    startLine: 73
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Gets the class that declares this member.</p>\n"
  example:
  - 
  syntax:
    content: public override Type DeclaringType { get; }
    content.vb: Public Overrides ReadOnly Property DeclaringType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object for the class that declares this member.</p>\n"
  seealso:
  - type: System.Reflection.MemberInfo.DeclaringType
    commentId: P:System.Reflection.MemberInfo.DeclaringType
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Runtime.InteropServices.ComAwareEventInfo.Name
  commentId: P:System.Runtime.InteropServices.ComAwareEventInfo.Name
  id: Name
  parent: System.Runtime.InteropServices.ComAwareEventInfo
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Runtime.InteropServices.ComAwareEventInfo.Name
  type: Property
  source:
    remote:
      path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/ComAwareEventInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/ComAwareEventInfo.cs
    startLine: 93
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Gets the name of the current member.</p>\n"
  example:
  - 
  syntax:
    content: public override string Name { get; }
    content.vb: Public Overrides ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of this member.</p>\n"
  seealso:
  - type: System.Reflection.MemberInfo.Name
    commentId: P:System.Reflection.MemberInfo.Name
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)
  commentId: M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)
  id: AddEventHandler(System.Object,System.Delegate)
  parent: System.Runtime.InteropServices.ComAwareEventInfo
  langs:
  - csharp
  - vb
  name: AddEventHandler(Object, Delegate)
  fullName: System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object, System.Delegate)
  type: Method
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddEventHandler
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 101
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Attaches an event handler to a COM object.</p>\n"
  remarks: "\n<p>This method is similar to the <xref href=\"System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\" data-throw-if-not-resolved=\"false\"></xref> method except that it allows you to attach events to COM objects.</p>\n<p>If <em>target</em> is a COM object, this method adds a delegate to an event by using the <xref href=\"System.Runtime.InteropServices.ComEventsHelper.Combine(System.Object,System.Guid,System.Int32,System.Delegate)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>\n<xref href=\"System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)\" data-throw-if-not-resolved=\"false\"></xref> facilitates registering COM event sinks that forward calls to corresponding managed delegates. It requires the following information:</p>\n<ul><li>\n<p>The target object itself (<em>target</em>).</p>\n</li><li>\n<p>The GUID of the source interface.</p>\n</li><li>\n<p>The DispID of the method on the COM interface that corresponds to the specified event.</p>\n</li><li>\n<p>The delegate that would be invoked when the COM object triggers the corresponding event (<em>handler</em>).</p>\n</li></ul>\n<p>\n<xref href=\"System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)\" data-throw-if-not-resolved=\"false\"></xref> looks up the corresponding COM source interface (specified as the first parameter of the <xref href=\"System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> constructor). It then looks up a method on the source interface whose name is identical to the event name. The value of <strong>GuidAttribute</strong> on the source interface is the GUID that is passed to <xref href=\"System.Runtime.InteropServices.ComEventsHelper.Combine(System.Object,System.Guid,System.Int32,System.Delegate)\" data-throw-if-not-resolved=\"false\"></xref>; the value of <strong>DispIDAttribute</strong> on the method is the DispID value that is passed to <xref href=\"System.Runtime.InteropServices.ComEventsHelper.Combine(System.Object,System.Guid,System.Int32,System.Delegate)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public override void AddEventHandler(object target, Delegate handler)
    content.vb: Public Overrides Sub AddEventHandler(target As Object, handler As  Delegate)
    parameters:
    - id: target
      type: System.Object
      description: "\n<p>The target object that the event delegate should bind to.</p>\n"
    - id: handler
      type: System.Delegate
      description: "\n<p>The event delegate.</p>\n"
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)
  commentId: M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)
  id: RemoveEventHandler(System.Object,System.Delegate)
  parent: System.Runtime.InteropServices.ComAwareEventInfo
  langs:
  - csharp
  - vb
  name: RemoveEventHandler(Object, Delegate)
  fullName: System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object, System.Delegate)
  type: Method
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveEventHandler
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 102
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Detaches an event handler from a COM object.</p>\n"
  remarks: "\n<p>This method is similar to the <xref href=\"System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)\" data-throw-if-not-resolved=\"false\"></xref> method, except that it allows you to detach events from COM objects.</p>\n<p>If <em>target</em> is a COM object, this method releases a delegate to an event by using the <xref href=\"System.Runtime.InteropServices.ComEventsHelper.Remove(System.Object,System.Guid,System.Int32,System.Delegate)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>\n<xref href=\"System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)\" data-throw-if-not-resolved=\"false\"></xref> facilitates unregistering COM event sinks that forward calls to corresponding managed delegates. It requires the following information:</p>\n<ul><li>\n<p>The target object itself (<em>target</em>).</p>\n</li><li>\n<p>The GUID of the source interface.</p>\n</li><li>\n<p>The DispID of the method on the COM interface that corresponds to the specified event.</p>\n</li><li>\n<p>The delegate that would be invoked when the COM object triggers the corresponding event (<em>handler</em>).</p>\n</li></ul>\n<p>\n<xref href=\"System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)\" data-throw-if-not-resolved=\"false\"></xref> looks up the corresponding COM source interface (specified as the first parameter of the <xref href=\"System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> constructor). It then it looks up a method on the source interface whose name is identical to the event name. The value of <strong>GuidAttribute</strong> on the source interface is the GUID that is passed to <xref href=\"System.Runtime.InteropServices.ComEventsHelper.Remove(System.Object,System.Guid,System.Int32,System.Delegate)\" data-throw-if-not-resolved=\"false\"></xref>; the value of <strong>DispIDAttribute</strong> on the method is the DispID value that is passed to <xref href=\"System.Runtime.InteropServices.ComEventsHelper.Remove(System.Object,System.Guid,System.Int32,System.Delegate)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public override void RemoveEventHandler(object target, Delegate handler)
    content.vb: Public Overrides Sub RemoveEventHandler(target As Object, handler As  Delegate)
    parameters:
    - id: target
      type: System.Object
      description: "\n<p>The target object that the event delegate is bound to.</p>\n"
    - id: handler
      type: System.Delegate
      description: "\n<p>The event delegate.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The event does not have a public <strong>remove</strong> accessor.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The handler that was passed in cannot be used.</p>\n"
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> instead.</p>\n<p>The <em>target</em> parameter is <strong>null</strong> and the event is not static.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Reflection.EventInfo\" data-throw-if-not-resolved=\"false\"></xref> is not declared on the target.</p>\n"
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\"System.MemberAccessException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>The caller does not have access permission to the member.</p>\n"
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Reflection.EventAttributes
  parent: System.Reflection
  isExternal: false
  name: EventAttributes
  fullName: System.Reflection.EventAttributes
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Delegate
  parent: System
  isExternal: false
  name: Delegate
  fullName: System.Delegate
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Reflection.TargetException
  isExternal: false
  name: TargetException
  fullName: System.Reflection.TargetException
- uid: System.MethodAccessException
  isExternal: false
  name: MethodAccessException
  fullName: System.MethodAccessException
