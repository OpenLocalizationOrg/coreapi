items:
- uid: System.Runtime.Serialization.CollectionDataContractAttribute
  commentId: T:System.Runtime.Serialization.CollectionDataContractAttribute
  id: CollectionDataContractAttribute
  parent: System.Runtime.Serialization
  children:
  - System.Runtime.Serialization.CollectionDataContractAttribute.#ctor
  - System.Runtime.Serialization.CollectionDataContractAttribute.IsItemNameSetExplicitly
  - System.Runtime.Serialization.CollectionDataContractAttribute.IsKeyNameSetExplicitly
  - System.Runtime.Serialization.CollectionDataContractAttribute.IsNameSetExplicitly
  - System.Runtime.Serialization.CollectionDataContractAttribute.IsNamespaceSetExplicitly
  - System.Runtime.Serialization.CollectionDataContractAttribute.IsReference
  - System.Runtime.Serialization.CollectionDataContractAttribute.IsReferenceSetExplicitly
  - System.Runtime.Serialization.CollectionDataContractAttribute.IsValueNameSetExplicitly
  - System.Runtime.Serialization.CollectionDataContractAttribute.ItemName
  - System.Runtime.Serialization.CollectionDataContractAttribute.KeyName
  - System.Runtime.Serialization.CollectionDataContractAttribute.Name
  - System.Runtime.Serialization.CollectionDataContractAttribute.Namespace
  - System.Runtime.Serialization.CollectionDataContractAttribute.ValueName
  langs:
  - csharp
  - vb
  name: CollectionDataContractAttribute
  fullName: System.Runtime.Serialization.CollectionDataContractAttribute
  type: Class
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CollectionDataContractAttribute
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
    startLine: 6
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>When applied to a collection type, enables custom specification of the collection item elements. This attribute can be applied only to types that are recognized by the <xref href=\"System.Runtime.Serialization.DataContractSerializer\" data-throw-if-not-resolved=\"false\"></xref> as valid, serializable collections. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Runtime.Serialization.CollectionDataContractAttribute\" data-throw-if-not-resolved=\"false\"></xref> is intended to ease interoperability when working with data from non-WCF providers and to control the exact shape of serialized instances. To this end, the <xref href=\"System.Runtime.Serialization.CollectionDataContractAttribute.ItemName\" data-throw-if-not-resolved=\"false\"></xref> property enables you to control the names of the repeating items inside a collection. This is especially useful when the provider does not use the XML element type name as the array item name, for example, if a provider uses \"String\" as an element type name instead of the XSD type name \"string\". </p>\n<p>The <xref href=\"System.Runtime.Serialization.CollectionDataContractAttribute\" data-throw-if-not-resolved=\"false\"></xref> is also intended to be used with dictionary types to handle keyed collections. Dictionary types are classes that implement either the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> interface, for example, the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>. Use the <xref href=\"System.Runtime.Serialization.CollectionDataContractAttribute.KeyName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Runtime.Serialization.CollectionDataContractAttribute.ValueName\" data-throw-if-not-resolved=\"false\"></xref> properties to set custom names when using the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>For more information about using the <xref href=\"System.Runtime.Serialization.DataContractSerializer\" data-throw-if-not-resolved=\"false\"></xref>, see Using Data Contracts.</p>\n"
  example:
  - "\n<p>The following example applies the <xref href=\"System.Runtime.Serialization.CollectionDataContractAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a class that inherits from the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class. The code sets the <xref href=\"System.Runtime.Serialization.CollectionDataContractAttribute.Name\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Runtime.Serialization.CollectionDataContractAttribute.ItemName\" data-throw-if-not-resolved=\"false\"></xref> properties to custom values.</p>CollectionDataContractAttribute#1<p>When the ServiceModel Metadata Utility Tool (Svcutil.exe) is used to generate code for the client, the code resembles the following example. Notice that the name of the class is changed, as well as the <xref href=\"System.Runtime.Serialization.CollectionDataContractAttribute.ItemName\" data-throw-if-not-resolved=\"false\"></xref>. When using generics, the type parameter name is used to create the resulting type name. </p>CollectionDataContractAttribute#2"
  syntax:
    content: 'public sealed class CollectionDataContractAttribute : Attribute'
    content.vb: >-
      Public NotInheritable Class CollectionDataContractAttribute
          Inherits Attribute
  seealso:
  - type: System.Runtime.Serialization.DataContractSerializer
    commentId: T:System.Runtime.Serialization.DataContractSerializer
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Runtime.Serialization.CollectionDataContractAttribute.#ctor
  commentId: M:System.Runtime.Serialization.CollectionDataContractAttribute.#ctor
  id: '#ctor'
  parent: System.Runtime.Serialization.CollectionDataContractAttribute
  langs:
  - csharp
  - vb
  name: CollectionDataContractAttribute()
  fullName: System.Runtime.Serialization.CollectionDataContractAttribute.CollectionDataContractAttribute()
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
    startLine: 22
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.Serialization.CollectionDataContractAttribute\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  syntax:
    content: public CollectionDataContractAttribute()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.CollectionDataContractAttribute.IsItemNameSetExplicitly
  commentId: P:System.Runtime.Serialization.CollectionDataContractAttribute.IsItemNameSetExplicitly
  id: IsItemNameSetExplicitly
  parent: System.Runtime.Serialization.CollectionDataContractAttribute
  langs:
  - csharp
  - vb
  name: IsItemNameSetExplicitly
  fullName: System.Runtime.Serialization.CollectionDataContractAttribute.IsItemNameSetExplicitly
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsItemNameSetExplicitly
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
    startLine: 66
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets whether <xref href=\"System.Runtime.Serialization.CollectionDataContractAttribute.ItemName\" data-throw-if-not-resolved=\"false\"></xref> has been explicitly set.</p>\n"
  syntax:
    content: public bool IsItemNameSetExplicitly { get; }
    content.vb: Public ReadOnly Property IsItemNameSetExplicitly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <strong>true</strong> if the item name has been explicitly set; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Serialization.CollectionDataContractAttribute.IsKeyNameSetExplicitly
  commentId: P:System.Runtime.Serialization.CollectionDataContractAttribute.IsKeyNameSetExplicitly
  id: IsKeyNameSetExplicitly
  parent: System.Runtime.Serialization.CollectionDataContractAttribute
  langs:
  - csharp
  - vb
  name: IsKeyNameSetExplicitly
  fullName: System.Runtime.Serialization.CollectionDataContractAttribute.IsKeyNameSetExplicitly
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsKeyNameSetExplicitly
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
    startLine: 96
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets whether <xref href=\"System.Runtime.Serialization.CollectionDataContractAttribute.KeyName\" data-throw-if-not-resolved=\"false\"></xref> has been explicitly set.</p>\n"
  syntax:
    content: public bool IsKeyNameSetExplicitly { get; }
    content.vb: Public ReadOnly Property IsKeyNameSetExplicitly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <strong>true</strong> if the key name has been explicitly set; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Serialization.CollectionDataContractAttribute.IsNameSetExplicitly
  commentId: P:System.Runtime.Serialization.CollectionDataContractAttribute.IsNameSetExplicitly
  id: IsNameSetExplicitly
  parent: System.Runtime.Serialization.CollectionDataContractAttribute
  langs:
  - csharp
  - vb
  name: IsNameSetExplicitly
  fullName: System.Runtime.Serialization.CollectionDataContractAttribute.IsNameSetExplicitly
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNameSetExplicitly
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
    startLine: 51
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets whether <xref href=\"System.Runtime.Serialization.CollectionDataContractAttribute.Name\" data-throw-if-not-resolved=\"false\"></xref> has been explicitly set.</p>\n"
  syntax:
    content: public bool IsNameSetExplicitly { get; }
    content.vb: Public ReadOnly Property IsNameSetExplicitly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <strong>true</strong> if the name has been explicitly set; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Serialization.CollectionDataContractAttribute.IsNamespaceSetExplicitly
  commentId: P:System.Runtime.Serialization.CollectionDataContractAttribute.IsNamespaceSetExplicitly
  id: IsNamespaceSetExplicitly
  parent: System.Runtime.Serialization.CollectionDataContractAttribute
  langs:
  - csharp
  - vb
  name: IsNamespaceSetExplicitly
  fullName: System.Runtime.Serialization.CollectionDataContractAttribute.IsNamespaceSetExplicitly
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNamespaceSetExplicitly
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
    startLine: 36
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets whether <xref href=\"System.Runtime.Serialization.CollectionDataContractAttribute.Namespace\" data-throw-if-not-resolved=\"false\"></xref> has been explicitly set.</p>\n"
  syntax:
    content: public bool IsNamespaceSetExplicitly { get; }
    content.vb: Public ReadOnly Property IsNamespaceSetExplicitly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <strong>true</strong> if the item namespace has been explicitly set; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Serialization.CollectionDataContractAttribute.IsReference
  commentId: P:System.Runtime.Serialization.CollectionDataContractAttribute.IsReference
  id: IsReference
  parent: System.Runtime.Serialization.CollectionDataContractAttribute
  langs:
  - csharp
  - vb
  name: IsReference
  fullName: System.Runtime.Serialization.CollectionDataContractAttribute.IsReference
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsReference
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
    startLine: 81
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets or sets a value that indicates whether to preserve object reference data.</p>\n"
  remarks: "\n<p>The <strong>IsReference</strong> setting does not apply to the elements of the collection.</p>\n"
  example:
  - 
  syntax:
    content: public bool IsReference { get; set; }
    content.vb: Public Property IsReference As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to keep object reference data; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Runtime.Serialization.DataContractAttribute.IsReference
    commentId: P:System.Runtime.Serialization.DataContractAttribute.IsReference
  - type: System.Runtime.Serialization.DataContractSerializer.PreserveObjectReferences
    commentId: P:System.Runtime.Serialization.DataContractSerializer.PreserveObjectReferences
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.CollectionDataContractAttribute.IsReferenceSetExplicitly
  commentId: P:System.Runtime.Serialization.CollectionDataContractAttribute.IsReferenceSetExplicitly
  id: IsReferenceSetExplicitly
  parent: System.Runtime.Serialization.CollectionDataContractAttribute
  langs:
  - csharp
  - vb
  name: IsReferenceSetExplicitly
  fullName: System.Runtime.Serialization.CollectionDataContractAttribute.IsReferenceSetExplicitly
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsReferenceSetExplicitly
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
    startLine: 91
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets whether reference has been explicitly set.</p>\n"
  syntax:
    content: public bool IsReferenceSetExplicitly { get; }
    content.vb: Public ReadOnly Property IsReferenceSetExplicitly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <strong>true</strong> if the reference has been explicitly set; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Serialization.CollectionDataContractAttribute.IsValueNameSetExplicitly
  commentId: P:System.Runtime.Serialization.CollectionDataContractAttribute.IsValueNameSetExplicitly
  id: IsValueNameSetExplicitly
  parent: System.Runtime.Serialization.CollectionDataContractAttribute
  langs:
  - csharp
  - vb
  name: IsValueNameSetExplicitly
  fullName: System.Runtime.Serialization.CollectionDataContractAttribute.IsValueNameSetExplicitly
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsValueNameSetExplicitly
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
    startLine: 111
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets whether <xref href=\"System.Runtime.Serialization.CollectionDataContractAttribute.ValueName\" data-throw-if-not-resolved=\"false\"></xref> has been explicitly set.</p>\n"
  syntax:
    content: public bool IsValueNameSetExplicitly { get; }
    content.vb: Public ReadOnly Property IsValueNameSetExplicitly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <strong>true</strong> if the value name has been explicitly set; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Serialization.CollectionDataContractAttribute.ItemName
  commentId: P:System.Runtime.Serialization.CollectionDataContractAttribute.ItemName
  id: ItemName
  parent: System.Runtime.Serialization.CollectionDataContractAttribute
  langs:
  - csharp
  - vb
  name: ItemName
  fullName: System.Runtime.Serialization.CollectionDataContractAttribute.ItemName
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ItemName
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
    startLine: 56
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets or sets a custom name for a collection element.</p>\n"
  syntax:
    content: public string ItemName { get; set; }
    content.vb: Public Property ItemName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name to apply to collection elements.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.CollectionDataContractAttribute.KeyName
  commentId: P:System.Runtime.Serialization.CollectionDataContractAttribute.KeyName
  id: KeyName
  parent: System.Runtime.Serialization.CollectionDataContractAttribute
  langs:
  - csharp
  - vb
  name: KeyName
  fullName: System.Runtime.Serialization.CollectionDataContractAttribute.KeyName
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeyName
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
    startLine: 71
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets or sets the custom name for a dictionary key name.</p>\n"
  syntax:
    content: public string KeyName { get; set; }
    content.vb: Public Property KeyName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name to use instead of the default dictionary key name.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.CollectionDataContractAttribute.Name
  commentId: P:System.Runtime.Serialization.CollectionDataContractAttribute.Name
  id: Name
  parent: System.Runtime.Serialization.CollectionDataContractAttribute
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Runtime.Serialization.CollectionDataContractAttribute.Name
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
    startLine: 41
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets or sets the data contract name for the collection type.</p>\n"
  syntax:
    content: public string Name { get; set; }
    content.vb: Public Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The data contract name for the collection type.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.CollectionDataContractAttribute.Namespace
  commentId: P:System.Runtime.Serialization.CollectionDataContractAttribute.Namespace
  id: Namespace
  parent: System.Runtime.Serialization.CollectionDataContractAttribute
  langs:
  - csharp
  - vb
  name: Namespace
  fullName: System.Runtime.Serialization.CollectionDataContractAttribute.Namespace
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Namespace
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
    startLine: 26
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets or sets the namespace for the data contract.</p>\n"
  syntax:
    content: public string Namespace { get; set; }
    content.vb: Public Property Namespace As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The namespace of the data contract.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.CollectionDataContractAttribute.ValueName
  commentId: P:System.Runtime.Serialization.CollectionDataContractAttribute.ValueName
  id: ValueName
  parent: System.Runtime.Serialization.CollectionDataContractAttribute
  langs:
  - csharp
  - vb
  name: ValueName
  fullName: System.Runtime.Serialization.CollectionDataContractAttribute.ValueName
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ValueName
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/CollectionDataContractAttribute.cs
    startLine: 101
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets or sets the custom name for a dictionary value name.</p>\n"
  syntax:
    content: public string ValueName { get; set; }
    content.vb: Public Property ValueName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name to use instead of the default dictionary value name.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: System.Runtime.Serialization
  isExternal: false
  name: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
