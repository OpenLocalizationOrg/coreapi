items:
- uid: System.Xml.Serialization.XmlChoiceIdentifierAttribute
  commentId: T:System.Xml.Serialization.XmlChoiceIdentifierAttribute
  id: XmlChoiceIdentifierAttribute
  parent: System.Xml.Serialization
  children:
  - System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor
  - System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor(System.String)
  - System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName
  langs:
  - csharp
  - vb
  name: XmlChoiceIdentifierAttribute
  fullName: System.Xml.Serialization.XmlChoiceIdentifierAttribute
  type: Class
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlChoiceIdentifierAttribute
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 112
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Specifies that the member can be further detected by using an enumeration.</p>\n"
  remarks: "\n<p>The XML schema element definition named <strong>xsi:choice</strong> is used to define a complex element that can contain only one child in an instance (maxoccurs = 1). That child can be one of several types, and it can have one of several names. Each name is associated with a specific type; however, several names can be associated with the same type. Because of this, an instance of such an element is indistinct. For example, consider the following schema fragment that defines such an indistinct element named <strong>MyChoice</strong>.</p>\n<pre><code> <xsd:complexType name=\"MyChoice\">\n<xsd:sequence>\n<xsd:choice minOccurs=\"0\" maxOccurs=\"1\">\n<xsd:element minOccurs=\"1\" maxOccurs=\"1\" name=\"ChoiceOne\" type=\"xsd:string\" />\n<xsd:element minOccurs=\"1\" maxOccurs=\"1\" name=\"ChoiceTwo\" type=\"xsd:string\" />\n</xsd:choice>\n</xsd:sequence>\n</xsd:complexType></code></pre>\n<p>The <xref href=\"System.Xml.Serialization.XmlChoiceIdentifierAttribute\" data-throw-if-not-resolved=\"false\"></xref> allows you to assign a special enumeration value to each instance of the member. You must either create the enumeration yourself or it can be generated by the XML Schema Definition Tool (Xsd.exe). The following C# code shows how the <xref href=\"System.Xml.Serialization.XmlChoiceIdentifierAttribute\" data-throw-if-not-resolved=\"false\"></xref> is applied to an <strong>Item</strong> field; the <xref href=\"System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName\" data-throw-if-not-resolved=\"false\"></xref> property identifies the field that contains the enumeration that is further used to detect the choice.</p>\n<pre><code> public class Choices{\n[XmlChoiceIdentifier(\"ItemType\")]\n[XmlChoiceIdentifier(\"ChoiceOne\")]\n[XmlChoiceIdentifier(\"ChoiceTwo\")]\npublic string MyChoice;\n\n// Do not serialize this next field:\n[XmlIgnore]\npublic ItemChoiceType ItemType;\n}\n// Do not include this enumeration in the XML schema.\n[XmlType(IncludeInSchema = false)]\npublic enum ItemChoiceType{\nChoiceOne,\nChoiceTwo,\n}</code></pre>\n<p>When this code is in place, you can serialize and deserialize this class by setting the <strong>ItemType</strong> field to an appropriate enumeration. For example, to serialize the <strong>Choice</strong> class, the C# code resembles the following.</p>\n<pre><code> Choices mc = new Choices();\nmc.MyChoice = \"Item Choice One\";\nmc.ItemType = ItemChoiceType.ChoiceOne;</code></pre>\n<p>When deserializing, the C# code resembles the following: </p>\n<pre><code> MyChoice mc = (MyChoice) myXmlSerializer.Deserialize(myReader);\nif(mc.ItemType == ItemChoiceType.ChoiceOne)\n{\n// Handle choice one.\n}\nif(mc.ItemType == ItemChoiceType.ChoiceTwo)\n{\n// Handle choice two.\n}\nif(mc.ItemType != null)\n{\nthrow CreateUnknownTypeException(mc.Item);\n}</code></pre>\n<p>There is a second scenario when the <xref href=\"System.Xml.Serialization.XmlChoiceIdentifierAttribute\" data-throw-if-not-resolved=\"false\"></xref> is used. In the following schema, the member is a field that returns an array of items (maxOccurs=\"unbounded\"). The array can contain objects of the first choice (\"D-a-t-a\"), and of the second choice (\"MoreData\").</p>\n<pre><code> <xsd:complexType name=\"MyChoice\">\n<xsd:sequence>\n<xsd:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n<xsd:element minOccurs=\"1\" maxOccurs=\"1\" name=\"D-a-t-a\" type=\"xsd:string\" />\n<xsd:element minOccurs=\"1\" maxOccurs=\"1\" name=\"MoreData\" type=\"xsd:string\" />\n</xsd:choice>\n</xsd:sequence>\n</xsd:complexType></code></pre>\n<p>The resulting class then uses a field to return an array of items. For each item in the array, a corresponding <code>ItemChoiceType</code> enumeration must also be found. The matching enumerations are contained in the array returned by the <code>ItemsElementName</code> field.</p>\n<pre><code> public class MyChoice {\n[System.Xml.Serialization.XmlElementAttribute(\"D-a-t-a\", typeof(string), IsNullable=false)]\n[System.Xml.Serialization.XmlElementAttribute(\"MoreData\", typeof(string), IsNullable=false)]\n[System.Xml.Serialization.XmlChoiceIdentifierAttribute(\"ItemsElementName\")]\npublic string[] Items;\n[System.Xml.Serialization.XmlElementAttribute(IsNullable=false)]\n[System.Xml.Serialization.XmlIgnoreAttribute()]\npublic ItemsChoiceType[] ItemsElementName;\n}\n[System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]\npublic enum ItemsChoiceType {\n[System.Xml.Serialization.XmlEnumAttribute(\"D-a-t-a\")]\nData,\nMoreData,\n}</code></pre>\n<p>When deserializing an object that includes a range of choices, use a control structure (such as an if...then...else structure) to determine how to deserialize a particular value. In the control structure, check the enumeration value and deserialize the value accordingly.</p>\n"
  example:
  - "\n<p>The following example serializes a class named <code>Choices</code> that includes two fields, <strong>MyChoice</strong> and <strong>ManyChoices</strong>. The <xref href=\"System.Xml.Serialization.XmlChoiceIdentifierAttribute\" data-throw-if-not-resolved=\"false\"></xref> is applied to each field that specifies (through the <xref href=\"System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName\" data-throw-if-not-resolved=\"false\"></xref> property) another class member that gets or sets an enumeration that detects the member value. The <code>MyChoice</code> field can be set to a single value, with a corresponding enumeration member found in the <code>EnumType</code> field. The <code>ManyChoices</code> field returns an array of objects. The <code>ChoiceArray</code> field returns an array of enumeration values. For each array member in the <code>ManyChoices</code> field, a corresponding member is found in the array returned by the <code>ChoiceArray</code> field.</p>XmlChoiceIdentifierAttribute Example#1"
  syntax:
    content: 'public class XmlChoiceIdentifierAttribute : Attribute'
    content.vb: >-
      Public Class XmlChoiceIdentifierAttribute
          Inherits Attribute
  seealso:
  - type: System.Xml.Serialization.XmlAttributes
    commentId: T:System.Xml.Serialization.XmlAttributes
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor
  commentId: M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor
  id: '#ctor'
  parent: System.Xml.Serialization.XmlChoiceIdentifierAttribute
  langs:
  - csharp
  - vb
  name: XmlChoiceIdentifierAttribute()
  fullName: System.Xml.Serialization.XmlChoiceIdentifierAttribute.XmlChoiceIdentifierAttribute()
  type: Constructor
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 115
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.Serialization.XmlChoiceIdentifierAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following example serializes a class named <strong>Choices</strong> that includes two fields, <strong>MyChoice</strong> and <strong>ManyChoices</strong>. The <xref href=\"System.Xml.Serialization.XmlChoiceIdentifierAttribute\" data-throw-if-not-resolved=\"false\"></xref> is applied to each field that specifies (through the <xref href=\"System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName\" data-throw-if-not-resolved=\"false\"></xref> property) another class member that gets or sets an enumeration that detects the member value. The <strong>MyChoice</strong> field can be set to a single value, with a corresponding enumeration member found in the <strong>EnumType</strong> field. The <strong>ManyChoices</strong> field returns an array of objects. The <strong>ChoiceArray</strong> field returns an array of enumeration values. For each array member in the <strong>ManyChoices</strong> field, a corresponding member is found in the array returned by the <strong>ChoiceArray</strong> field.</p>XmlChoiceIdentifierAttribute Example#1"
  syntax:
    content: public XmlChoiceIdentifierAttribute()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor(System.String)
  commentId: M:System.Xml.Serialization.XmlChoiceIdentifierAttribute.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Xml.Serialization.XmlChoiceIdentifierAttribute
  langs:
  - csharp
  - vb
  name: XmlChoiceIdentifierAttribute(String)
  fullName: System.Xml.Serialization.XmlChoiceIdentifierAttribute.XmlChoiceIdentifierAttribute(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 116
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.Serialization.XmlChoiceIdentifierAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public XmlChoiceIdentifierAttribute(string name)
    content.vb: Public Sub New(name As String)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The member name that returns the enumeration used to detect a choice. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName
  commentId: P:System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName
  id: MemberName
  parent: System.Xml.Serialization.XmlChoiceIdentifierAttribute
  langs:
  - csharp
  - vb
  name: MemberName
  fullName: System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemberName
    path: src/System.Xml.XmlSerializer/ref/System.Xml.XmlSerializer.cs
    startLine: 117
  assemblies:
  - System.Xml.XmlSerializer
  namespace: System.Xml.Serialization
  summary: "\n<p>Gets or sets the name of the field that returns the enumeration to use when detecting types.</p>\n"
  remarks: "\n<p>At least one member must be present in the enumeration returned by the field named in the <xref href=\"System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName\" data-throw-if-not-resolved=\"false\"></xref> value. By default, that enumeration name takes the name of the field that the <xref href=\"System.Xml.Serialization.XmlChoiceIdentifierAttribute\" data-throw-if-not-resolved=\"false\"></xref> is applied to.</p>\n"
  example:
  - "\n<p>The following example serializes a class named <strong>Choices</strong> that includes two fields, <strong>MyChoice</strong> and <strong>ManyChoices</strong>. The <xref href=\"System.Xml.Serialization.XmlChoiceIdentifierAttribute\" data-throw-if-not-resolved=\"false\"></xref> is applied to each field that specifies (through the <xref href=\"System.Xml.Serialization.XmlChoiceIdentifierAttribute.MemberName\" data-throw-if-not-resolved=\"false\"></xref> property) another class member that gets or sets an enumeration that detects the member value. The <strong>MyChoice</strong> field can be set to a single value, with a corresponding enumeration member found in the <strong>EnumType</strong> field. The <strong>ManyChoices</strong> field returns an array of objects. The <strong>ChoiceArray</strong> field returns an array of enumeration values. For each array member in the <strong>ManyChoices</strong> field, a corresponding member is found in the array returned by the <strong>ChoiceArray</strong> field.</p>XmlChoiceIdentifierAttribute Example#1"
  syntax:
    content: public string MemberName { get; set; }
    content.vb: Public Property MemberName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of a field that returns an enumeration.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: System.Xml.Serialization
  isExternal: false
  name: System.Xml.Serialization
  fullName: System.Xml.Serialization
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
