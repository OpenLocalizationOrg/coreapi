items:
- uid: System.IO.Pipes.PipeAccessRule
  commentId: T:System.IO.Pipes.PipeAccessRule
  id: PipeAccessRule
  parent: System.IO.Pipes
  children:
  - System.IO.Pipes.PipeAccessRule.#ctor(System.Security.Principal.IdentityReference,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AccessControlType)
  - System.IO.Pipes.PipeAccessRule.#ctor(System.String,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AccessControlType)
  - System.IO.Pipes.PipeAccessRule.PipeAccessRights
  langs:
  - csharp
  - vb
  name: PipeAccessRule
  fullName: System.IO.Pipes.PipeAccessRule
  type: Class
  source:
    remote:
      path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeAccessRule.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PipeAccessRule
    path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeAccessRule.cs
    startLine: 10
  assemblies:
  - System.IO.Pipes.AccessControl
  namespace: System.IO.Pipes
  summary: "\n<p>Represents an abstraction of an access control entry (ACE) that defines an access rule for a pipe.</p>\n"
  remarks: "\n<p>Access control rules define user account rights that determine which actions are allowed or disallowed on computers that are running Microsoft Windows.</p>\n<p>The <xref href=\"System.IO.Pipes.PipeAccessRule\" data-throw-if-not-resolved=\"false\"></xref> class represents an abstraction of an underlying access control entry (ACE) that specifies a user account, the type of access to provide (read, write, and so on), and whether to allow or deny that right.  This class can also specify how access rules are propagated to child objects.</p>\n<p>Use the <xref href=\"System.IO.Pipes.PipeAccessRule\" data-throw-if-not-resolved=\"false\"></xref> class to create a new access rule.  You can persist the rule using the <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - 
  syntax:
    content: 'public sealed class PipeAccessRule : Security.AccessControl.AccessRule'
    content.vb: >-
      Public NotInheritable Class PipeAccessRule
          Inherits Security.AccessControl.AccessRule
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.IO.Pipes.PipeAccessRule.#ctor(System.Security.Principal.IdentityReference,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AccessControlType)
  commentId: M:System.IO.Pipes.PipeAccessRule.#ctor(System.Security.Principal.IdentityReference,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AccessControlType)'
  parent: System.IO.Pipes.PipeAccessRule
  langs:
  - csharp
  - vb
  name: PipeAccessRule(Security.Principal.IdentityReference, PipeAccessRights, Security.AccessControl.AccessControlType)
  fullName: System.IO.Pipes.PipeAccessRule.PipeAccessRule(System.Security.Principal.IdentityReference, System.IO.Pipes.PipeAccessRights, System.Security.AccessControl.AccessControlType)
  type: Constructor
  source:
    remote:
      path: src/System.IO.Pipes.AccessControl/ref/System.IO.Pipes.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.Pipes.AccessControl/ref/System.IO.Pipes.AccessControl.cs
    startLine: 32
  assemblies:
  - System.IO.Pipes.AccessControl
  namespace: System.IO.Pipes
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.Pipes.PipeAccessRule\" data-throw-if-not-resolved=\"false\"></xref> class with the specified identity, pipe access rights, and access control type.</p>\n"
  remarks: "\n<p>Use this constructor to create an access control rule that you can persist using the <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> class. Access control rules define user account rights that determine which actions are allowed or disallowed on computers that are running Microsoft Windows.</p>\n"
  example:
  - 
  syntax:
    content: public PipeAccessRule(Security.Principal.IdentityReference identity, PipeAccessRights rights, Security.AccessControl.AccessControlType type)
    content.vb: Public Sub New(identity As Security.Principal.IdentityReference, rights As PipeAccessRights, type As Security.AccessControl.AccessControlType)
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "\n<p>An <xref href=\"System.Security.Principal.IdentityReference\" data-throw-if-not-resolved=\"false\"></xref> object that encapsulates a reference to a user account.</p>\n"
    - id: rights
      type: System.IO.Pipes.PipeAccessRights
      description: "\n<p>One of the <xref href=\"System.IO.Pipes.PipeAccessRights\" data-throw-if-not-resolved=\"false\"></xref> values that specifies the type of operation associated with the access rule.</p>\n"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> values that specifies whether to allow or deny the operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Pipes.PipeAccessRule.#ctor(System.String,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AccessControlType)
  commentId: M:System.IO.Pipes.PipeAccessRule.#ctor(System.String,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AccessControlType)'
  parent: System.IO.Pipes.PipeAccessRule
  langs:
  - csharp
  - vb
  name: PipeAccessRule(String, PipeAccessRights, Security.AccessControl.AccessControlType)
  fullName: System.IO.Pipes.PipeAccessRule.PipeAccessRule(System.String, System.IO.Pipes.PipeAccessRights, System.Security.AccessControl.AccessControlType)
  type: Constructor
  source:
    remote:
      path: src/System.IO.Pipes.AccessControl/ref/System.IO.Pipes.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.Pipes.AccessControl/ref/System.IO.Pipes.AccessControl.cs
    startLine: 33
  assemblies:
  - System.IO.Pipes.AccessControl
  namespace: System.IO.Pipes
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.Pipes.PipeAccessRule\" data-throw-if-not-resolved=\"false\"></xref> class with the specified identity, pipe access rights, and access control type.</p>\n"
  remarks: "\n<p>Use this constructor to create an access control rule that you can persist using the <xref href=\"System.IO.Pipes.PipeSecurity\" data-throw-if-not-resolved=\"false\"></xref> class. Access control rules define user account rights that determine which actions are allowed or disallowed on computers that are running Microsoft Windows.</p>\n"
  example:
  - 
  syntax:
    content: public PipeAccessRule(string identity, PipeAccessRights rights, Security.AccessControl.AccessControlType type)
    content.vb: Public Sub New(identity As String, rights As PipeAccessRights, type As Security.AccessControl.AccessControlType)
    parameters:
    - id: identity
      type: System.String
      description: "\n<p>The name of the user account.</p>\n"
    - id: rights
      type: System.IO.Pipes.PipeAccessRights
      description: "\n<p>One of the <xref href=\"System.IO.Pipes.PipeAccessRights\" data-throw-if-not-resolved=\"false\"></xref> values that specifies the type of operation associated with the access rule.</p>\n"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> values that specifies whether to allow or deny the operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Pipes.PipeAccessRule.PipeAccessRights
  commentId: P:System.IO.Pipes.PipeAccessRule.PipeAccessRights
  id: PipeAccessRights
  parent: System.IO.Pipes.PipeAccessRule
  langs:
  - csharp
  - vb
  name: PipeAccessRights
  fullName: System.IO.Pipes.PipeAccessRule.PipeAccessRights
  type: Property
  source:
    remote:
      path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeAccessRule.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PipeAccessRights
    path: src/System.IO.Pipes.AccessControl/src/System/IO/PipeAccessRule.cs
    startLine: 34
  assemblies:
  - System.IO.Pipes.AccessControl
  namespace: System.IO.Pipes
  summary: "\n<p>Gets the <xref href=\"System.IO.Pipes.PipeAccessRights\" data-throw-if-not-resolved=\"false\"></xref> flags that are associated with the current <xref href=\"System.IO.Pipes.PipeAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public PipeAccessRights PipeAccessRights { get; }
    content.vb: Public ReadOnly Property PipeAccessRights As PipeAccessRights
    parameters: []
    return:
      type: System.IO.Pipes.PipeAccessRights
      description: "\n<p>A bitwise combination of the <xref href=\"System.IO.Pipes.PipeAccessRights\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.IO.Pipes
  isExternal: false
  name: System.IO.Pipes
  fullName: System.IO.Pipes
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: Principal.IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.IO.Pipes.PipeAccessRights
  parent: System.IO.Pipes
  isExternal: false
  name: PipeAccessRights
  fullName: System.IO.Pipes.PipeAccessRights
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
