items:
- uid: System.Net.Http.HttpClient
  id: HttpClient
  parent: System.Net.Http
  children:
  - System.Net.Http.HttpClient.#ctor
  - System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)
  - System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)
  - System.Net.Http.HttpClient.BaseAddress
  - System.Net.Http.HttpClient.CancelPendingRequests
  - System.Net.Http.HttpClient.DefaultRequestHeaders
  - System.Net.Http.HttpClient.DeleteAsync(System.String)
  - System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.DeleteAsync(System.Uri)
  - System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.Dispose(System.Boolean)
  - System.Net.Http.HttpClient.GetAsync(System.String)
  - System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)
  - System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.GetAsync(System.Uri)
  - System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)
  - System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.GetByteArrayAsync(System.String)
  - System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)
  - System.Net.Http.HttpClient.GetStreamAsync(System.String)
  - System.Net.Http.HttpClient.GetStreamAsync(System.Uri)
  - System.Net.Http.HttpClient.GetStringAsync(System.String)
  - System.Net.Http.HttpClient.GetStringAsync(System.Uri)
  - System.Net.Http.HttpClient.MaxResponseContentBufferSize
  - System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)
  - System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)
  - System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)
  - System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)
  - System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)
  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)
  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.Timeout
  href: System.Net.Http.HttpClient.yml
  name: HttpClient
  fullName: System.Net.Http.HttpClient
  type: Class
  source:
    remote: &o0
      path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 12
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Provides a base class for sending HTTP requests and receiving HTTP responses from a resource identified by a URI.
  syntax:
    content: 'public class HttpClient : HttpMessageInvoker, IDisposable'
    content.vb: Public Class HttpClient Inherits HttpMessageInvoker Implements IDisposable
  inheritance:
  - System.Object
  - System.Net.Http.HttpMessageInvoker
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Net.Http.HttpMessageInvoker.Dispose
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.Net.Http.HttpClient.#ctor
  id: '#ctor'
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: HttpClient()
  fullName: System.Net.Http.HttpClient.HttpClient()
  type: Constructor
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 99
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Initializes a new instance of the @'System.Net.Http.HttpClient' class.
  syntax:
    content: public HttpClient()
    content.vb: Public Sub New
- uid: System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)
  id: '#ctor(System.Net.Http.HttpMessageHandler)'
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: HttpClient(HttpMessageHandler)
  fullName: System.Net.Http.HttpClient.HttpClient(System.Net.Http.HttpMessageHandler)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 104
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Initializes a new instance of the @'System.Net.Http.HttpClient' class with a specific handler.
  syntax:
    content: public HttpClient(HttpMessageHandler handler)
    content.vb: Public Sub New(handler As HttpMessageHandler)
    parameters:
    - id: handler
      type: System.Net.Http.HttpMessageHandler
      description: The HTTP handler stack to use for sending requests.
- uid: System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)
  id: '#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)'
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: HttpClient(HttpMessageHandler, Boolean)
  fullName: System.Net.Http.HttpClient.HttpClient(System.Net.Http.HttpMessageHandler, System.Boolean)
  type: Constructor
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 109
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Initializes a new instance of the @'System.Net.Http.HttpClient' class with a specific handler.
  syntax:
    content: public HttpClient(HttpMessageHandler handler, bool disposeHandler)
    content.vb: Public Sub New(handler As HttpMessageHandler, disposeHandler As Boolean)
    parameters:
    - id: handler
      type: System.Net.Http.HttpMessageHandler
      description: The @'System.Net.Http.HttpMessageHandler' responsible for processing the HTTP response messages.
    - id: disposeHandler
      type: System.Boolean
      description: true if the inner handler should be disposed of by Dispose(),false if you intend to reuse the inner handler.
- uid: System.Net.Http.HttpClient.BaseAddress
  id: BaseAddress
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: BaseAddress
  fullName: System.Net.Http.HttpClient.BaseAddress
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 47
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Gets or sets the base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.
  syntax:
    content: public Uri BaseAddress { get; set; }
    content.vb: Public Property BaseAddress As Uri
    parameters: []
    return:
      type: System.Uri
      description: Returns @'System.Uri'.The base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.
- uid: System.Net.Http.HttpClient.DefaultRequestHeaders
  id: DefaultRequestHeaders
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: DefaultRequestHeaders
  fullName: System.Net.Http.HttpClient.DefaultRequestHeaders
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 35
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Gets the headers which should be sent with each request.
  syntax:
    content: public HttpRequestHeaders DefaultRequestHeaders { get; }
    content.vb: Public ReadOnly Property DefaultRequestHeaders As HttpRequestHeaders
    parameters: []
    return:
      type: System.Net.Http.Headers.HttpRequestHeaders
      description: Returns @'System.Net.Http.Headers.HttpRequestHeaders'.The headers which should be sent with each request.
- uid: System.Net.Http.HttpClient.MaxResponseContentBufferSize
  id: MaxResponseContentBufferSize
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: MaxResponseContentBufferSize
  fullName: System.Net.Http.HttpClient.MaxResponseContentBufferSize
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 75
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Gets or sets the maximum number of bytes to buffer when reading the response content.
  syntax:
    content: public long MaxResponseContentBufferSize { get; set; }
    content.vb: Public Property MaxResponseContentBufferSize As Long
    parameters: []
    return:
      type: System.Int64
      description: Returns @'System.Int32'.The maximum number of bytes to buffer when reading the response content. The default value for this property is 2 gigabytes.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: The size specified is less than or equal to zero.
  - type: System.InvalidOperationException
    description: An operation has already been started on the current instance.
  - type: System.ObjectDisposedException
    description: The current instance has been disposed.
- uid: System.Net.Http.HttpClient.Timeout
  id: Timeout
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: Timeout
  fullName: System.Net.Http.HttpClient.Timeout
  type: Property
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 61
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Gets or sets the timespan to wait before the request times out.
  syntax:
    content: public TimeSpan Timeout { get; set; }
    content.vb: Public Property Timeout As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
      description: Returns @'System.TimeSpan'.The timespan to wait before the request times out.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    description: The timeout specified is less than or equal to zero and is not @'System.Threading.Timeout.InfiniteTimeSpan'.
  - type: System.InvalidOperationException
    description: An operation has already been started on the current instance.
  - type: System.ObjectDisposedException
    description: The current instance has been disposed.
- uid: System.Net.Http.HttpClient.CancelPendingRequests
  id: CancelPendingRequests
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: CancelPendingRequests()
  fullName: System.Net.Http.HttpClient.CancelPendingRequests()
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 404
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Cancel all pending requests on this instance.
  syntax:
    content: public void CancelPendingRequests()
    content.vb: Public Sub CancelPendingRequests
- uid: System.Net.Http.HttpClient.DeleteAsync(System.String)
  id: DeleteAsync(System.String)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: DeleteAsync(String)
  fullName: System.Net.Http.HttpClient.DeleteAsync(System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 293
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a DELETE request to the specified Uri as an asynchronous operation.
  syntax:
    content: public Task<HttpResponseMessage> DeleteAsync(string requestUri)
    content.vb: Public Function DeleteAsync(requestUri As String) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.String
      description: The Uri the request is sent to.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
  - type: System.InvalidOperationException
    description: The request message was already sent by the @'System.Net.Http.HttpClient' instance.
- uid: System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)
  id: DeleteAsync(System.String,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: DeleteAsync(String, CancellationToken)
  fullName: System.Net.Http.HttpClient.DeleteAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 303
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.
  syntax:
    content: public Task<HttpResponseMessage> DeleteAsync(string requestUri, CancellationToken cancellationToken)
    content.vb: Public Function DeleteAsync(requestUri As String, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.String
      description: The Uri the request is sent to.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
  - type: System.InvalidOperationException
    description: The request message was already sent by the @'System.Net.Http.HttpClient' instance.
- uid: System.Net.Http.HttpClient.DeleteAsync(System.Uri)
  id: DeleteAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: DeleteAsync(Uri)
  fullName: System.Net.Http.HttpClient.DeleteAsync(System.Uri)
  type: Method
  source:
    remote: &o1
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 46
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a DELETE request to the specified Uri as an asynchronous operation.
  syntax:
    content: public Task<HttpResponseMessage> DeleteAsync(Uri requestUri)
    content.vb: Public Function DeleteAsync(requestUri As Uri) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.Uri
      description: The Uri the request is sent to.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
  - type: System.InvalidOperationException
    description: The request message was already sent by the @'System.Net.Http.HttpClient' instance.
- uid: System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)
  id: DeleteAsync(System.Uri,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: DeleteAsync(Uri, CancellationToken)
  fullName: System.Net.Http.HttpClient.DeleteAsync(System.Uri, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 47
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.
  syntax:
    content: public Task<HttpResponseMessage> DeleteAsync(Uri requestUri, CancellationToken cancellationToken)
    content.vb: Public Function DeleteAsync(requestUri As Uri, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.Uri
      description: The Uri the request is sent to.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
  - type: System.InvalidOperationException
    description: The request message was already sent by the @'System.Net.Http.HttpClient' instance.
- uid: System.Net.Http.HttpClient.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: Dispose(Boolean)
  fullName: System.Net.Http.HttpClient.Dispose(System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 426
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Releases the unmanaged resources used by the @'System.Net.Http.HttpClient' and optionally disposes of the managed resources.
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: true to release both managed and unmanaged resources; false to releases only unmanaged resources.
  overridden: System.Net.Http.HttpMessageInvoker.Dispose(System.Boolean)
- uid: System.Net.Http.HttpClient.GetAsync(System.String)
  id: GetAsync(System.String)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: GetAsync(String)
  fullName: System.Net.Http.HttpClient.GetAsync(System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 203
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a GET request to the specified Uri as an asynchronous operation.
  syntax:
    content: public Task<HttpResponseMessage> GetAsync(string requestUri)
    content.vb: Public Function GetAsync(requestUri As String) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.String
      description: The Uri the request is sent to.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)
  id: GetAsync(System.String,System.Net.Http.HttpCompletionOption)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: GetAsync(String, HttpCompletionOption)
  fullName: System.Net.Http.HttpClient.GetAsync(System.String, System.Net.Http.HttpCompletionOption)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 213
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.
  syntax:
    content: public Task<HttpResponseMessage> GetAsync(string requestUri, HttpCompletionOption completionOption)
    content.vb: Public Function GetAsync(requestUri As String, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.String
      description: The Uri the request is sent to.
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: An HTTP completion option value that indicates when the operation should be considered completed.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns @'System.Threading.Tasks.Task`1'.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  id: GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: GetAsync(String, HttpCompletionOption, CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(System.String, System.Net.Http.HttpCompletionOption, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 233
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.
  syntax:
    content: public Task<HttpResponseMessage> GetAsync(string requestUri, HttpCompletionOption completionOption, CancellationToken cancellationToken)
    content.vb: Public Function GetAsync(requestUri As String, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.String
      description: The Uri the request is sent to.
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: An HTTP  completion option value that indicates when the operation should be considered completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns @'System.Threading.Tasks.Task`1'.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)
  id: GetAsync(System.String,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: GetAsync(String, CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 223
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.
  syntax:
    content: public Task<HttpResponseMessage> GetAsync(string requestUri, CancellationToken cancellationToken)
    content.vb: Public Function GetAsync(requestUri As String, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.String
      description: The Uri the request is sent to.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns @'System.Threading.Tasks.Task`1'.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri)
  id: GetAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: GetAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetAsync(System.Uri)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 53
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a GET request to the specified Uri as an asynchronous operation.
  syntax:
    content: public Task<HttpResponseMessage> GetAsync(Uri requestUri)
    content.vb: Public Function GetAsync(requestUri As Uri) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.Uri
      description: The Uri the request is sent to.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)
  id: GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: GetAsync(Uri, HttpCompletionOption)
  fullName: System.Net.Http.HttpClient.GetAsync(System.Uri, System.Net.Http.HttpCompletionOption)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 54
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.
  syntax:
    content: public Task<HttpResponseMessage> GetAsync(Uri requestUri, HttpCompletionOption completionOption)
    content.vb: Public Function GetAsync(requestUri As Uri, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.Uri
      description: The Uri the request is sent to.
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: An HTTP  completion option value that indicates when the operation should be considered completed.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  id: GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: GetAsync(Uri, HttpCompletionOption, CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(System.Uri, System.Net.Http.HttpCompletionOption, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 55
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.
  syntax:
    content: public Task<HttpResponseMessage> GetAsync(Uri requestUri, HttpCompletionOption completionOption, CancellationToken cancellationToken)
    content.vb: Public Function GetAsync(requestUri As Uri, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.Uri
      description: The Uri the request is sent to.
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: An HTTP  completion option value that indicates when the operation should be considered completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)
  id: GetAsync(System.Uri,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: GetAsync(Uri, CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(System.Uri, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 56
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.
  syntax:
    content: public Task<HttpResponseMessage> GetAsync(Uri requestUri, CancellationToken cancellationToken)
    content.vb: Public Function GetAsync(requestUri As Uri, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.Uri
      description: The Uri the request is sent to.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
- uid: System.Net.Http.HttpClient.GetByteArrayAsync(System.String)
  id: GetByteArrayAsync(System.String)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: GetByteArrayAsync(String)
  fullName: System.Net.Http.HttpClient.GetByteArrayAsync(System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 138
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.
  syntax:
    content: public Task<byte[]> GetByteArrayAsync(string requestUri)
    content.vb: Public Function GetByteArrayAsync(requestUri As String) As Task(Of Byte())
    parameters:
    - id: requestUri
      type: System.String
      description: The Uri the request is sent to.
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
- uid: System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)
  id: GetByteArrayAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: GetByteArrayAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 58
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.
  syntax:
    content: public Task<byte[]> GetByteArrayAsync(Uri requestUri)
    content.vb: Public Function GetByteArrayAsync(requestUri As Uri) As Task(Of Byte())
    parameters:
    - id: requestUri
      type: System.Uri
      description: The Uri the request is sent to.
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
- uid: System.Net.Http.HttpClient.GetStreamAsync(System.String)
  id: GetStreamAsync(System.String)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: GetStreamAsync(String)
  fullName: System.Net.Http.HttpClient.GetStreamAsync(System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 150
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.
  syntax:
    content: public Task<Stream> GetStreamAsync(string requestUri)
    content.vb: Public Function GetStreamAsync(requestUri As String) As Task(Of Stream)
    parameters:
    - id: requestUri
      type: System.String
      description: The Uri the request is sent to.
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
- uid: System.Net.Http.HttpClient.GetStreamAsync(System.Uri)
  id: GetStreamAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: GetStreamAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetStreamAsync(System.Uri)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 60
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.
  syntax:
    content: public Task<Stream> GetStreamAsync(Uri requestUri)
    content.vb: Public Function GetStreamAsync(requestUri As Uri) As Task(Of Stream)
    parameters:
    - id: requestUri
      type: System.Uri
      description: The Uri the request is sent to.
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
- uid: System.Net.Http.HttpClient.GetStringAsync(System.String)
  id: GetStringAsync(System.String)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: GetStringAsync(String)
  fullName: System.Net.Http.HttpClient.GetStringAsync(System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 127
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.
  syntax:
    content: public Task<string> GetStringAsync(string requestUri)
    content.vb: Public Function GetStringAsync(requestUri As String) As Task(Of String)
    parameters:
    - id: requestUri
      type: System.String
      description: The Uri the request is sent to.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
- uid: System.Net.Http.HttpClient.GetStringAsync(System.Uri)
  id: GetStringAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: GetStringAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetStringAsync(System.Uri)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 62
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.
  syntax:
    content: public Task<string> GetStringAsync(Uri requestUri)
    content.vb: Public Function GetStringAsync(requestUri As Uri) As Task(Of String)
    parameters:
    - id: requestUri
      type: System.Uri
      description: The Uri the request is sent to.
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
- uid: System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)
  id: PostAsync(System.String,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: PostAsync(String, HttpContent)
  fullName: System.Net.Http.HttpClient.PostAsync(System.String, System.Net.Http.HttpContent)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 245
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a POST request to the specified Uri as an asynchronous operation.
  syntax:
    content: public Task<HttpResponseMessage> PostAsync(string requestUri, HttpContent content)
    content.vb: Public Function PostAsync(requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.String
      description: The Uri the request is sent to.
    - id: content
      type: System.Net.Http.HttpContent
      description: The HTTP request content sent to the server.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
- uid: System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  id: PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: PostAsync(String, HttpContent, CancellationToken)
  fullName: System.Net.Http.HttpClient.PostAsync(System.String, System.Net.Http.HttpContent, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 255
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a POST request with a cancellation token as an asynchronous operation.
  syntax:
    content: public Task<HttpResponseMessage> PostAsync(string requestUri, HttpContent content, CancellationToken cancellationToken)
    content.vb: Public Function PostAsync(requestUri As String, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.String
      description: The Uri the request is sent to.
    - id: content
      type: System.Net.Http.HttpContent
      description: The HTTP request content sent to the server.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
- uid: System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)
  id: PostAsync(System.Uri,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: PostAsync(Uri, HttpContent)
  fullName: System.Net.Http.HttpClient.PostAsync(System.Uri, System.Net.Http.HttpContent)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 65
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a POST request to the specified Uri as an asynchronous operation.
  syntax:
    content: public Task<HttpResponseMessage> PostAsync(Uri requestUri, HttpContent content)
    content.vb: Public Function PostAsync(requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.Uri
      description: The Uri the request is sent to.
    - id: content
      type: System.Net.Http.HttpContent
      description: The HTTP request content sent to the server.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
- uid: System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  id: PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: PostAsync(Uri, HttpContent, CancellationToken)
  fullName: System.Net.Http.HttpClient.PostAsync(System.Uri, System.Net.Http.HttpContent, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 66
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a POST request with a cancellation token as an asynchronous operation.
  syntax:
    content: public Task<HttpResponseMessage> PostAsync(Uri requestUri, HttpContent content, CancellationToken cancellationToken)
    content.vb: Public Function PostAsync(requestUri As Uri, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.Uri
      description: The Uri the request is sent to.
    - id: content
      type: System.Net.Http.HttpContent
      description: The HTTP request content sent to the server.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
- uid: System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)
  id: PutAsync(System.String,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: PutAsync(String, HttpContent)
  fullName: System.Net.Http.HttpClient.PutAsync(System.String, System.Net.Http.HttpContent)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 269
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a PUT request to the specified Uri as an asynchronous operation.
  syntax:
    content: public Task<HttpResponseMessage> PutAsync(string requestUri, HttpContent content)
    content.vb: Public Function PutAsync(requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.String
      description: The Uri the request is sent to.
    - id: content
      type: System.Net.Http.HttpContent
      description: The HTTP request content sent to the server.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
- uid: System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  id: PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: PutAsync(String, HttpContent, CancellationToken)
  fullName: System.Net.Http.HttpClient.PutAsync(System.String, System.Net.Http.HttpContent, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 279
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a PUT request with a cancellation token as an asynchronous operation.
  syntax:
    content: public Task<HttpResponseMessage> PutAsync(string requestUri, HttpContent content, CancellationToken cancellationToken)
    content.vb: Public Function PutAsync(requestUri As String, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.String
      description: The Uri the request is sent to.
    - id: content
      type: System.Net.Http.HttpContent
      description: The HTTP request content sent to the server.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
- uid: System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)
  id: PutAsync(System.Uri,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: PutAsync(Uri, HttpContent)
  fullName: System.Net.Http.HttpClient.PutAsync(System.Uri, System.Net.Http.HttpContent)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 69
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a PUT request to the specified Uri as an asynchronous operation.
  syntax:
    content: public Task<HttpResponseMessage> PutAsync(Uri requestUri, HttpContent content)
    content.vb: Public Function PutAsync(requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.Uri
      description: The Uri the request is sent to.
    - id: content
      type: System.Net.Http.HttpContent
      description: The HTTP request content sent to the server.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
- uid: System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  id: PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: PutAsync(Uri, HttpContent, CancellationToken)
  fullName: System.Net.Http.HttpClient.PutAsync(System.Uri, System.Net.Http.HttpContent, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o1
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 70
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send a PUT request with a cancellation token as an asynchronous operation.
  syntax:
    content: public Task<HttpResponseMessage> PutAsync(Uri requestUri, HttpContent content, CancellationToken cancellationToken)
    content.vb: Public Function PutAsync(requestUri As Uri, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: requestUri
      type: System.Uri
      description: The Uri the request is sent to.
    - id: content
      type: System.Net.Http.HttpContent
      description: The HTTP request content sent to the server.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *requestUri* was null.
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)
  id: SendAsync(System.Net.Http.HttpRequestMessage)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: SendAsync(HttpRequestMessage)
  fullName: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 317
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send an HTTP request as an asynchronous operation.
  syntax:
    content: public Task<HttpResponseMessage> SendAsync(HttpRequestMessage request)
    content.vb: Public Function SendAsync(request As HttpRequestMessage) As Task(Of HttpResponseMessage)
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: The HTTP request message to send.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *request* was null.
  - type: System.InvalidOperationException
    description: The request message was already sent by the @'System.Net.Http.HttpClient' instance.
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: SendAsync(HttpRequestMessage, HttpCompletionOption)
  fullName: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage, System.Net.Http.HttpCompletionOption)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 328
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send an HTTP request as an asynchronous operation.
  syntax:
    content: public Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, HttpCompletionOption completionOption)
    content.vb: Public Function SendAsync(request As HttpRequestMessage, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: The HTTP request message to send.
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: When the operation should complete (as soon as a response is available or after reading the whole response content).
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *request* was null.
  - type: System.InvalidOperationException
    description: The request message was already sent by the @'System.Net.Http.HttpClient' instance.
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: SendAsync(HttpRequestMessage, HttpCompletionOption, CancellationToken)
  fullName: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage, System.Net.Http.HttpCompletionOption, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 333
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send an HTTP request as an asynchronous operation.
  syntax:
    content: public Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationToken cancellationToken)
    content.vb: Public Function SendAsync(request As HttpRequestMessage, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: The HTTP request message to send.
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: When the operation should complete (as soon as a response is available or after reading the whole response content).
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to cancel operation.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  exceptions:
  - type: System.ArgumentNullException
    description: The *request* was null.
  - type: System.InvalidOperationException
    description: The request message was already sent by the @'System.Net.Http.HttpClient' instance.
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  href: System.Net.Http.HttpClient.yml
  name: SendAsync(HttpRequestMessage, CancellationToken)
  fullName: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken)
  type: Method
  source:
    remote: *o0
    path: src/System.Net.Http/src/System/Net/Http/HttpClient.cs
    startLine: 322
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Send an HTTP request as an asynchronous operation.
  syntax:
    content: public override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
    content.vb: Public Overrides Function SendAsync(request As HttpRequestMessage, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: The HTTP request message to send.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token to cancel operation.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns @'System.Threading.Tasks.Task`1'.The task object representing the asynchronous operation.
  overridden: System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  exceptions:
  - type: System.ArgumentNullException
    description: The *request* was null.
  - type: System.InvalidOperationException
    description: The request message was already sent by the @'System.Net.Http.HttpClient' instance.
references:
- uid: System.Net.Http
  isExternal: false
  name: System.Net.Http
  fullName: System.Net.Http
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
- uid: System.Net.Http.HttpMessageInvoker
  parent: System.Net.Http
  isExternal: false
  href: System.Net.Http.HttpMessageInvoker.yml
  name: HttpMessageInvoker
  fullName: System.Net.Http.HttpMessageInvoker
- uid: System.Net.Http.HttpMessageInvoker.Dispose
  parent: System.Net.Http.HttpMessageInvoker
  isExternal: false
  href: System.Net.Http.HttpMessageInvoker.yml
  name: Dispose()
  fullName: System.Net.Http.HttpMessageInvoker.Dispose()
  spec.csharp:
  - uid: System.Net.Http.HttpMessageInvoker.Dispose
    name: Dispose
    fullName: System.Net.Http.HttpMessageInvoker.Dispose
    href: System.Net.Http.HttpMessageInvoker.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.Http.HttpMessageInvoker.Dispose
    name: Dispose
    fullName: System.Net.Http.HttpMessageInvoker.Dispose
    href: System.Net.Http.HttpMessageInvoker.yml
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Net.Http.HttpMessageHandler
  parent: System.Net.Http
  isExternal: false
  href: System.Net.Http.HttpMessageHandler.yml
  name: HttpMessageHandler
  fullName: System.Net.Http.HttpMessageHandler
- uid: System.Boolean
  parent: System
  isExternal: false
  href: System.Boolean.yml
  name: Boolean
  fullName: System.Boolean
- uid: System.Uri
  parent: System
  isExternal: false
  href: System.Uri.yml
  name: Uri
  fullName: System.Uri
- uid: System.Net.Http.Headers.HttpRequestHeaders
  parent: System.Net.Http.Headers
  isExternal: false
  href: System.Net.Http.Headers.HttpRequestHeaders.yml
  name: HttpRequestHeaders
  fullName: System.Net.Http.Headers.HttpRequestHeaders
- uid: System.Net.Http.Headers
  isExternal: false
  name: System.Net.Http.Headers
  fullName: System.Net.Http.Headers
- uid: System.Int64
  parent: System
  isExternal: false
  href: System.Int64.yml
  name: Int64
  fullName: System.Int64
- uid: System.TimeSpan
  parent: System
  isExternal: false
  href: System.TimeSpan.yml
  name: TimeSpan
  fullName: System.TimeSpan
- uid: System.String
  parent: System
  isExternal: false
  href: System.String.yml
  name: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  href: System.Net.Http.HttpResponseMessage.yml
  name: Task<HttpResponseMessage>
  name.vb: Task(Of HttpResponseMessage)
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  fullName.vb: System.Threading.Tasks.Task(Of System.Net.Http.HttpResponseMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    fullName: System.Net.Http.HttpResponseMessage
    href: System.Net.Http.HttpResponseMessage.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    fullName: System.Net.Http.HttpResponseMessage
    href: System.Net.Http.HttpResponseMessage.yml
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  href: System.Threading.Tasks.Task`1.yml
  name: Task<TResult>
  name.vb: Task(Of TResult)
  fullName: System.Threading.Tasks.Task<TResult>
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    href: System.Threading.Tasks.Task`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  href: System.Threading.CancellationToken.yml
  name: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Net.Http.HttpMessageInvoker.Dispose(System.Boolean)
  parent: System.Net.Http.HttpMessageInvoker
  isExternal: true
  href: System.Net.Http.HttpMessageInvoker.yml
  name: Dispose(Boolean)
  fullName: System.Net.Http.HttpMessageInvoker.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.Net.Http.HttpMessageInvoker.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Net.Http.HttpMessageInvoker.Dispose
    href: System.Net.Http.HttpMessageInvoker.yml
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.Http.HttpMessageInvoker.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Net.Http.HttpMessageInvoker.Dispose
    href: System.Net.Http.HttpMessageInvoker.yml
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Net.Http.HttpCompletionOption
  parent: System.Net.Http
  isExternal: false
  href: System.Net.Http.HttpCompletionOption.yml
  name: HttpCompletionOption
  fullName: System.Net.Http.HttpCompletionOption
- uid: System.Threading.Tasks.Task{System.Byte[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Byte[]>
  name.vb: Task(Of Byte())
  fullName: System.Threading.Tasks.Task<System.Byte[]>
  fullName.vb: System.Threading.Tasks.Task(Of System.Byte())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Stream>
  name.vb: Task(Of Stream)
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  fullName.vb: System.Threading.Tasks.Task(Of System.IO.Stream)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  name.vb: Task(Of String)
  fullName: System.Threading.Tasks.Task<System.String>
  fullName.vb: System.Threading.Tasks.Task(Of System.String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Net.Http.HttpContent
  parent: System.Net.Http
  isExternal: false
  href: System.Net.Http.HttpContent.yml
  name: HttpContent
  fullName: System.Net.Http.HttpContent
- uid: System.Net.Http.HttpRequestMessage
  parent: System.Net.Http
  isExternal: false
  href: System.Net.Http.HttpRequestMessage.yml
  name: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpMessageInvoker
  isExternal: true
  href: System.Net.Http.HttpMessageInvoker.yml
  name: SendAsync(HttpRequestMessage, CancellationToken)
  fullName: System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
    name: SendAsync
    fullName: System.Net.Http.HttpMessageInvoker.SendAsync
    href: System.Net.Http.HttpMessageInvoker.yml
  - name: (
    fullName: (
  - uid: System.Net.Http.HttpRequestMessage
    name: HttpRequestMessage
    fullName: System.Net.Http.HttpRequestMessage
    href: System.Net.Http.HttpRequestMessage.yml
  - name: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
    name: SendAsync
    fullName: System.Net.Http.HttpMessageInvoker.SendAsync
    href: System.Net.Http.HttpMessageInvoker.yml
  - name: (
    fullName: (
  - uid: System.Net.Http.HttpRequestMessage
    name: HttpRequestMessage
    fullName: System.Net.Http.HttpRequestMessage
    href: System.Net.Http.HttpRequestMessage.yml
  - name: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  href: System.ArgumentOutOfRangeException.yml
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  summary: The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  href: System.InvalidOperationException.yml
  name: InvalidOperationException
  fullName: System.InvalidOperationException
  summary: The exception that is thrown when a method call is invalid for the object's current state.
- uid: System.ObjectDisposedException
  isExternal: false
  href: System.ObjectDisposedException.yml
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
  summary: The exception that is thrown when an operation is performed on a disposed object.
- uid: System.ArgumentNullException
  isExternal: false
  href: System.ArgumentNullException.yml
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  summary: The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
