items:
- uid: System.IO.Pipes.AnonymousPipeClientStream
  commentId: T:System.IO.Pipes.AnonymousPipeClientStream
  id: AnonymousPipeClientStream
  parent: System.IO.Pipes
  children:
  - System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)
  - System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)
  - System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.String)
  - System.IO.Pipes.AnonymousPipeClientStream.Finalize
  - System.IO.Pipes.AnonymousPipeClientStream.ReadMode
  - System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode
  langs:
  - csharp
  - vb
  name: AnonymousPipeClientStream
  fullName: System.IO.Pipes.AnonymousPipeClientStream
  type: Class
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/AnonymousPipeClientStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AnonymousPipeClientStream
    path: src/System.IO.Pipes/src/System/IO/Pipes/AnonymousPipeClientStream.cs
    startLine: 14
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Exposes the client side of an anonymous pipe stream, which supports both synchronous and asynchronous read and write operations.</p>\n"
  remarks: "\n<p>Anonymous pipes help provide safe and secure interprocess communication between child and parent processes. The <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\" data-throw-if-not-resolved=\"false\"></xref> class enables a child process to connect to and exchange information with a parent process.</p>\n<p>Anonymous pipes are unnamed, one-way pipes that typically transfer data between parent and child processes. Anonymous pipes are always local; they cannot be used over a network. A <xref href=\"System.IO.Pipes.PipeDirection\" data-throw-if-not-resolved=\"false\"></xref> value of <xref href=\"System.IO.Pipes.PipeDirection.InOut\" data-throw-if-not-resolved=\"false\"></xref> is not supported because anonymous pipes are defined to be one-way.</p>\n<p>Anonymous pipes do not support <xref href=\"System.IO.Pipes.PipeTransmissionMode.Message\" data-throw-if-not-resolved=\"false\"></xref> read modes.</p>\n<p>The client side of an anonymous pipe must be created from a pipe handle provided by the server side by calling the <xref href=\"System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString\" data-throw-if-not-resolved=\"false\"></xref> method. The string is then passed as a parameter when creating the client process. From the client process, it is passed to the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\" data-throw-if-not-resolved=\"false\"></xref> constructor as the <em>pipeHandleAsString</em> parameter.</p>\n<p>For Windows XP Professional and Windows 2000 Server, aÂ maximum of 10 pipes can simultaneously connect over the network.</p>\n"
  example:
  - "\n<p>The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. This example creates an <xref href=\"System.IO.Pipes.AnonymousPipeServerStream\" data-throw-if-not-resolved=\"false\"></xref> object in a parent process with a <xref href=\"System.IO.Pipes.PipeDirection\" data-throw-if-not-resolved=\"false\"></xref> value of <xref href=\"System.IO.Pipes.PipeDirection.Out\" data-throw-if-not-resolved=\"false\"></xref>. It also creates an <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\" data-throw-if-not-resolved=\"false\"></xref> object in a child process with a <xref href=\"System.IO.Pipes.PipeDirection\" data-throw-if-not-resolved=\"false\"></xref> value of <xref href=\"System.IO.Pipes.PipeDirection.In\" data-throw-if-not-resolved=\"false\"></xref>. The parent process then sends a user-supplied string to the child process. The string is displayed to the console.</p>\n<p>This example is for the client process, which is started by the server process. Name the resulting executable from the client code <code>pipeClient.exe</code> and copy it to the same directory as the server executable when you run this example. For the entire code example, including the code for both the pipe client and server, see How to: Use Anonymous Pipes for Local Interprocess Communication.</p>System.IO.Pipes.AnonymousPipeClientStream_Sample#01"
  syntax:
    content: 'public sealed class AnonymousPipeClientStream : PipeStream'
    content.vb: >-
      Public NotInheritable Class AnonymousPipeClientStream
          Inherits PipeStream
  inheritance:
  - System.Object
  - System.IO.Pipes.PipeStream
  inheritedMembers:
  - System.IO.Pipes.PipeStream.CanRead
  - System.IO.Pipes.PipeStream.CanSeek
  - System.IO.Pipes.PipeStream.CanWrite
  - System.IO.Pipes.PipeStream.InBufferSize
  - System.IO.Pipes.PipeStream.IsAsync
  - System.IO.Pipes.PipeStream.IsConnected
  - System.IO.Pipes.PipeStream.IsMessageComplete
  - System.IO.Pipes.PipeStream.Length
  - System.IO.Pipes.PipeStream.OutBufferSize
  - System.IO.Pipes.PipeStream.Position
  - System.IO.Pipes.PipeStream.SafePipeHandle
  - System.IO.Pipes.PipeStream.Dispose(System.Boolean)
  - System.IO.Pipes.PipeStream.Flush
  - System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.IO.Pipes.PipeStream.ReadByte
  - System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.IO.Pipes.PipeStream.SetLength(System.Int64)
  - System.IO.Pipes.PipeStream.WaitForPipeDrain
  - System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.IO.Pipes.PipeStream.WriteByte(System.Byte)
  - System.IO.Pipes.PipeStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.Pipes.PipeStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)
  commentId: M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)
  id: '#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)'
  parent: System.IO.Pipes.AnonymousPipeClientStream
  langs:
  - csharp
  - vb
  name: AnonymousPipeClientStream(PipeDirection, SafePipeHandle)
  fullName: System.IO.Pipes.AnonymousPipeClientStream.AnonymousPipeClientStream(System.IO.Pipes.PipeDirection, Microsoft.Win32.SafeHandles.SafePipeHandle)
  type: Constructor
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/AnonymousPipeClientStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.Pipes/src/System/IO/Pipes/AnonymousPipeClientStream.cs
    startLine: 55
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\" data-throw-if-not-resolved=\"false\"></xref> class from the specified handle.</p>\n"
  remarks: "\n<p>A <xref href=\"System.IO.Pipes.PipeDirection\" data-throw-if-not-resolved=\"false\"></xref> value of <xref href=\"System.IO.Pipes.PipeDirection.InOut\" data-throw-if-not-resolved=\"false\"></xref> is not supported because anonymous pipes are defined to be one-way.</p>\n"
  example:
  - "\n<p>The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\" data-throw-if-not-resolved=\"false\"></xref> object is created in a child process with a <xref href=\"System.IO.Pipes.PipeDirection\" data-throw-if-not-resolved=\"false\"></xref> value of <xref href=\"System.IO.Pipes.PipeDirection.In\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.IO.Pipes.AnonymousPipeClientStream_ctorSample1#01"
  syntax:
    content: public AnonymousPipeClientStream(PipeDirection direction, SafePipeHandle safePipeHandle)
    content.vb: Public Sub New(direction As PipeDirection, safePipeHandle As SafePipeHandle)
    parameters:
    - id: direction
      type: System.IO.Pipes.PipeDirection
      description: "\n<p>One of the enumeration values that determines the direction of the pipe.</p>\n<p>Anonymous pipes can only be in one direction, so <em>direction</em> cannot be set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: safePipeHandle
      type: Microsoft.Win32.SafeHandles.SafePipeHandle
      description: "\n<p>A safe handle for the pipe that this <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\" data-throw-if-not-resolved=\"false\"></xref> object will encapsulate.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>safePipeHandle </em>is not a valid handle.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>safePipeHandle</em> is <strong>null</strong>.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>direction</em> is set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error, such as a disk error, has occurred.</p>\n<p>-or-</p>\n<p>The stream has been closed.</p>\n"
  see:
  - type: System.Security.Permissions.SecurityAction.Demand
    commentId: F:System.Security.Permissions.SecurityAction.Demand
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)
  commentId: M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)
  id: '#ctor(System.IO.Pipes.PipeDirection,System.String)'
  parent: System.IO.Pipes.AnonymousPipeClientStream
  langs:
  - csharp
  - vb
  name: AnonymousPipeClientStream(PipeDirection, String)
  fullName: System.IO.Pipes.AnonymousPipeClientStream.AnonymousPipeClientStream(System.IO.Pipes.PipeDirection, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.IO.Pipes/ref/System.IO.Pipes.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.Pipes/ref/System.IO.Pipes.cs
    startLine: 21
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\" data-throw-if-not-resolved=\"false\"></xref> class with the specified pipe direction and a string representation of the pipe handle.</p>\n"
  remarks: "\n<p>A <xref href=\"System.IO.Pipes.PipeDirection\" data-throw-if-not-resolved=\"false\"></xref> value of <xref href=\"System.IO.Pipes.PipeDirection.InOut\" data-throw-if-not-resolved=\"false\"></xref> is not supported because anonymous pipes are defined to be one-way.</p>\n"
  example:
  - "\n<p>The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\" data-throw-if-not-resolved=\"false\"></xref> object is created in a child process with a <xref href=\"System.IO.Pipes.PipeDirection\" data-throw-if-not-resolved=\"false\"></xref> value of <xref href=\"System.IO.Pipes.PipeDirection.In\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.IO.Pipes.AnonymousPipeClientStream_Sample#01"
  syntax:
    content: public AnonymousPipeClientStream(PipeDirection direction, string pipeHandleAsString)
    content.vb: Public Sub New(direction As PipeDirection, pipeHandleAsString As String)
    parameters:
    - id: direction
      type: System.IO.Pipes.PipeDirection
      description: "\n<p>One of the enumeration values that determines the direction of the pipe.</p>\n<p>Anonymous pipes can only be in one direction, so <em>direction</em> cannot be set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: pipeHandleAsString
      type: System.String
      description: "\n<p>A string that represents the pipe handle.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>pipeHandleAsString</em> is an invalid handle.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>pipeHandleAsString</em> is <strong>null</strong>.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>direction</em> is set to <xref href=\"System.IO.Pipes.PipeDirection.InOut\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  see:
  - type: System.Security.Permissions.SecurityAction.Demand
    commentId: F:System.Security.Permissions.SecurityAction.Demand
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.String)
  commentId: M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IO.Pipes.AnonymousPipeClientStream
  langs:
  - csharp
  - vb
  name: AnonymousPipeClientStream(String)
  fullName: System.IO.Pipes.AnonymousPipeClientStream.AnonymousPipeClientStream(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.IO.Pipes/ref/System.IO.Pipes.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.Pipes/ref/System.IO.Pipes.cs
    startLine: 22
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\" data-throw-if-not-resolved=\"false\"></xref> class with the specified string representation of the pipe handle.</p>\n"
  remarks: "\n<p>For constructors without a <xref href=\"System.IO.Pipes.PipeDirection\" data-throw-if-not-resolved=\"false\"></xref> parameter, the default direction is <xref href=\"System.IO.Pipes.PipeDirection.In\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\" data-throw-if-not-resolved=\"false\"></xref> object is created in a child process.</p>System.IO.Pipes.AnonymousPipeClientStream_ctorSample1#01"
  syntax:
    content: public AnonymousPipeClientStream(string pipeHandleAsString)
    content.vb: Public Sub New(pipeHandleAsString As String)
    parameters:
    - id: pipeHandleAsString
      type: System.String
      description: "\n<p>A string that represents the pipe handle.</p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>\n<em>pipeHandleAsString</em> is not a valid pipe handle.</p>\n"
  see:
  - type: System.Security.Permissions.SecurityAction.Demand
    commentId: F:System.Security.Permissions.SecurityAction.Demand
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Pipes.AnonymousPipeClientStream.ReadMode
  commentId: P:System.IO.Pipes.AnonymousPipeClientStream.ReadMode
  id: ReadMode
  parent: System.IO.Pipes.AnonymousPipeClientStream
  langs:
  - csharp
  - vb
  name: ReadMode
  fullName: System.IO.Pipes.AnonymousPipeClientStream.ReadMode
  type: Property
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/AnonymousPipeClientStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadMode
    path: src/System.IO.Pipes/src/System/IO/Pipes/AnonymousPipeClientStream.cs
    startLine: 99
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Sets the reading mode for the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>Anonymous pipes do not support <xref href=\"System.IO.Pipes.PipeTransmissionMode.Message\" data-throw-if-not-resolved=\"false\"></xref> read mode.</p>\n"
  example:
  - "\n<p>The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\" data-throw-if-not-resolved=\"false\"></xref> object is created in a child process. The <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> is caught when the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream.ReadMode\" data-throw-if-not-resolved=\"false\"></xref> property is set to <xref href=\"System.IO.Pipes.PipeTransmissionMode.Message\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.IO.Pipes.AnonymousPipeClientStream_Sample#01"
  syntax:
    content: public override PipeTransmissionMode ReadMode { set; }
    content.vb: Public Overrides WriteOnly Property ReadMode As PipeTransmissionMode
    parameters: []
    return:
      type: System.IO.Pipes.PipeTransmissionMode
      description: "\n<p>The <xref href=\"System.IO.Pipes.PipeTransmissionMode\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  overridden: System.IO.Pipes.PipeStream.ReadMode
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The transmission mode is not valid. For anonymous pipes, only <xref href=\"System.IO.Pipes.PipeTransmissionMode.Byte\" data-throw-if-not-resolved=\"false\"></xref> is supported.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The transmission mode is <xref href=\"System.IO.Pipes.PipeTransmissionMode.Message\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The connection is broken or another I/O error occurs.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The pipe is closed.</p>\n"
  modifiers.csharp:
  - public
  - override
  - set
  modifiers.vb:
  - Public
  - Overrides
  - WriteOnly
- uid: System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode
  commentId: P:System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode
  id: TransmissionMode
  parent: System.IO.Pipes.AnonymousPipeClientStream
  langs:
  - csharp
  - vb
  name: TransmissionMode
  fullName: System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode
  type: Property
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/AnonymousPipeClientStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TransmissionMode
    path: src/System.IO.Pipes/src/System/IO/Pipes/AnonymousPipeClientStream.cs
    startLine: 93
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Gets the pipe transmission mode supported by the current pipe.</p>\n"
  remarks: "\n<p>Anonymous pipes do not support <xref href=\"System.IO.Pipes.PipeTransmissionMode.Message\" data-throw-if-not-resolved=\"false\"></xref> read mode.</p>\n"
  example:
  - "\n<p>The following example demonstrates a way to send a string from a parent process to a child process by using anonymous pipes. In this example, an <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\" data-throw-if-not-resolved=\"false\"></xref> object is created in a child process and the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode\" data-throw-if-not-resolved=\"false\"></xref> is displayed to the console.</p>System.IO.Pipes.AnonymousPipeClientStream_Sample#01"
  syntax:
    content: public override PipeTransmissionMode TransmissionMode { get; }
    content.vb: Public Overrides ReadOnly Property TransmissionMode As PipeTransmissionMode
    parameters: []
    return:
      type: System.IO.Pipes.PipeTransmissionMode
      description: "\n<p>The <xref href=\"System.IO.Pipes.PipeTransmissionMode\" data-throw-if-not-resolved=\"false\"></xref> supported by the current pipe.</p>\n"
  overridden: System.IO.Pipes.PipeStream.TransmissionMode
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.Pipes.AnonymousPipeClientStream.Finalize
  commentId: M:System.IO.Pipes.AnonymousPipeClientStream.Finalize
  id: Finalize
  parent: System.IO.Pipes.AnonymousPipeClientStream
  langs:
  - csharp
  - vb
  name: Finalize()
  fullName: System.IO.Pipes.AnonymousPipeClientStream.Finalize()
  type: Method
  source:
    remote:
      path: src/System.IO.Pipes/src/System/IO/Pipes/AnonymousPipeClientStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Finalize
    path: src/System.IO.Pipes/src/System/IO/Pipes/AnonymousPipeClientStream.cs
    startLine: 86
  assemblies:
  - System.IO.Pipes
  namespace: System.IO.Pipes
  summary: "\n<p>Releases unmanaged resources and performs other cleanup operations before the <xref href=\"System.IO.Pipes.AnonymousPipeClientStream\" data-throw-if-not-resolved=\"false\"></xref> instance is reclaimed by garbage collection.</p>\n"
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: System.IO.Pipes
  isExternal: false
  name: System.IO.Pipes
  fullName: System.IO.Pipes
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IO.Pipes.PipeStream
  parent: System.IO.Pipes
  isExternal: false
  name: PipeStream
  fullName: System.IO.Pipes.PipeStream
- uid: System.IO.Pipes.PipeStream.CanRead
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: CanRead
  fullName: System.IO.Pipes.PipeStream.CanRead
- uid: System.IO.Pipes.PipeStream.CanSeek
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: CanSeek
  fullName: System.IO.Pipes.PipeStream.CanSeek
- uid: System.IO.Pipes.PipeStream.CanWrite
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: CanWrite
  fullName: System.IO.Pipes.PipeStream.CanWrite
- uid: System.IO.Pipes.PipeStream.InBufferSize
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: InBufferSize
  fullName: System.IO.Pipes.PipeStream.InBufferSize
- uid: System.IO.Pipes.PipeStream.IsAsync
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: IsAsync
  fullName: System.IO.Pipes.PipeStream.IsAsync
- uid: System.IO.Pipes.PipeStream.IsConnected
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: IsConnected
  fullName: System.IO.Pipes.PipeStream.IsConnected
- uid: System.IO.Pipes.PipeStream.IsMessageComplete
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: IsMessageComplete
  fullName: System.IO.Pipes.PipeStream.IsMessageComplete
- uid: System.IO.Pipes.PipeStream.Length
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: Length
  fullName: System.IO.Pipes.PipeStream.Length
- uid: System.IO.Pipes.PipeStream.OutBufferSize
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: OutBufferSize
  fullName: System.IO.Pipes.PipeStream.OutBufferSize
- uid: System.IO.Pipes.PipeStream.Position
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: Position
  fullName: System.IO.Pipes.PipeStream.Position
- uid: System.IO.Pipes.PipeStream.SafePipeHandle
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: SafePipeHandle
  fullName: System.IO.Pipes.PipeStream.SafePipeHandle
- uid: System.IO.Pipes.PipeStream.Dispose(System.Boolean)
  parent: System.IO.Pipes.PipeStream
  isExternal: true
  name: Dispose(Boolean)
  fullName: System.IO.Pipes.PipeStream.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.IO.Pipes.PipeStream.Dispose(System.Boolean)
    name: Dispose
    fullName: System.IO.Pipes.PipeStream.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Pipes.PipeStream.Dispose(System.Boolean)
    name: Dispose
    fullName: System.IO.Pipes.PipeStream.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Pipes.PipeStream.Flush
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: Flush()
  fullName: System.IO.Pipes.PipeStream.Flush()
  spec.csharp:
  - uid: System.IO.Pipes.PipeStream.Flush
    name: Flush
    fullName: System.IO.Pipes.PipeStream.Flush
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Pipes.PipeStream.Flush
    name: Flush
    fullName: System.IO.Pipes.PipeStream.Flush
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Pipes.PipeStream
  isExternal: true
  name: Read(Byte[], Int32, Int32)
  fullName: System.IO.Pipes.PipeStream.Read(System.Byte[], System.Int32, System.Int32)
  fullname.vb: System.IO.Pipes.PipeStream.Read(System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)
    name: Read
    fullName: System.IO.Pipes.PipeStream.Read
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)
    name: Read
    fullName: System.IO.Pipes.PipeStream.Read
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Pipes.PipeStream.ReadByte
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: ReadByte()
  fullName: System.IO.Pipes.PipeStream.ReadByte()
  spec.csharp:
  - uid: System.IO.Pipes.PipeStream.ReadByte
    name: ReadByte
    fullName: System.IO.Pipes.PipeStream.ReadByte
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Pipes.PipeStream.ReadByte
    name: ReadByte
    fullName: System.IO.Pipes.PipeStream.ReadByte
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.Pipes.PipeStream
  isExternal: true
  name: Seek(Int64, SeekOrigin)
  fullName: System.IO.Pipes.PipeStream.Seek(System.Int64, System.IO.SeekOrigin)
  spec.csharp:
  - uid: System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)
    name: Seek
    fullName: System.IO.Pipes.PipeStream.Seek
  - name: (
    fullName: (
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IO.SeekOrigin
    name: SeekOrigin
    fullName: System.IO.SeekOrigin
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)
    name: Seek
    fullName: System.IO.Pipes.PipeStream.Seek
  - name: (
    fullName: (
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IO.SeekOrigin
    name: SeekOrigin
    fullName: System.IO.SeekOrigin
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Pipes.PipeStream.SetLength(System.Int64)
  parent: System.IO.Pipes.PipeStream
  isExternal: true
  name: SetLength(Int64)
  fullName: System.IO.Pipes.PipeStream.SetLength(System.Int64)
  spec.csharp:
  - uid: System.IO.Pipes.PipeStream.SetLength(System.Int64)
    name: SetLength
    fullName: System.IO.Pipes.PipeStream.SetLength
  - name: (
    fullName: (
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Pipes.PipeStream.SetLength(System.Int64)
    name: SetLength
    fullName: System.IO.Pipes.PipeStream.SetLength
  - name: (
    fullName: (
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Pipes.PipeStream.WaitForPipeDrain
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: WaitForPipeDrain()
  fullName: System.IO.Pipes.PipeStream.WaitForPipeDrain()
  spec.csharp:
  - uid: System.IO.Pipes.PipeStream.WaitForPipeDrain
    name: WaitForPipeDrain
    fullName: System.IO.Pipes.PipeStream.WaitForPipeDrain
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Pipes.PipeStream.WaitForPipeDrain
    name: WaitForPipeDrain
    fullName: System.IO.Pipes.PipeStream.WaitForPipeDrain
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Pipes.PipeStream
  isExternal: true
  name: Write(Byte[], Int32, Int32)
  fullName: System.IO.Pipes.PipeStream.Write(System.Byte[], System.Int32, System.Int32)
  fullname.vb: System.IO.Pipes.PipeStream.Write(System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)
    name: Write
    fullName: System.IO.Pipes.PipeStream.Write
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)
    name: Write
    fullName: System.IO.Pipes.PipeStream.Write
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Pipes.PipeStream.WriteByte(System.Byte)
  parent: System.IO.Pipes.PipeStream
  isExternal: true
  name: WriteByte(Byte)
  fullName: System.IO.Pipes.PipeStream.WriteByte(System.Byte)
  spec.csharp:
  - uid: System.IO.Pipes.PipeStream.WriteByte(System.Byte)
    name: WriteByte
    fullName: System.IO.Pipes.PipeStream.WriteByte
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Pipes.PipeStream.WriteByte(System.Byte)
    name: WriteByte
    fullName: System.IO.Pipes.PipeStream.WriteByte
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Pipes.PipeStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Pipes.PipeStream
  isExternal: true
  name: ReadAsync(Byte[], Int32, Int32, Threading.CancellationToken)
  fullName: System.IO.Pipes.PipeStream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  fullname.vb: System.IO.Pipes.PipeStream.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadAsync(Byte(), Int32, Int32, Threading.CancellationToken)
  spec.csharp:
  - uid: System.IO.Pipes.PipeStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: ReadAsync
    fullName: System.IO.Pipes.PipeStream.ReadAsync
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: Threading.CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Pipes.PipeStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: ReadAsync
    fullName: System.IO.Pipes.PipeStream.ReadAsync
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: Threading.CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Pipes.PipeStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Pipes.PipeStream
  isExternal: true
  name: WriteAsync(Byte[], Int32, Int32, Threading.CancellationToken)
  fullName: System.IO.Pipes.PipeStream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  fullname.vb: System.IO.Pipes.PipeStream.WriteAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: WriteAsync(Byte(), Int32, Int32, Threading.CancellationToken)
  spec.csharp:
  - uid: System.IO.Pipes.PipeStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: WriteAsync
    fullName: System.IO.Pipes.PipeStream.WriteAsync
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: Threading.CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.Pipes.PipeStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: WriteAsync
    fullName: System.IO.Pipes.PipeStream.WriteAsync
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: Threading.CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IO.Pipes.PipeDirection
  parent: System.IO.Pipes
  isExternal: false
  name: PipeDirection
  fullName: System.IO.Pipes.PipeDirection
- uid: Microsoft.Win32.SafeHandles.SafePipeHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafePipeHandle
  fullName: Microsoft.Win32.SafeHandles.SafePipeHandle
- uid: Microsoft.Win32.SafeHandles
  isExternal: false
  name: Microsoft.Win32.SafeHandles
  fullName: Microsoft.Win32.SafeHandles
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.IO.Pipes.PipeStream.ReadMode
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: ReadMode
  fullName: System.IO.Pipes.PipeStream.ReadMode
- uid: System.IO.Pipes.PipeTransmissionMode
  parent: System.IO.Pipes
  isExternal: false
  name: PipeTransmissionMode
  fullName: System.IO.Pipes.PipeTransmissionMode
- uid: System.IO.Pipes.PipeStream.TransmissionMode
  parent: System.IO.Pipes.PipeStream
  isExternal: false
  name: TransmissionMode
  fullName: System.IO.Pipes.PipeStream.TransmissionMode
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
