items:
- uid: System.Reflection.CustomAttributeData
  commentId: T:System.Reflection.CustomAttributeData
  id: CustomAttributeData
  parent: System.Reflection
  children:
  - System.Reflection.CustomAttributeData.AttributeType
  - System.Reflection.CustomAttributeData.Constructor
  - System.Reflection.CustomAttributeData.ConstructorArguments
  - System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)
  - System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)
  - System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)
  - System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)
  - System.Reflection.CustomAttributeData.NamedArguments
  langs:
  - csharp
  - vb
  name: CustomAttributeData
  nameWithType: CustomAttributeData
  fullName: System.Reflection.CustomAttributeData
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CustomAttributeData
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 23
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Provides access to custom attribute data for assemblies, modules, types, members and parameters that are loaded into the reflection-only context.</p>\n"
  remarks: "\n<p>Code that is being examined in the reflection-only context cannot be executed, so it is not always possible to examine custom attributes by creating instances of them and then examining their properties, using methods like <see cref=\"Overload:System.Attribute.GetCustomAttributes\"></see>, <see cref=\"Overload:System.Reflection.MemberInfo.GetCustomAttributes\"></see>, and so on. If the code for the attribute type itself is loaded into the reflection-only context, it cannot be executed. </p>\n<p>The <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> class allows examination of custom attributes in the reflection-only context by providing an abstraction for attributes. The members of this class can be used to obtain the positional arguments and named arguments of the attribute. Use the <xref href=\"System.Reflection.CustomAttributeData.ConstructorArguments\" data-throw-if-not-resolved=\"false\"></xref> property to get a list of <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> structures that represent the positional arguments, and use the <xref href=\"System.Reflection.CustomAttributeData.NamedArguments\" data-throw-if-not-resolved=\"false\"></xref> property to get a list of <xref href=\"System.Reflection.CustomAttributeNamedArgument\" data-throw-if-not-resolved=\"false\"></xref> structures that represent the named arguments. </p>\n<p>The <xref href=\"System.Reflection.CustomAttributeNamedArgument\" data-throw-if-not-resolved=\"false\"></xref> structure only provides information about the attribute property used to get and set the argument value. To obtain the type and value of the argument, use the <xref href=\"System.Reflection.CustomAttributeNamedArgument.TypedValue\" data-throw-if-not-resolved=\"false\"></xref> property to obtain a <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> structure.</p>\n<p>When you have a <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> structure for an argument, whether named or positional, use the <xref href=\"System.Reflection.CustomAttributeTypedArgument.ArgumentType\" data-throw-if-not-resolved=\"false\"></xref> property to get the type and the <xref href=\"System.Reflection.CustomAttributeTypedArgument.Value\" data-throw-if-not-resolved=\"false\"></xref> property to get the value. </p>\n<p>For an array argument, the <xref href=\"System.Reflection.CustomAttributeTypedArgument.Value\" data-throw-if-not-resolved=\"false\"></xref> property returns a generic <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> objects. Each <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> object in the collection represents the corresponding element of the array. </p>\n<p>\n<xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> can be used in the execution context as well as in the reflection-only context. For example, you might want to avoid loading the assembly that contains the code for a custom attribute. Using the <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> class is different from using methods like <see cref=\"Overload:System.Attribute.GetCustomAttributes\"></see>:</p>\n<ul><li>\n<p>The properties and methods of <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> only provide you with the values that were specified for the attribute instance, not the semantics of the constructor. For example, a string argument of an attribute might be converted internally to some other representation, and returned in a canonical form; or a property might have side effects when the actual attribute code is executed.</p>\n</li><li>\n<p>The properties and methods of <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> do not allow you to retrieve the custom attributes inherited from base classes. </p>\n</li></ul>\n<p>To create instances of the <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> class, use the <strong>static</strong> (<strong>Shared</strong> in Visual Basic) <see cref=\"Overload:System.Reflection.CustomAttributeData.GetCustomAttributes\"></see> factory methods.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public class CustomAttributeData
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public Class CustomAttributeData
  seealso:
  - type: System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
    commentId: M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Reflection.CustomAttributeData.AttributeType
  commentId: P:System.Reflection.CustomAttributeData.AttributeType
  id: AttributeType
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  - vb
  name: AttributeType
  nameWithType: CustomAttributeData.AttributeType
  fullName: System.Reflection.CustomAttributeData.AttributeType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AttributeType
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 522
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the type of the attribute.</p>\n"
  syntax:
    content: public Type AttributeType { get; }
    content.vb: Public ReadOnly Property AttributeType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The type of the attribute.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.CustomAttributeData.ConstructorArguments
  commentId: P:System.Reflection.CustomAttributeData.ConstructorArguments
  id: ConstructorArguments
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  - vb
  name: ConstructorArguments
  nameWithType: CustomAttributeData.ConstructorArguments
  fullName: System.Reflection.CustomAttributeData.ConstructorArguments
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ConstructorArguments
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 527
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the list of positional arguments specified for the attribute instance represented by the <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>This method gets the positional arguments that were specified for the custom attribute instance without executing any of the custom attribute code. Thus, it can be used in the reflection-only context.</p>\n<p>Use the <xref href=\"System.Reflection.CustomAttributeData.NamedArguments\" data-throw-if-not-resolved=\"false\"></xref> method to get the named arguments specified for the attribute instance.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public virtual IList<CustomAttributeTypedArgument> ConstructorArguments { get; }
    content.vb: >-
      <ComVisible(True)>

      Public Overridable ReadOnly Property ConstructorArguments As IList(Of CustomAttributeTypedArgument)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeTypedArgument}
      description: "\n<p>A collection of structures that represent the positional arguments specified for the custom attribute instance.</p>\n"
  seealso:
  - type: System.Reflection.CustomAttributeData.NamedArguments
    commentId: P:System.Reflection.CustomAttributeData.NamedArguments
  - type: System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
    commentId: M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.CustomAttributeData.NamedArguments
  commentId: P:System.Reflection.CustomAttributeData.NamedArguments
  id: NamedArguments
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  - vb
  name: NamedArguments
  nameWithType: CustomAttributeData.NamedArguments
  fullName: System.Reflection.CustomAttributeData.NamedArguments
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: NamedArguments
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 550
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the list of named arguments specified for the attribute instance represented by the <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>This method gets the named arguments that were specified for the custom attribute instance without executing any of the custom attribute code. Thus, it can be used in the Reflection-only context. </p>\n<p>The list that is returned contains only the named arguments that were specified for the attribute instance.</p>\n<p>Use the <xref href=\"System.Reflection.CustomAttributeData.ConstructorArguments\" data-throw-if-not-resolved=\"false\"></xref> method to get the positional arguments that were specified for the attribute instance. </p>\n"
  syntax:
    content: public virtual IList<CustomAttributeNamedArgument> NamedArguments { get; }
    content.vb: Public Overridable ReadOnly Property NamedArguments As IList(Of CustomAttributeNamedArgument)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeNamedArgument}
      description: "\n<p>A collection of structures that represent the named arguments specified for the custom attribute instance.</p>\n"
  seealso:
  - type: System.Reflection.CustomAttributeData.ConstructorArguments
    commentId: P:System.Reflection.CustomAttributeData.ConstructorArguments
  - type: System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
    commentId: M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.CustomAttributeData.Constructor
  commentId: P:System.Reflection.CustomAttributeData.Constructor
  id: Constructor
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  - vb
  name: Constructor
  nameWithType: CustomAttributeData.Constructor
  fullName: System.Reflection.CustomAttributeData.Constructor
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Constructor
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 524
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a <xref href=\"System.Reflection.ConstructorInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the constructor that would have initialized the custom attribute.</p>\n"
  remarks: "\n<p>If an attribute type has multiple constructors, this property returns only the particular constructor that would have initialized the attribute instance represented by the current <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public virtual ConstructorInfo Constructor { get; }
    content.vb: >-
      <ComVisible(True)>

      Public Overridable ReadOnly Property Constructor As ConstructorInfo
    parameters: []
    return:
      type: System.Reflection.ConstructorInfo
      description: "\n<p>An object that represents the constructor that would have initialized the custom attribute represented by the current instance of the <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  seealso:
  - type: System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
    commentId: M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)
  commentId: M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)
  id: GetCustomAttributes(System.Reflection.Assembly)
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  - vb
  name: GetCustomAttributes(Assembly)
  nameWithType: CustomAttributeData.GetCustomAttributes(Assembly)
  fullName: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Assembly)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetCustomAttributes
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 45
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns a list of <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> objects representing data about the attributes that have been applied to the target assembly.</p>\n"
  remarks: "\n<p>This method provides an alternative to the <see cref=\"Overload:System.Reflection.Assembly.GetCustomAttributes\"></see> method that can always be used in the Reflection-only context.</p>\n"
  syntax:
    content: public static IList<CustomAttributeData> GetCustomAttributes(Assembly target)
    content.vb: Public Shared Function GetCustomAttributes(target As Assembly) As IList(Of CustomAttributeData)
    parameters:
    - id: target
      type: System.Reflection.Assembly
      description: "\n<p>The assembly whose custom attribute data is to be retrieved.</p>\n"
    return:
      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
      description: "\n<p>A list of objects that represent data about the attributes that have been applied to the target assembly.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>target</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
    commentId: M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)
  commentId: M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)
  id: GetCustomAttributes(System.Reflection.MemberInfo)
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  - vb
  name: GetCustomAttributes(MemberInfo)
  nameWithType: CustomAttributeData.GetCustomAttributes(MemberInfo)
  fullName: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.MemberInfo)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetCustomAttributes
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 28
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns a list of <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> objects representing data about the attributes that have been applied to the target member.</p>\n"
  remarks: "\n<p>This method overload gets custom attribute data for types, nested types, and type members, because the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> class and the classes in the <xref href=\"System.Reflection\" data-throw-if-not-resolved=\"false\"></xref> namespace that represent type members all derive from <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  syntax:
    content: public static IList<CustomAttributeData> GetCustomAttributes(MemberInfo target)
    content.vb: Public Shared Function GetCustomAttributes(target As MemberInfo) As IList(Of CustomAttributeData)
    parameters:
    - id: target
      type: System.Reflection.MemberInfo
      description: "\n<p>The member whose attribute data is to be retrieved.</p>\n"
    return:
      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
      description: "\n<p>A list of objects that represent data about the attributes that have been applied to the target member.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>target</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
    commentId: M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)
  commentId: M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)
  id: GetCustomAttributes(System.Reflection.Module)
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  - vb
  name: GetCustomAttributes(Module)
  nameWithType: CustomAttributeData.GetCustomAttributes(Module)
  fullName: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.Module)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetCustomAttributes
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 36
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns a list of <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> objects representing data about the attributes that have been applied to the target module.</p>\n"
  syntax:
    content: public static IList<CustomAttributeData> GetCustomAttributes(Module target)
    content.vb: Public Shared Function GetCustomAttributes(target As  Module) As IList(Of CustomAttributeData)
    parameters:
    - id: target
      type: System.Reflection.Module
      description: "\n<p>The module whose custom attribute data is to be retrieved.</p>\n"
    return:
      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
      description: "\n<p>A list of objects that represent data about the attributes that have been applied to the target module.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>target</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)
  commentId: M:System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)
  id: GetCustomAttributes(System.Reflection.ParameterInfo)
  parent: System.Reflection.CustomAttributeData
  langs:
  - csharp
  - vb
  name: GetCustomAttributes(ParameterInfo)
  nameWithType: CustomAttributeData.GetCustomAttributes(ParameterInfo)
  fullName: System.Reflection.CustomAttributeData.GetCustomAttributes(System.Reflection.ParameterInfo)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetCustomAttributes
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 54
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns a list of <xref href=\"System.Reflection.CustomAttributeData\" data-throw-if-not-resolved=\"false\"></xref> objects representing data about the attributes that have been applied to the target parameter.</p>\n"
  remarks: "\n<p>This method provides an alternative to the <see cref=\"Overload:System.Reflection.ParameterInfo.GetCustomAttributes\"></see> method that can always be used in the Reflection-only context.</p>\n"
  syntax:
    content: public static IList<CustomAttributeData> GetCustomAttributes(ParameterInfo target)
    content.vb: Public Shared Function GetCustomAttributes(target As ParameterInfo) As IList(Of CustomAttributeData)
    parameters:
    - id: target
      type: System.Reflection.ParameterInfo
      description: "\n<p>The parameter whose attribute data is to be retrieved.</p>\n"
    return:
      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
      description: "\n<p>A list of objects that represent data about the attributes that have been applied to the target parameter.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>target</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
    commentId: M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
  commentId: N:System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
  commentId: T:System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
  commentId: N:System
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
  commentId: T:System.Type
- uid: System.Collections.Generic.IList{System.Reflection.CustomAttributeTypedArgument}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<CustomAttributeTypedArgument>
  nameWithType: IList<CustomAttributeTypedArgument>
  fullName: System.Collections.Generic.IList<System.Reflection.CustomAttributeTypedArgument>
  nameWithType.vb: IList(Of CustomAttributeTypedArgument)
  fullname.vb: System.Collections.Generic.IList(Of System.Reflection.CustomAttributeTypedArgument)
  name.vb: IList(Of CustomAttributeTypedArgument)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.CustomAttributeTypedArgument
    name: CustomAttributeTypedArgument
    nameWithType: CustomAttributeTypedArgument
    fullName: System.Reflection.CustomAttributeTypedArgument
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.CustomAttributeTypedArgument
    name: CustomAttributeTypedArgument
    nameWithType: CustomAttributeTypedArgument
    fullName: System.Reflection.CustomAttributeTypedArgument
  - name: )
    nameWithType: )
    fullName: )
  commentId: T:System.Collections.Generic.IList{System.Reflection.CustomAttributeTypedArgument}
- uid: System.Collections.Generic.IList`1
  isExternal: false
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  commentId: T:System.Collections.Generic.IList`1
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  commentId: N:System.Collections.Generic
- uid: System.Collections.Generic.IList{System.Reflection.CustomAttributeNamedArgument}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<CustomAttributeNamedArgument>
  nameWithType: IList<CustomAttributeNamedArgument>
  fullName: System.Collections.Generic.IList<System.Reflection.CustomAttributeNamedArgument>
  nameWithType.vb: IList(Of CustomAttributeNamedArgument)
  fullname.vb: System.Collections.Generic.IList(Of System.Reflection.CustomAttributeNamedArgument)
  name.vb: IList(Of CustomAttributeNamedArgument)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.CustomAttributeNamedArgument
    name: CustomAttributeNamedArgument
    nameWithType: CustomAttributeNamedArgument
    fullName: System.Reflection.CustomAttributeNamedArgument
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.CustomAttributeNamedArgument
    name: CustomAttributeNamedArgument
    nameWithType: CustomAttributeNamedArgument
    fullName: System.Reflection.CustomAttributeNamedArgument
  - name: )
    nameWithType: )
    fullName: )
  commentId: T:System.Collections.Generic.IList{System.Reflection.CustomAttributeNamedArgument}
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
  commentId: T:System.Reflection.ConstructorInfo
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
- uid: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<CustomAttributeData>
  nameWithType: IList<CustomAttributeData>
  fullName: System.Collections.Generic.IList<System.Reflection.CustomAttributeData>
  nameWithType.vb: IList(Of CustomAttributeData)
  fullname.vb: System.Collections.Generic.IList(Of System.Reflection.CustomAttributeData)
  name.vb: IList(Of CustomAttributeData)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.CustomAttributeData
    name: CustomAttributeData
    nameWithType: CustomAttributeData
    fullName: System.Reflection.CustomAttributeData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.CustomAttributeData
    name: CustomAttributeData
    nameWithType: CustomAttributeData
    fullName: System.Reflection.CustomAttributeData
  - name: )
    nameWithType: )
    fullName: )
  commentId: T:System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
  commentId: T:System.Reflection.MemberInfo
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
  commentId: T:System.Reflection.Module
- uid: System.Reflection.ParameterInfo
  parent: System.Reflection
  isExternal: false
  name: ParameterInfo
  nameWithType: ParameterInfo
  fullName: System.Reflection.ParameterInfo
  commentId: T:System.Reflection.ParameterInfo
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
