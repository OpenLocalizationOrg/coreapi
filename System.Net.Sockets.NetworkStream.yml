items:
- uid: System.Net.Sockets.NetworkStream
  commentId: T:System.Net.Sockets.NetworkStream
  id: NetworkStream
  parent: System.Net.Sockets
  children:
  - System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)
  - System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)
  - System.Net.Sockets.NetworkStream.CanRead
  - System.Net.Sockets.NetworkStream.CanSeek
  - System.Net.Sockets.NetworkStream.CanTimeout
  - System.Net.Sockets.NetworkStream.CanWrite
  - System.Net.Sockets.NetworkStream.DataAvailable
  - System.Net.Sockets.NetworkStream.Dispose(System.Boolean)
  - System.Net.Sockets.NetworkStream.Finalize
  - System.Net.Sockets.NetworkStream.Flush
  - System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)
  - System.Net.Sockets.NetworkStream.Length
  - System.Net.Sockets.NetworkStream.Position
  - System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.Net.Sockets.NetworkStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.Net.Sockets.NetworkStream.ReadTimeout
  - System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.Net.Sockets.NetworkStream.SetLength(System.Int64)
  - System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.Net.Sockets.NetworkStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.Net.Sockets.NetworkStream.WriteTimeout
  langs:
  - csharp
  - vb
  name: NetworkStream
  fullName: System.Net.Sockets.NetworkStream
  type: Class
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NetworkStream
    path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
    startLine: 12
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Provides the underlying stream of data for network access.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> class provides methods for sending and receiving data over <xref href=\"System.Net.Sockets.SocketType.Stream\" data-throw-if-not-resolved=\"false\"></xref> sockets in blocking mode. For more information about blocking versus nonblocking <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>s, see Using an Asynchronous Client Socket. You can use the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> class for both synchronous and asynchronous data transfer. For more information about synchronous and asynchronous communication, see Sockets. </p>\n<p>To create a <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref>, you must provide a connected <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>. You can also specify what <xref href=\"System.IO.FileAccess\" data-throw-if-not-resolved=\"false\"></xref> permission the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> has over the provided <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>. By default, closing the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> does not close the provided <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>. If you want the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> to have permission to close the provided <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>, you must specify <strong>true</strong> for the value of the <em>ownsSocket</em> parameter.</p>\n<p>Use the <xref href=\"System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> methods for simple single thread synchronous blocking I/O. If you want to process your I/O using separate threads, consider using the <xref href=\"System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref> methods, or the <xref href=\"System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref> methods for communication.</p>\n<p>The <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> does not support random access to the network data stream. The value of the <xref href=\"System.Net.Sockets.NetworkStream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> property, which indicates whether the stream supports seeking, is always <strong>false</strong>; reading the <xref href=\"System.Net.Sockets.NetworkStream.Position\" data-throw-if-not-resolved=\"false\"></xref> property, reading the <xref href=\"System.Net.Sockets.NetworkStream.Length\" data-throw-if-not-resolved=\"false\"></xref> property, or calling the <xref href=\"System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)\" data-throw-if-not-resolved=\"false\"></xref> method will throw a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Read and write operations can be performed simultaneously on an instance of the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> class without the need for synchronization. As long as there is one unique thread for the write operations and one unique thread for the read operations, there will be no cross-interference between read and write threads and no synchronization is required. </p>\n"
  example:
  - "\n<p>The following code example demonstrates how to create a <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> from a connected <xref href=\"System.Net.Sockets.SocketType.Stream\" data-throw-if-not-resolved=\"false\"></xref><xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> and perform basic synchronous blocking I/O.</p>NetworkStream_Synch_SendAndReceive#2"
  syntax:
    content: 'public class NetworkStream : IO.Stream'
    content.vb: >-
      Public Class NetworkStream
          Inherits IO.Stream
  seealso:
  - type: System.Net.Sockets.TcpClient
    commentId: T:System.Net.Sockets.TcpClient
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)
  commentId: M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)
  id: '#ctor(System.Net.Sockets.Socket)'
  parent: System.Net.Sockets.NetworkStream
  langs:
  - csharp
  - vb
  name: NetworkStream(Socket)
  fullName: System.Net.Sockets.NetworkStream.NetworkStream(System.Net.Sockets.Socket)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
    startLine: 32
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Creates a new instance of the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> class for the specified <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> is created with read/write access to the specified <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> does not own the underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>, so calling the <xref href=\"System.Net.Sockets.NetworkStream.Close\" data-throw-if-not-resolved=\"false\"></xref> method does not close the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example illustrates how to create a <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> with a <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>NetworkStream_Synch_SendAndReceive#2"
  syntax:
    content: public NetworkStream(Socket socket)
    content.vb: Public Sub New(socket As Socket)
    parameters:
    - id: socket
      type: System.Net.Sockets.Socket
      description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> that the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> will use to send and receive data. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>socket</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The <em>socket</em> parameter is not connected.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Net.Sockets.Socket.SocketType\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>socket</em> parameter is not <xref href=\"System.Net.Sockets.SocketType.Stream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>The <em>socket</em> parameter is in a nonblocking state. </p>\n"
  seealso:
  - type: System.Net.Sockets.NetworkStream.Close(System.Int32)
    commentId: M:System.Net.Sockets.NetworkStream.Close(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)
  commentId: M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)
  id: '#ctor(System.Net.Sockets.Socket,System.Boolean)'
  parent: System.Net.Sockets.NetworkStream
  langs:
  - csharp
  - vb
  name: NetworkStream(Socket, Boolean)
  fullName: System.Net.Sockets.NetworkStream.NetworkStream(System.Net.Sockets.Socket, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
    startLine: 48
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> class for the specified <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> with the specified <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> ownership.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> is created with read/write access to the specified <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>. If the value of <em>ownsSocket</em> parameter is <strong>true</strong>, the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> takes ownership of the underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>, and calling the <xref href=\"System.Net.Sockets.NetworkStream.Close\" data-throw-if-not-resolved=\"false\"></xref> method also closes the underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example creates a <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> with ownership of the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>NetworkStream_Synch_SendAndReceive#2"
  syntax:
    content: public NetworkStream(Socket socket, bool ownsSocket)
    content.vb: Public Sub New(socket As Socket, ownsSocket As Boolean)
    parameters:
    - id: socket
      type: System.Net.Sockets.Socket
      description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> that the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> will use to send and receive data. </p>\n"
    - id: ownsSocket
      type: System.Boolean
      description: "\n<p>Set to <strong>true</strong> to indicate that the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> will take ownership of the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>socket</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The <em>socket</em> parameter is not connected.</p>\n<p>-or- </p>\n<p>the value of the <xref href=\"System.Net.Sockets.Socket.SocketType\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>socket</em> parameter is not <xref href=\"System.Net.Sockets.SocketType.Stream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>the <em>socket</em> parameter is in a nonblocking state. </p>\n"
  seealso:
  - type: System.Net.Sockets.NetworkStream.Close(System.Int32)
    commentId: M:System.Net.Sockets.NetworkStream.Close(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.NetworkStream.CanRead
  commentId: P:System.Net.Sockets.NetworkStream.CanRead
  id: CanRead
  parent: System.Net.Sockets.NetworkStream
  langs:
  - csharp
  - vb
  name: CanRead
  fullName: System.Net.Sockets.NetworkStream.CanRead
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanRead
    path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
    startLine: 156
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets a value that indicates whether the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> supports reading.</p>\n"
  remarks: "\n<p>If <xref href=\"System.Net.Sockets.NetworkStream.CanRead\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>, <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> allows calls to the <xref href=\"System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. Provide the appropriate <xref href=\"System.IO.FileAccess\" data-throw-if-not-resolved=\"false\"></xref> enumerated value in the constructor to set the readability and writability of the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Net.Sockets.NetworkStream.CanRead\" data-throw-if-not-resolved=\"false\"></xref> property is set when the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> is initialized.</p>\n"
  example:
  - "\n<p>The following code example checks <xref href=\"System.Net.Sockets.NetworkStream.CanRead\" data-throw-if-not-resolved=\"false\"></xref> to verify that the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> is readable. It then performs a read operation on the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref>.</p>NetworkStream_Synch_SendAndReceive#4"
  syntax:
    content: public override bool CanRead { get; }
    content.vb: Public Overrides ReadOnly Property CanRead As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if data can be read from the stream; otherwise, <strong>false</strong>. The default value is <strong>true</strong>.</p>\n"
  seealso:
  - type: System.Net.Sockets.NetworkStream.Readable
    commentId: P:System.Net.Sockets.NetworkStream.Readable
  - type: System.IO.FileAccess
    commentId: T:System.IO.FileAccess
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Net.Sockets.NetworkStream.CanSeek
  commentId: P:System.Net.Sockets.NetworkStream.CanSeek
  id: CanSeek
  parent: System.Net.Sockets.NetworkStream
  langs:
  - csharp
  - vb
  name: CanSeek
  fullName: System.Net.Sockets.NetworkStream.CanSeek
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanSeek
    path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
    startLine: 166
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets a value that indicates whether the stream supports seeking. This property is not currently supported.This property always returns <strong>false</strong>.</p>\n"
  syntax:
    content: public override bool CanSeek { get; }
    content.vb: Public Overrides ReadOnly Property CanSeek As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>false</strong> in all cases to indicate that <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> cannot seek a specific location in the stream.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Net.Sockets.NetworkStream.CanTimeout
  commentId: P:System.Net.Sockets.NetworkStream.CanTimeout
  id: CanTimeout
  parent: System.Net.Sockets.NetworkStream
  langs:
  - csharp
  - vb
  name: CanTimeout
  fullName: System.Net.Sockets.NetworkStream.CanTimeout
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanTimeout
    path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
    startLine: 184
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Indicates whether timeout properties are usable for <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This property is present because it is inherited from <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  syntax:
    content: public override bool CanTimeout { get; }
    content.vb: Public Overrides ReadOnly Property CanTimeout As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> in all cases.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Net.Sockets.NetworkStream.CanWrite
  commentId: P:System.Net.Sockets.NetworkStream.CanWrite
  id: CanWrite
  parent: System.Net.Sockets.NetworkStream
  langs:
  - csharp
  - vb
  name: CanWrite
  fullName: System.Net.Sockets.NetworkStream.CanWrite
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanWrite
    path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
    startLine: 175
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets a value that indicates whether the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> supports writing.</p>\n"
  remarks: "\n<p>If <xref href=\"System.Net.Sockets.NetworkStream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>, <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> allows calls to the <xref href=\"System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. Provide the appropriate <xref href=\"System.IO.FileAccess\" data-throw-if-not-resolved=\"false\"></xref> enumerated value in the constructor to set the readability and writability of the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Net.Sockets.NetworkStream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> property is set when the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> is initialized.</p>\n"
  example:
  - "\n<p>The following code example checks <xref href=\"System.Net.Sockets.NetworkStream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> to verify that the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> is writable. It then performs a write operation on the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref>.</p>NetworkStream_Synch_SendAndReceive#3"
  syntax:
    content: public override bool CanWrite { get; }
    content.vb: Public Overrides ReadOnly Property CanWrite As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if data can be written to the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>. The default value is <strong>true</strong>.</p>\n"
  seealso:
  - type: System.Net.Sockets.NetworkStream.Writeable
    commentId: P:System.Net.Sockets.NetworkStream.Writeable
  - type: System.IO.FileAccess
    commentId: T:System.IO.FileAccess
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Net.Sockets.NetworkStream.DataAvailable
  commentId: P:System.Net.Sockets.NetworkStream.DataAvailable
  id: DataAvailable
  parent: System.Net.Sockets.NetworkStream
  langs:
  - csharp
  - vb
  name: DataAvailable
  fullName: System.Net.Sockets.NetworkStream.DataAvailable
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DataAvailable
    path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
    startLine: 268
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets a value that indicates whether data is available on the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> to be read.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Net.Sockets.NetworkStream.DataAvailable\" data-throw-if-not-resolved=\"false\"></xref> property to determine if data is ready to be read. If <xref href=\"System.Net.Sockets.NetworkStream.DataAvailable\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>, a call to <xref href=\"System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> returns immediately. If the remote host shuts down or closes the connection, <xref href=\"System.Net.Sockets.NetworkStream.DataAvailable\" data-throw-if-not-resolved=\"false\"></xref> may throw a <xref href=\"System.Net.Sockets.SocketException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example reads from the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> as long as data is available.</p>NetworkStream_Synch_SendAndReceive#4"
  syntax:
    content: public virtual bool DataAvailable { get; }
    content.vb: Public Overridable ReadOnly Property DataAvailable As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if data is available on the stream to be read; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>Use the <xref href=\"System.Net.Sockets.SocketException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. </p>\n"
  seealso:
  - type: System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Net.Sockets.NetworkStream.Length
  commentId: P:System.Net.Sockets.NetworkStream.Length
  id: Length
  parent: System.Net.Sockets.NetworkStream
  langs:
  - csharp
  - vb
  name: Length
  fullName: System.Net.Sockets.NetworkStream.Length
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Length
    path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
    startLine: 297
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the length of the data available on the stream. This property is not currently supported and always throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override long Length { get; }
    content.vb: Public Overrides ReadOnly Property Length As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The length of the data available on the stream.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Any use of this property. </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Net.Sockets.NetworkStream.Position
  commentId: P:System.Net.Sockets.NetworkStream.Position
  id: Position
  parent: System.Net.Sockets.NetworkStream
  langs:
  - csharp
  - vb
  name: Position
  fullName: System.Net.Sockets.NetworkStream.Position
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Position
    path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
    startLine: 306
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets the current position in the stream. This property is not currently supported and always throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override long Position { get; set; }
    content.vb: Public Overrides Property Position As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The current position in the stream.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Any use of this property. </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Sockets.NetworkStream.ReadTimeout
  commentId: P:System.Net.Sockets.NetworkStream.ReadTimeout
  id: ReadTimeout
  parent: System.Net.Sockets.NetworkStream
  langs:
  - csharp
  - vb
  name: ReadTimeout
  fullName: System.Net.Sockets.NetworkStream.ReadTimeout
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadTimeout
    path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
    startLine: 194
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets the amount of time that a read operation blocks waiting for data. </p>\n"
  remarks: "\n<p>If the read operation does not complete within the time specified by this property, the read operation throws an <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This property affects only synchronous reads performed by calling the <xref href=\"System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. This property does not affect asynchronous reads performed by calling the <xref href=\"System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following code example sets the read time-out for a network stream to 10 milliseconds.</p>NCLTcpClientSync#2"
  syntax:
    content: public override int ReadTimeout { get; set; }
    content.vb: Public Overrides Property ReadTimeout As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>A <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that specifies the amount of time, in milliseconds, that will elapse before a read operation fails. The default value, <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>, specifies that the read operation does not time out.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value specified is less than or equal to zero and is not <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Sockets.NetworkStream.WriteTimeout
  commentId: P:System.Net.Sockets.NetworkStream.WriteTimeout
  id: WriteTimeout
  parent: System.Net.Sockets.NetworkStream
  langs:
  - csharp
  - vb
  name: WriteTimeout
  fullName: System.Net.Sockets.NetworkStream.WriteTimeout
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteTimeout
    path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
    startLine: 231
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets the amount of time that a write operation blocks waiting for data. </p>\n"
  remarks: "\n<p>If the write operation does not complete within the time specified by this property, the write operation throws a <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This property affects only synchronous write operations performed by calling the <xref href=\"System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. This property does not affect asynchronous writes performed by calling the <xref href=\"System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following code example sets the write time-out for a network stream to 10 milliseconds.</p>NCLTcpServerSync#0"
  syntax:
    content: public override int WriteTimeout { get; set; }
    content.vb: Public Overrides Property WriteTimeout As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>A <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that specifies the amount of time, in milliseconds, that will elapse before a write operation fails. The default value, <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>, specifies that the write operation does not time out.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value specified is less than or equal to zero and is not <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Sockets.NetworkStream.Dispose(System.Boolean)
  commentId: M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Sockets.NetworkStream
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Net.Sockets.NetworkStream.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
    startLine: 523
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources.</p>\n"
  remarks: "\n<p>This method is called by the public <strong>Dispose</strong> method and the <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> method. <strong>Dispose</strong> invokes the protected <strong>Dispose(Boolean)</strong> method with the <em>disposing</em> parameter set to <strong>true</strong>. <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> invokes <strong>Dispose</strong> with <em>disposing</em> set to <strong>false</strong>.</p>\n<p>When the <em>disposing</em> parameter is <strong>true</strong>, this method releases all resources held by any managed objects that this <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> references. This method invokes the <strong>Dispose</strong> method of each referenced object.</p>\n"
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\n"
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Net.Sockets.NetworkStream.Finalize
  commentId: M:System.Net.Sockets.NetworkStream.Finalize
  id: Finalize
  parent: System.Net.Sockets.NetworkStream
  langs:
  - csharp
  - vb
  name: Finalize()
  fullName: System.Net.Sockets.NetworkStream.Finalize()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Finalize
    path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
    startLine: 563
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Releases all resources used by the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref>. Application code should not call this method; an object's <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref href=\"System.GC.SuppressFinalize(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>For more information about using the Finalize method, see Finalize Methods and Destructors, Cleaning Up Unmanaged Resources, and Overriding the Finalize Method.</p>\n"
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Net.Sockets.NetworkStream.Flush
  commentId: M:System.Net.Sockets.NetworkStream.Flush
  id: Flush
  parent: System.Net.Sockets.NetworkStream
  langs:
  - csharp
  - vb
  name: Flush()
  fullName: System.Net.Sockets.NetworkStream.Flush()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Flush
    path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
    startLine: 1002
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Flushes data from the stream. This method is reserved for future use.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.Sockets.NetworkStream.Flush\" data-throw-if-not-resolved=\"false\"></xref> method implements the <xref href=\"System.IO.Stream.Flush\" data-throw-if-not-resolved=\"false\"></xref> method; however, because <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> is not buffered, it has no affect on network streams. Calling the <xref href=\"System.Net.Sockets.NetworkStream.Flush\" data-throw-if-not-resolved=\"false\"></xref> method does not throw an exception.</p>\n"
  syntax:
    content: public override void Flush()
    content.vb: Public Overrides Sub Flush
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)
  commentId: M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)
  id: FlushAsync(System.Threading.CancellationToken)
  parent: System.Net.Sockets.NetworkStream
  langs:
  - csharp
  - vb
  name: FlushAsync(Threading.CancellationToken)
  fullName: System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FlushAsync
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 102
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Flushes data from the stream as an asynchronous operation.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> object will complete after data has been flushed from the stream for the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref>  instance.</p>\n"
  syntax:
    content: public override Threading.Tasks.Task FlushAsync(Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function FlushAsync(cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token used to propagate notification that this  operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Sockets.NetworkStream
  langs:
  - csharp
  - vb
  name: Read(Byte[], Int32, Int32)
  fullName: System.Net.Sockets.NetworkStream.Read(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Read
    path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
    startLine: 391
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Reads data from the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method reads data into the <em>buffer</em> parameter and returns the number of bytes successfully read. If no data is available for reading, the <xref href=\"System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method returns 0. The <xref href=\"System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> operation reads as much data as is available, up to the number of bytes specified by the <em>size</em> parameter. If the remote host shuts down the connection, and all available data has been received, the <xref href=\"System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method completes immediately and return zero bytes.</p>\n<p>Check to see if the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> is readable by calling the <xref href=\"System.Net.Sockets.NetworkStream.CanRead\" data-throw-if-not-resolved=\"false\"></xref> property. If you attempt to read from a <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> that is not readable, you will get an <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If you receive an <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref>, check the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property to determine if it was caused by a <xref href=\"System.Net.Sockets.SocketException\" data-throw-if-not-resolved=\"false\"></xref>. If so, use the <xref href=\"System.Net.Sockets.SocketException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n"
  example:
  - "\n<p>The following code example uses <xref href=\"System.Net.Sockets.NetworkStream.DataAvailable\" data-throw-if-not-resolved=\"false\"></xref> to determine if data is available to be read. If data is available, it reads from the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref>.</p>NetworkStream_Synch_SendAndReceive#4"
  syntax:
    content: public override int Read(byte[] buffer, int offset, int size)
    content.vb: Public Overrides Function Read(buffer As Byte(), offset As Integer, size As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that is the location in memory to store data read from the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The location in <em>buffer</em> to begin storing the data to. </p>\n"
    - id: size
      type: System.Int32
      description: "\n<p>The number of bytes to read from the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes read from the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>buffer</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>offset</em> parameter is less than 0.</p>\n<p>-or- </p>\n<p>The <em>offset</em> parameter is greater than the length of <em>buffer</em>.</p>\n<p>-or- </p>\n<p>The <em>size</em> parameter is less than 0.</p>\n<p>-or- </p>\n<p>The <em>size</em> parameter is greater than the length of <em>buffer</em> minus the value of the <em>offset</em> parameter. </p>\n<p>-or-</p>\n<p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> is closed.</p>\n<p>-or- </p>\n<p>There is a failure reading from the network. </p>\n"
  seealso:
  - type: System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
    commentId: M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  - type: System.Net.Sockets.NetworkStream.DataAvailable
    commentId: P:System.Net.Sockets.NetworkStream.DataAvailable
  - type: System.Net.Sockets.NetworkStream.CanRead
    commentId: P:System.Net.Sockets.NetworkStream.CanRead
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Net.Sockets.NetworkStream.Read(System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Byte(), Int32, Int32)
- uid: System.Net.Sockets.NetworkStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Net.Sockets.NetworkStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.Net.Sockets.NetworkStream
  langs:
  - csharp
  - vb
  name: ReadAsync(Byte[], Int32, Int32, Threading.CancellationToken)
  fullName: System.Net.Sockets.NetworkStream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadAsync
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 104
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  syntax:
    content: public override Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int size, Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function ReadAsync(buffer As Byte(), offset As Integer, size As Integer, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: size
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Net.Sockets.NetworkStream.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadAsync(Byte(), Int32, Int32, Threading.CancellationToken)
- uid: System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)
  commentId: M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Net.Sockets.NetworkStream
  langs:
  - csharp
  - vb
  name: Seek(Int64, IO.SeekOrigin)
  fullName: System.Net.Sockets.NetworkStream.Seek(System.Int64, System.IO.SeekOrigin)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Seek
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 105
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sets the current position of the stream to the given value. This method is not currently supported and always throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override long Seek(long offset, IO.SeekOrigin origin)
    content.vb: Public Overrides Function Seek(offset As Long, origin As IO.SeekOrigin) As Long
    parameters:
    - id: offset
      type: System.Int64
      description: "\n<p>This parameter is not used. </p>\n"
    - id: origin
      type: System.IO.SeekOrigin
      description: "\n<p>This parameter is not used. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>The position in the stream.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Any use of this property. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Sockets.NetworkStream.SetLength(System.Int64)
  commentId: M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.Net.Sockets.NetworkStream
  langs:
  - csharp
  - vb
  name: SetLength(Int64)
  fullName: System.Net.Sockets.NetworkStream.SetLength(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetLength
    path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
    startLine: 1012
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sets the length of the stream. This method always throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override void SetLength(long value)
    content.vb: Public Overrides Sub SetLength(value As Long)
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>This parameter is not used. </p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Any use of this property. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Sockets.NetworkStream
  langs:
  - csharp
  - vb
  name: Write(Byte[], Int32, Int32)
  fullName: System.Net.Sockets.NetworkStream.Write(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Net.Sockets/src/System/Net/Sockets/NetworkStream.cs
    startLine: 464
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Writes data to the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method starts at the specified <em>offset</em> and sends <em>size</em> bytes from the contents of <em>buffer</em> to the network. The <xref href=\"System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method blocks until the requested number of bytes is sent or a <xref href=\"System.Net.Sockets.SocketException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. If you receive a <xref href=\"System.Net.Sockets.SocketException\" data-throw-if-not-resolved=\"false\"></xref>, use the <xref href=\"System.Net.Sockets.SocketException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> property to obtain the specific error code, and refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</p>\n<p>Check to see if the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> is writable by accessing the <xref href=\"System.Net.Sockets.NetworkStream.CanWrite\" data-throw-if-not-resolved=\"false\"></xref> property. If you attempt to write to a <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> that is not writable, you will get an <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref>. If you receive an <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref>, check the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property to determine if it was caused by a <xref href=\"System.Net.Sockets.SocketException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example checks to see whether the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> is writable. If it is, then <xref href=\"System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> is used to write a small message.</p>NetworkStream_Synch_SendAndReceive#3"
  syntax:
    content: public override void Write(byte[] buffer, int offset, int size)
    content.vb: Public Overrides Sub Write(buffer As Byte(), offset As Integer, size As Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that contains the data to write to the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The location in <em>buffer</em> from which to start writing data. </p>\n"
    - id: size
      type: System.Int32
      description: "\n<p>The number of bytes to write to the <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>buffer</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>offset</em> parameter is less than 0.</p>\n<p>-or- </p>\n<p>The <em>offset</em> parameter is greater than the length of <em>buffer</em>.</p>\n<p>-or- </p>\n<p>The <em>size</em> parameter is less than 0.</p>\n<p>-or- </p>\n<p>The <em>size</em> parameter is greater than the length of <em>buffer</em> minus the value of the <em>offset</em> parameter. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>There was a failure while writing to the network. </p>\n<p>-or-</p>\n<p>An error occurred when accessing the socket. See the Remarks section for more information.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.NetworkStream\" data-throw-if-not-resolved=\"false\"></xref> is closed.</p>\n<p>-or- </p>\n<p>There was a failure reading from the network. </p>\n"
  seealso:
  - type: System.Net.Sockets.NetworkStream.CanWrite
    commentId: P:System.Net.Sockets.NetworkStream.CanWrite
  - type: System.Net.Sockets.NetworkStream.Writeable
    commentId: P:System.Net.Sockets.NetworkStream.Writeable
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Net.Sockets.NetworkStream.Write(System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), Int32, Int32)
- uid: System.Net.Sockets.NetworkStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Net.Sockets.NetworkStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.Net.Sockets.NetworkStream
  langs:
  - csharp
  - vb
  name: WriteAsync(Byte[], Int32, Int32, Threading.CancellationToken)
  fullName: System.Net.Sockets.NetworkStream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteAsync
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 108
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  syntax:
    content: public override Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int size, Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function WriteAsync(buffer As Byte(), offset As Integer, size As Integer, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task
    parameters:
    - id: buffer
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: size
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Net.Sockets.NetworkStream.WriteAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: WriteAsync(Byte(), Int32, Int32, Threading.CancellationToken)
references:
- uid: System.Net.Sockets
  isExternal: false
  name: System.Net.Sockets
  fullName: System.Net.Sockets
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Net.Sockets.Socket
  parent: System.Net.Sockets
  isExternal: false
  name: Socket
  fullName: System.Net.Sockets.Socket
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: Threading.CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{System.Int32}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Threading.Tasks.Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task<>
  fullName: System.Threading.Tasks.Task<>
  fullname.vb: System.Threading.Tasks.Task(Of )
  name.vb: Threading.Tasks.Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: false
  name: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.Net.Sockets.SocketException
  isExternal: false
  name: SocketException
  fullName: System.Net.Sockets.SocketException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
