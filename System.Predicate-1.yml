items:
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  id: Predicate`1
  parent: System
  children: []
  langs:
  - csharp
  - vb
  name: Predicate<T>
  fullName: System.Predicate<T>
  type: Delegate
  source:
    remote:
      path: src/mscorlib/src/System/Action.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Predicate
    path: src/mscorlib/src/System/Action.cs
    startLine: 92
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents the method that defines a set of criteria and determines whether the specified object meets those criteria.</p>\n"
  example:
  - "\n<p>The following code example uses a <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate with the <xref href=\"System.Array.Find``1(``0[],System.Predicate{``0})\" data-throw-if-not-resolved=\"false\"></xref> method to search an array of <xref href=\"System.Drawing.Point\" data-throw-if-not-resolved=\"false\"></xref> structures. The example explicitly defines a <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate named <code>predicate</code> and assigns it a method named <code>FindPoints</code> that returns <strong>true</strong> if the product of the <xref href=\"System.Drawing.Point.X\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Drawing.Point.Y\" data-throw-if-not-resolved=\"false\"></xref> fields is greater than 100,000. Note that it is customary to use a lambda expression rather than to explicitly define a delegate of type <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref>, as the second example illustrates. </p>System.Predicate`1#4<p>The following example is identical to the previous example, except that it uses a lambda expression to represent the <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> delegate.  Each element of the <code>points</code> array is passed to the lambda expression until the expression finds an element that meets the search criteria. In this case, the lambda expression returns <strong>true</strong> if the product of the X and Y fields is greater than 100,000. </p>System.Predicate`1#2"
  syntax:
    content: public delegate bool Predicate<in T>(T obj);
    content.vb: Public Delegate Function Predicate(Of In T)(obj As T) As Boolean
    parameters:
    - id: obj
      type: '{T}'
      description: "\n<p>The object to compare against the criteria defined within the method represented by this delegate.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the object to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> meets the criteria defined within the method represented by this delegate; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Array.Find``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.Find``1(``0[],System.Predicate{``0})
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
  fullName.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  nameWithType: Predicate<T>
  extensionMethods:
  - System.Delegate.System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  nameWithType.vb: Predicate(Of T)
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Delegate.System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  parent: System.Reflection.RuntimeReflectionExtensions
  definition: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  name: GetMethodInfo()
  fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo()
  spec.csharp:
  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
    name: GetMethodInfo
    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
    name: GetMethodInfo
    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: RuntimeReflectionExtensions.GetMethodInfo()
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
- uid: '{T}'
  definition: T
  name: T
  fullName: T
  nameWithType: T
  commentId: '!:T'
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  isExternal: true
  name: GetMethodInfo(Delegate)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  spec.csharp:
  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
    name: GetMethodInfo
    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  - name: (
    fullName: (
  - uid: System.Delegate
    name: Delegate
    fullName: System.Delegate
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
    name: GetMethodInfo
    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo
  - name: (
    fullName: (
  - uid: System.Delegate
    name: Delegate
    fullName: System.Delegate
    isExternal: true
  - name: )
    fullName: )
  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
- uid: System.Reflection.RuntimeReflectionExtensions
  parent: System.Reflection
  isExternal: false
  name: RuntimeReflectionExtensions
  fullName: System.Reflection.RuntimeReflectionExtensions
  nameWithType: RuntimeReflectionExtensions
  commentId: T:System.Reflection.RuntimeReflectionExtensions
- uid: T
  isExternal: false
  name: T
  fullName: T
  nameWithType: T
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
  nameWithType: System.Reflection
  commentId: N:System.Reflection
