items:
- uid: System.Runtime.Serialization.DataContractAttribute
  commentId: T:System.Runtime.Serialization.DataContractAttribute
  id: DataContractAttribute
  parent: System.Runtime.Serialization
  children:
  - System.Runtime.Serialization.DataContractAttribute.#ctor
  - System.Runtime.Serialization.DataContractAttribute.IsNameSetExplicitly
  - System.Runtime.Serialization.DataContractAttribute.IsNamespaceSetExplicitly
  - System.Runtime.Serialization.DataContractAttribute.IsReference
  - System.Runtime.Serialization.DataContractAttribute.IsReferenceSetExplicitly
  - System.Runtime.Serialization.DataContractAttribute.Name
  - System.Runtime.Serialization.DataContractAttribute.Namespace
  langs:
  - csharp
  - vb
  name: DataContractAttribute
  fullName: System.Runtime.Serialization.DataContractAttribute
  type: Class
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataContractAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DataContractAttribute
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataContractAttribute.cs
    startLine: 6
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Specifies that the type defines or implements a data contract and is serializable by a serializer, such as the <xref href=\"System.Runtime.Serialization.DataContractSerializer\" data-throw-if-not-resolved=\"false\"></xref>. To make their type serializable, type authors must define a data contract for their type. </p>\n"
  remarks: "\n<p>Apply the <xref href=\"System.Runtime.Serialization.DataContractAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute to types (classes, structures, or enumerations) that are used in serialization and deserialization operations by the <xref href=\"System.Runtime.Serialization.DataContractSerializer\" data-throw-if-not-resolved=\"false\"></xref>. If you send or receive messages by using the Windows Communication Foundation (WCF) infrastructure, you should also apply the <xref href=\"System.Runtime.Serialization.DataContractAttribute\" data-throw-if-not-resolved=\"false\"></xref> to any classes that hold and manipulate data sent in messages. For more information about data contracts, see Using Data Contracts.</p>\n<p>You must also apply the <xref href=\"System.Runtime.Serialization.DataMemberAttribute\" data-throw-if-not-resolved=\"false\"></xref> to any field, property, or event that holds values you want to serialize. By applying the <xref href=\"System.Runtime.Serialization.DataContractAttribute\" data-throw-if-not-resolved=\"false\"></xref>, you explicitly enable the <xref href=\"System.Runtime.Serialization.DataContractSerializer\" data-throw-if-not-resolved=\"false\"></xref> to serialize and deserialize the data. </p>\n<p>You can apply the <xref href=\"System.Runtime.Serialization.DataMemberAttribute\" data-throw-if-not-resolved=\"false\"></xref> to private fields. Be aware that the data returned by the field (even if it is private) is serialized and deserialized, and thus can be viewed or intercepted by a malicious user or process.</p>\n<p>For more information about data contracts, see the topics listed in Using Data Contracts.</p>\n"
  example:
  - <p>The following example serializes and deserializes a class named <code>Person</code> to which the <xref href="System.Runtime.Serialization.DataContractAttribute" data-throw-if-not-resolved="false"></xref> has been applied. Note that the <xref href="System.Runtime.Serialization.DataContractAttribute.Namespace" data-throw-if-not-resolved="false"></xref> and <xref href="System.Runtime.Serialization.DataContractAttribute.Name" data-throw-if-not-resolved="false"></xref> properties have been set to values that override the default settings.</p>DataContractAttribute#1
  syntax:
    content: 'public sealed class DataContractAttribute : Attribute'
    content.vb: >-
      Public NotInheritable Class DataContractAttribute
          Inherits Attribute
  seealso:
  - type: System.Runtime.Serialization.IExtensibleDataObject
    commentId: T:System.Runtime.Serialization.IExtensibleDataObject
  - type: System.Runtime.Serialization.ExtensionDataObject
    commentId: T:System.Runtime.Serialization.ExtensionDataObject
  - type: System.Runtime.Serialization.DataContractSerializer
    commentId: T:System.Runtime.Serialization.DataContractSerializer
  - type: System.Runtime.Serialization.DataMemberAttribute
    commentId: T:System.Runtime.Serialization.DataMemberAttribute
  - type: System.Runtime.Serialization.ISerializable
    commentId: T:System.Runtime.Serialization.ISerializable
  - type: System.Runtime.Serialization.KnownTypeAttribute
    commentId: T:System.Runtime.Serialization.KnownTypeAttribute
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Runtime.Serialization.DataContractAttribute.#ctor
  commentId: M:System.Runtime.Serialization.DataContractAttribute.#ctor
  id: '#ctor'
  parent: System.Runtime.Serialization.DataContractAttribute
  langs:
  - csharp
  - vb
  name: DataContractAttribute()
  fullName: System.Runtime.Serialization.DataContractAttribute.DataContractAttribute()
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataContractAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataContractAttribute.cs
    startLine: 16
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.Serialization.DataContractAttribute\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  syntax:
    content: public DataContractAttribute()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.DataContractAttribute.IsNameSetExplicitly
  commentId: P:System.Runtime.Serialization.DataContractAttribute.IsNameSetExplicitly
  id: IsNameSetExplicitly
  parent: System.Runtime.Serialization.DataContractAttribute
  langs:
  - csharp
  - vb
  name: IsNameSetExplicitly
  fullName: System.Runtime.Serialization.DataContractAttribute.IsNameSetExplicitly
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataContractAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNameSetExplicitly
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataContractAttribute.cs
    startLine: 60
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets whether <xref href=\"System.Runtime.Serialization.DataContractAttribute.Name\" data-throw-if-not-resolved=\"false\"></xref> has been explicitly set.</p>\n"
  syntax:
    content: public bool IsNameSetExplicitly { get; }
    content.vb: Public ReadOnly Property IsNameSetExplicitly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <strong>true</strong> if the name has been explicitly set; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Serialization.DataContractAttribute.IsNamespaceSetExplicitly
  commentId: P:System.Runtime.Serialization.DataContractAttribute.IsNamespaceSetExplicitly
  id: IsNamespaceSetExplicitly
  parent: System.Runtime.Serialization.DataContractAttribute
  langs:
  - csharp
  - vb
  name: IsNamespaceSetExplicitly
  fullName: System.Runtime.Serialization.DataContractAttribute.IsNamespaceSetExplicitly
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataContractAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNamespaceSetExplicitly
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataContractAttribute.cs
    startLine: 45
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets whether <xref href=\"System.Runtime.Serialization.DataContractAttribute.Namespace\" data-throw-if-not-resolved=\"false\"></xref> has been explicitly set.</p>\n"
  syntax:
    content: public bool IsNamespaceSetExplicitly { get; }
    content.vb: Public ReadOnly Property IsNamespaceSetExplicitly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <strong>true</strong> if the namespace has been explicitly set; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Serialization.DataContractAttribute.IsReference
  commentId: P:System.Runtime.Serialization.DataContractAttribute.IsReference
  id: IsReference
  parent: System.Runtime.Serialization.DataContractAttribute
  langs:
  - csharp
  - vb
  name: IsReference
  fullName: System.Runtime.Serialization.DataContractAttribute.IsReference
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataContractAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsReference
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataContractAttribute.cs
    startLine: 20
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets or sets a value that indicates whether to preserve object reference data.</p>\n"
  remarks: "\n<p>Use the <strong>IsReference</strong> property to instruct the <xref href=\"System.Runtime.Serialization.DataContractSerializer\" data-throw-if-not-resolved=\"false\"></xref> to insert XML constructs that preserve object reference information.</p>\n"
  example:
  - 
  syntax:
    content: public bool IsReference { get; set; }
    content.vb: Public Property IsReference As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to keep object reference data using standard XML; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Runtime.Serialization.DataContractSerializer.PreserveObjectReferences
    commentId: P:System.Runtime.Serialization.DataContractSerializer.PreserveObjectReferences
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.DataContractAttribute.IsReferenceSetExplicitly
  commentId: P:System.Runtime.Serialization.DataContractAttribute.IsReferenceSetExplicitly
  id: IsReferenceSetExplicitly
  parent: System.Runtime.Serialization.DataContractAttribute
  langs:
  - csharp
  - vb
  name: IsReferenceSetExplicitly
  fullName: System.Runtime.Serialization.DataContractAttribute.IsReferenceSetExplicitly
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataContractAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsReferenceSetExplicitly
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataContractAttribute.cs
    startLine: 30
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets whether <xref href=\"System.Runtime.Serialization.DataContractAttribute.IsReference\" data-throw-if-not-resolved=\"false\"></xref> has been explicitly set.</p>\n"
  syntax:
    content: public bool IsReferenceSetExplicitly { get; }
    content.vb: Public ReadOnly Property IsReferenceSetExplicitly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the reference has been explicitly set; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Serialization.DataContractAttribute.Name
  commentId: P:System.Runtime.Serialization.DataContractAttribute.Name
  id: Name
  parent: System.Runtime.Serialization.DataContractAttribute
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Runtime.Serialization.DataContractAttribute.Name
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataContractAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataContractAttribute.cs
    startLine: 50
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets or sets the name of the data contract for the type.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Runtime.Serialization.DataContractAttribute.Name\" data-throw-if-not-resolved=\"false\"></xref> property is used to give a name to a data contract, which is the name of the type in XML schema. For more information, seeData Contract Names. </p>\n<p>By default, the name of a data contract is the name of the type that the <xref href=\"System.Runtime.Serialization.DataContractAttribute\" data-throw-if-not-resolved=\"false\"></xref> is applied to. However, there may be reasons to change this default name. One reason is to allow an existing type to process data that must conform to an existing data contract. For example, there exists a type named <code>Person</code> but the data contract, embodied in an XML schema, requires that the name be <code>Customer</code>. The contract can be satisfied by setting the property value to <code>Customer</code>.</p>\n<p>A second reason is to allow the generation of names that are invalid as type names. For example, if a data contract demands a name that is not allowable as a type name, set the property value to that disallowed name. For instance, the string \"$value\" is disallowed as a type name but is allowed as a <xref href=\"System.Runtime.Serialization.DataContractAttribute.Name\" data-throw-if-not-resolved=\"false\"></xref> property value. </p>\n"
  syntax:
    content: public string Name { get; set; }
    content.vb: Public Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The local name of a data contract. The default is the name of the class that the attribute is applied to. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.DataContractAttribute.Namespace
  commentId: P:System.Runtime.Serialization.DataContractAttribute.Namespace
  id: Namespace
  parent: System.Runtime.Serialization.DataContractAttribute
  langs:
  - csharp
  - vb
  name: Namespace
  fullName: System.Runtime.Serialization.DataContractAttribute.Namespace
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataContractAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Namespace
    path: src/System.Runtime.Serialization.Primitives/src/System/Runtime/Serialization/DataContractAttribute.cs
    startLine: 35
  assemblies:
  - System.Runtime.Serialization.Primitives
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets or sets the namespace for the data contract for the type.</p>\n"
  remarks: "\n<p>Use this property to specify a particular namespace if your type must return data that complies with a specific data contract. </p>\n<p>For the data to be successfully transmitted, the name of the data in a data contract must be the same in both the client and the server. Visual Basic projects, by default, add a prefix to the namespace defined in each file (called the “root namespace,” named after the project). Adding this prefix causes the client and server namespaces to be different for the same type. The solution is to set the <xref href=\"System.Runtime.Serialization.DataContractAttribute.Namespace\" data-throw-if-not-resolved=\"false\"></xref> property to “”, or to explicitly set the data contract namespace in this property.</p>\n"
  syntax:
    content: public string Namespace { get; set; }
    content.vb: Public Property Namespace As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The namespace of the contract. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: System.Runtime.Serialization
  isExternal: false
  name: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
