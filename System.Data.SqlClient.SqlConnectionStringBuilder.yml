items:
- uid: System.Data.SqlClient.SqlConnectionStringBuilder
  commentId: T:System.Data.SqlClient.SqlConnectionStringBuilder
  id: SqlConnectionStringBuilder
  parent: System.Data.SqlClient
  children:
  - System.Data.SqlClient.SqlConnectionStringBuilder.#ctor
  - System.Data.SqlClient.SqlConnectionStringBuilder.#ctor(System.String)
  - System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationIntent
  - System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationName
  - System.Data.SqlClient.SqlConnectionStringBuilder.AttachDBFilename
  - System.Data.SqlClient.SqlConnectionStringBuilder.Clear
  - System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryCount
  - System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryInterval
  - System.Data.SqlClient.SqlConnectionStringBuilder.ConnectTimeout
  - System.Data.SqlClient.SqlConnectionStringBuilder.ContainsKey(System.String)
  - System.Data.SqlClient.SqlConnectionStringBuilder.CurrentLanguage
  - System.Data.SqlClient.SqlConnectionStringBuilder.DataSource
  - System.Data.SqlClient.SqlConnectionStringBuilder.Encrypt
  - System.Data.SqlClient.SqlConnectionStringBuilder.FailoverPartner
  - System.Data.SqlClient.SqlConnectionStringBuilder.InitialCatalog
  - System.Data.SqlClient.SqlConnectionStringBuilder.IntegratedSecurity
  - System.Data.SqlClient.SqlConnectionStringBuilder.Item(System.String)
  - System.Data.SqlClient.SqlConnectionStringBuilder.Keys
  - System.Data.SqlClient.SqlConnectionStringBuilder.LoadBalanceTimeout
  - System.Data.SqlClient.SqlConnectionStringBuilder.MaxPoolSize
  - System.Data.SqlClient.SqlConnectionStringBuilder.MinPoolSize
  - System.Data.SqlClient.SqlConnectionStringBuilder.MultipleActiveResultSets
  - System.Data.SqlClient.SqlConnectionStringBuilder.MultiSubnetFailover
  - System.Data.SqlClient.SqlConnectionStringBuilder.PacketSize
  - System.Data.SqlClient.SqlConnectionStringBuilder.Password
  - System.Data.SqlClient.SqlConnectionStringBuilder.PersistSecurityInfo
  - System.Data.SqlClient.SqlConnectionStringBuilder.Pooling
  - System.Data.SqlClient.SqlConnectionStringBuilder.Remove(System.String)
  - System.Data.SqlClient.SqlConnectionStringBuilder.Replication
  - System.Data.SqlClient.SqlConnectionStringBuilder.ShouldSerialize(System.String)
  - System.Data.SqlClient.SqlConnectionStringBuilder.TrustServerCertificate
  - System.Data.SqlClient.SqlConnectionStringBuilder.TryGetValue(System.String,System.Object@)
  - System.Data.SqlClient.SqlConnectionStringBuilder.TypeSystemVersion
  - System.Data.SqlClient.SqlConnectionStringBuilder.UserID
  - System.Data.SqlClient.SqlConnectionStringBuilder.UserInstance
  - System.Data.SqlClient.SqlConnectionStringBuilder.Values
  - System.Data.SqlClient.SqlConnectionStringBuilder.WorkstationID
  langs:
  - csharp
  - vb
  name: SqlConnectionStringBuilder
  nameWithType: SqlConnectionStringBuilder
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder
  type: Class
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SqlConnectionStringBuilder
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 18
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Provides a simple way to create and manage the contents of connection strings used by the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  remarks: "\n<p>The connection string builder lets developers programmatically create syntactically correct connection strings, and parse and rebuild existing connection strings, using properties and methods of the class. The connection string builder provides strongly typed properties corresponding to the known key/value pairs allowed by SQL Server. Developers needing to create connection strings as part of applications can use the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class to build and modify connection strings. The class also makes it easy to manage connection strings stored in an application configuration file.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> performs checks for valid key/value pairs. Therefore, you cannot use this class to create invalid connection strings; trying to add invalid pairs will throw an exception. The class maintains a fixed collection of synonyms and can translate from a synonym to the corresponding well-known key name. </p>\n<p>For example, when you use the <strong>Item</strong> property to retrieve a value, you can specify a string that contains any synonym for the key you need. For example, you can specify \"Network Address\", \"addr\", or any other acceptable synonym for this key within a connection string when you use any member that requires a string that contains the key name, such as the <strong>Item</strong> property or the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.Remove(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. See the <xref href=\"System.Data.SqlClient.SqlConnection.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref> property for a full list of acceptable synonyms.</p>\n<p>The <strong>Item</strong> property handles tries to insert malicious entries. For example, the following code, using the default Item property (the indexer, in C#) correctly escapes the nested key/value pair:</p>\n<p>[Visual Basic]</p>\n<pre><code>Dim builder As New System.Data.SqlClient.SqlConnectionStringBuilder\nbuilder(\"Data Source\") = \"(local)\"\nbuilder(\"Integrated Security\") = True\nbuilder(\"Initial Catalog\") = \"AdventureWorks;NewValue=Bad\"\nConsole.WriteLine(builder.ConnectionString)</code></pre>\n<p>[C#]</p>\n<pre><code>System.Data.SqlClient.SqlConnectionStringBuilder builder =\nnew System.Data.SqlClient.SqlConnectionStringBuilder();\nbuilder[\"Data Source\"] = \"(local)\";\nbuilder[\"integrated Security\"] = true;\nbuilder[\"Initial Catalog\"] = \"AdventureWorks;NewValue=Bad\";\nConsole.WriteLine(builder.ConnectionString);</code></pre>\n<p>The result is the following connection string that handles the invalid value in a safe manner:</p>\n<pre><code>Source=(local);Initial Catalog=\"AdventureWorks;NewValue=Bad\";\nIntegrated Security=True</code></pre>\n"
  syntax:
    content: 'public sealed class SqlConnectionStringBuilder : DbConnectionStringBuilder'
    content.vb: >-
      Public NotInheritable Class SqlConnectionStringBuilder
          Inherits DbConnectionStringBuilder
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.#ctor
  commentId: M:System.Data.SqlClient.SqlConnectionStringBuilder.#ctor
  id: '#ctor'
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: SqlConnectionStringBuilder()
  nameWithType: SqlConnectionStringBuilder.SqlConnectionStringBuilder()
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.SqlConnectionStringBuilder()
  type: Constructor
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 191
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public SqlConnectionStringBuilder()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.#ctor(System.String)
  commentId: M:System.Data.SqlClient.SqlConnectionStringBuilder.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: SqlConnectionStringBuilder(String)
  nameWithType: SqlConnectionStringBuilder.SqlConnectionStringBuilder(String)
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.SqlConnectionStringBuilder(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 195
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class. The provided connection string provides the data for the instance's internal connection information.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class provides a fixed internal collection of key/value pairs. Even if you supply only a small subset of the possible connection string values in the constructor, the object always provides default values for each key/value pair. When the <strong>ConnectionString</strong> property of the object is retrieved, the string contains only key/value pairs in which the value is not the default value for the item.</p>\n"
  syntax:
    content: public SqlConnectionStringBuilder(string connectionString)
    content.vb: Public Sub New(connectionString As String)
    parameters:
    - id: connectionString
      type: System.String
      description: "\n<p>The basis for the object's internal connection information. Parsed into name/value pairs. Invalid key names raise <xref href=\"System.Collections.Generic.KeyNotFoundException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: "\n<p>Invalid key name within the connection string.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>Invalid value within the connection string (specifically, when a Boolean or numeric value was expected but not supplied).</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The supplied <em>connectionString</em> is not valid.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationIntent
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationIntent
  id: ApplicationIntent
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: ApplicationIntent
  nameWithType: SqlConnectionStringBuilder.ApplicationIntent
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationIntent
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ApplicationIntent
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 261
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Declares the application workload type when connecting to a database in an SQL Server Availability Group. You can set the value of this property with <xref href=\"System.Data.SqlClient.ApplicationIntent\" data-throw-if-not-resolved=\"false\"></xref>. For more information about SqlClient support for Always On Availability Groups, see SqlClient Support for High Availability, Disaster Recovery.</p>\n"
  syntax:
    content: public ApplicationIntent ApplicationIntent { get; set; }
    content.vb: Public Property ApplicationIntent As ApplicationIntent
    parameters: []
    return:
      type: System.Data.SqlClient.ApplicationIntent
      description: "\n<p>Returns the current value of the property (a value of type <xref href=\"System.Data.SqlClient.ApplicationIntent\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationName
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationName
  id: ApplicationName
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: ApplicationName
  nameWithType: SqlConnectionStringBuilder.ApplicationName
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationName
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ApplicationName
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 276
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the name of the application associated with the connection string.</p>\n"
  remarks: "\n<p>This property corresponds to the \"Application Name\" and \"app\" keys within the connection string.</p>\n"
  syntax:
    content: public string ApplicationName { get; set; }
    content.vb: Public Property ApplicationName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the application, or \".NET SqlClient Data Provider\" if no name has been supplied.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>To set the value to null, use <xref href=\"System.DBNull.Value\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.AttachDBFilename
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.AttachDBFilename
  id: AttachDBFilename
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: AttachDBFilename
  nameWithType: SqlConnectionStringBuilder.AttachDBFilename
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.AttachDBFilename
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AttachDBFilename
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 286
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets a string that contains the name of the primary data file. This includes the full path name of an attachable database.</p>\n"
  remarks: "\n<p>This property corresponds to the \"AttachDBFilename\", \"extended properties\", and \"initial file name\" keys within the connection string.</p>\n<p>\n<strong>AttachDBFilename</strong> is only supported for primary data files with an .mdf extension.</p>\n<p>An error will be generated if a log file exists in the same directory as the data file and the 'database' keyword is used when attaching the primary data file. In this case, remove the log file. Once the database is attached, a new log file will be automatically generated based on the physical path.</p>\n"
  syntax:
    content: public string AttachDBFilename { get; set; }
    content.vb: Public Property AttachDBFilename As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The value of the <strong>AttachDBFilename</strong> property, or <strong>String.Empty</strong> if no value has been supplied.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>To set the value to null, use <xref href=\"System.DBNull.Value\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryCount
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryCount
  id: ConnectRetryCount
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: ConnectRetryCount
  nameWithType: SqlConnectionStringBuilder.ConnectRetryCount
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryCount
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConnectRetryCount
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 408
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>The number of reconnections attempted after identifying that there was an idle connection failure. This must be an integer between 0 and 255. Default is 1. Set to 0 to disable reconnecting on idle connection failures. An <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> will be thrown if set to a value outside of the allowed range.</p>\n"
  syntax:
    content: public int ConnectRetryCount { get; set; }
    content.vb: Public Property ConnectRetryCount As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of reconnections attempted after identifying that there was an idle connection failure.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryInterval
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryInterval
  id: ConnectRetryInterval
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: ConnectRetryInterval
  nameWithType: SqlConnectionStringBuilder.ConnectRetryInterval
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryInterval
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConnectRetryInterval
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 422
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Amount of time (in seconds) between each reconnection attempt after identifying that there was an idle connection failure. This must be an integer between 1 and 60. The default is 10 seconds. An <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> will be thrown if set to a value outside of the allowed range.</p>\n"
  syntax:
    content: public int ConnectRetryInterval { get; set; }
    content.vb: Public Property ConnectRetryInterval As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>Amount of time (in seconds) between each reconnection attempt after identifying that there was an idle connection failure.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectTimeout
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.ConnectTimeout
  id: ConnectTimeout
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: ConnectTimeout
  nameWithType: SqlConnectionStringBuilder.ConnectTimeout
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectTimeout
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConnectTimeout
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 296
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the length of time (in seconds) to wait for a connection to the server before terminating the attempt and generating an error.</p>\n"
  remarks: "\n<p>This property corresponds to the \"Connect Timeout\", \"connection timeout\", and \"timeout\" keys within the connection string.</p>\n<p>When opening a connection to a Azure SQL Database, set the connection timeout to 30 seconds.</p>\n"
  syntax:
    content: public int ConnectTimeout { get; set; }
    content.vb: Public Property ConnectTimeout As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The value of the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.ConnectTimeout\" data-throw-if-not-resolved=\"false\"></xref> property, or 15 seconds if no value has been supplied.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.CurrentLanguage
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.CurrentLanguage
  id: CurrentLanguage
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: CurrentLanguage
  nameWithType: SqlConnectionStringBuilder.CurrentLanguage
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.CurrentLanguage
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CurrentLanguage
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 310
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the SQL Server Language record name.</p>\n"
  remarks: "\n<p>This property corresponds to the \"Current Language\" and \"language\" keys within the connection string.</p>\n"
  syntax:
    content: public string CurrentLanguage { get; set; }
    content.vb: Public Property CurrentLanguage As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The value of the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.CurrentLanguage\" data-throw-if-not-resolved=\"false\"></xref> property, or <strong>String.Empty</strong> if no value has been supplied.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>To set the value to null, use <xref href=\"System.DBNull.Value\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.DataSource
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.DataSource
  id: DataSource
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: DataSource
  nameWithType: SqlConnectionStringBuilder.DataSource
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.DataSource
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DataSource
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 320
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the name or network address of the instance of SQL Server to connect to.</p>\n"
  remarks: "\n<p>This property corresponds to the \"Data Source\", \"server\", \"address\", \"addr\", and \"network address\" keys within the connection string. Regardless of which of these values has been supplied within the supplied connection string, the connection string created by the <strong>SqlConnectionStringBuilder</strong> will use the well-known \"Data Source\" key.</p>\n"
  syntax:
    content: public string DataSource { get; set; }
    content.vb: Public Property DataSource As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The value of the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.DataSource\" data-throw-if-not-resolved=\"false\"></xref> property, or <strong>String.Empty</strong> if none has been supplied.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>To set the value to null, use <xref href=\"System.DBNull.Value\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Encrypt
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.Encrypt
  id: Encrypt
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: Encrypt
  nameWithType: SqlConnectionStringBuilder.Encrypt
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Encrypt
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Encrypt
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 330
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets a Boolean value that indicates whether SQL Server uses SSL encryption for all data sent between the client and server if the server has a certificate installed.</p>\n"
  remarks: "\n<p>This property corresponds to the \"Encrypt\" key within the connection string.</p>\n"
  syntax:
    content: public bool Encrypt { get; set; }
    content.vb: Public Property Encrypt As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>The value of the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.Encrypt\" data-throw-if-not-resolved=\"false\"></xref> property, or <strong>false</strong> if none has been supplied.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.FailoverPartner
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.FailoverPartner
  id: FailoverPartner
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: FailoverPartner
  nameWithType: SqlConnectionStringBuilder.FailoverPartner
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.FailoverPartner
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FailoverPartner
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 350
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the name or address of the partner server to connect to if the primary server is down.</p>\n"
  syntax:
    content: public string FailoverPartner { get; set; }
    content.vb: Public Property FailoverPartner As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The value of the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.FailoverPartner\" data-throw-if-not-resolved=\"false\"></xref> property, or <strong>String.Empty</strong> if none has been supplied.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>To set the value to null, use <xref href=\"System.DBNull.Value\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.InitialCatalog
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.InitialCatalog
  id: InitialCatalog
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: InitialCatalog
  nameWithType: SqlConnectionStringBuilder.InitialCatalog
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.InitialCatalog
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InitialCatalog
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 360
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the name of the database associated with the connection.</p>\n"
  remarks: "\n<p>This property corresponds to the \"Initial Catalog\" and \"database\" keys within the connection string.</p>\n"
  syntax:
    content: public string InitialCatalog { get; set; }
    content.vb: Public Property InitialCatalog As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The value of the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.InitialCatalog\" data-throw-if-not-resolved=\"false\"></xref> property, or <strong>String.Empty</strong> if none has been supplied.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>To set the value to null, use <xref href=\"System.DBNull.Value\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.IntegratedSecurity
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.IntegratedSecurity
  id: IntegratedSecurity
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: IntegratedSecurity
  nameWithType: SqlConnectionStringBuilder.IntegratedSecurity
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.IntegratedSecurity
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IntegratedSecurity
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 370
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets a Boolean value that indicates whether User ID and Password are specified in the connection (when <strong>false</strong>) or whether the current Windows account credentials are used for authentication (when <strong>true</strong>).</p>\n"
  remarks: "\n<p>This property corresponds to the \"Integrated Security\" and \"trusted_connection\" keys within the connection string.</p>\n"
  syntax:
    content: public bool IntegratedSecurity { get; set; }
    content.vb: Public Property IntegratedSecurity As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>The value of the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.IntegratedSecurity\" data-throw-if-not-resolved=\"false\"></xref> property, or <strong>false</strong> if none has been supplied.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Item(System.String)
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.Item(System.String)
  id: Item(System.String)
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: SqlConnectionStringBuilder.Item[String]
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Item[System.String]
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 203
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the value associated with the specified key. In C#, this property is the indexer.</p>\n"
  remarks: "\n<p>Because the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> contains a fixed-size dictionary, trying to add a key that does not exist within the dictionary throws a <xref href=\"System.Collections.Generic.KeyNotFoundException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override object this[string keyword] { get; set; }
    content.vb: Public Overrides Property Item(keyword As String) As Object
    parameters:
    - id: keyword
      type: System.String
      description: "\n<p>The key of the item to get or set.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The value associated with the specified key. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>keyword</em> is a null reference (<strong>Nothing</strong> in Visual Basic).</p>\n"
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: "\n<p>Tried to add a key that does not exist within the available keys.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>Invalid value within the connection string (specifically, a Boolean or numeric value was expected but not supplied).</p>\n"
  nameWithType.vb: SqlConnectionStringBuilder.Item(String)
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Data.SqlClient.SqlConnectionStringBuilder.Item(System.String)
  name.vb: Item(String)
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Keys
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.Keys
  id: Keys
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: SqlConnectionStringBuilder.Keys
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Keys
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Keys
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 581
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the keys in the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The order of the values in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is unspecified, but it is the same order as the associated values in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> returned by the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.Values\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public override ICollection Keys { get; }
    content.vb: Public Overrides ReadOnly Property Keys As ICollection
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "\n<p>An <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the keys in the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Data.SqlClient.SqlConnectionStringBuilder.Values
    commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.Values
  - type: System.Data.SqlClient.SqlConnectionStringBuilder.Item(System.String)
    commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.Item(System.String)
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.LoadBalanceTimeout
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.LoadBalanceTimeout
  id: LoadBalanceTimeout
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: LoadBalanceTimeout
  nameWithType: SqlConnectionStringBuilder.LoadBalanceTimeout
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.LoadBalanceTimeout
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LoadBalanceTimeout
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 380
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the minimum time, in seconds, for the connection to live in the connection pool before being destroyed.</p>\n"
  remarks: "\n<p>This property corresponds to the \"Load Balance Timeout\" and \"connection lifetime\" keys within the connection string.</p>\n"
  syntax:
    content: public int LoadBalanceTimeout { get; set; }
    content.vb: Public Property LoadBalanceTimeout As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The value of the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.LoadBalanceTimeout\" data-throw-if-not-resolved=\"false\"></xref> property, or 0 if none has been supplied.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.MaxPoolSize
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.MaxPoolSize
  id: MaxPoolSize
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: MaxPoolSize
  nameWithType: SqlConnectionStringBuilder.MaxPoolSize
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.MaxPoolSize
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxPoolSize
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 394
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the maximum number of connections allowed in the connection pool for this specific connection string.</p>\n"
  remarks: "\n<p>This property corresponds to the \"Max Pool Size\" key within the connection string.</p>\n"
  syntax:
    content: public int MaxPoolSize { get; set; }
    content.vb: Public Property MaxPoolSize As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The value of the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.MaxPoolSize\" data-throw-if-not-resolved=\"false\"></xref> property, or 100 if none has been supplied.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.MinPoolSize
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.MinPoolSize
  id: MinPoolSize
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: MinPoolSize
  nameWithType: SqlConnectionStringBuilder.MinPoolSize
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.MinPoolSize
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MinPoolSize
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 438
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the minimum number of connections allowed in the connection pool for this specific connection string.</p>\n"
  remarks: "\n<p>This property corresponds to the \"Min Pool Size\" key within the connection string.</p>\n"
  syntax:
    content: public int MinPoolSize { get; set; }
    content.vb: Public Property MinPoolSize As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The value of the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.MinPoolSize\" data-throw-if-not-resolved=\"false\"></xref> property, or 0 if none has been supplied.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.MultipleActiveResultSets
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.MultipleActiveResultSets
  id: MultipleActiveResultSets
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: MultipleActiveResultSets
  nameWithType: SqlConnectionStringBuilder.MultipleActiveResultSets
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.MultipleActiveResultSets
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultipleActiveResultSets
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 452
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>When true, an application can maintain multiple active result sets (MARS). When false, an application must process or cancel all result sets from one batch before it can execute any other batch on that connection.</p>\n<p>For more information, see <see href=\"http://msdn.microsoft.com//library/cfa084cz.aspx\">Multiple Active Result Sets (MARS)</see>.</p>\n"
  remarks: "\n<p>This property corresponds to the \"MultipleActiveResultSets\" key within the connection string.</p>\n"
  syntax:
    content: public bool MultipleActiveResultSets { get; set; }
    content.vb: Public Property MultipleActiveResultSets As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>The value of the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.MultipleActiveResultSets\" data-throw-if-not-resolved=\"false\"></xref> property, or <strong>false</strong> if none has been supplied.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.MultiSubnetFailover
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.MultiSubnetFailover
  id: MultiSubnetFailover
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: MultiSubnetFailover
  nameWithType: SqlConnectionStringBuilder.MultiSubnetFailover
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.MultiSubnetFailover
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiSubnetFailover
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 462
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>If your application is connecting to an AlwaysOn availability group (AG) on different subnets, setting MultiSubnetFailover=true provides faster detection of and connection to the (currently) active server. For more information about SqlClient support for Always On Availability Groups, see SqlClient Support for High Availability, Disaster Recovery.</p>\n"
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", Justification = "Reviewed and Approved by UE")]

      public bool MultiSubnetFailover { get; set; }
    content.vb: >-
      <SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", Justification:="Reviewed and Approved by UE")>

      Public Property MultiSubnetFailover As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> indicating the current value of the property.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.PacketSize
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.PacketSize
  id: PacketSize
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: PacketSize
  nameWithType: SqlConnectionStringBuilder.PacketSize
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.PacketSize
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PacketSize
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 486
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the size in bytes of the network packets used to communicate with an instance of SQL Server.</p>\n"
  remarks: "\n<p>This property corresponds to the \"Packet Size\" key within the connection string.</p>\n"
  syntax:
    content: public int PacketSize { get; set; }
    content.vb: Public Property PacketSize As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The value of the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.PacketSize\" data-throw-if-not-resolved=\"false\"></xref> property, or 8000 if none has been supplied.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Password
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.Password
  id: Password
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: Password
  nameWithType: SqlConnectionStringBuilder.Password
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Password
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Password
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 500
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the password for the SQL Server account.</p>\n"
  remarks: "\n<p>This property corresponds to the \"Password\" and \"pwd\" keys within the connection string.</p>\n<p>If <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.Password\" data-throw-if-not-resolved=\"false\"></xref> has not been set and you retrieve the value, the return value is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. To reset the password for the connection string, pass null to the Item property.</p>\n"
  syntax:
    content: public string Password { get; set; }
    content.vb: Public Property Password As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The value of the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.Password\" data-throw-if-not-resolved=\"false\"></xref> property, or <strong>String.Empty</strong> if none has been supplied.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The password was incorrectly set to null.  See code sample below.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.PersistSecurityInfo
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.PersistSecurityInfo
  id: PersistSecurityInfo
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: PersistSecurityInfo
  nameWithType: SqlConnectionStringBuilder.PersistSecurityInfo
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.PersistSecurityInfo
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PersistSecurityInfo
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 510
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets a Boolean value that indicates if security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state.</p>\n"
  remarks: "\n<p>This property corresponds to the \"Persist Security Info\" and \"persistsecurityinfo\" keys within the connection string.</p>\n"
  syntax:
    content: public bool PersistSecurityInfo { get; set; }
    content.vb: Public Property PersistSecurityInfo As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>The value of the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.PersistSecurityInfo\" data-throw-if-not-resolved=\"false\"></xref> property, or <strong>false</strong> if none has been supplied.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Pooling
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.Pooling
  id: Pooling
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: Pooling
  nameWithType: SqlConnectionStringBuilder.Pooling
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Pooling
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Pooling
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 520
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets a Boolean value that indicates whether the connection will be pooled or explicitly opened every time that the connection is requested.</p>\n"
  remarks: "\n<p>This property corresponds to the \"Pooling\" key within the connection string.</p>\n"
  syntax:
    content: public bool Pooling { get; set; }
    content.vb: Public Property Pooling As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>The value of the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.Pooling\" data-throw-if-not-resolved=\"false\"></xref> property, or <strong>true</strong> if none has been supplied.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Replication
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.Replication
  id: Replication
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: Replication
  nameWithType: SqlConnectionStringBuilder.Replication
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Replication
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Replication
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 530
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets a Boolean value that indicates whether replication is supported using the connection.</p>\n"
  remarks: "\n<p>This property corresponds to the \"Replication\" key within the connection string.</p>\n"
  syntax:
    content: public bool Replication { get; set; }
    content.vb: Public Property Replication As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>The value of the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.Replication\" data-throw-if-not-resolved=\"false\"></xref> property, or false if none has been supplied.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.TrustServerCertificate
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.TrustServerCertificate
  id: TrustServerCertificate
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: TrustServerCertificate
  nameWithType: SqlConnectionStringBuilder.TrustServerCertificate
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.TrustServerCertificate
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TrustServerCertificate
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 340
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets a value that indicates whether the channel will be encrypted while bypassing walking the certificate chain to validate trust.</p>\n"
  remarks: "\n<p>When <strong>TrustServerCertificate</strong> is set to <strong>true</strong>, the transport layer will use SSL to encrypt the channel and bypass walking the certificate chain to validate trust. If <strong>TrustServerCertificate</strong> is set to <strong>true</strong> and encryption is turned on, the encryption level specified on the server will be used even if <strong>Encrypt</strong> is set to <strong>false</strong>. The connection will fail otherwise.</p>\n<p>For more information, see \"Encryption Hierarchy\" and \"Using Encryption Without Validation\" in SQL Server Books Online.</p>\n"
  syntax:
    content: public bool TrustServerCertificate { get; set; }
    content.vb: Public Property TrustServerCertificate As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>A <strong>Boolean</strong>. Recognized values are <strong>true</strong>, <strong>false</strong>, <strong>yes</strong>, and <strong>no</strong>. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.TypeSystemVersion
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.TypeSystemVersion
  id: TypeSystemVersion
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: TypeSystemVersion
  nameWithType: SqlConnectionStringBuilder.TypeSystemVersion
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.TypeSystemVersion
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeSystemVersion
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 540
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets a string value that indicates the type system the application expects.</p>\n"
  remarks: "\n<p>The <strong>TypeSystemVersion</strong> property can be used to specify a down-level version of SQL Server for applications written against that version. This avoids possible problems with incompatible types in a newer version of SQL Server that may cause the application to break.</p>\n"
  syntax:
    content: public string TypeSystemVersion { get; set; }
    content.vb: Public Property TypeSystemVersion As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The following table shows the possible values for the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.TypeSystemVersion\" data-throw-if-not-resolved=\"false\"></xref> property:</p>\n<p>Value</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>SQL Server 2005</p>\n</td><td>\n<p>Uses the SQL Server 2005 type system. No conversions are made for the current version of ADO.NET.</p>\n</td></tr><tr><td>\n<p>SQL Server 2008</p>\n</td><td>\n<p>Uses the SQL Server 2008 type system.</p>\n</td></tr><tr><td>\n<p>Latest</p>\n</td><td>\n<p>Use the latest version than this client-server pair can handle. This will automatically move forward as the client and server components are upgraded.</p>\n</td></tr></tbody></table>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.UserID
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.UserID
  id: UserID
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: UserID
  nameWithType: SqlConnectionStringBuilder.UserID
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.UserID
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UserID
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 550
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the user ID to be used when connecting to SQL Server.</p>\n"
  remarks: "\n<p>This property corresponds to the \"User ID\", \"user\", and \"uid\" keys within the connection string.</p>\n"
  syntax:
    content: public string UserID { get; set; }
    content.vb: Public Property UserID As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The value of the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.UserID\" data-throw-if-not-resolved=\"false\"></xref> property, or <strong>String.Empty</strong> if none has been supplied.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>To set the value to null, use <xref href=\"System.DBNull.Value\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.UserInstance
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.UserInstance
  id: UserInstance
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: UserInstance
  nameWithType: SqlConnectionStringBuilder.UserInstance
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.UserInstance
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UserInstance
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 560
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets a value that indicates whether to redirect the connection from the default SQL Server Express instance to a runtime-initiated instance running under the account of the caller.</p>\n"
  remarks: "\n<p>This property corresponds to the \"User Instance\" key within the connection string.</p>\n<p>This feature is available only with the SQL Server Express Edition. For more information on user instances, see SQL Server Express User Instances and \"User Instances for Non-Administrators\" in SQL Server Books Online.</p>\n"
  syntax:
    content: public bool UserInstance { get; set; }
    content.vb: Public Property UserInstance As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>The value of the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.UserInstance\" data-throw-if-not-resolved=\"false\"></xref> property, or <strong>False</strong> if none has been supplied.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>To set the value to null, use <xref href=\"System.DBNull.Value\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Values
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.Values
  id: Values
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: SqlConnectionStringBuilder.Values
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Values
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Values
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 589
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the values in the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The order of the values in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is unspecified, but it is the same order as the associated keys in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> returned by the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.Keys\" data-throw-if-not-resolved=\"false\"></xref> property. Because each instance of the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> always contains the same fixed set of keys, the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.Values\" data-throw-if-not-resolved=\"false\"></xref> property always returns the values corresponding to the fixed set of keys, in the same order as the keys.</p>\n"
  syntax:
    content: public override ICollection Values { get; }
    content.vb: Public Overrides ReadOnly Property Values As ICollection
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "\n<p>An <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the values in the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Data.SqlClient.SqlConnectionStringBuilder.Keys
    commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.Keys
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.WorkstationID
  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.WorkstationID
  id: WorkstationID
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: WorkstationID
  nameWithType: SqlConnectionStringBuilder.WorkstationID
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.WorkstationID
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WorkstationID
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 570
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Gets or sets the name of the workstation connecting to SQL Server.</p>\n"
  remarks: "\n<p>This property corresponds to the \"Workstation ID\" and \"wsid\" keys within the connection string.</p>\n"
  syntax:
    content: public string WorkstationID { get; set; }
    content.vb: Public Property WorkstationID As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The value of the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.WorkstationID\" data-throw-if-not-resolved=\"false\"></xref> property, or <strong>String.Empty</strong> if none has been supplied.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>To set the value to null, use <xref href=\"System.DBNull.Value\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Clear
  commentId: M:System.Data.SqlClient.SqlConnectionStringBuilder.Clear
  id: Clear
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: SqlConnectionStringBuilder.Clear()
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Clear()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 604
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Clears the contents of the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.Common.DbConnectionStringBuilder.Clear\" data-throw-if-not-resolved=\"false\"></xref> method removes all key/value pairs from the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>, and resets all corresponding properties. This includes setting the <xref href=\"System.Data.Common.DbConnectionStringBuilder.Count\" data-throw-if-not-resolved=\"false\"></xref> property to 0, and setting the <xref href=\"System.Data.Common.DbConnectionStringBuilder.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref> property to an empty string.</p>\n"
  syntax:
    content: public override void Clear()
    content.vb: Public Overrides Sub Clear
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ContainsKey(System.String)
  commentId: M:System.Data.SqlClient.SqlConnectionStringBuilder.ContainsKey(System.String)
  id: ContainsKey(System.String)
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: ContainsKey(String)
  nameWithType: SqlConnectionStringBuilder.ContainsKey(String)
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ContainsKey(System.String)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContainsKey
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 613
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Determines whether the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> contains a specific key.</p>\n"
  remarks: "\n<p>Because the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> contains a fixed-size collection of key/value pairs, the <xref href=\"System.Data.Common.DbConnectionStringBuilder.ContainsKey(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method determines only if a particular key name is valid.</p>\n"
  syntax:
    content: public override bool ContainsKey(string keyword)
    content.vb: Public Overrides Function ContainsKey(keyword As String) As Boolean
    parameters:
    - id: keyword
      type: System.String
      description: "\n<p>The key to locate in the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>true if the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> contains an element that has the specified key; otherwise, false.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>keyword</em> is null (<strong>Nothing</strong> in Visual Basic)</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Remove(System.String)
  commentId: M:System.Data.SqlClient.SqlConnectionStringBuilder.Remove(System.String)
  id: Remove(System.String)
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: Remove(String)
  nameWithType: SqlConnectionStringBuilder.Remove(String)
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Remove(System.String)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 691
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Removes the entry with the specified key from the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>Because the <strong>Remove</strong> method returns a value that indicates its success, it is not required to look for a key before trying to remove the key/value pair from the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> instance. Because the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> maintains a fixed-size collection of key/value pairs, calling the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.Remove(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method simply resets the value of the key/value pair back to its default value.</p>\n<p>Because the collection of keys supported by the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> is fixed, every item within the collection has a known default value. The following table lists the keys, and the value for each when the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> is first initialized, or after the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.Remove(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method has been called.</p>\n<p>Key</p>\n<p>Default value</p>\n<table><tbody><tr><td>\n<p>Application Name</p>\n</td><td>\n<p>\".Net SqlClient Data Provider\"</p>\n</td></tr><tr><td>\n<p>Asynchronous Processing</p>\n</td><td>\n<p>False</p>\n</td></tr><tr><td>\n<p>AttachDBFilename</p>\n</td><td>\n<p>Empty string</p>\n</td></tr><tr><td>\n<p>Connection Timeout</p>\n</td><td>\n<p>15</p>\n</td></tr><tr><td>\n<p>Context Connection</p>\n</td><td>\n<p>False</p>\n</td></tr><tr><td>\n<p>Current Language</p>\n</td><td>\n<p>Empty string</p>\n</td></tr><tr><td>\n<p>Data Source</p>\n</td><td>\n<p>Empty string</p>\n</td></tr><tr><td>\n<p>Encrypt</p>\n</td><td>\n<p>False</p>\n</td></tr><tr><td>\n<p>Enlist</p>\n</td><td>\n<p>True</p>\n</td></tr><tr><td>\n<p>Failover Partner</p>\n</td><td>\n<p>Empty string</p>\n</td></tr><tr><td>\n<p>Initial Catalog</p>\n</td><td>\n<p>Empty string</p>\n</td></tr><tr><td>\n<p>Integrated Security</p>\n</td><td>\n<p>False</p>\n</td></tr><tr><td>\n<p>Load Balance Timeout</p>\n</td><td>\n<p>0</p>\n</td></tr><tr><td>\n<p>Max Pool Size</p>\n</td><td>\n<p>100</p>\n</td></tr><tr><td>\n<p>Min Pool Size</p>\n</td><td>\n<p>0</p>\n</td></tr><tr><td>\n<p>MultipleActiveResultSets</p>\n</td><td>\n<p>False</p>\n</td></tr><tr><td>\n<p>Network Library</p>\n</td><td>\n<p>Empty string</p>\n</td></tr><tr><td>\n<p>Packet Size</p>\n</td><td>\n<p>8000</p>\n</td></tr><tr><td>\n<p>Password</p>\n</td><td>\n<p>Empty string</p>\n</td></tr><tr><td>\n<p>Persist Security Info</p>\n</td><td>\n<p>False</p>\n</td></tr><tr><td>\n<p>Pooling</p>\n</td><td>\n<p>True</p>\n</td></tr><tr><td>\n<p>Replication</p>\n</td><td>\n<p>False</p>\n</td></tr><tr><td>\n<p>Transaction Binding</p>\n</td><td>\n<p>Implicit Unbind</p>\n</td></tr><tr><td>\n<p>User ID</p>\n</td><td>\n<p>Empty string</p>\n</td></tr><tr><td>\n<p>User Instance</p>\n</td><td>\n<p>False</p>\n</td></tr><tr><td>\n<p>Workstation ID</p>\n</td><td>\n<p>Empty string</p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public override bool Remove(string keyword)
    content.vb: Public Overrides Function Remove(keyword As String) As Boolean
    parameters:
    - id: keyword
      type: System.String
      description: "\n<p>The key of the key/value pair to be removed from the connection string in this <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the key existed within the connection string and was removed; <strong>false</strong> if the key did not exist.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>keyword</em> is null (<strong>Nothing</strong> in Visual Basic)</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ShouldSerialize(System.String)
  commentId: M:System.Data.SqlClient.SqlConnectionStringBuilder.ShouldSerialize(System.String)
  id: ShouldSerialize(System.String)
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: ShouldSerialize(String)
  nameWithType: SqlConnectionStringBuilder.ShouldSerialize(String)
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ShouldSerialize(System.String)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ShouldSerialize
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 819
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Indicates whether the specified key exists in this <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>This method behaves identically to the <xref href=\"System.Data.Common.DbConnectionStringBuilder.ContainsKey(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public override bool ShouldSerialize(string keyword)
    content.vb: Public Overrides Function ShouldSerialize(keyword As String) As Boolean
    parameters:
    - id: keyword
      type: System.String
      description: "\n<p>The key to locate in the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> contains an entry with the specified key; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.TryGetValue(System.String,System.Object@)
  commentId: M:System.Data.SqlClient.SqlConnectionStringBuilder.TryGetValue(System.String,System.Object@)
  id: TryGetValue(System.String,System.Object@)
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  - vb
  name: TryGetValue(String, out Object)
  nameWithType: SqlConnectionStringBuilder.TryGetValue(String, out Object)
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.TryGetValue(System.String, out System.Object)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryGetValue
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs
    startLine: 826
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Retrieves a value corresponding to the supplied key from this <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder.TryGetValue(System.String,System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> method lets developers safely retrieve a value from a <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> without needing to verify that the supplied key name is a valid key name. Because <strong>TryGetValue</strong> does not raise an exception when you call it, passing in a nonexistent key, you do not have to look for a key before retrieving its value.  Calling <strong>TryGetValue</strong> with a nonexistent key will place the value null (<strong>Nothing</strong> in Visual Basic) in the <em>value</em> parameter. </p>\n"
  syntax:
    content: public override bool TryGetValue(string keyword, out object value)
    content.vb: Public Overrides Function TryGetValue(keyword As String, ByRef value As Object) As Boolean
    parameters:
    - id: keyword
      type: System.String
      description: "\n<p>The key of the item to retrieve.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value corresponding to <em>keyword.</em></p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>keyword</em> was found within the connection string; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>keyword</em> contains a null value (<strong>Nothing</strong> in Visual Basic).</p>\n"
  nameWithType.vb: SqlConnectionStringBuilder.TryGetValue(String, ByRef Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Data.SqlClient.SqlConnectionStringBuilder.TryGetValue(System.String, ByRef System.Object)
  name.vb: TryGetValue(String, ByRef Object)
references:
- uid: System.Data.SqlClient
  isExternal: false
  name: System.Data.SqlClient
  nameWithType: System.Data.SqlClient
  fullName: System.Data.SqlClient
  commentId: N:System.Data.SqlClient
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
  commentId: T:System.Object
- uid: System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
  commentId: N:System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
  commentId: T:System.String
- uid: System.Data.SqlClient.ApplicationIntent
  parent: System.Data.SqlClient
  isExternal: false
  name: ApplicationIntent
  nameWithType: ApplicationIntent
  fullName: System.Data.SqlClient.ApplicationIntent
  commentId: T:System.Data.SqlClient.ApplicationIntent
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
  commentId: T:System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
  commentId: T:System.Boolean
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
- uid: System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  commentId: N:System.Collections
- uid: System.Collections.Generic.KeyNotFoundException
  isExternal: false
  name: KeyNotFoundException
  nameWithType: KeyNotFoundException
  fullName: System.Collections.Generic.KeyNotFoundException
  commentId: T:System.Collections.Generic.KeyNotFoundException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  nameWithType: FormatException
  fullName: System.FormatException
  commentId: T:System.FormatException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
