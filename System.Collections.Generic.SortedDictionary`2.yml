items:
- uid: System.Collections.Generic.SortedDictionary`2
  commentId: T:System.Collections.Generic.SortedDictionary`2
  id: SortedDictionary`2
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.SortedDictionary`2.#ctor
  - System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  - System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.SortedDictionary`2.Add(`0,`1)
  - System.Collections.Generic.SortedDictionary`2.Clear
  - System.Collections.Generic.SortedDictionary`2.Comparer
  - System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)
  - System.Collections.Generic.SortedDictionary`2.ContainsValue(`1)
  - System.Collections.Generic.SortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  - System.Collections.Generic.SortedDictionary`2.Count
  - System.Collections.Generic.SortedDictionary`2.GetEnumerator
  - System.Collections.Generic.SortedDictionary`2.Item(`0)
  - System.Collections.Generic.SortedDictionary`2.Keys
  - System.Collections.Generic.SortedDictionary`2.Remove(`0)
  - System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)
  - System.Collections.Generic.SortedDictionary`2.Values
  langs:
  - csharp
  - vb
  name: SortedDictionary<TKey, TValue>
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>
  type: Class
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SortedDictionary
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 10
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Represents a collection of key/value pairs that are sorted on the key. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> generic class is a binary search tree with O(log <em>n</em>) retrieval, where <em>n</em> is the number of elements in the dictionary. In this respect, it is similar to the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> generic class. The two classes have similar object models, and both have O(log <em>n</em>) retrieval. Where the two classes differ is in memory use and speed of insertion and removal:</p>\n<ul><li>\n<p>\n<xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> uses less memory than <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li><li>\n<p>\n<xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> has faster insertion and removal operations for unsorted data: O(log <em>n</em>) as opposed to O(<em>n</em>) for <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li><li>\n<p>If the list is populated all at once from sorted data, <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> is faster than <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li></ul>\n<p>Each key/value pair can be retrieved as a <xref href=\"System.Collections.Generic.KeyValuePair`2\" data-throw-if-not-resolved=\"false\"></xref> structure, or as a <xref href=\"System.Collections.DictionaryEntry\" data-throw-if-not-resolved=\"false\"></xref> through the nongeneric <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>Keys must be immutable as long as they are used as keys in the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>. Every key in a <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> must be unique. A key cannot be <strong>null</strong>, but a value can be, if the value type <em>TValue</em> is a reference type.</p>\n<p>\n<xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> requires a comparer implementation to perform key comparisons. You can specify an implementation of the <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface by using a constructor that accepts a <em>comparer</em> parameter; if you do not specify an implementation, the default genericcomparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> is used. If type <em>TKey</em> implements the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface, the default comparer uses that implementation.</p>\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in C++, <strong>For Each</strong> in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref href=\"System.Collections.Generic.KeyValuePair`2\" data-throw-if-not-resolved=\"false\"></xref>. The following code shows C#, C++, and Visual Basic syntax.</p>Generic.Dictionary#11<p>The <strong>foreach</strong> statement is a wrapper around the enumerator, which allows only reading from the collection, not writing to it.</p>"
  example:
  - "\n<p>The following code example creates an empty <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> of strings with string keys and uses the <xref href=\"System.Collections.Generic.SortedDictionary`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method to add some elements. The example demonstrates that the <xref href=\"System.Collections.Generic.SortedDictionary`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method throws an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> when attempting to add a duplicate key. </p>\n<p>The example uses the <xref href=\"System.Collections.Generic.SortedDictionary`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property (the indexer in C#) to retrieve values, demonstrating that a <xref href=\"System.Collections.Generic.KeyNotFoundException\" data-throw-if-not-resolved=\"false\"></xref> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced. </p>\n<p>The example shows how to use the <xref href=\"System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)\" data-throw-if-not-resolved=\"false\"></xref> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary, and it shows how to use the <xref href=\"System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to test whether a key exists before calling the <xref href=\"System.Collections.Generic.SortedDictionary`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The example shows how to enumerate the keys and values in the dictionary and how to enumerate the keys and values alone using the <xref href=\"System.Collections.Generic.SortedDictionary`2.Keys\" data-throw-if-not-resolved=\"false\"></xref> property and the <xref href=\"System.Collections.Generic.SortedDictionary`2.Values\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>Finally, the example demonstrates the <xref href=\"System.Collections.Generic.SortedDictionary`2.Remove(`0)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>Generic.SortedDictionary#1"
  syntax:
    content: 'public class SortedDictionary<TKey, TValue> : ICollection<KeyValuePair<TKey, TValue>>, IDictionary<TKey, TValue>, IEnumerable<KeyValuePair<TKey, TValue>>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>, ICollection, IDictionary, IEnumerable'
    content.vb: >-
      Public Class SortedDictionary(Of TKey, TValue)
          Inherits ICollection(Of KeyValuePair(Of TKey, TValue))
          Implements IDictionary(Of TKey, TValue), IEnumerable(Of KeyValuePair(Of TKey, TValue)), IReadOnlyCollection(Of KeyValuePair(Of TKey, TValue)), IReadOnlyDictionary(Of TKey, TValue), ICollection, IDictionary, IEnumerable
    typeParameters:
    - id: TKey
      description: "\n<p>The type of the keys in the dictionary.</p>\n"
    - id: TValue
      description: "\n<p>The type of the values in the dictionary.</p>\n"
  seealso:
  - type: System.Collections.SortedList
    commentId: T:System.Collections.SortedList
  - type: System.Collections.Generic.Dictionary`2
    commentId: T:System.Collections.Generic.Dictionary`2
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  - System.Collections.ICollection
  - System.Collections.IDictionary
  - System.Collections.IEnumerable
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue)
  name.vb: SortedDictionary(Of TKey, TValue)
- uid: System.Collections.Generic.SortedDictionary`2.#ctor
  commentId: M:System.Collections.Generic.SortedDictionary`2.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.SortedDictionary`2
  langs:
  - csharp
  - vb
  name: SortedDictionary()
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.SortedDictionary()
  type: Constructor
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 20
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class that is empty and uses the default <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation for the key type.</p>\n"
  remarks: "\n<p>Every key in a <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> must be unique according to the default comparer.</p>\n<p>\n<xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> requires a comparer implementation to perform key comparisons. This constructor uses the default generic equality comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>. If type <em>TKey</em> implements the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface, the default comparer uses that implementation. Alternatively, you can specify an implementation of the <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface by using a constructor that accepts a <em>comparer</em> parameter.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example creates an empty <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> of strings with string keys and uses the <xref href=\"System.Collections.Generic.SortedDictionary`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method to add some elements. The example demonstrates that the <xref href=\"System.Collections.Generic.SortedDictionary`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method throws an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> when attempting to add a duplicate key. </p>\n<p>This code example is part of a larger example provided for the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Generic.SortedDictionary#2"
  syntax:
    content: public SortedDictionary()
    content.vb: Public Sub New
  seealso:
  - type: System.Collections.Generic.Comparer`1.Default
    commentId: P:System.Collections.Generic.Comparer`1.Default
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.IComparable
    commentId: T:System.IComparable
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).SortedDictionary()
- uid: System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})
  id: '#ctor(System.Collections.Generic.IComparer{`0})'
  parent: System.Collections.Generic.SortedDictionary`2
  langs:
  - csharp
  - vb
  name: SortedDictionary(IComparer<TKey>)
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.SortedDictionary(System.Collections.Generic.IComparer<TKey>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 368
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class that is empty and uses the specified <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation to compare keys.</p>\n"
  remarks: "\n<p>Every key in a <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> must be unique according to the specified comparer.</p>\n<p>\n<xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> requires a comparer implementation to perform key comparisons. If <em>comparer</em> is <strong>null</strong>, this constructor uses the default generic equality comparer, <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>. If type <em>TKey</em> implements the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface, the default comparer uses that implementation.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example creates a <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> with a case-insensitive comparer for the current culture. The example adds four elements, some with lower-case keys and some with upper-case keys. The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message. Finally, the example displays the elements in case-insensitive sort order.</p>Generic.SortedDictionary.ctor_IComp#1"
  syntax:
    content: public SortedDictionary(IComparer<TKey> comparer)
    content.vb: Public Sub New(comparer As IComparer(Of TKey))
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing keys, or <strong>null</strong> to use the default <xref href=\"System.Collections.Generic.Comparer`1\" data-throw-if-not-resolved=\"false\"></xref> for the type of the key.</p>\n"
  seealso:
  - type: System.Collections.Generic.IComparer`1
    commentId: T:System.Collections.Generic.IComparer`1
  - type: System.Collections.Generic.Comparer`1.Default
    commentId: P:System.Collections.Generic.Comparer`1.Default
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.IComparable
    commentId: T:System.IComparable
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).SortedDictionary(System.Collections.Generic.IComparer(Of TKey))
  name.vb: SortedDictionary(IComparer(Of TKey))
- uid: System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  commentId: M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  id: '#ctor(System.Collections.Generic.IDictionary{`0,`1})'
  parent: System.Collections.Generic.SortedDictionary`2
  langs:
  - csharp
  - vb
  name: SortedDictionary(IDictionary<TKey, TValue>)
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.SortedDictionary(System.Collections.Generic.IDictionary<TKey, TValue>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 369
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class that contains elements copied from the specified <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> and uses the default <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation for the key type.</p>\n"
  remarks: "\n<p>Every key in a <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> must be unique according to the default comparer; therefore, every key in the source <em>dictionary</em> must also be unique according to the default comparer.</p>\n<p>\n<xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> requires a comparer implementation to perform key comparisons. This constructor uses the default generic equality comparer, <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>. If type <em>TKey</em> implements the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface, the default comparer uses that implementation. Alternatively, you can specify an implementation of the <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface by using a constructor that accepts a <em>comparer</em> parameter.</p>\n<p>This constructor is an O(<em>n</em> log <em>n</em>) operation, where <em>n</em> is the number of elements in <em>dictionary</em>.</p>\n"
  example:
  - "\n<p>The following code example shows how to use <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> to create a sorted copy of the information in a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>, by passing the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>Generic.SortedDictionary.ctor_IDic#1"
  syntax:
    content: public SortedDictionary(IDictionary<TKey, TValue> dictionary)
    content.vb: Public Sub New(dictionary As IDictionary(Of TKey, TValue))
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> whose elements are copied to the new <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>dictionary</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>dictionary</em> contains one or more duplicate keys.</p>\n"
  seealso:
  - type: System.Collections.Generic.IDictionary`2
    commentId: T:System.Collections.Generic.IDictionary`2
  - type: System.Collections.Generic.Comparer`1.Default
    commentId: P:System.Collections.Generic.Comparer`1.Default
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.IComparable
    commentId: T:System.IComparable
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).SortedDictionary(System.Collections.Generic.IDictionary(Of TKey, TValue))
  name.vb: SortedDictionary(IDictionary(Of TKey, TValue))
- uid: System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})
  id: '#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})'
  parent: System.Collections.Generic.SortedDictionary`2
  langs:
  - csharp
  - vb
  name: SortedDictionary(IDictionary<TKey, TValue>, IComparer<TKey>)
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.SortedDictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IComparer<TKey>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 370
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class that contains elements copied from the specified <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> and uses the specified <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation to compare keys.</p>\n"
  remarks: "\n<p>Every key in a <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> must be unique according to the specified comparer; therefore, every key in the source <em>dictionary</em> must also be unique according to the specified comparer.</p>\n<p>\n<xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> requires a comparer implementation to perform key comparisons. If <em>comparer</em> is <strong>null</strong>, this constructor uses the default generic equality comparer, <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>. If type <em>TKey</em> implements the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface, the default comparer uses that implementation.</p>\n<p>This constructor is an O(<em>n</em> log <em>n</em>) operation, where <em>n</em> is the number of elements in <em>dictionary</em>.</p>\n"
  example:
  - "\n<p>The following code example shows how to use <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> to create a case-insensitive sorted copy of the information in a case-insensitive <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>, by passing the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor. In this example, the case-insensitive comparers are for the current culture.</p>Generic.SortedDictionary.ctor_IDicIComp#1"
  syntax:
    content: public SortedDictionary(IDictionary<TKey, TValue> dictionary, IComparer<TKey> comparer)
    content.vb: Public Sub New(dictionary As IDictionary(Of TKey, TValue), comparer As IComparer(Of TKey))
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> whose elements are copied to the new <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing keys, or <strong>null</strong> to use the default <xref href=\"System.Collections.Generic.Comparer`1\" data-throw-if-not-resolved=\"false\"></xref> for the type of the key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>dictionary</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>dictionary</em> contains one or more duplicate keys.</p>\n"
  seealso:
  - type: System.Collections.Generic.IDictionary`2
    commentId: T:System.Collections.Generic.IDictionary`2
  - type: System.Collections.Generic.IComparer`1
    commentId: T:System.Collections.Generic.IComparer`1
  - type: System.Collections.Generic.Comparer`1.Default
    commentId: P:System.Collections.Generic.Comparer`1.Default
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.IComparable
    commentId: T:System.IComparable
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).SortedDictionary(System.Collections.Generic.IDictionary(Of TKey, TValue), System.Collections.Generic.IComparer(Of TKey))
  name.vb: SortedDictionary(IDictionary(Of TKey, TValue), IComparer(Of TKey))
- uid: System.Collections.Generic.SortedDictionary`2.Comparer
  commentId: P:System.Collections.Generic.SortedDictionary`2.Comparer
  id: Comparer
  parent: System.Collections.Generic.SortedDictionary`2
  langs:
  - csharp
  - vb
  name: Comparer
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.Comparer
  type: Property
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Comparer
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 140
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> used to order the elements of the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> requires a comparer implementation to perform key comparisons. You can specify an implementation of the <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface by using a constructor that accepts a <em>comparer</em> parameter. If you do not, the default generic equality comparer, <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>, is used. If type <em>TKey</em> implements the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface, the default comparer uses that implementation.</p>\n<p>Getting the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: public IComparer<TKey> Comparer { get; }
    content.vb: Public ReadOnly Property Comparer As IComparer(Of TKey)
    parameters: []
    return:
      type: System.Collections.Generic.IComparer{{TKey}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> used to order the elements of the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).Comparer
- uid: System.Collections.Generic.SortedDictionary`2.Count
  commentId: P:System.Collections.Generic.SortedDictionary`2.Count
  id: Count
  parent: System.Collections.Generic.SortedDictionary`2
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.Count
  type: Property
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 132
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the number of key/value pairs contained in the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Getting the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of key/value pairs contained in the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).Count
- uid: System.Collections.Generic.SortedDictionary`2.Item(`0)
  commentId: P:System.Collections.Generic.SortedDictionary`2.Item(`0)
  id: Item(`0)
  parent: System.Collections.Generic.SortedDictionary`2
  langs:
  - csharp
  - vb
  name: Item[TKey]
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.Item[TKey]
  type: Property
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 95
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets or sets the value associated with the specified key.</p>\n"
  remarks: "\n<p>This property provides the ability to access a specific element in the collection by using the following C# syntax: <code>myCollection[key]</code> (<code>myCollection(key)</code> in Visual Basic).</p>\n<p>You can also use the <xref href=\"System.Collections.Generic.SortedDictionary`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property to add new elements by setting the value of a key that does not exist in the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>; for example, <code>myCollection[\"myNonexistentKey\"] = myValue</code>. However, if the specified key already exists in the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>, setting the <xref href=\"System.Collections.Generic.SortedDictionary`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property overwrites the old value. In contrast, the <xref href=\"System.Collections.Generic.SortedDictionary`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method does not modify existing elements.</p>\n<p>A key cannot be <strong>null</strong>, but a value can be, if the value type <em>TValue</em> is a reference type.</p>\n<p>The C# language uses the  keyword to define the indexers instead of implementing the <xref href=\"System.Collections.Generic.SortedDictionary`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property. Visual Basic implements <xref href=\"System.Collections.Generic.SortedDictionary`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> as a default property, which provides the same indexing functionality.</p>\n<p>Getting the value of this property is an O(log <em>n</em>) operation; setting the property is also an O(log <em>n</em>) operation.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Collections.Generic.SortedDictionary`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property (the indexer in C#) to retrieve values, demonstrating that a <xref href=\"System.Collections.Generic.KeyNotFoundException\" data-throw-if-not-resolved=\"false\"></xref> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced. </p>\n<p>The example also shows how to use the <xref href=\"System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)\" data-throw-if-not-resolved=\"false\"></xref> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary.</p>\n<p>This code example is part of a larger example provided for the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Generic.SortedDictionary#3,4,5"
  syntax:
    content: public TValue this[TKey key] { get; set; }
    content.vb: Public Property Item(key As TKey) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key of the value to get or set.</p>\n"
    return:
      type: '{TValue}'
      description: "\n<p>The value associated with the specified key. If the specified key is not found, a get operation throws a <xref href=\"System.Collections.Generic.KeyNotFoundException\" data-throw-if-not-resolved=\"false\"></xref>, and a set operation creates a new element with the specified key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: "\n<p>The property is retrieved and <em>key</em> does not exist in the collection.</p>\n"
  seealso:
  - type: System.Collections.Generic.SortedDictionary`2.Add(`0,`1)
    commentId: M:System.Collections.Generic.SortedDictionary`2.Add(`0,`1)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
- uid: System.Collections.Generic.SortedDictionary`2.Keys
  commentId: P:System.Collections.Generic.SortedDictionary`2.Keys
  id: Keys
  parent: System.Collections.Generic.SortedDictionary`2
  langs:
  - csharp
  - vb
  name: Keys
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.Keys
  type: Property
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Keys
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 148
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets a collection containing the keys in the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The keys in the <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref> are sorted according to the <xref href=\"System.Collections.Generic.SortedDictionary`2.Comparer\" data-throw-if-not-resolved=\"false\"></xref> property and are in the same order as the associated values in the <xref href=\"System.Collections.Generic.SortedDictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref> returned by the <xref href=\"System.Collections.Generic.SortedDictionary`2.Values\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The returned <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref> is not a static copy; instead, the <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref> refers back to the keys in the original <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, changes to the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> continue to be reflected in the <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Getting the value of this property is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to enumerate the keys in the dictionary using the <xref href=\"System.Collections.Generic.SortedDictionary`2.Keys\" data-throw-if-not-resolved=\"false\"></xref> property, and how to enumerate the keys and values in the dictionary.</p>\n<p>This code is part of a larger example that can be compiled and executed. See <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>Generic.SortedDictionary#9,7"
  syntax:
    content: public SortedDictionary<TKey, TValue>.KeyCollection Keys { get; }
    content.vb: Public ReadOnly Property Keys As SortedDictionary(Of TKey, TValue).KeyCollection
    parameters: []
    return:
      type: System.Collections.Generic.SortedDictionary`2.KeyCollection
      description: "\n<p>A <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref> containing the keys in the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.SortedDictionary`2.KeyCollection
    commentId: T:System.Collections.Generic.SortedDictionary`2.KeyCollection
  - type: System.Collections.Generic.SortedDictionary`2.Values
    commentId: P:System.Collections.Generic.SortedDictionary`2.Values
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).Keys
- uid: System.Collections.Generic.SortedDictionary`2.Values
  commentId: P:System.Collections.Generic.SortedDictionary`2.Values
  id: Values
  parent: System.Collections.Generic.SortedDictionary`2
  langs:
  - csharp
  - vb
  name: Values
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.Values
  type: Property
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Values
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 173
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets a collection containing the values in the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The values in the <xref href=\"System.Collections.Generic.SortedDictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref> are sorted according to the <xref href=\"System.Collections.Generic.SortedDictionary`2.Comparer\" data-throw-if-not-resolved=\"false\"></xref> property, and are in the same order as the associated keys in the <xref href=\"System.Collections.Generic.SortedDictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref> returned by the <xref href=\"System.Collections.Generic.SortedDictionary`2.Keys\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The returned <xref href=\"System.Collections.Generic.SortedDictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref> is not a static copy; instead, the <xref href=\"System.Collections.Generic.SortedDictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref> refers back to the values in the original <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, changes to the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> continue to be reflected in the <xref href=\"System.Collections.Generic.SortedDictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Getting the value of this property is an O(1) operation.</p>\n"
  example:
  - "\n<p>This code example shows how to enumerate the values in the dictionary using the <xref href=\"System.Collections.Generic.SortedDictionary`2.Values\" data-throw-if-not-resolved=\"false\"></xref> property, and how to enumerate the keys and values in the dictionary.</p>\n<p>This code example is part of a larger example provided for the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Generic.SortedDictionary#8,7"
  syntax:
    content: public SortedDictionary<TKey, TValue>.ValueCollection Values { get; }
    content.vb: Public ReadOnly Property Values As SortedDictionary(Of TKey, TValue).ValueCollection
    parameters: []
    return:
      type: System.Collections.Generic.SortedDictionary`2.ValueCollection
      description: "\n<p>A <xref href=\"System.Collections.Generic.SortedDictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref> containing the values in the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.SortedDictionary`2.ValueCollection
    commentId: T:System.Collections.Generic.SortedDictionary`2.ValueCollection
  - type: System.Collections.Generic.SortedDictionary`2.Keys
    commentId: P:System.Collections.Generic.SortedDictionary`2.Keys
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).Values
- uid: System.Collections.Generic.SortedDictionary`2.Add(`0,`1)
  commentId: M:System.Collections.Generic.SortedDictionary`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: System.Collections.Generic.SortedDictionary`2
  langs:
  - csharp
  - vb
  name: Add(TKey, TValue)
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.Add(TKey, TValue)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 198
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Adds an element with the specified key and value into the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>You can also use the <xref href=\"System.Collections.Generic.SortedDictionary`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property to add new elements by setting the value of a key that does not exist in the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>; for example, <code>myCollection[\"myNonexistentKey\"] = myValue</code> (in Visual Basic, <code>myCollection(\"myNonexistantKey\") = myValue</code>). However, if the specified key already exists in the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>, setting the <xref href=\"System.Collections.Generic.SortedDictionary`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property overwrites the old value. In contrast, the <xref href=\"System.Collections.Generic.SortedDictionary`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref>method throws an exception if an element with the specified key already exists.</p>\n<p>A key cannot be <strong>null</strong>, but a value can be, if the value type <em>TValue</em> is a reference type.</p>\n<p>This method is an O(log <em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.SortedDictionary`2.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example creates an empty <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> of strings with string keys and uses the <xref href=\"System.Collections.Generic.SortedDictionary`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method to add some elements. The example demonstrates that the <xref href=\"System.Collections.Generic.SortedDictionary`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method throws an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> when attempting to add a duplicate key. </p>\n<p>This code example is part of a larger example provided for the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Generic.SortedDictionary#2"
  syntax:
    content: public void Add(TKey key, TValue value)
    content.vb: Public Sub Add(key As TKey, value As TValue)
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key of the element to add.</p>\n"
    - id: value
      type: '{TValue}'
      description: "\n<p>The value of the element to add. The value can be <strong>null</strong> for reference types.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An element with the same key already exists in the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.SortedDictionary`2.Remove(`0)
    commentId: M:System.Collections.Generic.SortedDictionary`2.Remove(`0)
  - type: System.Collections.Generic.SortedDictionary`2.Item(`0)
    commentId: P:System.Collections.Generic.SortedDictionary`2.Item(`0)
  - type: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    commentId: M:System.Collections.Generic.IDictionary`2.Add(`0,`1)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).Add(TKey, TValue)
- uid: System.Collections.Generic.SortedDictionary`2.Clear
  commentId: M:System.Collections.Generic.SortedDictionary`2.Clear
  id: Clear
  parent: System.Collections.Generic.SortedDictionary`2
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 207
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes all elements from the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.SortedDictionary`2.Count\" data-throw-if-not-resolved=\"false\"></xref> property is set to 0, and references to other objects from elements of the collection are also released.</p>\n<p>This method is an O(1) operation, since the root of the internal data structures is simply released for garbage collection.</p>\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).Clear()
- uid: System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)
  commentId: M:System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: System.Collections.Generic.SortedDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsKey(TKey)
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.ContainsKey(TKey)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContainsKey
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 212
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Determines whether the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> contains an element with the specified key.</p>\n"
  remarks: "\n<p>This method is an O(log <em>n</em>) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to use the <xref href=\"System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to test whether a key exists prior to calling the <xref href=\"System.Collections.Generic.SortedDictionary`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method. It also shows how to use the <xref href=\"System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve values, which is an efficient way to retrieve values when a program frequently tries keys that are not in the dictionary. Finally, it shows the least efficient way to test whether keys exist, by using the <xref href=\"System.Collections.Generic.SortedDictionary`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property (the indexer in C#).</p>\n<p>This code example is part of a larger example provided for the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Generic.SortedDictionary#6,5,4"
  syntax:
    content: public bool ContainsKey(TKey key)
    content.vb: Public Function ContainsKey(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key to locate in the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> contains an element with the specified key; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.SortedDictionary`2.ContainsValue(`1)
    commentId: M:System.Collections.Generic.SortedDictionary`2.ContainsValue(`1)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).ContainsKey(TKey)
- uid: System.Collections.Generic.SortedDictionary`2.ContainsValue(`1)
  commentId: M:System.Collections.Generic.SortedDictionary`2.ContainsValue(`1)
  id: ContainsValue(`1)
  parent: System.Collections.Generic.SortedDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsValue(TValue)
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.ContainsValue(TValue)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContainsValue
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 222
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Determines whether the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> contains an element with the specified value.</p>\n"
  remarks: "\n<p>This method determines equality using the default equality comparer <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> for the value type <em>TValue</em>. </p>\n<p>This method performs a linear search; therefore, the average execution time is proportional to the <xref href=\"System.Collections.Generic.SortedDictionary`2.Count\" data-throw-if-not-resolved=\"false\"></xref> property. That is, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.SortedDictionary`2.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public bool ContainsValue(TValue value)
    content.vb: Public Function ContainsValue(value As TValue) As Boolean
    parameters:
    - id: value
      type: '{TValue}'
      description: "\n<p>The value to locate in the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong> for reference types.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> contains an element with the specified value; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)
    commentId: M:System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)
  - type: System.Collections.Generic.EqualityComparer`1.Default
    commentId: P:System.Collections.Generic.EqualityComparer`1.Default
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).ContainsValue(TValue)
- uid: System.Collections.Generic.SortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  commentId: M:System.Collections.Generic.SortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  id: CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  parent: System.Collections.Generic.SortedDictionary`2
  langs:
  - csharp
  - vb
  name: CopyTo(KeyValuePair<TKey, TValue>[], Int32)
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 392
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Copies the elements of the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> to the specified array of <xref href=\"System.Collections.Generic.KeyValuePair`2\" data-throw-if-not-resolved=\"false\"></xref> structures, starting at the specified index.</p>\n"
  remarks: "\n<p>If the type of the source <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>, the nongeneric implementations of <xref href=\"System.Collections.ICollection.CopyTo(System.Array,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> throw <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref>, whereas the generic implementations throw <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.SortedDictionary`2.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void CopyTo(KeyValuePair<TKey, TValue>[] array, int index)
    content.vb: Public Sub CopyTo(array As KeyValuePair(Of TKey, TValue)(), index As Integer)
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[]
      description: "\n<p>The one-dimensional array of <xref href=\"System.Collections.Generic.KeyValuePair`2\" data-throw-if-not-resolved=\"false\"></xref> structures that is the destination of the elements copied from the current <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> The array must have zero-based indexing.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than 0.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The number of elements in the source <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).CopyTo(System.Collections.Generic.KeyValuePair(Of TKey, TValue)(), System.Int32)
  name.vb: CopyTo(KeyValuePair(Of TKey, TValue)(), Int32)
- uid: System.Collections.Generic.SortedDictionary`2.GetEnumerator
  commentId: M:System.Collections.Generic.SortedDictionary`2.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.SortedDictionary`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 258
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Returns an enumerator that iterates through the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>For purposes of enumeration, each item is a <xref href=\"System.Collections.Generic.KeyValuePair`2\" data-throw-if-not-resolved=\"false\"></xref> structure representing a value and its key.</p>\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in C++, <strong>For Each</strong> in Visual Basic) hides the complexity of enumerators. Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>The dictionary is maintained in a sorted order using an internal tree. Every new element is positioned at the correct sort position, and the tree is adjusted to maintain the sort order whenever an element is removed. While enumerating, the sort order is maintained.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. At this position, the <xref href=\"System.Collections.Generic.SortedDictionary`2.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property is undefined. Therefore, you must call the <xref href=\"System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.Generic.SortedDictionary`2.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Collections.Generic.SortedDictionary`2.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property returns the same element until the <xref href=\"System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method is called. <xref href=\"System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.Generic.SortedDictionary`2.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.Generic.SortedDictionary`2.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. You cannot set <xref href=\"System.Collections.Generic.SortedDictionary`2.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again; you must create a new enumerator instance instead.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>Default implementations of collections in the <xref href=\"System.Collections.Generic\" data-throw-if-not-resolved=\"false\"></xref> namespace are not synchronized.</p>\n<p>This method is an O(log n) operation, where n is count.</p>\n"
  syntax:
    content: public SortedDictionary<TKey, TValue>.Enumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As SortedDictionary(Of TKey, TValue).Enumerator
    return:
      type: System.Collections.Generic.SortedDictionary`2.Enumerator
      description: "\n<p>A <xref href=\"System.Collections.Generic.SortedDictionary`2.Enumerator\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.SortedDictionary`2.Enumerator
    commentId: T:System.Collections.Generic.SortedDictionary`2.Enumerator
  - type: System.Collections.Generic.IEnumerator`1
    commentId: T:System.Collections.Generic.IEnumerator`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).GetEnumerator()
- uid: System.Collections.Generic.SortedDictionary`2.Remove(`0)
  commentId: M:System.Collections.Generic.SortedDictionary`2.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.SortedDictionary`2
  langs:
  - csharp
  - vb
  name: Remove(TKey)
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.Remove(TKey)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 268
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes the element with the specified key from the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> does not contain an element with the specified key, the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> remains unchanged. No exception is thrown.</p>\n<p>This method is an O(log <em>n</em>) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to remove a key/value pair from the dictionary using the <xref href=\"System.Collections.Generic.SortedDictionary`2.Remove(`0)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>This code example is part of a larger example provided for the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Generic.SortedDictionary#10"
  syntax:
    content: public bool Remove(TKey key)
    content.vb: Public Function Remove(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key of the element to remove.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the element is successfully removed; otherwise, <strong>false</strong>.  This method also returns <strong>false</strong> if <em>key</em> is not found in the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.SortedDictionary`2.Add(`0,`1)
    commentId: M:System.Collections.Generic.SortedDictionary`2.Add(`0,`1)
  - type: System.Collections.Generic.IDictionary`2.Remove(`0)
    commentId: M:System.Collections.Generic.IDictionary`2.Remove(`0)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).Remove(TKey)
- uid: System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)
  commentId: M:System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: System.Collections.Generic.SortedDictionary`2
  langs:
  - csharp
  - vb
  name: TryGetValue(TKey, out TValue)
  fullName: System.Collections.Generic.SortedDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryGetValue
    path: src/System.Collections/src/System/Collections/Generic/SortedDictionary.cs
    startLine: 278
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the value associated with the specified key.</p>\n"
  remarks: "\n<p>This method combines the functionality of the <xref href=\"System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)\" data-throw-if-not-resolved=\"false\"></xref> method and the <xref href=\"System.Collections.Generic.SortedDictionary`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If the key is not found, then the <em>value</em> parameter gets the appropriate default value for the value type <em>TValue</em>; for example, 0 (zero) for integer types, <strong>false</strong> for Boolean types, and <strong>null</strong> for reference types.</p>\n<p>This method is an O(log <em>n</em>) operation.</p>\n"
  example:
  - "\n<p>The example shows how to use the <xref href=\"System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)\" data-throw-if-not-resolved=\"false\"></xref> method as a more efficient way to retrieve values in a program that frequently tries keys that are not in the dictionary. For contrast, the example also shows how the <xref href=\"System.Collections.Generic.SortedDictionary`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property (the indexer in C#) throws exceptions when attempting to retrieve nonexistent keys.</p>\n<p>This code example is part of a larger example provided for the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Generic.SortedDictionary#5,4"
  syntax:
    content: public bool TryGetValue(TKey key, out TValue value)
    content.vb: Public Function TryGetValue(key As TKey, ByRef value As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key of the value to get.</p>\n"
    - id: value
      type: '{TValue}'
      description: "\n<p>When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <em>value</em> parameter. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> contains an element with the specified key; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)
    commentId: M:System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)
  - type: System.Collections.Generic.SortedDictionary`2.Item(`0)
    commentId: P:System.Collections.Generic.SortedDictionary`2.Item(`0)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedDictionary(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)
  name.vb: TryGetValue(TKey, ByRef TValue)
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2
  name: Generic.IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: Generic.IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Generic.IEnumerable(Of Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: Generic.IReadOnlyCollection<Generic.KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Generic.IReadOnlyCollection(Of Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: Generic.IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: Generic.IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: Generic.IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: Generic.IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Collections.Generic.IDictionary<, >
  fullName: System.Collections.Generic.IDictionary<, >
  fullname.vb: System.Collections.Generic.IDictionary(Of , )
  name.vb: Collections.Generic.IDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: Generic.IReadOnlyCollection<>
  fullName: System.Collections.Generic.IReadOnlyCollection<>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of )
  name.vb: Generic.IReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: false
  name: Generic.IReadOnlyDictionary<, >
  fullName: System.Collections.Generic.IReadOnlyDictionary<, >
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of , )
  name.vb: Generic.IReadOnlyDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: Generic.IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: Generic.IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IComparer{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: Collections.Generic.IComparer<TKey>
  fullName: System.Collections.Generic.IComparer<TKey>
  fullname.vb: System.Collections.Generic.IComparer(Of TKey)
  name.vb: Collections.Generic.IComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IComparer<>
  fullName: System.Collections.Generic.IComparer<>
  fullname.vb: System.Collections.Generic.IComparer(Of )
  name.vb: Collections.Generic.IComparer(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: '{TKey}'
  isExternal: false
  name: TKey
  fullName: TKey
- uid: '{TValue}'
  isExternal: false
  name: TValue
  fullName: TValue
- uid: System.Collections.Generic.SortedDictionary`2.KeyCollection
  parent: System.Collections.Generic
  isExternal: false
  name: SortedDictionary.KeyCollection<>
  fullName: System.Collections.Generic.SortedDictionary.KeyCollection<>
  fullname.vb: System.Collections.Generic.SortedDictionary.KeyCollection(Of )
  name.vb: SortedDictionary.KeyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.SortedDictionary`2.KeyCollection
    name: SortedDictionary.KeyCollection
    fullName: System.Collections.Generic.SortedDictionary.KeyCollection
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.SortedDictionary`2.KeyCollection
    name: SortedDictionary.KeyCollection
    fullName: System.Collections.Generic.SortedDictionary.KeyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.Collections.Generic.SortedDictionary`2.ValueCollection
  parent: System.Collections.Generic
  isExternal: false
  name: SortedDictionary.ValueCollection<>
  fullName: System.Collections.Generic.SortedDictionary.ValueCollection<>
  fullname.vb: System.Collections.Generic.SortedDictionary.ValueCollection(Of )
  name.vb: SortedDictionary.ValueCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.SortedDictionary`2.ValueCollection
    name: SortedDictionary.ValueCollection
    fullName: System.Collections.Generic.SortedDictionary.ValueCollection
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.SortedDictionary`2.ValueCollection
    name: SortedDictionary.ValueCollection
    fullName: System.Collections.Generic.SortedDictionary.ValueCollection
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[]
  isExternal: true
  name: KeyValuePair<TKey, TValue>[]
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>[]
  fullname.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)()
  name.vb: KeyValuePair(Of TKey, TValue)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.SortedDictionary`2.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: SortedDictionary.Enumerator<>
  fullName: System.Collections.Generic.SortedDictionary.Enumerator<>
  fullname.vb: System.Collections.Generic.SortedDictionary.Enumerator(Of )
  name.vb: SortedDictionary.Enumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.SortedDictionary`2.Enumerator
    name: SortedDictionary.Enumerator
    fullName: System.Collections.Generic.SortedDictionary.Enumerator
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.SortedDictionary`2.Enumerator
    name: SortedDictionary.Enumerator
    fullName: System.Collections.Generic.SortedDictionary.Enumerator
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Collections.Generic.KeyNotFoundException
  isExternal: false
  name: KeyNotFoundException
  fullName: System.Collections.Generic.KeyNotFoundException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
