items:
- uid: System.ComponentModel.RunWorkerCompletedEventArgs
  commentId: T:System.ComponentModel.RunWorkerCompletedEventArgs
  id: RunWorkerCompletedEventArgs
  parent: System.ComponentModel
  children:
  - System.ComponentModel.RunWorkerCompletedEventArgs.#ctor(System.Object,System.Exception,System.Boolean)
  - System.ComponentModel.RunWorkerCompletedEventArgs.Result
  - System.ComponentModel.RunWorkerCompletedEventArgs.UserState
  langs:
  - csharp
  - vb
  name: RunWorkerCompletedEventArgs
  fullName: System.ComponentModel.RunWorkerCompletedEventArgs
  type: Class
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/RunWorkerCompletedEvent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RunWorkerCompletedEventArgs
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/RunWorkerCompletedEvent.cs
    startLine: 8
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Provides data for the MethodName<strong>Completed</strong> event.</p>\n"
  remarks: "\n<p>If you are using a class that implements the Event-based Asynchronous Pattern Overview, the class provides a MethodName<strong>Completed</strong> event. MethodName is a placeholder for the first part of the method's name. <xref href=\"System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> is an example of the name of such a method. If you add an instance of the <xref href=\"System.ComponentModel.RunWorkerCompletedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> delegate to the event, you will receive information about the outcome of asynchronous operations in the <xref href=\"System.ComponentModel.RunWorkerCompletedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> parameter of the corresponding event handler.</p>\n<p>The <xref href=\"System.Security.Permissions.HostProtectionAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute applied to this class has the following <xref href=\"System.Security.Permissions.HostProtectionAttribute.Resources\" data-throw-if-not-resolved=\"false\"></xref> property value: <xref href=\"System.Security.Permissions.HostProtectionResource.SharedState\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Security.Permissions.HostProtectionAttribute\" data-throw-if-not-resolved=\"false\"></xref> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the <xref href=\"System.Security.Permissions.HostProtectionAttribute\" data-throw-if-not-resolved=\"false\"></xref> class or SQL Server Programming and Host Protection Attributes.</p>\n"
  example:
  - "\n<p>The following code example illustrates the use of <xref href=\"System.ComponentModel.RunWorkerCompletedEventArgs\" data-throw-if-not-resolved=\"false\"></xref>. This example is part of a larger sample for the <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.ComponentModel.BackgroundWorker#6"
  syntax:
    content: 'public class RunWorkerCompletedEventArgs : AsyncCompletedEventArgs'
    content.vb: >-
      Public Class RunWorkerCompletedEventArgs
          Inherits AsyncCompletedEventArgs
  seealso:
  - type: System.ComponentModel.BackgroundWorker
    commentId: T:System.ComponentModel.BackgroundWorker
  inheritance:
  - System.Object
  - System.ComponentModel.AsyncCompletedEventArgs
  inheritedMembers:
  - System.ComponentModel.AsyncCompletedEventArgs.Cancelled
  - System.ComponentModel.AsyncCompletedEventArgs.Error
  - System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.ComponentModel.RunWorkerCompletedEventArgs.#ctor(System.Object,System.Exception,System.Boolean)
  commentId: M:System.ComponentModel.RunWorkerCompletedEventArgs.#ctor(System.Object,System.Exception,System.Boolean)
  id: '#ctor(System.Object,System.Exception,System.Boolean)'
  parent: System.ComponentModel.RunWorkerCompletedEventArgs
  langs:
  - csharp
  - vb
  name: RunWorkerCompletedEventArgs(Object, Exception, Boolean)
  fullName: System.ComponentModel.RunWorkerCompletedEventArgs.RunWorkerCompletedEventArgs(System.Object, System.Exception, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/ref/System.ComponentModel.EventBasedAsync.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.EventBasedAsync/ref/System.ComponentModel.EventBasedAsync.cs
    startLine: 72
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.RunWorkerCompletedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public RunWorkerCompletedEventArgs(object result, Exception error, bool cancelled)
    content.vb: Public Sub New(result As Object, error As Exception, cancelled As Boolean)
    parameters:
    - id: result
      type: System.Object
      description: "\n<p>The result of an asynchronous operation.</p>\n"
    - id: error
      type: System.Exception
      description: "\n<p>Any error that occurred during the asynchronous operation.</p>\n"
    - id: cancelled
      type: System.Boolean
      description: "\n<p>A value indicating whether the asynchronous operation was canceled.</p>\n"
  seealso:
  - type: System.ComponentModel.BackgroundWorker
    commentId: T:System.ComponentModel.BackgroundWorker
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.RunWorkerCompletedEventArgs.Result
  commentId: P:System.ComponentModel.RunWorkerCompletedEventArgs.Result
  id: Result
  parent: System.ComponentModel.RunWorkerCompletedEventArgs
  langs:
  - csharp
  - vb
  name: Result
  fullName: System.ComponentModel.RunWorkerCompletedEventArgs.Result
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/RunWorkerCompletedEvent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Result
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/RunWorkerCompletedEvent.cs
    startLine: 20
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Gets a value that represents the result of an asynchronous operation.</p>\n"
  remarks: "\n<p>Your <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerCompleted\" data-throw-if-not-resolved=\"false\"></xref> event handler should always check the <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Error\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Cancelled\" data-throw-if-not-resolved=\"false\"></xref> properties before accessing the <xref href=\"System.ComponentModel.RunWorkerCompletedEventArgs.Result\" data-throw-if-not-resolved=\"false\"></xref> property. If an exception was raised or if the operation was canceled, accessing the <xref href=\"System.ComponentModel.RunWorkerCompletedEventArgs.Result\" data-throw-if-not-resolved=\"false\"></xref> property raises an exception. </p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerCompleted\" data-throw-if-not-resolved=\"false\"></xref> event to handle the result of an asynchronous operation. This code example is part of a larger example provided for the <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.ComponentModel.BackgroundWorker#6"
  syntax:
    content: public object Result { get; }
    content.vb: Public ReadOnly Property Result As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> representing the result of an asynchronous operation.</p>\n"
  exceptions:
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: "\n<p>\n<xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Error\" data-throw-if-not-resolved=\"false\"></xref> is not <strong>null</strong>. The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property holds a reference to <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Error\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Cancelled\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.BackgroundWorker
    commentId: T:System.ComponentModel.BackgroundWorker
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.ComponentModel.RunWorkerCompletedEventArgs.UserState
  commentId: P:System.ComponentModel.RunWorkerCompletedEventArgs.UserState
  id: UserState
  parent: System.ComponentModel.RunWorkerCompletedEventArgs
  langs:
  - csharp
  - vb
  name: UserState
  fullName: System.ComponentModel.RunWorkerCompletedEventArgs.UserState
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/RunWorkerCompletedEvent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UserState
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/RunWorkerCompletedEvent.cs
    startLine: 30
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Gets a value that represents the user state.</p>\n"
  syntax:
    content: public object UserState { get; }
    content.vb: Public ReadOnly Property UserState As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> representing the user state.</p>\n"
  seealso:
  - type: System.ComponentModel.BackgroundWorker
    commentId: T:System.ComponentModel.BackgroundWorker
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.ComponentModel
  isExternal: false
  name: System.ComponentModel
  fullName: System.ComponentModel
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.ComponentModel.AsyncCompletedEventArgs
  parent: System.ComponentModel
  isExternal: false
  name: AsyncCompletedEventArgs
  fullName: System.ComponentModel.AsyncCompletedEventArgs
- uid: System.ComponentModel.AsyncCompletedEventArgs.Cancelled
  parent: System.ComponentModel.AsyncCompletedEventArgs
  isExternal: false
  name: Cancelled
  fullName: System.ComponentModel.AsyncCompletedEventArgs.Cancelled
- uid: System.ComponentModel.AsyncCompletedEventArgs.Error
  parent: System.ComponentModel.AsyncCompletedEventArgs
  isExternal: false
  name: Error
  fullName: System.ComponentModel.AsyncCompletedEventArgs.Error
- uid: System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary
  parent: System.ComponentModel.AsyncCompletedEventArgs
  isExternal: false
  name: RaiseExceptionIfNecessary()
  fullName: System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary()
  spec.csharp:
  - uid: System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary
    name: RaiseExceptionIfNecessary
    fullName: System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary
    name: RaiseExceptionIfNecessary
    fullName: System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Reflection.TargetInvocationException
  isExternal: false
  name: TargetInvocationException
  fullName: System.Reflection.TargetInvocationException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
