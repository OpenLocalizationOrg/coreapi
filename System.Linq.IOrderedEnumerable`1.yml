items:
- uid: System.Linq.IOrderedEnumerable`1
  commentId: T:System.Linq.IOrderedEnumerable`1
  id: IOrderedEnumerable`1
  parent: System.Linq
  children:
  - System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)
  langs:
  - csharp
  - vb
  name: IOrderedEnumerable<TElement>
  fullName: System.Linq.IOrderedEnumerable<TElement>
  type: Interface
  source:
    remote:
      path: src/System.Linq/src/System/Linq/OrderBy.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IOrderedEnumerable
    path: src/System.Linq/src/System/Linq/OrderBy.cs
    startLine: 71
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Represents a sorted sequence.</p>\n"
  remarks: "\n<p>This type is enumerable because it inherits from <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The extension methods <see cref=\"Overload:System.Linq.Enumerable.ThenBy\"></see> and <see cref=\"Overload:System.Linq.Enumerable.ThenByDescending\"></see> operate on objects of type <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>. An object of type <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> can be obtained by calling one of the primary sort methods, <see cref=\"Overload:System.Linq.Enumerable.OrderBy\"></see> or <see cref=\"Overload:System.Linq.Enumerable.OrderByDescending\"></see>, which return an <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>. <see cref=\"Overload:System.Linq.Enumerable.ThenBy\"></see> and <see cref=\"Overload:System.Linq.Enumerable.ThenByDescending\"></see>, the subordinate sort methods, in turn also return an object of type <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>. This design allows for any number of consecutive calls to <see cref=\"Overload:System.Linq.Enumerable.ThenBy\"></see> or <see cref=\"Overload:System.Linq.Enumerable.ThenByDescending\"></see>, where each call performs a subordinate ordering on the sorted data returned from the previous call.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to perform a primary and secondary ordering on an array of strings. It also demonstrates that the resulting <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> is enumerable.</p>System.Linq.IOrderedEnumerable#1"
  syntax:
    content: 'public interface IOrderedEnumerable<TElement> : Collections.Generic.IEnumerable<TElement>, Collections.IEnumerable'
    content.vb: >-
      Public Interface IOrderedEnumerable(Of TElement)
          Inherits Collections.Generic.IEnumerable(Of TElement), Collections.IEnumerable
    typeParameters:
    - id: TElement
      description: "\n<p>The type of the elements of the sequence.</p>\n"
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: System.Linq.IOrderedEnumerable(Of TElement)
  name.vb: IOrderedEnumerable(Of TElement)
- uid: System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)
  commentId: M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)
  id: CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)
  parent: System.Linq.IOrderedEnumerable`1
  langs:
  - csharp
  - vb
  name: CreateOrderedEnumerable<TKey>(Func<TElement, TKey>, Collections.Generic.IComparer<TKey>, Boolean)
  fullName: System.Linq.IOrderedEnumerable<TElement>.CreateOrderedEnumerable<TKey>(System.Func<TElement, TKey>, System.Collections.Generic.IComparer<TKey>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateOrderedEnumerable
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 202
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Performs a subsequent ordering on the elements of an <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> according to a key.</p>\n"
  remarks: "\n<p>The functionality provided by this method is like that provided by <see cref=\"Overload:System.Linq.Enumerable.ThenBy\"></see> or <see cref=\"Overload:System.Linq.Enumerable.ThenByDescending\"></see>, depending on whether <em>descending</em> is <strong>true</strong> or <strong>false</strong>. They both perform a subordinate ordering of an already sorted sequence of type <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use <xref href=\"System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> to perform a secondary ordering on an <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Linq.IOrderedEnumerable#2"
  syntax:
    content: IOrderedEnumerable<TElement> CreateOrderedEnumerable<TKey>(Func<TElement, TKey> keySelector, Collections.Generic.IComparer<TKey> comparer, bool descending)
    content.vb: Function CreateOrderedEnumerable(Of TKey)(keySelector As Func(Of TElement, TKey), comparer As Collections.Generic.IComparer(Of TKey), descending As Boolean) As IOrderedEnumerable(Of TElement)
    parameters:
    - id: keySelector
      type: System.Func{{TElement},{TKey}}
      description: "\n<p>The <xref href=\"System.Func`2\" data-throw-if-not-resolved=\"false\"></xref> used to extract the key for each element.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> used to compare keys for placement in the returned sequence.</p>\n"
    - id: descending
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to sort the elements in descending order; <strong>false</strong> to sort the elements in ascending order.</p>\n"
    typeParameters:
    - id: TKey
      description: "\n<p>The type of the key produced by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.IOrderedEnumerable`1
      description: "\n<p>An <xref href=\"System.Linq.IOrderedEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements are sorted according to a key.</p>\n"
  fullName.vb: System.Linq.IOrderedEnumerable(Of TElement).CreateOrderedEnumerable(Of TKey)(System.Func(Of TElement, TKey), System.Collections.Generic.IComparer(Of TKey), System.Boolean)
  name.vb: CreateOrderedEnumerable(Of TKey)(Func(Of TElement, TKey), Collections.Generic.IComparer(Of TKey), Boolean)
references:
- uid: System.Linq
  isExternal: false
  name: System.Linq
  fullName: System.Linq
- uid: System.Func{{TElement},{TKey}}
  definition: System.Func`2
  name: Func<TElement, TKey>
  fullName: System.Func<TElement, TKey>
  fullname.vb: System.Func(Of TElement, TKey)
  name.vb: Func(Of TElement, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: Collections.Generic.IComparer<TKey>
  fullName: System.Collections.Generic.IComparer<TKey>
  fullname.vb: System.Collections.Generic.IComparer(Of TKey)
  name.vb: Collections.Generic.IComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Linq.IOrderedEnumerable`1
  parent: System.Linq
  isExternal: false
  name: IOrderedEnumerable<TElement>
  fullName: System.Linq.IOrderedEnumerable<TElement>
  fullname.vb: System.Linq.IOrderedEnumerable(Of TElement)
  name.vb: IOrderedEnumerable(Of TElement)
  spec.csharp:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedEnumerable`1
    name: IOrderedEnumerable
    fullName: System.Linq.IOrderedEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Func`2
  isExternal: false
  name: Func<, >
  fullName: System.Func<, >
  fullname.vb: System.Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IComparer<>
  fullName: System.Collections.Generic.IComparer<>
  fullname.vb: System.Collections.Generic.IComparer(Of )
  name.vb: Collections.Generic.IComparer(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System
  isExternal: false
  name: System
  fullName: System
