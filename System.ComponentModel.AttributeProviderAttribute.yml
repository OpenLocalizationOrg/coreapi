items:
- uid: System.ComponentModel.AttributeProviderAttribute
  commentId: T:System.ComponentModel.AttributeProviderAttribute
  id: AttributeProviderAttribute
  parent: System.ComponentModel
  children:
  - System.ComponentModel.AttributeProviderAttribute.#ctor(System.String)
  - System.ComponentModel.AttributeProviderAttribute.#ctor(System.String,System.String)
  - System.ComponentModel.AttributeProviderAttribute.#ctor(System.Type)
  - System.ComponentModel.AttributeProviderAttribute.PropertyName
  - System.ComponentModel.AttributeProviderAttribute.TypeName
  langs:
  - csharp
  - vb
  name: AttributeProviderAttribute
  fullName: System.ComponentModel.AttributeProviderAttribute
  type: Class
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeProviderAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AttributeProviderAttribute
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeProviderAttribute.cs
    startLine: 9
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Enables attribute redirection. This class cannot be inherited.</p>\n"
  remarks: "\n<p>There are a few cases in the .NET Framework object model where a property is purposely typed to be vague. For example, the <xref href=\"System.Windows.Forms.DataGridView.DataSource\" data-throw-if-not-resolved=\"false\"></xref> property is typed as <strong>object</strong>. The reason for this is that this property can accept several types of input. Unfortunately, this provides no common place to add metadata to describe the characteristics of the property. Each <code>DataSource</code> property throughout the .NET Framework needs to have identical metadata for type converters, UI type editors, and other services that require metadata. The <xref href=\"System.ComponentModel.AttributeProviderAttribute\" data-throw-if-not-resolved=\"false\"></xref> remedies this situation.</p>\n<p>Once this attribute is placed on a property, the rules for obtaining attributes for the property descriptor's <xref href=\"System.ComponentModel.MemberDescriptor.Attributes\" data-throw-if-not-resolved=\"false\"></xref> collection differ. Typically, the property descriptor gathers local attributes, and then merges these with attributes from the property type. In this case, the attributes are taken from the type returned from the <xref href=\"System.ComponentModel.AttributeProviderAttribute\" data-throw-if-not-resolved=\"false\"></xref>, not from the actual property type. This attribute is used on <xref href=\"System.Windows.Forms.DataGridView.DataSource\" data-throw-if-not-resolved=\"false\"></xref> to point the <xref href=\"System.Windows.Forms.DataGridView.DataSource\" data-throw-if-not-resolved=\"false\"></xref> object's specific type to <xref href=\"System.ComponentModel.IListSource\" data-throw-if-not-resolved=\"false\"></xref>, and the appropriate metadata is placed on <xref href=\"System.ComponentModel.IListSource\" data-throw-if-not-resolved=\"false\"></xref> to enable data binding. In so doing, external parties can easily add metadata to all data sources.</p>\n<p>Attributes obtained from a type declared in the <xref href=\"System.ComponentModel.AttributeProviderAttribute\" data-throw-if-not-resolved=\"false\"></xref> have a priority in between the attributes of the propertyâ€™s type and the attributes on the property. The following list, in priority order, shows the full set of available merged attributes:</p>\n<ul><li>\n<p>Property Attributes</p>\n</li><li>\n<p>Attribute Provider Attributes</p>\n</li><li>\n<p>Property Type Attributes</p>\n</li></ul>\n"
  example:
  - "\n<p>The following code example demonstrates using <xref href=\"System.ComponentModel.AttributeProviderAttribute\" data-throw-if-not-resolved=\"false\"></xref> to mark a <code>DataSource</code> property with a specific type of <xref href=\"System.ComponentModel.IListSource\" data-throw-if-not-resolved=\"false\"></xref>. For a full code listing, see How to: Apply Attributes in Windows Forms Controls.</p>System.ComponentModel.AttributesDemoControl#25"
  syntax:
    content: 'public class AttributeProviderAttribute : Attribute'
    content.vb: >-
      Public Class AttributeProviderAttribute
          Inherits Attribute
  seealso:
  - type: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.ComponentModel.AttributeProviderAttribute.#ctor(System.String)
  commentId: M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.ComponentModel.AttributeProviderAttribute
  langs:
  - csharp
  - vb
  name: AttributeProviderAttribute(String)
  fullName: System.ComponentModel.AttributeProviderAttribute.AttributeProviderAttribute(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeProviderAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeProviderAttribute.cs
    startLine: 20
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.AttributeProviderAttribute\" data-throw-if-not-resolved=\"false\"></xref> class with the given type name.</p>\n"
  syntax:
    content: public AttributeProviderAttribute(string typeName)
    content.vb: Public Sub New(typeName As String)
    parameters:
    - id: typeName
      type: System.String
      description: "\n<p>The name of the type to specify.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>typeName</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.AttributeProviderAttribute.#ctor(System.String,System.String)
  commentId: M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.ComponentModel.AttributeProviderAttribute
  langs:
  - csharp
  - vb
  name: AttributeProviderAttribute(String, String)
  fullName: System.ComponentModel.AttributeProviderAttribute.AttributeProviderAttribute(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeProviderAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeProviderAttribute.cs
    startLine: 34
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.AttributeProviderAttribute\" data-throw-if-not-resolved=\"false\"></xref> class with the given type name and property name.</p>\n"
  syntax:
    content: public AttributeProviderAttribute(string typeName, string propertyName)
    content.vb: Public Sub New(typeName As String, propertyName As String)
    parameters:
    - id: typeName
      type: System.String
      description: "\n<p>The name of the type to specify.</p>\n"
    - id: propertyName
      type: System.String
      description: "\n<p>The name of the property for which attributes will be retrieved.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>typeName</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>propertyName</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.AttributeProviderAttribute.#ctor(System.Type)
  commentId: M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.Type)
  id: '#ctor(System.Type)'
  parent: System.ComponentModel.AttributeProviderAttribute
  langs:
  - csharp
  - vb
  name: AttributeProviderAttribute(Type)
  fullName: System.ComponentModel.AttributeProviderAttribute.AttributeProviderAttribute(System.Type)
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
    startLine: 41
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.AttributeProviderAttribute\" data-throw-if-not-resolved=\"false\"></xref> class with the given type.</p>\n"
  example:
  - "\n<p>The following code example demonstrates using <xref href=\"System.ComponentModel.AttributeProviderAttribute\" data-throw-if-not-resolved=\"false\"></xref> to mark a <code>DataSource</code> property with a specific type of <xref href=\"System.ComponentModel.IListSource\" data-throw-if-not-resolved=\"false\"></xref>. For a full code listing, see How to: Apply Attributes in Windows Forms Controls.</p>System.ComponentModel.AttributesDemoControl#25"
  syntax:
    content: public AttributeProviderAttribute(Type type)
    content.vb: Public Sub New(type As Type)
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type to specify.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.AttributeProviderAttribute.PropertyName
  commentId: P:System.ComponentModel.AttributeProviderAttribute.PropertyName
  id: PropertyName
  parent: System.ComponentModel.AttributeProviderAttribute
  langs:
  - csharp
  - vb
  name: PropertyName
  fullName: System.ComponentModel.AttributeProviderAttribute.PropertyName
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeProviderAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PropertyName
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeProviderAttribute.cs
    startLine: 80
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets the name of the property for which attributes will be retrieved.</p>\n"
  syntax:
    content: public string PropertyName { get; }
    content.vb: Public ReadOnly Property PropertyName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the property for which attributes will be retrieved.</p>\n"
  seealso:
  - type: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.ComponentModel.AttributeProviderAttribute.TypeName
  commentId: P:System.ComponentModel.AttributeProviderAttribute.TypeName
  id: TypeName
  parent: System.ComponentModel.AttributeProviderAttribute
  langs:
  - csharp
  - vb
  name: TypeName
  fullName: System.ComponentModel.AttributeProviderAttribute.TypeName
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeProviderAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeName
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/AttributeProviderAttribute.cs
    startLine: 68
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets the assembly qualified type name passed into the constructor.</p>\n"
  syntax:
    content: public string TypeName { get; }
    content.vb: Public ReadOnly Property TypeName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The assembly qualified name of the type specified in the constructor.</p>\n"
  seealso:
  - type: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.ComponentModel
  isExternal: false
  name: System.ComponentModel
  fullName: System.ComponentModel
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
