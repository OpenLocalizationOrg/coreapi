items:
- uid: System.ComponentModel.DataAnnotations.UIHintAttribute
  commentId: T:System.ComponentModel.DataAnnotations.UIHintAttribute
  id: UIHintAttribute
  parent: System.ComponentModel.DataAnnotations
  children:
  - System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String)
  - System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String,System.String)
  - System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String,System.String,System.Object[])
  - System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters
  - System.ComponentModel.DataAnnotations.UIHintAttribute.Equals(System.Object)
  - System.ComponentModel.DataAnnotations.UIHintAttribute.GetHashCode
  - System.ComponentModel.DataAnnotations.UIHintAttribute.PresentationLayer
  - System.ComponentModel.DataAnnotations.UIHintAttribute.UIHint
  langs:
  - csharp
  - vb
  name: UIHintAttribute
  fullName: System.ComponentModel.DataAnnotations.UIHintAttribute
  type: Class
  source:
    remote:
      path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/UIHintAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UIHintAttribute
    path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/UIHintAttribute.cs
    startLine: 14
  assemblies:
  - System.ComponentModel.Annotations
  namespace: System.ComponentModel.DataAnnotations
  summary: "\n<p>Specifies the template or user control that Dynamic Data uses to display a data field. </p>\n"
  remarks: "\n<p>A Visual Studio project with source code is available to accompany this topic: <see href=\"http://go.microsoft.com/fwlink/?linkid=158686\">Download</see>. </p>\n<p>MVC uses the <xref href=\"System.ComponentModel.DataAnnotations.UIHintAttribute\" data-throw-if-not-resolved=\"false\"></xref> class to associate a model with a data field. Dynamic Data uses the <xref href=\"System.ComponentModel.DataAnnotations.UIHintAttribute\" data-throw-if-not-resolved=\"false\"></xref> class to associate a user control with a data field. Dynamic Data uses the <xref href=\"System.ComponentModel.DataAnnotations.UIHintAttribute.UIHint\" data-throw-if-not-resolved=\"false\"></xref><strong></strong>property to determine which user control to use in order to display a data field.</p>\n<p>For more information about how to use attributes, see Extending Metadata Using Attributes.</p>\n"
  example:
  - "\n<p>The following example shows how to use the <xref href=\"System.ComponentModel.DataAnnotations.UIHintAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute to specify the name of a custom field template that will handle the display and editing of a data field. </p>\n<p>For a complete example, see How to: Customize Data Field Display in the Data Model.</p>DynamicData.CustomFieldTemplate#5"
  syntax:
    content: 'public class UIHintAttribute : Attribute'
    content.vb: >-
      Public Class UIHintAttribute
          Inherits Attribute
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String)
  commentId: M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.ComponentModel.DataAnnotations.UIHintAttribute
  langs:
  - csharp
  - vb
  name: UIHintAttribute(String)
  fullName: System.ComponentModel.DataAnnotations.UIHintAttribute.UIHintAttribute(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/UIHintAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/UIHintAttribute.cs
    startLine: 23
  assemblies:
  - System.ComponentModel.Annotations
  namespace: System.ComponentModel.DataAnnotations
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.DataAnnotations.UIHintAttribute\" data-throw-if-not-resolved=\"false\"></xref> class by using a specified user control. </p>\n"
  remarks: "\n<p>A <xref href=\"System.ComponentModel.DataAnnotations.UIHintAttribute\" data-throw-if-not-resolved=\"false\"></xref> object that is created with this constructor is initialized using the specified <em>uiHint</em>, which specifies the user control (field template) to use in order to display the data field. </p>\n<p>ASP.NET Dynamic Data provides field templates, page templates, and data controls to render data fields in a data model. You can modify these templates and controls to customize them, or you can create a custom user control. If you create a custom user control, you use the <xref href=\"System.ComponentModel.DataAnnotations.UIHintAttribute.UIHint\" data-throw-if-not-resolved=\"false\"></xref> property to specify the user control to use to display a data field. </p>\n"
  example:
  - 
  syntax:
    content: public UIHintAttribute(string uiHint)
    content.vb: Public Sub New(uiHint As String)
    parameters:
    - id: uiHint
      type: System.String
      description: "\n<p>The user control to use to display the data field. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String,System.String)
  commentId: M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.ComponentModel.DataAnnotations.UIHintAttribute
  langs:
  - csharp
  - vb
  name: UIHintAttribute(String, String)
  fullName: System.ComponentModel.DataAnnotations.UIHintAttribute.UIHintAttribute(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/UIHintAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/UIHintAttribute.cs
    startLine: 33
  assemblies:
  - System.ComponentModel.Annotations
  namespace: System.ComponentModel.DataAnnotations
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.DataAnnotations.UIHintAttribute\" data-throw-if-not-resolved=\"false\"></xref> class using the specified user control and specified presentation layer. </p>\n"
  remarks: "\n<p></p>\n"
  example:
  - 
  syntax:
    content: public UIHintAttribute(string uiHint, string presentationLayer)
    content.vb: Public Sub New(uiHint As String, presentationLayer As String)
    parameters:
    - id: uiHint
      type: System.String
      description: "\n<p>The user control (field template) to use to display the data field.</p>\n"
    - id: presentationLayer
      type: System.String
      description: "\n<p>The presentation layer that uses the class. Can be set to \"HTML\", \"Silverlight\", \"WPF\", or \"WinForms\".</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String,System.String,System.Object[])
  commentId: M:System.ComponentModel.DataAnnotations.UIHintAttribute.#ctor(System.String,System.String,System.Object[])
  id: '#ctor(System.String,System.String,System.Object[])'
  parent: System.ComponentModel.DataAnnotations.UIHintAttribute
  langs:
  - csharp
  - vb
  name: UIHintAttribute(String, String, Object[])
  fullName: System.ComponentModel.DataAnnotations.UIHintAttribute.UIHintAttribute(System.String, System.String, System.Object[])
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/UIHintAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/UIHintAttribute.cs
    startLine: 45
  assemblies:
  - System.ComponentModel.Annotations
  namespace: System.ComponentModel.DataAnnotations
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.DataAnnotations.UIHintAttribute\" data-throw-if-not-resolved=\"false\"></xref> class by using the specified user control, presentation layer, and control parameters.</p>\n"
  example:
  - 
  syntax:
    content: public UIHintAttribute(string uiHint, string presentationLayer, params object[] controlParameters)
    content.vb: Public Sub New(uiHint As String, presentationLayer As String, ParamArray controlParameters As Object())
    parameters:
    - id: uiHint
      type: System.String
      description: "\n<p>The user control (field template) to use to display the data field.</p>\n"
    - id: presentationLayer
      type: System.String
      description: "\n<p>The presentation layer that uses the class. Can be set to \"HTML\", \"Silverlight\", \"WPF\", or \"WinForms\".</p>\n"
    - id: controlParameters
      type: System.Object[]
      description: "\n<p>The object to use to retrieve values from any data sources. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<xref href=\"System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters\" data-throw-if-not-resolved=\"false\"></xref> is <strong>null</strong> or it is a constraint key.</p>\n<p>-or-</p>\n<p>The value of <xref href=\"System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters\" data-throw-if-not-resolved=\"false\"></xref> is not a string. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.ComponentModel.DataAnnotations.UIHintAttribute.UIHintAttribute(System.String, System.String, System.Object())
  name.vb: UIHintAttribute(String, String, Object())
- uid: System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters
  commentId: P:System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters
  id: ControlParameters
  parent: System.ComponentModel.DataAnnotations.UIHintAttribute
  langs:
  - csharp
  - vb
  name: ControlParameters
  fullName: System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/UIHintAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ControlParameters
    path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/UIHintAttribute.cs
    startLine: 70
  assemblies:
  - System.ComponentModel.Annotations
  namespace: System.ComponentModel.DataAnnotations
  summary: "\n<p>Gets or sets the <xref href=\"System.Web.DynamicData.DynamicControlParameter\" data-throw-if-not-resolved=\"false\"></xref> object to use to retrieve values from any data source.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ComponentModel.DataAnnotations.UIHintAttribute.ControlParameters\" data-throw-if-not-resolved=\"false\"></xref> property lets you retrieve data from a data model, tracks updates to the data model, and notifies the model of any changes.</p>\n"
  example:
  - 
  syntax:
    content: public Collections.Generic.IDictionary<string, object> ControlParameters { get; }
    content.vb: Public ReadOnly Property ControlParameters As Collections.Generic.IDictionary(Of String, Object)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
      description: "\n<p>A collection of key/value pairs. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.ComponentModel.DataAnnotations.UIHintAttribute.PresentationLayer
  commentId: P:System.ComponentModel.DataAnnotations.UIHintAttribute.PresentationLayer
  id: PresentationLayer
  parent: System.ComponentModel.DataAnnotations.UIHintAttribute
  langs:
  - csharp
  - vb
  name: PresentationLayer
  fullName: System.ComponentModel.DataAnnotations.UIHintAttribute.PresentationLayer
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/UIHintAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PresentationLayer
    path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/UIHintAttribute.cs
    startLine: 61
  assemblies:
  - System.ComponentModel.Annotations
  namespace: System.ComponentModel.DataAnnotations
  summary: "\n<p>Gets or sets the presentation layer that uses the <xref href=\"System.ComponentModel.DataAnnotations.UIHintAttribute\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  remarks: "\n<p>This property represents the presentation layer that uses the <xref href=\"System.ComponentModel.DataAnnotations.UIHintAttribute\" data-throw-if-not-resolved=\"false\"></xref> class. This property can be set to \"HTML\", \"Silverlight\", \"WPF\", or \"WinForms\".</p>\n"
  example:
  - 
  syntax:
    content: public string PresentationLayer { get; }
    content.vb: Public ReadOnly Property PresentationLayer As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The presentation layer that is used by this class.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.ComponentModel.DataAnnotations.UIHintAttribute.UIHint
  commentId: P:System.ComponentModel.DataAnnotations.UIHintAttribute.UIHint
  id: UIHint
  parent: System.ComponentModel.DataAnnotations.UIHintAttribute
  langs:
  - csharp
  - vb
  name: UIHint
  fullName: System.ComponentModel.DataAnnotations.UIHintAttribute.UIHint
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/UIHintAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UIHint
    path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/UIHintAttribute.cs
    startLine: 53
  assemblies:
  - System.ComponentModel.Annotations
  namespace: System.ComponentModel.DataAnnotations
  summary: "\n<p>Gets or sets the name of the field template to use to display the data field.</p>\n"
  remarks: "\n<p>ASP.NET Dynamic Data provides field templates and page templates for rendering data fields in a data model. Field templates are user controls (.ascx files) that are mapped to data fields in the model. You can modify the default user controls that Dynamic Data provides, or you can create a custom user controls to use as field template. If you create a custom user control, you use the <xref href=\"System.ComponentModel.DataAnnotations.UIHintAttribute.UIHint\" data-throw-if-not-resolved=\"false\"></xref> property on a property so that the property is rendered using the custom user control. The <xref href=\"System.ComponentModel.DataAnnotations.UIHintAttribute.UIHint\" data-throw-if-not-resolved=\"false\"></xref> property specifies which field template to use when a specific column is rendered. The <xref href=\"System.ComponentModel.DataAnnotations.UIHintAttribute.UIHint\" data-throw-if-not-resolved=\"false\"></xref> property can point to one of the templates provided in Dynamic Data or to a custom template. For example, you can create a custom field template named RedText_Edit.ascx, and then use the <xref href=\"System.ComponentModel.DataAnnotations.UIHintAttribute.UIHint\" data-throw-if-not-resolved=\"false\"></xref> property to specify that the RedText_Edit.ascx control should be used to render a specified data field instead of the default Text_Edit.ascx template that is provided in Dynamic Data.</p>\n<p>The following example shows how to specify that the UnitsInStock column in a database will be rendered by using the specified custom field template.</p>DynamicData.CustomFieldTemplate#5"
  example:
  - 
  syntax:
    content: public string UIHint { get; }
    content.vb: Public ReadOnly Property UIHint As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the field template that displays the data field.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.ComponentModel.DataAnnotations.UIHintAttribute.Equals(System.Object)
  commentId: M:System.ComponentModel.DataAnnotations.UIHintAttribute.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.ComponentModel.DataAnnotations.UIHintAttribute
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.ComponentModel.DataAnnotations.UIHintAttribute.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/UIHintAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/UIHintAttribute.cs
    startLine: 80
  assemblies:
  - System.ComponentModel.Annotations
  namespace: System.ComponentModel.DataAnnotations
  summary: "\n<p>Gets a value that indicates whether this instance is equal to the specified object.</p>\n"
  example:
  - 
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to compare with this instance, or a <strong>null</strong> reference.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the specified object is equal to this instance; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.ComponentModel.DataAnnotations.UIHintAttribute.GetHashCode
  commentId: M:System.ComponentModel.DataAnnotations.UIHintAttribute.GetHashCode
  id: GetHashCode
  parent: System.ComponentModel.DataAnnotations.UIHintAttribute
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.ComponentModel.DataAnnotations.UIHintAttribute.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/UIHintAttribute.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.ComponentModel.Annotations/src/System/ComponentModel/DataAnnotations/UIHintAttribute.cs
    startLine: 75
  assemblies:
  - System.ComponentModel.Annotations
  namespace: System.ComponentModel.DataAnnotations
  summary: "\n<p>Gets the hash code for the current instance of the attribute.</p>\n"
  example:
  - 
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>The attribute instance hash code.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.ComponentModel.DataAnnotations
  isExternal: false
  name: System.ComponentModel.DataAnnotations
  fullName: System.ComponentModel.DataAnnotations
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Object[]
  isExternal: false
  name: Object[]
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  definition: System.Collections.Generic.IDictionary`2
  name: Collections.Generic.IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: Collections.Generic.IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Collections.Generic.IDictionary<, >
  fullName: System.Collections.Generic.IDictionary<, >
  fullname.vb: System.Collections.Generic.IDictionary(Of , )
  name.vb: Collections.Generic.IDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
