items:
- uid: System.Collections.ObjectModel.ObservableCollection`1
  commentId: T:System.Collections.ObjectModel.ObservableCollection`1
  id: ObservableCollection`1
  parent: System.Collections.ObjectModel
  children:
  - System.Collections.ObjectModel.ObservableCollection`1.#ctor
  - System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy
  - System.Collections.ObjectModel.ObservableCollection`1.CheckReentrancy
  - System.Collections.ObjectModel.ObservableCollection`1.ClearItems
  - System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged
  - System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)
  - System.Collections.ObjectModel.ObservableCollection`1.Move(System.Int32,System.Int32)
  - System.Collections.ObjectModel.ObservableCollection`1.MoveItem(System.Int32,System.Int32)
  - System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  - System.Collections.ObjectModel.ObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  - System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged
  - System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)
  - System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)
  - System.Collections.ObjectModel.ObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged
  langs:
  - csharp
  - vb
  name: ObservableCollection<T>
  fullName: System.Collections.ObjectModel.ObservableCollection<T>
  type: Class
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ObservableCollection
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
    startLine: 19
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Represents a dynamic data collection that provides notifications when items get added, removed, or when the whole list is refreshed.</p>\n"
  remarks: "\n<p>In many cases the data that you work with is a collection of objects. For example, a common scenario in data binding is to use an <xref href=\"System.Windows.Controls.ItemsControl\" data-throw-if-not-resolved=\"false\"></xref> such as a <xref href=\"System.Windows.Controls.ListBox\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Windows.Controls.ListView\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Windows.Controls.TreeView\" data-throw-if-not-resolved=\"false\"></xref> to display a collection of records.</p>\n<p>You can enumerate over any collection that implements the <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> interface. However, to set up dynamic bindings so that insertions or deletions in the collection update the UI automatically, the collection must implement the <xref href=\"System.Collections.Specialized.INotifyCollectionChanged\" data-throw-if-not-resolved=\"false\"></xref> interface. This interface exposes the <xref href=\"System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged\" data-throw-if-not-resolved=\"false\"></xref> event, an event that should be raised whenever the underlying collection changes.</p>\n<p>WPF provides the <xref href=\"System.Collections.ObjectModel.ObservableCollection`1\" data-throw-if-not-resolved=\"false\"></xref> class, which is a built-in implementation of a data collection that implements the <xref href=\"System.Collections.Specialized.INotifyCollectionChanged\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>Before implementing your own collection, consider using <xref href=\"System.Collections.ObjectModel.ObservableCollection`1\" data-throw-if-not-resolved=\"false\"></xref> or one of the existing collection classes, such as <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.ObjectModel.Collection`1\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.ComponentModel.BindingList`1\" data-throw-if-not-resolved=\"false\"></xref>, among many others. If you have an advanced scenario and want to implement your own collection, consider using <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>, which provides a non-generic collection of objects that can be individually accessed by index. Implementing <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> provides the best performance with the data binding engine.</p>\n<p> To fully support transferring data values from binding source objects to binding targets, each object in your collection that supports bindable properties must implement an appropriate property changed notification mechanism such as the <xref href=\"System.ComponentModel.INotifyPropertyChanged\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>For more information, see \"Binding to Collections\" in Data Binding Overview.</p>\n"
  syntax:
    content: 'public class ObservableCollection<T> : Collection<T>, INotifyCollectionChanged, INotifyPropertyChanged'
    content.vb: >-
      Public Class ObservableCollection(Of T)
          Inherits Collection(Of T)
          Implements INotifyCollectionChanged, INotifyPropertyChanged
    typeParameters:
    - id: T
      description: "\n<p>The type of elements in the collection.</p>\n"
  seealso:
  - type: System.Collections.ObjectModel.ReadOnlyObservableCollection`1
    commentId: T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1
  - type: System.Windows.Data.CollectionView
    commentId: T:System.Windows.Data.CollectionView
  inheritance:
  - System.Object
  implements:
  - System.Collections.Specialized.INotifyCollectionChanged
  - System.ComponentModel.INotifyPropertyChanged
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Collections.ObjectModel.ObservableCollection(Of T)
  name.vb: ObservableCollection(Of T)
- uid: System.Collections.ObjectModel.ObservableCollection`1.#ctor
  commentId: M:System.Collections.ObjectModel.ObservableCollection`1.#ctor
  id: '#ctor'
  parent: System.Collections.ObjectModel.ObservableCollection`1
  langs:
  - csharp
  - vb
  name: ObservableCollection()
  fullName: System.Collections.ObjectModel.ObservableCollection<T>.ObservableCollection()
  type: Constructor
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
    startLine: 33
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.ObjectModel.ObservableCollection`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - 
  syntax:
    content: public ObservableCollection()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.ObjectModel.ObservableCollection(Of T).ObservableCollection()
- uid: System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.ObjectModel.ObservableCollection`1
  langs:
  - csharp
  - vb
  name: ObservableCollection(Generic.IEnumerable<T>)
  fullName: System.Collections.ObjectModel.ObservableCollection<T>.ObservableCollection(System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 30
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.ObjectModel.ObservableCollection`1\" data-throw-if-not-resolved=\"false\"></xref> class that contains elements copied from the specified collection.</p>\n"
  remarks: "\n<p>The elements are copied onto the <xref href=\"System.Collections.ObjectModel.ObservableCollection`1\" data-throw-if-not-resolved=\"false\"></xref> in the same order they are read by the enumerator of the collection.</p>\n"
  example:
  - 
  syntax:
    content: public ObservableCollection(Generic.IEnumerable<T> collection)
    content.vb: Public Sub New(collection As Generic.IEnumerable(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>The collection from which the elements are copied.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>collection</em> parameter cannot be <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.ObjectModel.ObservableCollection(Of T).ObservableCollection(System.Collections.Generic.IEnumerable(Of T))
  name.vb: ObservableCollection(Generic.IEnumerable(Of T))
- uid: System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged
  commentId: E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged
  id: CollectionChanged
  parent: System.Collections.ObjectModel.ObservableCollection`1
  langs:
  - csharp
  - vb
  name: CollectionChanged
  fullName: System.Collections.ObjectModel.ObservableCollection<T>.CollectionChanged
  type: Event
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CollectionChanged
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
    startLine: 113
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Occurs when an item is added, removed, changed, moved, or the entire list is refreshed.</p>\n"
  example:
  - 
  syntax:
    content: public virtual event NotifyCollectionChangedEventHandler CollectionChanged
    content.vb: Public Overridable Event CollectionChanged As NotifyCollectionChangedEventHandler
    return:
      type: System.Collections.Specialized.NotifyCollectionChangedEventHandler
  seealso:
  - type: System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
    commentId: E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  implements:
  - System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Collections.ObjectModel.ObservableCollection(Of T).CollectionChanged
- uid: System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged
  commentId: E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged
  id: PropertyChanged
  parent: System.Collections.ObjectModel.ObservableCollection`1
  langs:
  - csharp
  - vb
  name: PropertyChanged
  fullName: System.Collections.ObjectModel.ObservableCollection<T>.PropertyChanged
  type: Event
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PropertyChanged
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
    startLine: 215
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Occurs when a property value changes.</p>\n"
  example:
  - 
  syntax:
    content: protected virtual event PropertyChangedEventHandler PropertyChanged
    content.vb: Protected Overridable Event PropertyChanged As PropertyChangedEventHandler
    return:
      type: System.ComponentModel.PropertyChangedEventHandler
  seealso:
  - type: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
    commentId: E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: System.Collections.ObjectModel.ObservableCollection(Of T).PropertyChanged
- uid: System.Collections.ObjectModel.ObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged
  commentId: E:System.Collections.ObjectModel.ObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged
  id: System#ComponentModel#INotifyPropertyChanged#PropertyChanged
  isEii: true
  parent: System.Collections.ObjectModel.ObservableCollection`1
  langs:
  - csharp
  - vb
  name: INotifyPropertyChanged.PropertyChanged
  fullName: System.Collections.ObjectModel.ObservableCollection<T>.System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  type: Event
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
    startLine: 92
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Occurs when a property value changes.</p>\n"
  example:
  - 
  syntax:
    content: event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
    content.vb: Event System.ComponentModel.INotifyPropertyChanged.PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged
    return:
      type: System.ComponentModel.PropertyChangedEventHandler
  implements:
  - System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  fullName.vb: System.Collections.ObjectModel.ObservableCollection(Of T).System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  name.vb: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
- uid: System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy
  commentId: M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy
  id: BlockReentrancy
  parent: System.Collections.ObjectModel.ObservableCollection`1
  langs:
  - csharp
  - vb
  name: BlockReentrancy()
  fullName: System.Collections.ObjectModel.ObservableCollection<T>.BlockReentrancy()
  type: Method
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BlockReentrancy
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
    startLine: 250
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Disallows reentrant attempts to change this collection.</p>\n"
  example:
  - "\n<p>The typical usage is to wrap an <xref href=\"System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> call within a <strong>using</strong> scope, as in the following example:</p>ObservableCollection_snip#BlockReentrancy"
  syntax:
    content: protected IDisposable BlockReentrancy()
    content.vb: Protected Function BlockReentrancy As IDisposable
    return:
      type: System.IDisposable
      description: "\n<p>An <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> object that can be used to dispose of the object.</p>\n"
  seealso:
  - type: System.Collections.ObjectModel.ObservableCollection`1.CheckReentrancy
    commentId: M:System.Collections.ObjectModel.ObservableCollection`1.CheckReentrancy
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Collections.ObjectModel.ObservableCollection(Of T).BlockReentrancy()
- uid: System.Collections.ObjectModel.ObservableCollection`1.CheckReentrancy
  commentId: M:System.Collections.ObjectModel.ObservableCollection`1.CheckReentrancy
  id: CheckReentrancy
  parent: System.Collections.ObjectModel.ObservableCollection`1
  langs:
  - csharp
  - vb
  name: CheckReentrancy()
  fullName: System.Collections.ObjectModel.ObservableCollection<T>.CheckReentrancy()
  type: Method
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CheckReentrancy
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
    startLine: 259
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Checks for reentrant attempts to change this collection.</p>\n"
  example:
  - 
  syntax:
    content: protected void CheckReentrancy()
    content.vb: Protected Sub CheckReentrancy
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>If there was a call to <xref href=\"System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy\" data-throw-if-not-resolved=\"false\"></xref> of which the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> return value has not yet been disposed of. Typically, this means when there are additional attempts to change this collection during a <xref href=\"System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged\" data-throw-if-not-resolved=\"false\"></xref> event. However, it depends on when derived classes choose to call <xref href=\"System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy
    commentId: M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Collections.ObjectModel.ObservableCollection(Of T).CheckReentrancy()
- uid: System.Collections.ObjectModel.ObservableCollection`1.ClearItems
  commentId: M:System.Collections.ObjectModel.ObservableCollection`1.ClearItems
  id: ClearItems
  parent: System.Collections.ObjectModel.ObservableCollection`1
  langs:
  - csharp
  - vb
  name: ClearItems()
  fullName: System.Collections.ObjectModel.ObservableCollection<T>.ClearItems()
  type: Method
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ClearItems
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
    startLine: 130
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Removes all items from the collection.</p>\n"
  remarks: "\n<p>The base class calls this method when the list is being cleared. This implementation raises the <xref href=\"System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n<p>For more information, see the <xref href=\"System.Collections.ObjectModel.Collection`1.ClearItems\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Collections.ObjectModel.Collection`1\" data-throw-if-not-resolved=\"false\"></xref> base class.</p>\n"
  example:
  - 
  syntax:
    content: protected override void ClearItems()
    content.vb: Protected Overrides Sub ClearItems
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: System.Collections.ObjectModel.ObservableCollection(Of T).ClearItems()
- uid: System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)
  commentId: M:System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)
  id: InsertItem(System.Int32,`0)
  parent: System.Collections.ObjectModel.ObservableCollection`1
  langs:
  - csharp
  - vb
  name: InsertItem(Int32, T)
  fullName: System.Collections.ObjectModel.ObservableCollection<T>.InsertItem(System.Int32, T)
  type: Method
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InsertItem
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
    startLine: 159
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Inserts an item into the collection at the specified index.</p>\n"
  remarks: "\n<p>The base class calls this method when an item is added to the collection. This implementation raises the <xref href=\"System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n<p>For more information, see the <xref href=\"System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Collections.ObjectModel.Collection`1\" data-throw-if-not-resolved=\"false\"></xref> base class.</p>\n"
  example:
  - 
  syntax:
    content: protected override void InsertItem(int index, T item)
    content.vb: Protected Overrides Sub InsertItem(index As Integer, item As T)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index at which <em>item</em> should be inserted.</p>\n"
    - id: item
      type: '{T}'
      description: "\n<p>The object to insert.</p>\n"
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: System.Collections.ObjectModel.ObservableCollection(Of T).InsertItem(System.Int32, T)
- uid: System.Collections.ObjectModel.ObservableCollection`1.Move(System.Int32,System.Int32)
  commentId: M:System.Collections.ObjectModel.ObservableCollection`1.Move(System.Int32,System.Int32)
  id: Move(System.Int32,System.Int32)
  parent: System.Collections.ObjectModel.ObservableCollection`1
  langs:
  - csharp
  - vb
  name: Move(Int32, Int32)
  fullName: System.Collections.ObjectModel.ObservableCollection<T>.Move(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Move
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
    startLine: 70
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Moves the item at the specified index to a new location in the collection.</p>\n"
  remarks: "\n<p>Subclasses can override the <xref href=\"System.Collections.ObjectModel.ObservableCollection`1.MoveItem(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to provide custom behavior for this method.</p>\n"
  example:
  - 
  syntax:
    content: public void Move(int oldIndex, int newIndex)
    content.vb: Public Sub Move(oldIndex As Integer, newIndex As Integer)
    parameters:
    - id: oldIndex
      type: System.Int32
      description: "\n<p>The zero-based index specifying the location of the item to be moved.</p>\n"
    - id: newIndex
      type: System.Int32
      description: "\n<p>The zero-based index specifying the new location of the item.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.ObjectModel.ObservableCollection(Of T).Move(System.Int32, System.Int32)
- uid: System.Collections.ObjectModel.ObservableCollection`1.MoveItem(System.Int32,System.Int32)
  commentId: M:System.Collections.ObjectModel.ObservableCollection`1.MoveItem(System.Int32,System.Int32)
  id: MoveItem(System.Int32,System.Int32)
  parent: System.Collections.ObjectModel.ObservableCollection`1
  langs:
  - csharp
  - vb
  name: MoveItem(Int32, Int32)
  fullName: System.Collections.ObjectModel.ObservableCollection<T>.MoveItem(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveItem
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
    startLine: 187
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Moves the item at the specified index to a new location in the collection.</p>\n"
  remarks: "\n<p>This implementation raises the <xref href=\"System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n<p>Subclasses can override this protected method to provide custom behavior for the <xref href=\"System.Collections.ObjectModel.ObservableCollection`1.Move(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: protected virtual void MoveItem(int oldIndex, int newIndex)
    content.vb: Protected Overridable Sub MoveItem(oldIndex As Integer, newIndex As Integer)
    parameters:
    - id: oldIndex
      type: System.Int32
      description: "\n<p>The zero-based index specifying the location of the item to be moved.</p>\n"
    - id: newIndex
      type: System.Int32
      description: "\n<p>The zero-based index specifying the new location of the item.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: System.Collections.ObjectModel.ObservableCollection(Of T).MoveItem(System.Int32, System.Int32)
- uid: System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  commentId: M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  id: OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  parent: System.Collections.ObjectModel.ObservableCollection`1
  langs:
  - csharp
  - vb
  name: OnCollectionChanged(NotifyCollectionChangedEventArgs)
  fullName: System.Collections.ObjectModel.ObservableCollection<T>.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
  type: Method
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnCollectionChanged
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
    startLine: 226
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Raises the <xref href=\"System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged\" data-throw-if-not-resolved=\"false\"></xref> event with the provided arguments.</p>\n"
  remarks: "\n<p>Properties and methods that modify this collection raise the <xref href=\"System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged\" data-throw-if-not-resolved=\"false\"></xref> event through this <strong>virtual</strong> method.</p>\n"
  example:
  - "\n<p>When overriding this method, either call the base implementation or use the <xref href=\"System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy\" data-throw-if-not-resolved=\"false\"></xref> method to handle reentrant collection changes, as in the following example:</p>ObservableCollection_snip#BlockReentrancy"
  syntax:
    content: protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e)
    content.vb: Protected Overridable Sub OnCollectionChanged(e As NotifyCollectionChangedEventArgs)
    parameters:
    - id: e
      type: System.Collections.Specialized.NotifyCollectionChangedEventArgs
      description: "\n<p>Arguments of the event being raised.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: System.Collections.ObjectModel.ObservableCollection(Of T).OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)
- uid: System.Collections.ObjectModel.ObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  commentId: M:System.Collections.ObjectModel.ObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  id: OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  parent: System.Collections.ObjectModel.ObservableCollection`1
  langs:
  - csharp
  - vb
  name: OnPropertyChanged(PropertyChangedEventArgs)
  fullName: System.Collections.ObjectModel.ObservableCollection<T>.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
  type: Method
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnPropertyChanged
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
    startLine: 204
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Raises the <xref href=\"System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged\" data-throw-if-not-resolved=\"false\"></xref> event with the provided arguments.</p>\n"
  example:
  - 
  syntax:
    content: protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
    content.vb: Protected Overridable Sub OnPropertyChanged(e As PropertyChangedEventArgs)
    parameters:
    - id: e
      type: System.ComponentModel.PropertyChangedEventArgs
      description: "\n<p>Arguments of the event being raised.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: System.Collections.ObjectModel.ObservableCollection(Of T).OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)
- uid: System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)
  commentId: M:System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)
  id: RemoveItem(System.Int32)
  parent: System.Collections.ObjectModel.ObservableCollection`1
  langs:
  - csharp
  - vb
  name: RemoveItem(Int32)
  fullName: System.Collections.ObjectModel.ObservableCollection<T>.RemoveItem(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveItem
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
    startLine: 143
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Removes the item at the specified index of the collection.</p>\n"
  remarks: "\n<p>The base class calls this method when an item is removed from the collection. This implementation raises the <xref href=\"System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n<p>For more information, see the <xref href=\"System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Collections.ObjectModel.Collection`1\" data-throw-if-not-resolved=\"false\"></xref> base class.</p>\n"
  example:
  - 
  syntax:
    content: protected override void RemoveItem(int index)
    content.vb: Protected Overrides Sub RemoveItem(index As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the element to remove.</p>\n"
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: System.Collections.ObjectModel.ObservableCollection(Of T).RemoveItem(System.Int32)
- uid: System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)
  commentId: M:System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)
  id: SetItem(System.Int32,`0)
  parent: System.Collections.ObjectModel.ObservableCollection`1
  langs:
  - csharp
  - vb
  name: SetItem(Int32, T)
  fullName: System.Collections.ObjectModel.ObservableCollection<T>.SetItem(System.Int32, T)
  type: Method
  source:
    remote:
      path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetItem
    path: src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs
    startLine: 173
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.ObjectModel
  summary: "\n<p>Replaces the element at the specified index.</p>\n"
  remarks: "\n<p>The base class calls this method when an item is set in the collection. This implementation raises the <xref href=\"System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n<p>For more information, see the <xref href=\"System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Collections.ObjectModel.Collection`1\" data-throw-if-not-resolved=\"false\"></xref> base class.</p>\n"
  example:
  - 
  syntax:
    content: protected override void SetItem(int index, T item)
    content.vb: Protected Overrides Sub SetItem(index As Integer, item As T)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the element to replace.</p>\n"
    - id: item
      type: '{T}'
      description: "\n<p>The new value for the element at the specified index.</p>\n"
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: System.Collections.ObjectModel.ObservableCollection(Of T).SetItem(System.Int32, T)
references:
- uid: System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Specialized.INotifyCollectionChanged
  parent: System.Collections.Specialized
  isExternal: false
  name: INotifyCollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged
- uid: System.ComponentModel.INotifyPropertyChanged
  parent: System.ComponentModel
  isExternal: false
  name: INotifyPropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Specialized
  isExternal: false
  name: System.Collections.Specialized
  fullName: System.Collections.Specialized
- uid: System.ComponentModel
  isExternal: false
  name: System.ComponentModel
  fullName: System.ComponentModel
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
  parent: System.Collections.Specialized.INotifyCollectionChanged
  isExternal: false
  name: CollectionChanged
  fullName: System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged
- uid: System.Collections.Specialized.NotifyCollectionChangedEventHandler
  parent: System.Collections.Specialized
  isExternal: false
  name: NotifyCollectionChangedEventHandler
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventHandler
- uid: System.ComponentModel.PropertyChangedEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: PropertyChangedEventHandler
  fullName: System.ComponentModel.PropertyChangedEventHandler
- uid: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
  parent: System.ComponentModel.INotifyPropertyChanged
  isExternal: false
  name: PropertyChanged
  fullName: System.ComponentModel.INotifyPropertyChanged.PropertyChanged
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
  parent: System.Collections.Specialized
  isExternal: false
  name: NotifyCollectionChangedEventArgs
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
- uid: System.ComponentModel.PropertyChangedEventArgs
  parent: System.ComponentModel
  isExternal: false
  name: PropertyChangedEventArgs
  fullName: System.ComponentModel.PropertyChangedEventArgs
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
