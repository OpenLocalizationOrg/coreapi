items:
- uid: System.Collections.Generic.SortedList`2
  commentId: T:System.Collections.Generic.SortedList`2
  id: SortedList`2
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.SortedList`2.#ctor
  - System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  - System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.SortedList`2.#ctor(System.Int32)
  - System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.SortedList`2.Add(`0,`1)
  - System.Collections.Generic.SortedList`2.Capacity
  - System.Collections.Generic.SortedList`2.Clear
  - System.Collections.Generic.SortedList`2.Comparer
  - System.Collections.Generic.SortedList`2.ContainsKey(`0)
  - System.Collections.Generic.SortedList`2.ContainsValue(`1)
  - System.Collections.Generic.SortedList`2.Count
  - System.Collections.Generic.SortedList`2.GetEnumerator
  - System.Collections.Generic.SortedList`2.IndexOfKey(`0)
  - System.Collections.Generic.SortedList`2.IndexOfValue(`1)
  - System.Collections.Generic.SortedList`2.Item(`0)
  - System.Collections.Generic.SortedList`2.Keys
  - System.Collections.Generic.SortedList`2.Remove(`0)
  - System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)
  - System.Collections.Generic.SortedList`2.TrimExcess
  - System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)
  - System.Collections.Generic.SortedList`2.Values
  langs:
  - csharp
  - vb
  name: SortedList<TKey, TValue>
  fullName: System.Collections.Generic.SortedList<TKey, TValue>
  type: Class
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SortedList
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 49
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Represents a collection of key/value pairs that are sorted by key based on the associated <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> generic class is an array of key/value pairs with O(log <em>n</em>) retrieval, where n is the number of elements in the dictionary. In this, it is similar to the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> generic class. The two classes have similar object models, and both have O(log <em>n</em>) retrieval. Where the two classes differ is in memory use and speed of insertion and removal:</p>\n<ul><li>\n<p>\n<xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> uses less memory than <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li><li>\n<p>\n<xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> has faster insertion and removal operations for unsorted data, O(log <em>n</em>) as opposed to O(<em>n</em>) for <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li><li>\n<p>If the list is populated all at once from sorted data, <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> is faster than <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li></ul>\n<p>Another difference between the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> classes is that <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> supports efficient indexed retrieval of keys and values through the collections returned by the <xref href=\"System.Collections.Generic.SortedList`2.Keys\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Generic.SortedList`2.Values\" data-throw-if-not-resolved=\"false\"></xref> properties. It is not necessary to regenerate the lists when the properties are accessed, because the lists are just wrappers for the internal arrays of keys and values. The following code shows the use of the <xref href=\"System.Collections.Generic.SortedList`2.Values\" data-throw-if-not-resolved=\"false\"></xref> property for indexed retrieval of values from a sorted list of strings:</p>Generic.SortedList#11<p><xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> is implemented as an array of key/value pairs, sorted by the key.  Each element can be retrieved as a <xref href=\"System.Collections.Generic.KeyValuePair`2\" data-throw-if-not-resolved=\"false\"></xref> object.</p><p>Key objects must be immutable as long as they are used as keys in the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>. Every key in a <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> must be unique. A key cannot be <strong>null</strong>, but a value can be, if the type of values in the list, <em>TValue</em>, is a reference type.</p><p><xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> requires a comparer implementation to sort and to perform comparisons.  The default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> checks whether the key type <em>TKey</em> implements <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> and uses that implementation, if available.  If not, <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> checks whether the key type <em>TKey</em> implements <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref>.  If the key type <em>TKey</em> does not implement either interface, you can specify a <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation in a constructor overload that accepts a <em>comparer</em> parameter.</p><p>The capacity of a <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array. The capacity can be decreased by calling <xref href=\"System.Collections.Generic.SortedList`2.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> or by setting the <xref href=\"System.Collections.Generic.SortedList`2.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p><p>For very large <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <strong>enabled</strong> attribute of the  configuration element to <strong>true</strong> in the run-time environment.</p><p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in C++, <strong>For Each</strong> in Visual Basic) returns an object of the type of the elements in the collection. Since the elements of the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> are key/value pairs, the element type is not the type of the key or the type of the value. Instead, the element type is <xref href=\"System.Collections.Generic.KeyValuePair`2\" data-throw-if-not-resolved=\"false\"></xref>. For example:</p>Generic.SortedList#12<p>The <strong>foreach</strong> statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</p>"
  example:
  - "\n<p>The following code example creates an empty <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> of strings with string keys and uses the <xref href=\"System.Collections.Generic.SortedList`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method to add some elements. The example demonstrates that the <xref href=\"System.Collections.Generic.SortedList`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method throws an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> when attempting to add a duplicate key. </p>\n<p>The example uses the <xref href=\"System.Collections.Generic.SortedList`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property (the indexer in C#) to retrieve values, demonstrating that a <xref href=\"System.Collections.Generic.KeyNotFoundException\" data-throw-if-not-resolved=\"false\"></xref> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced. </p>\n<p>The example shows how to use the <xref href=\"System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)\" data-throw-if-not-resolved=\"false\"></xref> method as a more efficient way to retrieve values if a program often must try key values that are not in the sorted list, and it shows how to use the <xref href=\"System.Collections.Generic.SortedList`2.ContainsKey(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to test whether a key exists before calling the <xref href=\"System.Collections.Generic.SortedList`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The example shows how to enumerate the keys and values in the sorted list and how to enumerate the keys and values alone using the <xref href=\"System.Collections.Generic.SortedList`2.Keys\" data-throw-if-not-resolved=\"false\"></xref> property and the <xref href=\"System.Collections.Generic.SortedList`2.Values\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>Finally, the example demonstrates the <xref href=\"System.Collections.Generic.SortedList`2.Remove(`0)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>Generic.SortedList#1"
  syntax:
    content: 'public class SortedList<TKey, TValue> : ICollection<KeyValuePair<TKey, TValue>>, IDictionary<TKey, TValue>, IEnumerable<KeyValuePair<TKey, TValue>>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>, ICollection, IDictionary, IEnumerable'
    content.vb: >-
      Public Class SortedList(Of TKey, TValue)
          Inherits ICollection(Of KeyValuePair(Of TKey, TValue))
          Implements IDictionary(Of TKey, TValue), IEnumerable(Of KeyValuePair(Of TKey, TValue)), IReadOnlyCollection(Of KeyValuePair(Of TKey, TValue)), IReadOnlyDictionary(Of TKey, TValue), ICollection, IDictionary, IEnumerable
    typeParameters:
    - id: TKey
      description: "\n<p>The type of keys in the collection.</p>\n"
    - id: TValue
      description: "\n<p>The type of values in the collection.</p>\n"
  seealso:
  - type: System.Collections.Generic.IDictionary`2
    commentId: T:System.Collections.Generic.IDictionary`2
  - type: System.Collections.Generic.Dictionary`2
    commentId: T:System.Collections.Generic.Dictionary`2
  - type: System.Collections.Generic.SortedDictionary`2
    commentId: T:System.Collections.Generic.SortedDictionary`2
  - type: System.Collections.Generic.KeyValuePair`2
    commentId: T:System.Collections.Generic.KeyValuePair`2
  - type: System.Collections.Generic.IComparer`1
    commentId: T:System.Collections.Generic.IComparer`1
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  - System.Collections.ICollection
  - System.Collections.IDictionary
  - System.Collections.IEnumerable
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue)
  name.vb: SortedList(Of TKey, TValue)
- uid: System.Collections.Generic.SortedList`2.#ctor
  commentId: M:System.Collections.Generic.SortedList`2.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: SortedList()
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.SortedList()
  type: Constructor
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 71
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the default initial capacity, and uses the default <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Every key in a <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> must be unique according to the default comparer.</p>\n<p>This constructor uses the default value for the initial capacity of the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>. To set the initial capacity, use the <xref href=\"System.Collections.Generic.SortedList`2.#ctor(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor. If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor uses the default comparer for <em>TKey</em>. To specify a comparer, use the <xref href=\"System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor. The default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> checks whether the key type <em>TKey</em> implements <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> and uses that implementation, if available.  If not, <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> checks whether the key type <em>TKey</em> implements <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref>.  If the key type <em>TKey</em> does not implement either interface, you can specify a <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation in a constructor overload that accepts a <em>comparer</em> parameter.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example creates an empty <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> of strings with string keys and uses the <xref href=\"System.Collections.Generic.SortedList`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method to add some elements. The example demonstrates that the <xref href=\"System.Collections.Generic.SortedList`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method throws an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> when attempting to add a duplicate key. </p>\n<p>This code example is part of a larger example provided for the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Generic.SortedList#2"
  syntax:
    content: public SortedList()
    content.vb: Public Sub New
  seealso:
  - type: System.Collections.Generic.Comparer`1.Default
    commentId: P:System.Collections.Generic.Comparer`1.Default
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.IComparable
    commentId: T:System.IComparable
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).SortedList()
- uid: System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})
  id: '#ctor(System.Collections.Generic.IComparer{`0})'
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: SortedList(IComparer<TKey>)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.SortedList(System.Collections.Generic.IComparer<TKey>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 474
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the default initial capacity, and uses the specified <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Every key in a <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> must be unique according to the specified comparer.</p>\n<p>This constructor uses the default value for the initial capacity of the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>. To set the initial capacity, use the <xref href=\"System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor. If the final size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example creates a sorted list with a case-insensitive comparer for the current culture. The example adds four elements, some with lower-case keys and some with upper-case keys. The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message. Finally, the example displays the elements in case-insensitive sort order.</p>Generic.SortedList.ctor_IComp#1"
  syntax:
    content: public SortedList(IComparer<TKey> comparer)
    content.vb: Public Sub New(comparer As IComparer(Of TKey))
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing keys.</p>\n<p>-or-</p>\n<p>\n<strong>null</strong> to use the default <xref href=\"System.Collections.Generic.Comparer`1\" data-throw-if-not-resolved=\"false\"></xref> for the type of the key.</p>\n"
  seealso:
  - type: System.Collections.Generic.IComparer`1
    commentId: T:System.Collections.Generic.IComparer`1
  - type: System.Collections.Generic.Comparer`1.Default
    commentId: P:System.Collections.Generic.Comparer`1.Default
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.IComparable
    commentId: T:System.IComparable
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).SortedList(System.Collections.Generic.IComparer(Of TKey))
  name.vb: SortedList(IComparer(Of TKey))
- uid: System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  commentId: M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  id: '#ctor(System.Collections.Generic.IDictionary{`0,`1})'
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: SortedList(IDictionary<TKey, TValue>)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.SortedList(System.Collections.Generic.IDictionary<TKey, TValue>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 475
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> class that contains elements copied from the specified <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>, has sufficient capacity to accommodate the number of elements copied, and uses the default <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Every key in a <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> must be unique according to the default comparer; likewise, every key in the source <em>dictionary</em> must also be unique according to the default comparer.</p>\n<p>The capacity of the new <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> is set to the number of elements in <em>dictionary</em>, so no resizing takes place while the list is being populated. </p>\n<p>This constructor uses the default comparer for <em>TKey</em>. To specify a comparer, use the <xref href=\"System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor. The default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> checks whether the key type <em>TKey</em> implements <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> and uses that implementation, if available.  If not, <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> checks whether the key type <em>TKey</em> implements <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref>.  If the key type <em>TKey</em> does not implement either interface, you can specify a <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation in a constructor overload that accepts a <em>comparer</em> parameter.</p>\n<p>If the data in <em>dictionary</em> are sorted, this constructor is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in <em>dictionary</em>. Otherwise it is an O(<em>n</em>*<em>n</em>) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to use <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> to create a sorted copy of the information in a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>, by passing the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>Generic.SortedList.ctor_IDic#1"
  syntax:
    content: public SortedList(IDictionary<TKey, TValue> dictionary)
    content.vb: Public Sub New(dictionary As IDictionary(Of TKey, TValue))
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> whose elements are copied to the new <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>dictionary</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>dictionary</em> contains one or more duplicate keys.</p>\n"
  seealso:
  - type: System.Collections.Generic.IDictionary`2
    commentId: T:System.Collections.Generic.IDictionary`2
  - type: System.Collections.Generic.Comparer`1.Default
    commentId: P:System.Collections.Generic.Comparer`1.Default
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.IComparable
    commentId: T:System.IComparable
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).SortedList(System.Collections.Generic.IDictionary(Of TKey, TValue))
  name.vb: SortedList(IDictionary(Of TKey, TValue))
- uid: System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})
  id: '#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})'
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: SortedList(IDictionary<TKey, TValue>, IComparer<TKey>)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.SortedList(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IComparer<TKey>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 476
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> class that contains elements copied from the specified <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>, has sufficient capacity to accommodate the number of elements copied, and uses the specified <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Every key in a <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> must be unique according to the specified comparer; likewise, every key in the source <em>dictionary</em> must also be unique according to the specified comparer.</p>\n<p>The capacity of the new <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> is set to the number of elements in <em>dictionary</em>, so no resizing takes place while the list is being populated. </p>\n<p>If the data in <em>dictionary</em> are sorted, this constructor is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in <em>dictionary</em>. Otherwise it is an O(<em>n</em>*<em>n</em>) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to use <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> to create a case-insensitive sorted copy of the information in a case-insensitive <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>, by passing the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor. In this example, the case-insensitive comparers are for the current culture.</p>Generic.SortedList.ctor_IDicIComp#1"
  syntax:
    content: public SortedList(IDictionary<TKey, TValue> dictionary, IComparer<TKey> comparer)
    content.vb: Public Sub New(dictionary As IDictionary(Of TKey, TValue), comparer As IComparer(Of TKey))
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> whose elements are copied to the new <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing keys.</p>\n<p>-or-</p>\n<p>\n<strong>null</strong> to use the default <xref href=\"System.Collections.Generic.Comparer`1\" data-throw-if-not-resolved=\"false\"></xref> for the type of the key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>dictionary</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>dictionary</em> contains one or more duplicate keys.</p>\n"
  seealso:
  - type: System.Collections.Generic.IDictionary`2
    commentId: T:System.Collections.Generic.IDictionary`2
  - type: System.Collections.Generic.IComparer`1
    commentId: T:System.Collections.Generic.IComparer`1
  - type: System.Collections.Generic.Comparer`1.Default
    commentId: P:System.Collections.Generic.Comparer`1.Default
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.IComparable
    commentId: T:System.IComparable
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).SortedList(System.Collections.Generic.IDictionary(Of TKey, TValue), System.Collections.Generic.IComparer(Of TKey))
  name.vb: SortedList(IDictionary(Of TKey, TValue), IComparer(Of TKey))
- uid: System.Collections.Generic.SortedList`2.#ctor(System.Int32)
  commentId: M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: SortedList(Int32)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.SortedList(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 86
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the specified initial capacity, and uses the default <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Every key in a <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> must be unique according to the default comparer.</p>\n<p>The capacity of a <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> can hold before resizing. As elements are added to a <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The capacity can be decreased by calling <xref href=\"System.Collections.Generic.SortedList`2.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> or by setting the <xref href=\"System.Collections.Generic.SortedList`2.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor uses the default comparer for <em>TKey</em>. To specify a comparer, use the <xref href=\"System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor. The default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> checks whether the key type <em>TKey</em> implements <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> and uses that implementation, if available.  If not, <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> checks whether the key type <em>TKey</em> implements <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref>.  If the key type <em>TKey</em> does not implement either interface, you can specify a <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation in a constructor overload that accepts a <em>comparer</em> parameter.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is <em>capacity</em>.</p>\n"
  example:
  - "\n<p>The following code example creates a sorted list with an initial capacity of 4 and populates it with 4 entries.</p>Generic.SortedList.ctor_Int32#1"
  syntax:
    content: public SortedList(int capacity)
    content.vb: Public Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
      description: "\n<p>The initial number of elements that the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> can contain.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than zero.</p>\n"
  seealso:
  - type: System.Collections.Generic.SortedList`2.Capacity
    commentId: P:System.Collections.Generic.SortedList`2.Capacity
  - type: System.Collections.Generic.Comparer`1.Default
    commentId: P:System.Collections.Generic.Comparer`1.Default
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.IComparable
    commentId: T:System.IComparable
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).SortedList(System.Int32)
- uid: System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})
  id: '#ctor(System.Int32,System.Collections.Generic.IComparer{`0})'
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: SortedList(Int32, IComparer<TKey>)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.SortedList(System.Int32, System.Collections.Generic.IComparer<TKey>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 478
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the specified initial capacity, and uses the specified <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Every key in a <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> must be unique according to the specified comparer.</p>\n<p>The capacity of a <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> can hold before resizing. As elements are added to a <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The capacity can be decreased by calling <xref href=\"System.Collections.Generic.SortedList`2.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> or by setting the <xref href=\"System.Collections.Generic.SortedList`2.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property explicitly. Decreasing the capacity reallocates memory and copies all the elements in the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is <em>capacity</em>.</p>\n"
  example:
  - "\n<p>The following code example creates a sorted list with an initial capacity of 5 and a case-insensitive comparer for the current culture. The example adds four elements, some with lower-case keys and some with upper-case keys. The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message. Finally, the example displays the elements in case-insensitive sort order.</p>Generic.SortedList.ctor_Int32IComp#1"
  syntax:
    content: public SortedList(int capacity, IComparer<TKey> comparer)
    content.vb: Public Sub New(capacity As Integer, comparer As IComparer(Of TKey))
    parameters:
    - id: capacity
      type: System.Int32
      description: "\n<p>The initial number of elements that the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> can contain.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing keys.</p>\n<p>-or-</p>\n<p>\n<strong>null</strong> to use the default <xref href=\"System.Collections.Generic.Comparer`1\" data-throw-if-not-resolved=\"false\"></xref> for the type of the key.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than zero.</p>\n"
  seealso:
  - type: System.Collections.Generic.SortedList`2.Capacity
    commentId: P:System.Collections.Generic.SortedList`2.Capacity
  - type: System.Collections.Generic.IComparer`1
    commentId: T:System.Collections.Generic.IComparer`1
  - type: System.Collections.Generic.Comparer`1.Default
    commentId: P:System.Collections.Generic.Comparer`1.Default
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.IComparable
    commentId: T:System.IComparable
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).SortedList(System.Int32, System.Collections.Generic.IComparer(Of TKey))
  name.vb: SortedList(Int32, IComparer(Of TKey))
- uid: System.Collections.Generic.SortedList`2.Capacity
  commentId: P:System.Collections.Generic.SortedList`2.Capacity
  id: Capacity
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: Capacity
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Capacity
  type: Property
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Capacity
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 222
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets or sets the number of elements that the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> can contain.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.SortedList`2.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> can store. <xref href=\"System.Collections.Generic.SortedList`2.Count\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that are actually in the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.Generic.SortedList`2.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is always greater than or equal to <xref href=\"System.Collections.Generic.SortedList`2.Count\" data-throw-if-not-resolved=\"false\"></xref>. If <xref href=\"System.Collections.Generic.SortedList`2.Count\" data-throw-if-not-resolved=\"false\"></xref> exceeds <xref href=\"System.Collections.Generic.SortedList`2.Capacity\" data-throw-if-not-resolved=\"false\"></xref> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</p>\n<p>The capacity can be decreased by calling <xref href=\"System.Collections.Generic.SortedList`2.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> or by setting the <xref href=\"System.Collections.Generic.SortedList`2.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property explicitly. When the value of <xref href=\"System.Collections.Generic.SortedList`2.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.</p>\n<p>Retrieving the value of this property is an O(1) operation; setting the property is an O(<em>n</em>) operation, where <em>n</em> is the new capacity.</p>\n"
  syntax:
    content: public int Capacity { get; set; }
    content.vb: Public Property Capacity As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of elements that the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> can contain.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<xref href=\"System.Collections.Generic.SortedList`2.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is set to a value that is less than <xref href=\"System.Collections.Generic.SortedList`2.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is not enough memory available on the system.</p>\n"
  seealso:
  - type: System.Collections.Generic.SortedList`2.Count
    commentId: P:System.Collections.Generic.SortedList`2.Count
  - type: System.Collections.Generic.SortedList`2.TrimExcess
    commentId: M:System.Collections.Generic.SortedList`2.TrimExcess
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Capacity
- uid: System.Collections.Generic.SortedList`2.Comparer
  commentId: P:System.Collections.Generic.SortedList`2.Comparer
  id: Comparer
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: Comparer
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Comparer
  type: Property
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Comparer
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 258
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> for the sorted list. </p>\n"
  remarks: "\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: public IComparer<TKey> Comparer { get; }
    content.vb: Public ReadOnly Property Comparer As IComparer(Of TKey)
    parameters: []
    return:
      type: System.Collections.Generic.IComparer{{TKey}}
      description: "\n<p>The <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> for the current <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Comparer
- uid: System.Collections.Generic.SortedList`2.Count
  commentId: P:System.Collections.Generic.SortedList`2.Count
  id: Count
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Count
  type: Property
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 285
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the number of key/value pairs contained in the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.SortedList`2.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> can store. <xref href=\"System.Collections.Generic.SortedList`2.Count\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that are actually in the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.Generic.SortedList`2.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is always greater than or equal to <xref href=\"System.Collections.Generic.SortedList`2.Count\" data-throw-if-not-resolved=\"false\"></xref>. If <xref href=\"System.Collections.Generic.SortedList`2.Count\" data-throw-if-not-resolved=\"false\"></xref> exceeds <xref href=\"System.Collections.Generic.SortedList`2.Capacity\" data-throw-if-not-resolved=\"false\"></xref> while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of key/value pairs contained in the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.SortedList`2.Capacity
    commentId: P:System.Collections.Generic.SortedList`2.Capacity
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Count
- uid: System.Collections.Generic.SortedList`2.Item(`0)
  commentId: P:System.Collections.Generic.SortedList`2.Item(`0)
  id: Item(`0)
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: Item[TKey]
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Item[TKey]
  type: Property
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 593
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets or sets the value associated with the specified key.</p>\n"
  remarks: "\n<p>This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[key]</code>.</p>\n<p>A key cannot be <strong>null</strong>, but a value can be, if the type of values in the list, <em>TValue</em>, is a reference type.</p>\n<p>If the key is not found when a value is being retrieved, <xref href=\"System.Collections.Generic.KeyNotFoundException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. If the key is not found when a value is being set, the key and value are added.</p>\n<p>You can also use the <xref href=\"System.Collections.Generic.SortedList`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property to add new elements by setting the value of a key that does not exist in the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>; for example, <code>myCollection[\"myNonexistentKey\"] = myValue</code>. However, if the specified key already exists in the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>, setting the <xref href=\"System.Collections.Generic.SortedList`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property overwrites the old value. In contrast, the <xref href=\"System.Collections.Generic.SortedList`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method does not modify existing elements.</p>\n<p>The C# language uses the  keyword to define the indexers instead of implementing the <xref href=\"System.Collections.Generic.SortedList`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property. Visual Basic implements <xref href=\"System.Collections.Generic.SortedList`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> as a default property, which provides the same indexing functionality.</p>\n<p>Retrieving the value of this property is an O(log <em>n</em>) operation, where n is <xref href=\"System.Collections.Generic.SortedList`2.Count\" data-throw-if-not-resolved=\"false\"></xref>. Setting the property is an O(log <em>n</em>) operation if the key is already in the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>. If the key is not in the list, setting the property is an O(<em>n</em>) operation for unsorted data, or O(log <em>n</em>) if the new element is added at the end of the list. If insertion causes a resize, the operation is O(<em>n</em>).</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Collections.Generic.SortedList`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property (the indexer in C#) to retrieve values, demonstrating that a <xref href=\"System.Collections.Generic.KeyNotFoundException\" data-throw-if-not-resolved=\"false\"></xref> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced. </p>\n<p>The example also shows how to use the <xref href=\"System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)\" data-throw-if-not-resolved=\"false\"></xref> method as a more efficient way to retrieve values if a program often must try key values that are not in the sorted list.</p>\n<p>This code example is part of a larger example provided for the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Generic.SortedList#3,4,5"
  syntax:
    content: public TValue this[TKey key] { get; set; }
    content.vb: Public Property Item(key As TKey) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key whose value to get or set.</p>\n"
    return:
      type: '{TValue}'
      description: "\n<p>The value associated with the specified key. If the specified key is not found, a get operation throws a <xref href=\"System.Collections.Generic.KeyNotFoundException\" data-throw-if-not-resolved=\"false\"></xref> and a set operation creates a new element using the specified key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: "\n<p>The property is retrieved and <em>key</em> does not exist in the collection.</p>\n"
  seealso:
  - type: System.Collections.Generic.SortedList`2.Add(`0,`1)
    commentId: M:System.Collections.Generic.SortedList`2.Add(`0,`1)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
- uid: System.Collections.Generic.SortedList`2.Keys
  commentId: P:System.Collections.Generic.SortedList`2.Keys
  id: Keys
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: Keys
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Keys
  type: Property
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Keys
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 297
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets a collection containing the keys in the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>, in sorted order.</p>\n"
  remarks: "\n<p>The order of the keys in the <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref> is the same as the order in the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The returned <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref> is not a static copy; instead, the <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref> refers back to the keys in the original <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, changes to the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> continue to be reflected in the <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The collection returned by the <xref href=\"System.Collections.Generic.SortedList`2.Keys\" data-throw-if-not-resolved=\"false\"></xref> property provides an efficient way to retrieve keys by index. It is not necessary to regenerate the list when the property is accessed, because the list is just a wrapper for the internal array of keys. The following code shows the use of the <xref href=\"System.Collections.Generic.SortedList`2.Keys\" data-throw-if-not-resolved=\"false\"></xref> property for indexed retrieval of keys from a sorted list of elements with string keys:</p>Generic.SortedList#11<p>Retrieving the value of this property is an O(1) operation.</p>"
  example:
  - "\n<p>The following code example shows how to enumerate the keys in the sorted list using the <xref href=\"System.Collections.Generic.SortedList`2.Keys\" data-throw-if-not-resolved=\"false\"></xref> property, and how to enumerate the keys and values in the sorted list.</p>\n<p>The example also shows how to use the <xref href=\"System.Collections.Generic.SortedList`2.Keys\" data-throw-if-not-resolved=\"false\"></xref> property for efficient indexed retrieval of keys. </p>\n<p>This code is part of a larger example that can be compiled and executed. See <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>Generic.SortedList#9,7"
  syntax:
    content: public IList<TKey> Keys { get; }
    content.vb: Public ReadOnly Property Keys As IList(Of TKey)
    parameters: []
    return:
      type: System.Collections.Generic.IList{{TKey}}
      description: "\n<p>A <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref> containing the keys in the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.IList`1
    commentId: T:System.Collections.Generic.IList`1
  - type: System.Collections.Generic.SortedList`2.Values
    commentId: P:System.Collections.Generic.SortedList`2.Values
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Keys
- uid: System.Collections.Generic.SortedList`2.Values
  commentId: P:System.Collections.Generic.SortedList`2.Values
  id: Values
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: Values
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Values
  type: Property
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Values
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 333
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets a collection containing the values in the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The order of the values in the <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref> is the same as the order in the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The returned <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref> is not a static copy; instead, the <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref> refers back to the values in the original <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, changes to the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> continue to be reflected in the <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The collection returned by the <xref href=\"System.Collections.Generic.SortedList`2.Values\" data-throw-if-not-resolved=\"false\"></xref> property provides an efficient way to retrieve values by index. It is not necessary to regenerate the list when the property is accessed, because the list is just a wrapper for the internal array of values. The following code shows the use of the <xref href=\"System.Collections.Generic.SortedList`2.Values\" data-throw-if-not-resolved=\"false\"></xref> property for indexed retrieval of values from a sorted list of strings:</p>Generic.SortedList#11<p>Retrieving the value of this property is an O(1) operation.</p>"
  example:
  - "\n<p>This code example shows how to enumerate the values in the sorted list using the <xref href=\"System.Collections.Generic.SortedList`2.Values\" data-throw-if-not-resolved=\"false\"></xref> property, and how to enumerate the keys and values in the sorted list. </p>\n<p>The example also shows how to use the <xref href=\"System.Collections.Generic.SortedList`2.Values\" data-throw-if-not-resolved=\"false\"></xref> property for efficient indexed retrieval of values. </p>\n<p>This code example is part of a larger example provided for the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Generic.SortedList#8,7"
  syntax:
    content: public IList<TValue> Values { get; }
    content.vb: Public ReadOnly Property Values As IList(Of TValue)
    parameters: []
    return:
      type: System.Collections.Generic.IList{{TValue}}
      description: "\n<p>A <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref> containing the values in the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.IList`1
    commentId: T:System.Collections.Generic.IList`1
  - type: System.Collections.Generic.SortedList`2.Keys
    commentId: P:System.Collections.Generic.SortedList`2.Keys
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Values
- uid: System.Collections.Generic.SortedList`2.Add(`0,`1)
  commentId: M:System.Collections.Generic.SortedList`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: Add(TKey, TValue)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Add(TKey, TValue)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 181
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Adds an element with the specified key and value into the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>A key cannot be <strong>null</strong>, but a value can be, if the type of values in the sorted list, <em>TValue</em>, is a reference type.</p>\n<p>You can also use the <xref href=\"System.Collections.Generic.SortedList`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property to add new elements by setting the value of a key that does not exist in the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>; for example, <code>myCollection[\"myNonexistentKey\"] = myValue</code>. However, if the specified key already exists in the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>, setting the <xref href=\"System.Collections.Generic.SortedList`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property overwrites the old value. In contrast, the <xref href=\"System.Collections.Generic.SortedList`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method does not modify existing elements.</p>\n<p>If <xref href=\"System.Collections.Generic.SortedList`2.Count\" data-throw-if-not-resolved=\"false\"></xref> already equals <xref href=\"System.Collections.Generic.SortedList`2.Capacity\" data-throw-if-not-resolved=\"false\"></xref>, the capacity of the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</p>\n<p>This method is an O(<em>n</em>) operation for unsorted data, where <em>n</em> is <xref href=\"System.Collections.Generic.SortedList`2.Count\" data-throw-if-not-resolved=\"false\"></xref>. It is an O(log <em>n</em>) operation if the new element is added at the end of the list. If insertion causes a resize, the operation is O(<em>n</em>).</p>\n"
  example:
  - "\n<p>The following code example creates an empty <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> of strings with string keys and uses the <xref href=\"System.Collections.Generic.SortedList`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method to add some elements. The example demonstrates that the <xref href=\"System.Collections.Generic.SortedList`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method throws an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> when attempting to add a duplicate key. </p>\n<p>This code example is part of a larger example provided for the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Generic.SortedList#2"
  syntax:
    content: public void Add(TKey key, TValue value)
    content.vb: Public Sub Add(key As TKey, value As TValue)
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key of the element to add.</p>\n"
    - id: value
      type: '{TValue}'
      description: "\n<p>The value of the element to add. The value can be <strong>null</strong> for reference types.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An element with the same key already exists in the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.SortedList`2.Remove(`0)
    commentId: M:System.Collections.Generic.SortedList`2.Remove(`0)
  - type: System.Collections.Generic.SortedList`2.Item(`0)
    commentId: P:System.Collections.Generic.SortedList`2.Item(`0)
  - type: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    commentId: M:System.Collections.Generic.IDictionary`2.Add(`0,`1)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Add(TKey, TValue)
- uid: System.Collections.Generic.SortedList`2.Clear
  commentId: M:System.Collections.Generic.SortedList`2.Clear
  id: Clear
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 413
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes all elements from the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.SortedList`2.Count\" data-throw-if-not-resolved=\"false\"></xref> is set to zero, and references to other objects from elements of the collection are also released.</p>\n<p>\n<xref href=\"System.Collections.Generic.SortedList`2.Capacity\" data-throw-if-not-resolved=\"false\"></xref> remains unchanged. To reset the capacity of the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>, call <xref href=\"System.Collections.Generic.SortedList`2.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> or set the <xref href=\"System.Collections.Generic.SortedList`2.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property directly. Trimming an empty <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> sets the capacity of the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> to the default capacity.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.SortedList`2.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  seealso:
  - type: System.Collections.Generic.SortedList`2.TrimExcess
    commentId: M:System.Collections.Generic.SortedList`2.TrimExcess
  - type: System.Collections.Generic.SortedList`2.Remove(`0)
    commentId: M:System.Collections.Generic.SortedList`2.Remove(`0)
  - type: System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)
    commentId: M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Clear()
- uid: System.Collections.Generic.SortedList`2.ContainsKey(`0)
  commentId: M:System.Collections.Generic.SortedList`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: ContainsKey(TKey)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.ContainsKey(TKey)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContainsKey
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 435
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Determines whether the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> contains a specific key.</p>\n"
  remarks: "\n<p>This method is an O(log <em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.SortedList`2.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to use the <xref href=\"System.Collections.Generic.SortedList`2.ContainsKey(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to test whether a key exists prior to calling the <xref href=\"System.Collections.Generic.SortedList`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method. It also shows how to use the <xref href=\"System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve values, which is an efficient way to retrieve values when a program frequently tries keys that are not in the sorted list. Finally, it shows the least efficient way to test whether keys exist, by using the <xref href=\"System.Collections.Generic.SortedList`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property (the indexer in C#).</p>\n<p>This code example is part of a larger example provided for the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Generic.SortedList#6,5,4"
  syntax:
    content: public bool ContainsKey(TKey key)
    content.vb: Public Function ContainsKey(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key to locate in the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> contains an element with the specified key; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.SortedList`2.IndexOfKey(`0)
    commentId: M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)
  - type: System.Collections.Generic.SortedList`2.ContainsValue(`1)
    commentId: M:System.Collections.Generic.SortedList`2.ContainsValue(`1)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).ContainsKey(TKey)
- uid: System.Collections.Generic.SortedList`2.ContainsValue(`1)
  commentId: M:System.Collections.Generic.SortedList`2.ContainsValue(`1)
  id: ContainsValue(`1)
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: ContainsValue(TValue)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.ContainsValue(TValue)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContainsValue
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 446
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Determines whether the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> contains a specific value.</p>\n"
  remarks: "\n<p>This method determines equality using the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> for the value type <em>TValue</em>.  <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> checks whether the value type <em>TValue</em> implements <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> and uses that implementation, if available.  If not, <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> checks whether the value type <em>TValue</em> implements <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref>.  If the value type <em>TValue</em> does not implement either interface, this method uses <see cref=\"Overload:System.Object.Equals\"></see>.</p>\n<p>This method performs a linear search; therefore, the average execution time is proportional to <xref href=\"System.Collections.Generic.SortedList`2.Count\" data-throw-if-not-resolved=\"false\"></xref>. That is, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.SortedList`2.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public bool ContainsValue(TValue value)
    content.vb: Public Function ContainsValue(value As TValue) As Boolean
    parameters:
    - id: value
      type: '{TValue}'
      description: "\n<p>The value to locate in the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong> for reference types.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> contains an element with the specified value; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.SortedList`2.IndexOfValue(`1)
    commentId: M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)
  - type: System.Collections.Generic.SortedList`2.ContainsKey(`0)
    commentId: M:System.Collections.Generic.SortedList`2.ContainsKey(`0)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).ContainsValue(TValue)
- uid: System.Collections.Generic.SortedList`2.GetEnumerator
  commentId: M:System.Collections.Generic.SortedList`2.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 559
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Returns an enumerator that iterates through the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in C++, <strong>For Each</strong> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>The dictionary is maintained in a sorted order using an internal tree. Every new element is positioned at the correct sort position, and the tree is adjusted to maintain the sort order whenever an element is removed. While enumerating, the sort order is maintained.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. At this position, <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. Therefore, you must call <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. You cannot set <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again; you must create a new enumerator instance instead.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>Default implementations of collections in <xref href=\"System.Collections.Generic\" data-throw-if-not-resolved=\"false\"></xref> are not synchronized.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of KeyValuePair(Of TKey, TValue))
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerator`1\" data-throw-if-not-resolved=\"false\"></xref> of type <xref href=\"System.Collections.Generic.KeyValuePair`2\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.IEnumerator`1
    commentId: T:System.Collections.Generic.IEnumerator`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).GetEnumerator()
- uid: System.Collections.Generic.SortedList`2.IndexOfKey(`0)
  commentId: M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)
  id: IndexOfKey(`0)
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: IndexOfKey(TKey)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.IndexOfKey(TKey)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOfKey
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 662
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Searches for the specified key and returns the zero-based index within the entire <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method performs a binary search; therefore, this method is an O(log <em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.SortedList`2.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int IndexOfKey(TKey key)
    content.vb: Public Function IndexOfKey(key As TKey) As Integer
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key to locate in the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of <em>key</em> within the entire <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>, if found; otherwise, -1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.SortedList`2.ContainsKey(`0)
    commentId: M:System.Collections.Generic.SortedList`2.ContainsKey(`0)
  - type: System.Collections.Generic.SortedList`2.IndexOfValue(`1)
    commentId: M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).IndexOfKey(TKey)
- uid: System.Collections.Generic.SortedList`2.IndexOfValue(`1)
  commentId: M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)
  id: IndexOfValue(`1)
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: IndexOfValue(TValue)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.IndexOfValue(TValue)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOfValue
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 676
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Searches for the specified value and returns the zero-based index of the first occurrence within the entire <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method determines equality using the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> for the value type <em>TValue</em>.  <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> checks whether the value type <em>TValue</em> implements <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> and uses that implementation, if available.  If not, <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> checks whether the value type <em>TValue</em> implements <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref>.  If the value type <em>TValue</em> does not implement either interface, this method uses <see cref=\"Overload:System.Object.Equals\"></see>.</p>\n<p>This method performs a linear search; therefore, the average execution time is proportional to <xref href=\"System.Collections.Generic.SortedList`2.Count\" data-throw-if-not-resolved=\"false\"></xref>. That is, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.SortedList`2.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int IndexOfValue(TValue value)
    content.vb: Public Function IndexOfValue(value As TValue) As Integer
    parameters:
    - id: value
      type: '{TValue}'
      description: "\n<p>The value to locate in the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.  The value can be <strong>null</strong> for reference types.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em> within the entire <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>, if found; otherwise, -1.</p>\n"
  seealso:
  - type: System.Collections.Generic.SortedList`2.ContainsValue(`1)
    commentId: M:System.Collections.Generic.SortedList`2.ContainsValue(`1)
  - type: System.Collections.Generic.SortedList`2.IndexOfKey(`0)
    commentId: M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).IndexOfValue(TValue)
- uid: System.Collections.Generic.SortedList`2.Remove(`0)
  commentId: M:System.Collections.Generic.SortedList`2.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: Remove(TKey)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.Remove(TKey)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 731
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes the element with the specified key from the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.SortedList`2.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to remove a key/value pair from the sorted list using the <xref href=\"System.Collections.Generic.SortedList`2.Remove(`0)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>This code example is part of a larger example provided for the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Generic.SortedList#10"
  syntax:
    content: public bool Remove(TKey key)
    content.vb: Public Function Remove(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key of the element to remove.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the element is successfully removed; otherwise, <strong>false</strong>.  This method also returns <strong>false</strong> if <em>key</em> was not found in the original <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)
    commentId: M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)
  - type: System.Collections.Generic.SortedList`2.Clear
    commentId: M:System.Collections.Generic.SortedList`2.Clear
  - type: System.Collections.Generic.SortedList`2.Add(`0,`1)
    commentId: M:System.Collections.Generic.SortedList`2.Add(`0,`1)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).Remove(TKey)
- uid: System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAt
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 712
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes the element at the specified index of the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method performs a binary search; however, the elements are moved up to fill in the open spot, so this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.SortedList`2.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void RemoveAt(int index)
    content.vb: Public Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the element to remove.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>index</em> is equal to or greater than <xref href=\"System.Collections.Generic.SortedList`2.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.SortedList`2.Remove(`0)
    commentId: M:System.Collections.Generic.SortedList`2.Remove(`0)
  - type: System.Collections.Generic.SortedList`2.Clear
    commentId: M:System.Collections.Generic.SortedList`2.Clear
  - type: System.Collections.Generic.SortedList`2.Add(`0,`1)
    commentId: M:System.Collections.Generic.SortedList`2.Add(`0,`1)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).RemoveAt(System.Int32)
- uid: System.Collections.Generic.SortedList`2.TrimExcess
  commentId: M:System.Collections.Generic.SortedList`2.TrimExcess
  id: TrimExcess
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: TrimExcess()
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.TrimExcess()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TrimExcess
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 756
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Sets the capacity to the actual number of elements in the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>, if that number is less than 90 percent of current capacity.</p>\n"
  remarks: "\n<p>This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection. The cost of reallocating and copying a large <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> can be considerable, however, so the <xref href=\"System.Collections.Generic.SortedList`2.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> method does nothing if the list is at more than 90 percent of capacity. This avoids incurring a large reallocation cost for a relatively small gain.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.SortedList`2.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>To reset a <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> to its initial state, call the <xref href=\"System.Collections.Generic.SortedList`2.Clear\" data-throw-if-not-resolved=\"false\"></xref> method before calling <xref href=\"System.Collections.Generic.SortedList`2.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> method. Trimming an empty <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> sets the capacity of the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> to the default capacity.</p>\n<p>The capacity can also be set using the <xref href=\"System.Collections.Generic.SortedList`2.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public void TrimExcess()
    content.vb: Public Sub TrimExcess
  seealso:
  - type: System.Collections.Generic.SortedList`2.Clear
    commentId: M:System.Collections.Generic.SortedList`2.Clear
  - type: System.Collections.Generic.SortedList`2.Capacity
    commentId: P:System.Collections.Generic.SortedList`2.Capacity
  - type: System.Collections.Generic.SortedList`2.Count
    commentId: P:System.Collections.Generic.SortedList`2.Count
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).TrimExcess()
- uid: System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)
  commentId: M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: System.Collections.Generic.SortedList`2
  langs:
  - csharp
  - vb
  name: TryGetValue(TKey, out TValue)
  fullName: System.Collections.Generic.SortedList<TKey, TValue>.TryGetValue(TKey, out TValue)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryGetValue
    path: src/System.Collections/src/System/Collections/Generic/SortedList.cs
    startLine: 696
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the value associated with the specified key.</p>\n"
  remarks: "\n<p>This method combines the functionality of the <xref href=\"System.Collections.Generic.SortedList`2.ContainsKey(`0)\" data-throw-if-not-resolved=\"false\"></xref> method and the <xref href=\"System.Collections.Generic.SortedList`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If the key is not found, then the <em>value</em> parameter gets the appropriate default value for the value type <em>TValue</em>; for example, zero (0) for integer types, <strong>false</strong> for Boolean types, and <strong>null</strong> for reference types.</p>\n<p>This method performs a binary search; therefore, this method is an O(log <em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.SortedList`2.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The example shows how to use the <xref href=\"System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)\" data-throw-if-not-resolved=\"false\"></xref> method as a more efficient way to retrieve values in a program that frequently tries keys that are not in the sorted list. For contrast, the example also shows how the <xref href=\"System.Collections.Generic.SortedList`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property (the indexer in C#) throws exceptions when attempting to retrieve nonexistent keys.</p>\n<p>This code example is part of a larger example provided for the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Generic.SortedList#5,4"
  syntax:
    content: public bool TryGetValue(TKey key, out TValue value)
    content.vb: Public Function TryGetValue(key As TKey, ByRef value As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key whose value to get.</p>\n"
    - id: value
      type: '{TValue}'
      description: "\n<p>When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <em>value</em> parameter. This parameter is passed uninitialized.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref> contains an element with the specified key; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.SortedList`2.ContainsKey(`0)
    commentId: M:System.Collections.Generic.SortedList`2.ContainsKey(`0)
  - type: System.Collections.Generic.SortedList`2.Item(`0)
    commentId: P:System.Collections.Generic.SortedList`2.Item(`0)
  - type: System.Collections.Generic.SortedList`2.ContainsValue(`1)
    commentId: M:System.Collections.Generic.SortedList`2.ContainsValue(`1)
  - type: System.Collections.Generic.SortedList`2.IndexOfValue(`1)
    commentId: M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.SortedList(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)
  name.vb: TryGetValue(TKey, ByRef TValue)
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2
  name: Generic.IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: Generic.IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Generic.IEnumerable(Of Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: Generic.IReadOnlyCollection<Generic.KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Generic.IReadOnlyCollection(Of Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: Generic.IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: Generic.IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: Generic.IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: Generic.IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Collections.Generic.IDictionary<, >
  fullName: System.Collections.Generic.IDictionary<, >
  fullname.vb: System.Collections.Generic.IDictionary(Of , )
  name.vb: Collections.Generic.IDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: Generic.IReadOnlyCollection<>
  fullName: System.Collections.Generic.IReadOnlyCollection<>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of )
  name.vb: Generic.IReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: false
  name: Generic.IReadOnlyDictionary<, >
  fullName: System.Collections.Generic.IReadOnlyDictionary<, >
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of , )
  name.vb: Generic.IReadOnlyDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: Generic.IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: Generic.IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IComparer{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: Collections.Generic.IComparer<TKey>
  fullName: System.Collections.Generic.IComparer<TKey>
  fullname.vb: System.Collections.Generic.IComparer(Of TKey)
  name.vb: Collections.Generic.IComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IComparer<>
  fullName: System.Collections.Generic.IComparer<>
  fullname.vb: System.Collections.Generic.IComparer(Of )
  name.vb: Collections.Generic.IComparer(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: '{TKey}'
  isExternal: false
  name: TKey
  fullName: TKey
- uid: '{TValue}'
  isExternal: false
  name: TValue
  fullName: TValue
- uid: System.Collections.Generic.IList{{TKey}}
  definition: System.Collections.Generic.IList`1
  name: IList<TKey>
  fullName: System.Collections.Generic.IList<TKey>
  fullname.vb: System.Collections.Generic.IList(Of TKey)
  name.vb: IList(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IList<>
  fullName: System.Collections.Generic.IList<>
  fullname.vb: System.Collections.Generic.IList(Of )
  name.vb: Collections.Generic.IList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList{{TValue}}
  definition: System.Collections.Generic.IList`1
  name: IList<TValue>
  fullName: System.Collections.Generic.IList<TValue>
  fullname.vb: System.Collections.Generic.IList(Of TValue)
  name.vb: IList(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.IEnumerator`1
  name: Generic.IEnumerator<Generic.KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullname.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Generic.IEnumerator(Of Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerator<>
  fullName: System.Collections.Generic.IEnumerator<>
  fullname.vb: System.Collections.Generic.IEnumerator(Of )
  name.vb: Collections.Generic.IEnumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Collections.Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Collections.Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  fullName: System.OutOfMemoryException
- uid: System.Collections.Generic.KeyNotFoundException
  isExternal: false
  name: KeyNotFoundException
  fullName: System.Collections.Generic.KeyNotFoundException
