items:
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream
  commentId: T:System.IO.IsolatedStorage.IsolatedStorageFileStream
  id: IsolatedStorageFileStream
  parent: System.IO.IsolatedStorage
  children:
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.IsolatedStorage.IsolatedStorageFile)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.IsolatedStorage.IsolatedStorageFile)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.IsolatedStorage.IsolatedStorageFile)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.FlushAsync(System.Threading.CancellationToken)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Length
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Position
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength(System.Int64)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte(System.Byte)
  langs:
  - csharp
  - vb
  name: IsolatedStorageFileStream
  nameWithType: IsolatedStorageFileStream
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream
  type: Class
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsolatedStorageFileStream
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 14
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Exposes a file within isolated storage. </p>\n"
  remarks: "\n<p>Use this class to read, write and create files in isolated storage. </p>\n<p>Since this class extends <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref>, you can use an instance of <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> in most situations where a <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> might otherwise be used, such as to construct a <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic.</p>\n<p>Isolated storage is not available for Windows 8.x Store apps. Instead, use the application data classes in the <strong>Windows.Storage</strong> namespaces included in the Windows Runtime API to store local data and files. For more information, see <see href=\"http://go.microsoft.com/fwlink/?LinkId=229175\">Application data</see> in the Windows Dev Center.</p>\n"
  syntax:
    content: 'public class IsolatedStorageFileStream : Stream, IDisposable'
    content.vb: >-
      Public Class IsolatedStorageFileStream
          Inherits Stream
          Implements IDisposable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.IO.Stream
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.IO.Stream.Null
  - System.IO.Stream.CopyToAsync(System.IO.Stream)
  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  - System.IO.Stream.CopyTo(System.IO.Stream)
  - System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
  - System.IO.Stream.Close
  - System.IO.Stream.Dispose
  - System.IO.Stream.FlushAsync
  - System.IO.Stream.CreateWaitHandle
  - System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.IO.Stream.EndRead(System.IAsyncResult)
  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.IO.Stream.EndWrite(System.IAsyncResult)
  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
  - System.IO.Stream.Synchronized(System.IO.Stream)
  - System.IO.Stream.ObjectInvariant
  - System.IO.Stream.CanTimeout
  - System.IO.Stream.ReadTimeout
  - System.IO.Stream.WriteTimeout
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.IO.Stream.System.IO.WindowsRuntimeStreamExtensions.AsInputStream
  - System.IO.Stream.System.IO.WindowsRuntimeStreamExtensions.AsOutputStream
  - System.IO.Stream.System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.IsolatedStorage.IsolatedStorageFile)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.IsolatedStorage.IsolatedStorageFile)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.IO.IsolatedStorage.IsolatedStorageFile)'
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: IsolatedStorageFileStream(String, FileMode, FileAccess, FileShare, IsolatedStorageFile)
  nameWithType: IsolatedStorageFileStream.IsolatedStorageFileStream(String, FileMode, FileAccess, FileShare, IsolatedStorageFile)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsolatedStorageFileStream(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare, System.IO.IsolatedStorage.IsolatedStorageFile)
  type: Constructor
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 36
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> class giving access to the file designated by <em>path</em>, in the specified <em>mode</em>, with the specified file <em>access</em>, using the file sharing mode specified by <em>share</em>, and in the context of the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFile\" data-throw-if-not-resolved=\"false\"></xref> specified by <em>isf</em>.</p>\n"
  remarks: "\n<p>The <em>mode</em> parameter indicates whether a new file should be created or an existing one used. The <em>access</em> parameter includes read-only, read/write, and write-only.</p>\n<p>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and can cause an exception to be thrown.</p>\n"
  syntax:
    content: public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, FileShare share, IsolatedStorageFile isf)
    content.vb: Public Sub New(path As String, mode As FileMode, access As FileAccess, share As FileShare, isf As IsolatedStorageFile)
    parameters:
    - id: path
      type: System.String
      description: "\n<p>The relative path of the file within isolated storage. </p>\n"
    - id: mode
      type: System.IO.FileMode
      description: "\n<p>One of the <xref href=\"System.IO.FileMode\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: access
      type: System.IO.FileAccess
      description: "\n<p>A bitwise combination of the <xref href=\"System.IO.FileAccess\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: share
      type: System.IO.FileShare
      description: "\n<p>A bitwise combination of the <xref href=\"System.IO.FileShare\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: isf
      type: System.IO.IsolatedStorage.IsolatedStorageFile
      description: "\n<p>The <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFile\" data-throw-if-not-resolved=\"false\"></xref> in which to open the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>path</em> is badly formed. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>No file was found and the <em>mode</em> is set to <xref href=\"System.IO.FileMode.Open\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.IO.IsolatedStorage.IsolatedStorageException
    commentId: T:System.IO.IsolatedStorage.IsolatedStorageException
    description: "\n<p>\n<em>isf</em> does not have a quota. </p>\n"
  see:
  - type: System.Security.Permissions.IsolatedStorageFilePermission
    commentId: T:System.Security.Permissions.IsolatedStorageFilePermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.IsolatedStorage.IsolatedStorageFile)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.IsolatedStorage.IsolatedStorageFile)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.IsolatedStorage.IsolatedStorageFile)'
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: IsolatedStorageFileStream(String, FileMode, FileAccess, IsolatedStorageFile)
  nameWithType: IsolatedStorageFileStream.IsolatedStorageFileStream(String, FileMode, FileAccess, IsolatedStorageFile)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsolatedStorageFileStream(System.String, System.IO.FileMode, System.IO.FileAccess, System.IO.IsolatedStorage.IsolatedStorageFile)
  type: Constructor
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 30
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> class giving access to the file designated by <em>path</em> in the specified <em>mode</em>, with the specified file <em>access</em>, and in the context of the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFile\" data-throw-if-not-resolved=\"false\"></xref> specified by <em>isf</em>.</p>\n"
  remarks: "\n<p>The <em>mode</em> parameter indicates whether a new file should be created or an existing one used. The <em>access</em> parameter includes read-only, read/write, and write-only.</p>\n<p>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and can cause an exception to be thrown.</p>\n"
  syntax:
    content: public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, IsolatedStorageFile isf)
    content.vb: Public Sub New(path As String, mode As FileMode, access As FileAccess, isf As IsolatedStorageFile)
    parameters:
    - id: path
      type: System.String
      description: "\n<p>The relative path of the file within isolated storage. </p>\n"
    - id: mode
      type: System.IO.FileMode
      description: "\n<p>One of the <xref href=\"System.IO.FileMode\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: access
      type: System.IO.FileAccess
      description: "\n<p>A bitwise combination of the <xref href=\"System.IO.FileAccess\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: isf
      type: System.IO.IsolatedStorage.IsolatedStorageFile
      description: "\n<p>The <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFile\" data-throw-if-not-resolved=\"false\"></xref> in which to open the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>path</em> is badly formed. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The isolated store is closed.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>No file was found and the <em>mode</em> is set to <xref href=\"System.IO.FileMode.Open\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.IO.IsolatedStorage.IsolatedStorageException
    commentId: T:System.IO.IsolatedStorage.IsolatedStorageException
    description: "\n<p>\n<em>isf</em> does not have a quota. </p>\n"
  see:
  - type: System.Security.Permissions.IsolatedStorageFilePermission
    commentId: T:System.Security.Permissions.IsolatedStorageFilePermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.IsolatedStorage.IsolatedStorageFile)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.#ctor(System.String,System.IO.FileMode,System.IO.IsolatedStorage.IsolatedStorageFile)
  id: '#ctor(System.String,System.IO.FileMode,System.IO.IsolatedStorage.IsolatedStorageFile)'
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: IsolatedStorageFileStream(String, FileMode, IsolatedStorageFile)
  nameWithType: IsolatedStorageFileStream.IsolatedStorageFileStream(String, FileMode, IsolatedStorageFile)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.IsolatedStorageFileStream(System.String, System.IO.FileMode, System.IO.IsolatedStorage.IsolatedStorageFile)
  type: Constructor
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 25
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> class giving access to the file designated by <em>path</em>, in the specified <em>mode</em>, and in the context of the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFile\" data-throw-if-not-resolved=\"false\"></xref> specified by <em>isf</em>.</p>\n"
  remarks: "\n<p>The <em>mode</em> parameter indicates whether a new file should be created, an existing one used, and so on.</p>\n<p>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and can cause an exception to be thrown.</p>\n"
  syntax:
    content: public IsolatedStorageFileStream(string path, FileMode mode, IsolatedStorageFile isf)
    content.vb: Public Sub New(path As String, mode As FileMode, isf As IsolatedStorageFile)
    parameters:
    - id: path
      type: System.String
      description: "\n<p>The relative path of the file within isolated storage. </p>\n"
    - id: mode
      type: System.IO.FileMode
      description: "\n<p>One of the <xref href=\"System.IO.FileMode\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: isf
      type: System.IO.IsolatedStorage.IsolatedStorageFile
      description: "\n<p>The <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFile\" data-throw-if-not-resolved=\"false\"></xref> in which to open the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>path</em> is badly formed. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>No file was found and the <em>mode</em> is set to <xref href=\"System.IO.FileMode.Open\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.IO.IsolatedStorage.IsolatedStorageException
    commentId: T:System.IO.IsolatedStorage.IsolatedStorageException
    description: "\n<p>\n<em>isf</em> does not have a quota. </p>\n"
  see:
  - type: System.Security.Permissions.IsolatedStorageFilePermission
    commentId: T:System.Security.Permissions.IsolatedStorageFilePermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead
  commentId: P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead
  id: CanRead
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: CanRead
  nameWithType: IsolatedStorageFileStream.CanRead
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanRead
  type: Property
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanRead
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 101
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Gets a Boolean value indicating whether the file can be read.</p>\n"
  remarks: "\n<p>Use this property to determine whether the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object can be read.</p>\n"
  syntax:
    content: >-
      public override bool CanRead

      {
          [Pure]
          get;
      }
    content.vb: Public Overrides ReadOnly Property CanRead As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if an <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object can be read; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.IO.Stream.CanRead
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek
  commentId: P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek
  id: CanSeek
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: CanSeek
  nameWithType: IsolatedStorageFileStream.CanSeek
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek
  type: Property
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanSeek
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 119
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Gets a Boolean value indicating whether seek operations are supported.</p>\n"
  remarks: "\n<p>Use this property to determine whether the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object supports seek operations.</p>\n"
  syntax:
    content: >-
      public override bool CanSeek

      {
          [Pure]
          get;
      }
    content.vb: Public Overrides ReadOnly Property CanSeek As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if an <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object supports seek operations; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.IO.Stream.CanSeek
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite
  commentId: P:System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite
  id: CanWrite
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: CanWrite
  nameWithType: IsolatedStorageFileStream.CanWrite
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.CanWrite
  type: Property
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanWrite
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 110
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Gets a Boolean value indicating whether you can write to the file.</p>\n"
  remarks: "\n<p>Use this property to determine whether the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object can be written.</p>\n"
  syntax:
    content: >-
      public override bool CanWrite

      {
          [Pure]
          get;
      }
    content.vb: Public Overrides ReadOnly Property CanWrite As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if an <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object can be written; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.IO.Stream.CanWrite
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Length
  commentId: P:System.IO.IsolatedStorage.IsolatedStorageFileStream.Length
  id: Length
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: IsolatedStorageFileStream.Length
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Length
  type: Property
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Length
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 128
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Gets the length of the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.Length\" data-throw-if-not-resolved=\"false\"></xref> represents the number of bytes currently in the file. It is not affected by isolated storage quota.</p>\n"
  syntax:
    content: public override long Length { get; }
    content.vb: Public Overrides ReadOnly Property Length As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The length of the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object in bytes.</p>\n"
  overridden: System.IO.Stream.Length
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Position
  commentId: P:System.IO.IsolatedStorage.IsolatedStorageFileStream.Position
  id: Position
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: Position
  nameWithType: IsolatedStorageFileStream.Position
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Position
  type: Property
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Position
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 136
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Gets or sets the current position of the current <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>Setting this property works when the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>.</p>\n"
  syntax:
    content: public override long Position { get; set; }
    content.vb: Public Overrides Property Position As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The current position of this <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  overridden: System.IO.Stream.Position
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The position cannot be set to a negative number. </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: IsolatedStorageFileStream.Dispose(Boolean)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 158
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources.</p>\n"
  remarks: "\n<p>This method is called by the public <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method and the <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> method. <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> invokes the protected <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method with the <em>disposing</em> parameter set to true. <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> invokes <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> with <em>disposing</em> set to false.</p>\n<p>When the <em>disposing</em> parameter is true, this method releases all resources held by any managed objects that this <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> references. This method invokes the <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method of each referenced object.</p>\n"
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources </p>\n"
  overridden: System.IO.Stream.Dispose(System.Boolean)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush
  id: Flush
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: Flush()
  nameWithType: IsolatedStorageFileStream.Flush()
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush()
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Flush
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 174
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Clears buffers for this stream and causes any buffered data to be written to the file.</p>\n"
  remarks: "\n<p>Because a buffer can be used for either reading or writing, but not both simultaneously, <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush\" data-throw-if-not-resolved=\"false\"></xref> performs two functions. First, any data previously written to the buffer is copied to the file and the buffer is cleared. Second, if <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.CanSeek\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong> and data was previously copied from the file to the buffer for reading, the current position within the file is decremented by the number of unread bytes in the buffer. The buffer is then cleared.</p>\n<p>Use the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method overload when you want to ensure that all buffered data in intermediate file buffers is written to disk.</p>\n"
  syntax:
    content: public override void Flush()
    content.vb: Public Overrides Sub Flush
  overridden: System.IO.Stream.Flush
  seealso:
  - type: System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush(System.Boolean)
    commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Flush(System.Boolean)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.FlushAsync(System.Threading.CancellationToken)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.FlushAsync(System.Threading.CancellationToken)
  id: FlushAsync(System.Threading.CancellationToken)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: FlushAsync(CancellationToken)
  nameWithType: IsolatedStorageFileStream.FlushAsync(CancellationToken)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.FlushAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FlushAsync
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 179
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  syntax:
    content: public override Task FlushAsync(CancellationToken cancellationToken)
    content.vb: Public Overrides Function FlushAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  overridden: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: Read(Byte[], Int32, Int32)
  nameWithType: IsolatedStorageFileStream.Read(Byte[], Int32, Int32)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Read
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 189
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Copies bytes from the current buffered <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object to an array.</p>\n"
  remarks: "\n<p>The <em>buffer</em> parameter can be an instance of the <xref href=\"System.Buffer\" data-throw-if-not-resolved=\"false\"></xref> class, or an array of one of the following types: <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>. The <em>offset</em> parameter gives the offset of the byte in buffer at which to begin writing (index in the buffer), and the <em>count</em> parameter gives the maximum number of bytes that will be read from this stream. The returned value is the actual number of bytes read, or zero if the end of the stream is reached. If the read operation is successful, the current position of the stream is advanced by the number of bytes read. If an exception occurs, the current position of the stream is unchanged.</p>\n<p>The <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method treats the <em>buffer</em> parameter as a block of bytes, regardless of its actual type. Likewise, the <em>offset</em> and <em>count</em> parameters are always specified in bytes. For <em>buffer</em> parameters other than byte arrays, this means that an element index must be multiplied by the element size in bytes to form a correct value for <em>offset</em> or <em>count</em>.</p>\n<p>The <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method will return zero only if the end of the stream is reached. In all other cases, <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> always reads at least one byte from the stream before returning. If no data is available from the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object upon a call to <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, the method will block until at least one byte of data can be returned.</p>\n"
  syntax:
    content: public override int Read(byte[] buffer, int offset, int count)
    content.vb: Public Overrides Function Read(buffer As Byte(), offset As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer to read. </p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The offset in the buffer at which to begin writing. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to read. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The total number of bytes read into the <em>buffer</em>. This can be less than the number of bytes requested if that many bytes are not currently available, or zero if the end of the stream is reached.</p>\n"
  overridden: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
  nameWithType.vb: IsolatedStorageFileStream.Read(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.IsolatedStorage.IsolatedStorageFileStream.Read(System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Byte(), Int32, Int32)
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)
  nameWithType: IsolatedStorageFileStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadAsync
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 194
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  syntax:
    content: public override Task<int> ReadAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken)
    content.vb: Public Overrides Function ReadAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As CancellationToken) As Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task{System.Int32}
  overridden: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  nameWithType.vb: IsolatedStorageFileStream.ReadAsync(Byte(), Int32, Int32, CancellationToken)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadAsync(Byte(), Int32, Int32, CancellationToken)
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte
  id: ReadByte
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: ReadByte()
  nameWithType: IsolatedStorageFileStream.ReadByte()
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.ReadByte()
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadByte
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 199
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Reads a single byte from the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object in isolated storage.</p>\n"
  syntax:
    content: public override int ReadByte()
    content.vb: Public Overrides Function ReadByte As Integer
    return:
      type: System.Int32
      description: "\n<p>The 8-bit unsigned integer value read from the isolated storage file.</p>\n"
  overridden: System.IO.Stream.ReadByte
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek(System.Int64,System.IO.SeekOrigin)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: Seek(Int64, SeekOrigin)
  nameWithType: IsolatedStorageFileStream.Seek(Int64, SeekOrigin)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Seek(System.Int64, System.IO.SeekOrigin)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Seek
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 204
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Sets the current position of this <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object to the specified value.</p>\n"
  remarks: "\n<p>Some <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> objects support positioning beyond the length of the stream, others will throw an exception in this case.</p>\n"
  syntax:
    content: public override long Seek(long offset, SeekOrigin origin)
    content.vb: Public Overrides Function Seek(offset As Long, origin As SeekOrigin) As Long
    parameters:
    - id: offset
      type: System.Int64
      description: "\n<p>The new position of the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
    - id: origin
      type: System.IO.SeekOrigin
      description: "\n<p>One of the <xref href=\"System.IO.SeekOrigin\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>The new position in the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  overridden: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>origin</em> must be one of the <xref href=\"System.IO.SeekOrigin\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength(System.Int64)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: SetLength(Int64)
  nameWithType: IsolatedStorageFileStream.SetLength(Int64)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.SetLength(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetLength
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 184
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Sets the length of this <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object to the specified <em>value</em>.</p>\n"
  remarks: "\n<p>If the specified <em>value</em> is less than the current length of the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object, the stream is truncated. If the specified <em>value</em> is larger than the current length of the stream, the stream is expanded. If the stream is expanded, the contents of the stream between the old and the new length are undefined. In order to use this method, an <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object must support both writing and seeking.</p>\n"
  syntax:
    content: public override void SetLength(long value)
    content.vb: Public Overrides Sub SetLength(value As Long)
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The new length of the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  overridden: System.IO.Stream.SetLength(System.Int64)
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>value</em> is a negative number.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: Write(Byte[], Int32, Int32)
  nameWithType: IsolatedStorageFileStream.Write(Byte[], Int32, Int32)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 211
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Writes a block of bytes to the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object using data read from a byte array.</p>\n"
  remarks: "\n<p>The <em>offset</em> parameter gives the offset of the byte in the <em>buffer</em> at which to begin reading, and the <em>count</em> parameter gives the number of bytes that will be written to this <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object. If the write operation is successful, the current position of the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object is advanced by the number of bytes written. If an exception occurs, the current position of the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object is unchanged.</p>\n"
  syntax:
    content: public override void Write(byte[] buffer, int offset, int count)
    content.vb: Public Overrides Sub Write(buffer As Byte(), offset As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer to write. </p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The byte offset in buffer from which to begin. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to write. </p>\n"
  overridden: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
  exceptions:
  - type: System.IO.IsolatedStorage.IsolatedStorageException
    commentId: T:System.IO.IsolatedStorage.IsolatedStorageException
    description: "\n<p>The write attempt exceeds the quota for the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  nameWithType.vb: IsolatedStorageFileStream.Write(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.IsolatedStorage.IsolatedStorageFileStream.Write(System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), Int32, Int32)
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)
  nameWithType: IsolatedStorageFileStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteAsync
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 216
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  syntax:
    content: public override Task WriteAsync(byte[] buffer, int offset, int count, CancellationToken cancellationToken)
    content.vb: Public Overrides Function WriteAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As CancellationToken) As Task
    parameters:
    - id: buffer
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  overridden: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  nameWithType.vb: IsolatedStorageFileStream.WriteAsync(Byte(), Int32, Int32, CancellationToken)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: WriteAsync(Byte(), Int32, Int32, CancellationToken)
- uid: System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte(System.Byte)
  commentId: M:System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte(System.Byte)
  id: WriteByte(System.Byte)
  parent: System.IO.IsolatedStorage.IsolatedStorageFileStream
  langs:
  - csharp
  - vb
  name: WriteByte(Byte)
  nameWithType: IsolatedStorageFileStream.WriteByte(Byte)
  fullName: System.IO.IsolatedStorage.IsolatedStorageFileStream.WriteByte(System.Byte)
  type: Method
  source:
    remote:
      path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteByte
    path: src/System.IO.IsolatedStorage/src/System/IO/IsolatedStorage/IsolatedStorageFileStream.cs
    startLine: 221
  assemblies:
  - System.IO.IsolatedStorage
  namespace: System.IO.IsolatedStorage
  summary: "\n<p>Writes a single byte to the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public override void WriteByte(byte value)
    content.vb: Public Overrides Sub WriteByte(value As Byte)
    parameters:
    - id: value
      type: System.Byte
      description: "\n<p>The byte value to write to the isolated storage file. </p>\n"
  overridden: System.IO.Stream.WriteByte(System.Byte)
  exceptions:
  - type: System.IO.IsolatedStorage.IsolatedStorageException
    commentId: T:System.IO.IsolatedStorage.IsolatedStorageException
    description: "\n<p>The write attempt exceeds the quota for the <xref href=\"System.IO.IsolatedStorage.IsolatedStorageFileStream\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.IO.IsolatedStorage
  isExternal: false
  name: System.IO.IsolatedStorage
  nameWithType: System.IO.IsolatedStorage
  fullName: System.IO.IsolatedStorage
  commentId: N:System.IO.IsolatedStorage
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
  commentId: T:System.Object
- uid: System.MarshalByRefObject
  parent: System
  isExternal: true
  name: MarshalByRefObject
  nameWithType: MarshalByRefObject
  fullName: System.MarshalByRefObject
  commentId: T:System.MarshalByRefObject
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
  commentId: T:System.IO.Stream
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
  commentId: T:System.IDisposable
- uid: System.IO.Stream.Null
  parent: System.IO.Stream
  isExternal: false
  nameWithType: Stream.Null
  fullName: System.IO.Stream.Null
  commentId: F:System.IO.Stream.Null
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream)
  parent: System.IO.Stream
  isExternal: false
  name: CopyToAsync(Stream)
  nameWithType: Stream.CopyToAsync(Stream)
  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream)
  spec.csharp:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream)
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: CopyToAsync(Stream, Int32)
  nameWithType: Stream.CopyToAsync(Stream, Int32)
  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32)
  spec.csharp:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)
- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: CopyToAsync(Stream, Int32, CancellationToken)
  nameWithType: Stream.CopyToAsync(Stream, Int32, CancellationToken)
  fullName: System.IO.Stream.CopyToAsync(System.IO.Stream, System.Int32, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
    name: CopyToAsync
    nameWithType: Stream.CopyToAsync
    fullName: System.IO.Stream.CopyToAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)
- uid: System.IO.Stream.CopyTo(System.IO.Stream)
  parent: System.IO.Stream
  isExternal: false
  name: CopyTo(Stream)
  nameWithType: Stream.CopyTo(Stream)
  fullName: System.IO.Stream.CopyTo(System.IO.Stream)
  spec.csharp:
  - uid: System.IO.Stream.CopyTo(System.IO.Stream)
    name: CopyTo
    nameWithType: Stream.CopyTo
    fullName: System.IO.Stream.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyTo(System.IO.Stream)
    name: CopyTo
    nameWithType: Stream.CopyTo
    fullName: System.IO.Stream.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.CopyTo(System.IO.Stream)
- uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: CopyTo(Stream, Int32)
  nameWithType: Stream.CopyTo(Stream, Int32)
  fullName: System.IO.Stream.CopyTo(System.IO.Stream, System.Int32)
  spec.csharp:
  - uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
    name: CopyTo
    nameWithType: Stream.CopyTo
    fullName: System.IO.Stream.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
    name: CopyTo
    nameWithType: Stream.CopyTo
    fullName: System.IO.Stream.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)
- uid: System.IO.Stream.Close
  parent: System.IO.Stream
  isExternal: true
  name: Close()
  nameWithType: Stream.Close()
  fullName: System.IO.Stream.Close()
  spec.csharp:
  - uid: System.IO.Stream.Close
    name: Close
    nameWithType: Stream.Close
    fullName: System.IO.Stream.Close
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Close
    name: Close
    nameWithType: Stream.Close
    fullName: System.IO.Stream.Close
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.Close
- uid: System.IO.Stream.Dispose
  parent: System.IO.Stream
  isExternal: false
  name: Dispose()
  nameWithType: Stream.Dispose()
  fullName: System.IO.Stream.Dispose()
  spec.csharp:
  - uid: System.IO.Stream.Dispose
    name: Dispose
    nameWithType: Stream.Dispose
    fullName: System.IO.Stream.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Dispose
    name: Dispose
    nameWithType: Stream.Dispose
    fullName: System.IO.Stream.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.Dispose
- uid: System.IO.Stream.FlushAsync
  parent: System.IO.Stream
  isExternal: false
  name: FlushAsync()
  nameWithType: Stream.FlushAsync()
  fullName: System.IO.Stream.FlushAsync()
  spec.csharp:
  - uid: System.IO.Stream.FlushAsync
    name: FlushAsync
    nameWithType: Stream.FlushAsync
    fullName: System.IO.Stream.FlushAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.FlushAsync
    name: FlushAsync
    nameWithType: Stream.FlushAsync
    fullName: System.IO.Stream.FlushAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.FlushAsync
- uid: System.IO.Stream.CreateWaitHandle
  parent: System.IO.Stream
  isExternal: true
  name: CreateWaitHandle()
  nameWithType: Stream.CreateWaitHandle()
  fullName: System.IO.Stream.CreateWaitHandle()
  spec.csharp:
  - uid: System.IO.Stream.CreateWaitHandle
    name: CreateWaitHandle
    nameWithType: Stream.CreateWaitHandle
    fullName: System.IO.Stream.CreateWaitHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.CreateWaitHandle
    name: CreateWaitHandle
    nameWithType: Stream.CreateWaitHandle
    fullName: System.IO.Stream.CreateWaitHandle
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.CreateWaitHandle
- uid: System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.Stream
  isExternal: true
  name: BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)
  nameWithType: Stream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)
  fullName: System.IO.Stream.BeginRead(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)
  nameWithType.vb: Stream.BeginRead(Byte(), Int32, Int32, AsyncCallback, Object)
  fullname.vb: System.IO.Stream.BeginRead(System.Byte(), System.Int32, System.Int32, System.AsyncCallback, System.Object)
  name.vb: BeginRead(Byte(), Int32, Int32, AsyncCallback, Object)
  spec.csharp:
  - uid: System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
    name: BeginRead
    nameWithType: Stream.BeginRead
    fullName: System.IO.Stream.BeginRead
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
    name: BeginRead
    nameWithType: Stream.BeginRead
    fullName: System.IO.Stream.BeginRead
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
- uid: System.IO.Stream.EndRead(System.IAsyncResult)
  parent: System.IO.Stream
  isExternal: true
  name: EndRead(IAsyncResult)
  nameWithType: Stream.EndRead(IAsyncResult)
  fullName: System.IO.Stream.EndRead(System.IAsyncResult)
  spec.csharp:
  - uid: System.IO.Stream.EndRead(System.IAsyncResult)
    name: EndRead
    nameWithType: Stream.EndRead
    fullName: System.IO.Stream.EndRead
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.EndRead(System.IAsyncResult)
    name: EndRead
    nameWithType: Stream.EndRead
    fullName: System.IO.Stream.EndRead
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.EndRead(System.IAsyncResult)
- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: ReadAsync(Byte[], Int32, Int32)
  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32)
  fullName: System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: Stream.ReadAsync(Byte(), Int32, Int32)
  fullname.vb: System.IO.Stream.ReadAsync(System.Byte(), System.Int32, System.Int32)
  name.vb: ReadAsync(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
    name: ReadAsync
    nameWithType: Stream.ReadAsync
    fullName: System.IO.Stream.ReadAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
    name: ReadAsync
    nameWithType: Stream.ReadAsync
    fullName: System.IO.Stream.ReadAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)
- uid: System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.IO.Stream
  isExternal: true
  name: BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)
  nameWithType: Stream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)
  fullName: System.IO.Stream.BeginWrite(System.Byte[], System.Int32, System.Int32, System.AsyncCallback, System.Object)
  nameWithType.vb: Stream.BeginWrite(Byte(), Int32, Int32, AsyncCallback, Object)
  fullname.vb: System.IO.Stream.BeginWrite(System.Byte(), System.Int32, System.Int32, System.AsyncCallback, System.Object)
  name.vb: BeginWrite(Byte(), Int32, Int32, AsyncCallback, Object)
  spec.csharp:
  - uid: System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
    name: BeginWrite
    nameWithType: Stream.BeginWrite
    fullName: System.IO.Stream.BeginWrite
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
    name: BeginWrite
    nameWithType: Stream.BeginWrite
    fullName: System.IO.Stream.BeginWrite
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
- uid: System.IO.Stream.EndWrite(System.IAsyncResult)
  parent: System.IO.Stream
  isExternal: true
  name: EndWrite(IAsyncResult)
  nameWithType: Stream.EndWrite(IAsyncResult)
  fullName: System.IO.Stream.EndWrite(System.IAsyncResult)
  spec.csharp:
  - uid: System.IO.Stream.EndWrite(System.IAsyncResult)
    name: EndWrite
    nameWithType: Stream.EndWrite
    fullName: System.IO.Stream.EndWrite
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.EndWrite(System.IAsyncResult)
    name: EndWrite
    nameWithType: Stream.EndWrite
    fullName: System.IO.Stream.EndWrite
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.EndWrite(System.IAsyncResult)
- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: WriteAsync(Byte[], Int32, Int32)
  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32)
  fullName: System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: Stream.WriteAsync(Byte(), Int32, Int32)
  fullname.vb: System.IO.Stream.WriteAsync(System.Byte(), System.Int32, System.Int32)
  name.vb: WriteAsync(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
    name: WriteAsync
    nameWithType: Stream.WriteAsync
    fullName: System.IO.Stream.WriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
    name: WriteAsync
    nameWithType: Stream.WriteAsync
    fullName: System.IO.Stream.WriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)
- uid: System.IO.Stream.Synchronized(System.IO.Stream)
  parent: System.IO.Stream
  isExternal: true
  name: Synchronized(Stream)
  nameWithType: Stream.Synchronized(Stream)
  fullName: System.IO.Stream.Synchronized(System.IO.Stream)
  spec.csharp:
  - uid: System.IO.Stream.Synchronized(System.IO.Stream)
    name: Synchronized
    nameWithType: Stream.Synchronized
    fullName: System.IO.Stream.Synchronized
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Synchronized(System.IO.Stream)
    name: Synchronized
    nameWithType: Stream.Synchronized
    fullName: System.IO.Stream.Synchronized
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.Synchronized(System.IO.Stream)
- uid: System.IO.Stream.ObjectInvariant
  parent: System.IO.Stream
  isExternal: true
  name: ObjectInvariant()
  nameWithType: Stream.ObjectInvariant()
  fullName: System.IO.Stream.ObjectInvariant()
  spec.csharp:
  - uid: System.IO.Stream.ObjectInvariant
    name: ObjectInvariant
    nameWithType: Stream.ObjectInvariant
    fullName: System.IO.Stream.ObjectInvariant
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ObjectInvariant
    name: ObjectInvariant
    nameWithType: Stream.ObjectInvariant
    fullName: System.IO.Stream.ObjectInvariant
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.ObjectInvariant
- uid: System.IO.Stream.CanTimeout
  parent: System.IO.Stream
  isExternal: false
  name: CanTimeout
  nameWithType: Stream.CanTimeout
  fullName: System.IO.Stream.CanTimeout
  commentId: P:System.IO.Stream.CanTimeout
- uid: System.IO.Stream.ReadTimeout
  parent: System.IO.Stream
  isExternal: false
  name: ReadTimeout
  nameWithType: Stream.ReadTimeout
  fullName: System.IO.Stream.ReadTimeout
  commentId: P:System.IO.Stream.ReadTimeout
- uid: System.IO.Stream.WriteTimeout
  parent: System.IO.Stream
  isExternal: false
  name: WriteTimeout
  nameWithType: Stream.WriteTimeout
  fullName: System.IO.Stream.WriteTimeout
  commentId: P:System.IO.Stream.WriteTimeout
- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  parent: System.MarshalByRefObject
  isExternal: true
  name: MemberwiseClone(Boolean)
  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)
  fullName: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  spec.csharp:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)
- uid: System.MarshalByRefObject.GetLifetimeService
  parent: System.MarshalByRefObject
  isExternal: true
  name: GetLifetimeService()
  nameWithType: MarshalByRefObject.GetLifetimeService()
  fullName: System.MarshalByRefObject.GetLifetimeService()
  spec.csharp:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.MarshalByRefObject.GetLifetimeService
- uid: System.MarshalByRefObject.InitializeLifetimeService
  parent: System.MarshalByRefObject
  isExternal: true
  name: InitializeLifetimeService()
  nameWithType: MarshalByRefObject.InitializeLifetimeService()
  fullName: System.MarshalByRefObject.InitializeLifetimeService()
  spec.csharp:
  - uid: System.MarshalByRefObject.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: MarshalByRefObject.InitializeLifetimeService
    fullName: System.MarshalByRefObject.InitializeLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: MarshalByRefObject.InitializeLifetimeService
    fullName: System.MarshalByRefObject.InitializeLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.MarshalByRefObject.InitializeLifetimeService
- uid: System.MarshalByRefObject.CreateObjRef(System.Type)
  parent: System.MarshalByRefObject
  isExternal: true
  name: CreateObjRef(Type)
  nameWithType: MarshalByRefObject.CreateObjRef(Type)
  fullName: System.MarshalByRefObject.CreateObjRef(System.Type)
  spec.csharp:
  - uid: System.MarshalByRefObject.CreateObjRef(System.Type)
    name: CreateObjRef
    nameWithType: MarshalByRefObject.CreateObjRef
    fullName: System.MarshalByRefObject.CreateObjRef
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.CreateObjRef(System.Type)
    name: CreateObjRef
    nameWithType: MarshalByRefObject.CreateObjRef
    fullName: System.MarshalByRefObject.CreateObjRef
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.MarshalByRefObject.CreateObjRef(System.Type)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
- uid: System.IO.Stream.System.IO.WindowsRuntimeStreamExtensions.AsInputStream
  parent: System.IO.WindowsRuntimeStreamExtensions
  definition: System.IO.WindowsRuntimeStreamExtensions.AsInputStream(System.IO.Stream)
  name: AsInputStream()
  nameWithType: WindowsRuntimeStreamExtensions.AsInputStream()
  fullName: System.IO.WindowsRuntimeStreamExtensions.AsInputStream()
  spec.csharp:
  - uid: System.IO.WindowsRuntimeStreamExtensions.AsInputStream
    name: AsInputStream
    nameWithType: WindowsRuntimeStreamExtensions.AsInputStream
    fullName: System.IO.WindowsRuntimeStreamExtensions.AsInputStream
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.WindowsRuntimeStreamExtensions.AsInputStream
    name: AsInputStream
    nameWithType: WindowsRuntimeStreamExtensions.AsInputStream
    fullName: System.IO.WindowsRuntimeStreamExtensions.AsInputStream
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.WindowsRuntimeStreamExtensions.AsInputStream(System.IO.Stream)
- uid: System.IO.Stream.System.IO.WindowsRuntimeStreamExtensions.AsOutputStream
  parent: System.IO.WindowsRuntimeStreamExtensions
  definition: System.IO.WindowsRuntimeStreamExtensions.AsOutputStream(System.IO.Stream)
  name: AsOutputStream()
  nameWithType: WindowsRuntimeStreamExtensions.AsOutputStream()
  fullName: System.IO.WindowsRuntimeStreamExtensions.AsOutputStream()
  spec.csharp:
  - uid: System.IO.WindowsRuntimeStreamExtensions.AsOutputStream
    name: AsOutputStream
    nameWithType: WindowsRuntimeStreamExtensions.AsOutputStream
    fullName: System.IO.WindowsRuntimeStreamExtensions.AsOutputStream
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.WindowsRuntimeStreamExtensions.AsOutputStream
    name: AsOutputStream
    nameWithType: WindowsRuntimeStreamExtensions.AsOutputStream
    fullName: System.IO.WindowsRuntimeStreamExtensions.AsOutputStream
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream(System.IO.Stream)
- uid: System.IO.Stream.System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream
  parent: System.IO.WindowsRuntimeStreamExtensions
  definition: System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream(System.IO.Stream)
  name: AsRandomAccessStream()
  nameWithType: WindowsRuntimeStreamExtensions.AsRandomAccessStream()
  fullName: System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream()
  spec.csharp:
  - uid: System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream
    name: AsRandomAccessStream
    nameWithType: WindowsRuntimeStreamExtensions.AsRandomAccessStream
    fullName: System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream
    name: AsRandomAccessStream
    nameWithType: WindowsRuntimeStreamExtensions.AsRandomAccessStream
    fullName: System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream(System.IO.Stream)
- uid: System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
  commentId: N:System
- uid: System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
  commentId: N:System.IO
- uid: System.IO.WindowsRuntimeStreamExtensions.AsInputStream(System.IO.Stream)
  isExternal: true
  name: AsInputStream(Stream)
  nameWithType: WindowsRuntimeStreamExtensions.AsInputStream(Stream)
  fullName: System.IO.WindowsRuntimeStreamExtensions.AsInputStream(System.IO.Stream)
  spec.csharp:
  - uid: System.IO.WindowsRuntimeStreamExtensions.AsInputStream(System.IO.Stream)
    name: AsInputStream
    nameWithType: WindowsRuntimeStreamExtensions.AsInputStream
    fullName: System.IO.WindowsRuntimeStreamExtensions.AsInputStream
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.WindowsRuntimeStreamExtensions.AsInputStream(System.IO.Stream)
    name: AsInputStream
    nameWithType: WindowsRuntimeStreamExtensions.AsInputStream
    fullName: System.IO.WindowsRuntimeStreamExtensions.AsInputStream
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.WindowsRuntimeStreamExtensions.AsInputStream(System.IO.Stream)
- uid: System.IO.WindowsRuntimeStreamExtensions
  parent: System.IO
  isExternal: false
  name: WindowsRuntimeStreamExtensions
  nameWithType: WindowsRuntimeStreamExtensions
  fullName: System.IO.WindowsRuntimeStreamExtensions
  commentId: T:System.IO.WindowsRuntimeStreamExtensions
- uid: System.IO.WindowsRuntimeStreamExtensions.AsOutputStream(System.IO.Stream)
  isExternal: true
  name: AsOutputStream(Stream)
  nameWithType: WindowsRuntimeStreamExtensions.AsOutputStream(Stream)
  fullName: System.IO.WindowsRuntimeStreamExtensions.AsOutputStream(System.IO.Stream)
  spec.csharp:
  - uid: System.IO.WindowsRuntimeStreamExtensions.AsOutputStream(System.IO.Stream)
    name: AsOutputStream
    nameWithType: WindowsRuntimeStreamExtensions.AsOutputStream
    fullName: System.IO.WindowsRuntimeStreamExtensions.AsOutputStream
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.WindowsRuntimeStreamExtensions.AsOutputStream(System.IO.Stream)
    name: AsOutputStream
    nameWithType: WindowsRuntimeStreamExtensions.AsOutputStream
    fullName: System.IO.WindowsRuntimeStreamExtensions.AsOutputStream
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.WindowsRuntimeStreamExtensions.AsOutputStream(System.IO.Stream)
- uid: System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream(System.IO.Stream)
  isExternal: true
  name: AsRandomAccessStream(Stream)
  nameWithType: WindowsRuntimeStreamExtensions.AsRandomAccessStream(Stream)
  fullName: System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream(System.IO.Stream)
  spec.csharp:
  - uid: System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream(System.IO.Stream)
    name: AsRandomAccessStream
    nameWithType: WindowsRuntimeStreamExtensions.AsRandomAccessStream
    fullName: System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream(System.IO.Stream)
    name: AsRandomAccessStream
    nameWithType: WindowsRuntimeStreamExtensions.AsRandomAccessStream
    fullName: System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.WindowsRuntimeStreamExtensions.AsRandomAccessStream(System.IO.Stream)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
  commentId: T:System.String
- uid: System.IO.FileMode
  parent: System.IO
  isExternal: false
  name: FileMode
  nameWithType: FileMode
  fullName: System.IO.FileMode
  commentId: T:System.IO.FileMode
- uid: System.IO.FileAccess
  parent: System.IO
  isExternal: false
  name: FileAccess
  nameWithType: FileAccess
  fullName: System.IO.FileAccess
  commentId: T:System.IO.FileAccess
- uid: System.IO.FileShare
  parent: System.IO
  isExternal: false
  name: FileShare
  nameWithType: FileShare
  fullName: System.IO.FileShare
  commentId: T:System.IO.FileShare
- uid: System.IO.IsolatedStorage.IsolatedStorageFile
  parent: System.IO.IsolatedStorage
  isExternal: false
  name: IsolatedStorageFile
  nameWithType: IsolatedStorageFile
  fullName: System.IO.IsolatedStorage.IsolatedStorageFile
  commentId: T:System.IO.IsolatedStorage.IsolatedStorageFile
- uid: System.IO.Stream.CanRead
  parent: System.IO.Stream
  isExternal: false
  name: CanRead
  nameWithType: Stream.CanRead
  fullName: System.IO.Stream.CanRead
  commentId: P:System.IO.Stream.CanRead
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
  commentId: T:System.Boolean
- uid: System.IO.Stream.CanSeek
  parent: System.IO.Stream
  isExternal: false
  name: CanSeek
  nameWithType: Stream.CanSeek
  fullName: System.IO.Stream.CanSeek
  commentId: P:System.IO.Stream.CanSeek
- uid: System.IO.Stream.CanWrite
  parent: System.IO.Stream
  isExternal: false
  name: CanWrite
  nameWithType: Stream.CanWrite
  fullName: System.IO.Stream.CanWrite
  commentId: P:System.IO.Stream.CanWrite
- uid: System.IO.Stream.Length
  parent: System.IO.Stream
  isExternal: false
  name: Length
  nameWithType: Stream.Length
  fullName: System.IO.Stream.Length
  commentId: P:System.IO.Stream.Length
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
  commentId: T:System.Int64
- uid: System.IO.Stream.Position
  parent: System.IO.Stream
  isExternal: false
  name: Position
  nameWithType: Stream.Position
  fullName: System.IO.Stream.Position
  commentId: P:System.IO.Stream.Position
- uid: System.IO.Stream.Dispose(System.Boolean)
  parent: System.IO.Stream
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: Stream.Dispose(Boolean)
  fullName: System.IO.Stream.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.IO.Stream.Dispose(System.Boolean)
    name: Dispose
    nameWithType: Stream.Dispose
    fullName: System.IO.Stream.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Dispose(System.Boolean)
    name: Dispose
    nameWithType: Stream.Dispose
    fullName: System.IO.Stream.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.Dispose(System.Boolean)
- uid: System.IO.Stream.Flush
  parent: System.IO.Stream
  isExternal: false
  name: Flush()
  nameWithType: Stream.Flush()
  fullName: System.IO.Stream.Flush()
  spec.csharp:
  - uid: System.IO.Stream.Flush
    name: Flush
    nameWithType: Stream.Flush
    fullName: System.IO.Stream.Flush
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Flush
    name: Flush
    nameWithType: Stream.Flush
    fullName: System.IO.Stream.Flush
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.Flush
- uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: FlushAsync(CancellationToken)
  nameWithType: Stream.FlushAsync(CancellationToken)
  fullName: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
    name: FlushAsync
    nameWithType: Stream.FlushAsync
    fullName: System.IO.Stream.FlushAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
    name: FlushAsync
    nameWithType: Stream.FlushAsync
    fullName: System.IO.Stream.FlushAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.FlushAsync(System.Threading.CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
- uid: System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  commentId: N:System.Threading
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
- uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: Read(Byte[], Int32, Int32)
  nameWithType: Stream.Read(Byte[], Int32, Int32)
  fullName: System.IO.Stream.Read(System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: Stream.Read(Byte(), Int32, Int32)
  fullname.vb: System.IO.Stream.Read(System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
    name: Read
    nameWithType: Stream.Read
    fullName: System.IO.Stream.Read
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
    name: Read
    nameWithType: Stream.Read
    fullName: System.IO.Stream.Read
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
  commentId: T:System.Int32
- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)
  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: System.IO.Stream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  nameWithType.vb: Stream.ReadAsync(Byte(), Int32, Int32, CancellationToken)
  fullname.vb: System.IO.Stream.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadAsync(Byte(), Int32, Int32, CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: ReadAsync
    nameWithType: Stream.ReadAsync
    fullName: System.IO.Stream.ReadAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: ReadAsync
    nameWithType: Stream.ReadAsync
    fullName: System.IO.Stream.ReadAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: T:System.Threading.Tasks.Task{System.Int32}
- uid: System.Threading.Tasks.Task`1
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  commentId: T:System.Threading.Tasks.Task`1
- uid: System.IO.Stream.ReadByte
  parent: System.IO.Stream
  isExternal: false
  name: ReadByte()
  nameWithType: Stream.ReadByte()
  fullName: System.IO.Stream.ReadByte()
  spec.csharp:
  - uid: System.IO.Stream.ReadByte
    name: ReadByte
    nameWithType: Stream.ReadByte
    fullName: System.IO.Stream.ReadByte
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.ReadByte
    name: ReadByte
    nameWithType: Stream.ReadByte
    fullName: System.IO.Stream.ReadByte
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.ReadByte
- uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.Stream
  isExternal: true
  name: Seek(Int64, SeekOrigin)
  nameWithType: Stream.Seek(Int64, SeekOrigin)
  fullName: System.IO.Stream.Seek(System.Int64, System.IO.SeekOrigin)
  spec.csharp:
  - uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
    name: Seek
    nameWithType: Stream.Seek
    fullName: System.IO.Stream.Seek
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.SeekOrigin
    name: SeekOrigin
    nameWithType: SeekOrigin
    fullName: System.IO.SeekOrigin
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
    name: Seek
    nameWithType: Stream.Seek
    fullName: System.IO.Stream.Seek
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IO.SeekOrigin
    name: SeekOrigin
    nameWithType: SeekOrigin
    fullName: System.IO.SeekOrigin
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: false
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
  commentId: T:System.IO.SeekOrigin
- uid: System.IO.Stream.SetLength(System.Int64)
  parent: System.IO.Stream
  isExternal: true
  name: SetLength(Int64)
  nameWithType: Stream.SetLength(Int64)
  fullName: System.IO.Stream.SetLength(System.Int64)
  spec.csharp:
  - uid: System.IO.Stream.SetLength(System.Int64)
    name: SetLength
    nameWithType: Stream.SetLength
    fullName: System.IO.Stream.SetLength
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.SetLength(System.Int64)
    name: SetLength
    nameWithType: Stream.SetLength
    fullName: System.IO.Stream.SetLength
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.SetLength(System.Int64)
- uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Stream
  isExternal: true
  name: Write(Byte[], Int32, Int32)
  nameWithType: Stream.Write(Byte[], Int32, Int32)
  fullName: System.IO.Stream.Write(System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: Stream.Write(Byte(), Int32, Int32)
  fullname.vb: System.IO.Stream.Write(System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
    name: Write
    nameWithType: Stream.Write
    fullName: System.IO.Stream.Write
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
    name: Write
    nameWithType: Stream.Write
    fullName: System.IO.Stream.Write
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)
- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.Stream
  isExternal: true
  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)
  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32, CancellationToken)
  fullName: System.IO.Stream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  nameWithType.vb: Stream.WriteAsync(Byte(), Int32, Int32, CancellationToken)
  fullname.vb: System.IO.Stream.WriteAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: WriteAsync(Byte(), Int32, Int32, CancellationToken)
  spec.csharp:
  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: WriteAsync
    nameWithType: Stream.WriteAsync
    fullName: System.IO.Stream.WriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
    name: WriteAsync
    nameWithType: Stream.WriteAsync
    fullName: System.IO.Stream.WriteAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
- uid: System.IO.Stream.WriteByte(System.Byte)
  parent: System.IO.Stream
  isExternal: true
  name: WriteByte(Byte)
  nameWithType: Stream.WriteByte(Byte)
  fullName: System.IO.Stream.WriteByte(System.Byte)
  spec.csharp:
  - uid: System.IO.Stream.WriteByte(System.Byte)
    name: WriteByte
    nameWithType: Stream.WriteByte
    fullName: System.IO.Stream.WriteByte
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.Stream.WriteByte(System.Byte)
    name: WriteByte
    nameWithType: Stream.WriteByte
    fullName: System.IO.Stream.WriteByte
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  commentId: M:System.IO.Stream.WriteByte(System.Byte)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
  commentId: T:System.Byte
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.IO.FileNotFoundException
  isExternal: false
  name: FileNotFoundException
  nameWithType: FileNotFoundException
  fullName: System.IO.FileNotFoundException
  commentId: T:System.IO.FileNotFoundException
- uid: System.IO.IsolatedStorage.IsolatedStorageException
  isExternal: false
  name: IsolatedStorageException
  nameWithType: IsolatedStorageException
  fullName: System.IO.IsolatedStorage.IsolatedStorageException
  commentId: T:System.IO.IsolatedStorage.IsolatedStorageException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
  commentId: T:System.ObjectDisposedException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
