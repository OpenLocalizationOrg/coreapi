items:
- uid: System.Xml.XmlNodeList
  commentId: T:System.Xml.XmlNodeList
  id: XmlNodeList
  parent: System.Xml
  children:
  - System.Xml.XmlNodeList.#ctor
  - System.Xml.XmlNodeList.Count
  - System.Xml.XmlNodeList.GetEnumerator
  - System.Xml.XmlNodeList.Item(System.Int32)
  - System.Xml.XmlNodeList.Item(System.Int32)
  - System.Xml.XmlNodeList.PrivateDisposeNodeList
  langs:
  - csharp
  - vb
  name: XmlNodeList
  fullName: System.Xml.XmlNodeList
  type: Class
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlNodeList
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 301
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Represents an ordered collection of nodes.</p>\n"
  remarks: "\n<p>Changes to the children of the node object that the <xref href=\"System.Xml.XmlNodeList\" data-throw-if-not-resolved=\"false\"></xref> collection was created from are immediately reflected in the nodes returned by the <strong>XmlNodeList</strong> properties and methods. <strong>XmlNodeList</strong> supports iteration and indexed access.</p>\n<p>\n<strong>XmlNodeList</strong> is returned by the following properties and methods.</p>\n<ul><li>\n<p>\n<xref href=\"System.Xml.XmlNode.ChildNodes\" data-throw-if-not-resolved=\"false\"></xref> - Returns an <strong>XmlNodeList</strong> containing all the children of the node.</p>\n</li><li>\n<p>\n<xref href=\"System.Xml.XmlNode.SelectNodes(System.String)\" data-throw-if-not-resolved=\"false\"></xref> - Returns an <strong>XmlNodeList</strong> containing a collection of nodes matching the XPath query.</p>\n</li><li>\n<p>\n<strong>GetElementsByTagName</strong> - Returns an <strong>XmlNodeList</strong> containing a list of all descendant elements that match the specified name. This method is available in both the <xref href=\"System.Xml.XmlDocument\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlElement\" data-throw-if-not-resolved=\"false\"></xref> classes.</p>\n</li></ul>\n"
  syntax:
    content: 'public abstract class XmlNodeList : Collections.IEnumerable, IDisposable'
    content.vb: >-
      Public MustInherit Class XmlNodeList
          Inherits Collections.IEnumerable
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Xml.XmlNodeList.#ctor
  commentId: M:System.Xml.XmlNodeList.#ctor
  id: '#ctor'
  parent: System.Xml.XmlNodeList
  langs:
  - csharp
  - vb
  name: XmlNodeList()
  fullName: System.Xml.XmlNodeList.XmlNodeList()
  type: Constructor
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 303
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.XmlNodeList\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - 
  syntax:
    content: protected XmlNodeList()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Xml.XmlNodeList.Count
  commentId: P:System.Xml.XmlNodeList.Count
  id: Count
  parent: System.Xml.XmlNodeList
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Xml.XmlNodeList.Count
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 304
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets the number of nodes in the <strong>XmlNodeList</strong>.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Xml.XmlDocument\" data-throw-if-not-resolved=\"false\"></xref> object and uses the <xref href=\"System.Xml.XmlDocument.GetElementsByTagName(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method and the resulting <strong>XmlNodeList</strong> to display all the book titles.</p>Classic WebData XmlElement.GetElementsByTagName Example#1<p>The example uses the file <strong>2books.xml</strong> as input.</p>Classic WebData XmlElement.GetElementsByTagName Example#2"
  syntax:
    content: public abstract int Count { get; }
    content.vb: Public MustOverride ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of nodes in the <strong>XmlNodeList</strong>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlNodeList.Item(System.Int32)
  commentId: P:System.Xml.XmlNodeList.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Xml.XmlNodeList
  langs:
  - csharp
  - vb
  name: Item[Int32]
  fullName: System.Xml.XmlNodeList.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 305
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Retrieves a node at the given index.</p>\n"
  example:
  - "\n<p>The following example gets and displays the second node in the <strong>XmlNodeList</strong>.</p>Classic WebData XmlNodeList.Item Example#1"
  syntax:
    content: public virtual XmlNode this[int i] { get; }
    content.vb: Public Overridable ReadOnly Property Item(i As Integer) As XmlNode
    parameters:
    - id: i
      type: System.Int32
    return:
      type: System.Xml.XmlNode
      description: "\n<p>The <xref href=\"System.Xml.XmlNode\" data-throw-if-not-resolved=\"false\"></xref> with the specified index in the collection. If <em>index</em> is greater than or equal to the number of nodes in the list, this returns <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: System.Xml.XmlNodeList.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Xml.XmlNodeList.GetEnumerator
  commentId: M:System.Xml.XmlNodeList.GetEnumerator
  id: GetEnumerator
  parent: System.Xml.XmlNodeList
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Xml.XmlNodeList.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 307
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets an enumerator that iterates through the collection of nodes.</p>\n"
  remarks: "\n<p>Provides a simple \"foreach\" style iteration over the collection of nodes in the <strong>XmlNodeList</strong>.</p>\n"
  example:
  - "\n<p>The following example displays all the book titles.</p>Classic WebData XmlNodeList.GetEnumerator Example#1<p>The example uses the file <strong>2books.xml</strong> as input.</p>Classic WebData XmlNodeList.GetEnumerator Example#2"
  syntax:
    content: public abstract Collections.IEnumerator GetEnumerator()
    content.vb: Public MustOverride Function GetEnumerator As Collections.IEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An enumerator used to iterate through the collection of nodes.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlNodeList.Item(System.Int32)
  commentId: M:System.Xml.XmlNodeList.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Xml.XmlNodeList
  langs:
  - csharp
  - vb
  name: Item(Int32)
  fullName: System.Xml.XmlNodeList.Item(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Item
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 308
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  syntax:
    content: public abstract XmlNode Item(int index)
    content.vb: Public MustOverride Function Item(index As Integer) As XmlNode
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.Xml.XmlNode
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlNodeList.PrivateDisposeNodeList
  commentId: M:System.Xml.XmlNodeList.PrivateDisposeNodeList
  id: PrivateDisposeNodeList
  parent: System.Xml.XmlNodeList
  langs:
  - csharp
  - vb
  name: PrivateDisposeNodeList()
  fullName: System.Xml.XmlNodeList.PrivateDisposeNodeList()
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PrivateDisposeNodeList
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 309
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Disposes resources in the node list privately.</p>\n"
  syntax:
    content: protected virtual void PrivateDisposeNodeList()
    content.vb: Protected Overridable Sub PrivateDisposeNodeList
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: System.Xml
  isExternal: false
  name: System.Xml
  fullName: System.Xml
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Xml.XmlNode
  parent: System.Xml
  isExternal: false
  name: XmlNode
  fullName: System.Xml.XmlNode
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
