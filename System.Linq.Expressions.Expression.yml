items:
- uid: System.Linq.Expressions.Expression
  id: Expression
  parent: System.Linq.Expressions
  children:
  - System.Linq.Expressions.Expression.#ctor
  - System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)
  - System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.CanReduce
  - System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  - System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Constant(System.Object)
  - System.Linq.Expressions.Expression.Constant(System.Object,System.Type)
  - System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)
  - System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Default(System.Type)
  - System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Empty
  - System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)
  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)
  - System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)
  - System.Linq.Expressions.Expression.GetActionType(System.Type[])
  - System.Linq.Expressions.Expression.GetDelegateType(System.Type[])
  - System.Linq.Expressions.Expression.GetFuncType(System.Type[])
  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)
  - System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Label
  - System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Label(System.String)
  - System.Linq.Expressions.Expression.Label(System.Type)
  - System.Linq.Expressions.Expression.Label(System.Type,System.String)
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])
  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  - System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)
  - System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})
  - System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])
  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  - System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])
  - System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  - System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])
  - System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])
  - System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.New(System.Type)
  - System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.NodeType
  - System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Parameter(System.Type)
  - System.Linq.Expressions.Expression.Parameter(System.Type,System.String)
  - System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)
  - System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)
  - System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Reduce
  - System.Linq.Expressions.Expression.ReduceAndCheck
  - System.Linq.Expressions.Expression.ReduceExtensions
  - System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Rethrow
  - System.Linq.Expressions.Expression.Rethrow(System.Type)
  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)
  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)
  - System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  - System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  - System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  - System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  - System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  - System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  - System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  - System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.Expression.SymbolDocument(System.String)
  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)
  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)
  - System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)
  - System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.ToString
  - System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  - System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  - System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)
  - System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)
  - System.Linq.Expressions.Expression.Type
  - System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)
  - System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  - System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)
  - System.Linq.Expressions.Expression.Variable(System.Type)
  - System.Linq.Expressions.Expression.Variable(System.Type,System.String)
  - System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  href: System.Linq.Expressions.Expression.yml
  name: Expression
  fullName: System.Linq.Expressions.Expression
  type: Class
  source:
    remote: &o3
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 308
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Provides the base class from which the classes that represent expression tree nodes are derived. It also contains static (Shared in Visual Basic) factory methods to create the various node types. This is an abstract class.
  syntax:
    content: 'public abstract class Expression : object'
    content.vb: Public MustInherit Class Expression Inherits Object
  inheritance:
  - System.Object
- uid: System.Linq.Expressions.Expression.#ctor
  id: '#ctor'
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Expression()
  fullName: System.Linq.Expressions.Expression.Expression()
  type: Constructor
  source:
    remote: &o0
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
    startLine: 70
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Constructs a new instance of @'System.Linq.Expressions.Expression'.
  syntax:
    content: protected Expression()
    content.vb: Protected Sub New
- uid: System.Linq.Expressions.Expression.CanReduce
  id: CanReduce
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: CanReduce
  fullName: System.Linq.Expressions.Expression.CanReduce
  type: Property
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
    startLine: 116
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Indicates that the node can be reduced to a simpler node. If this returns true, Reduce() can be called to produce the reduced form.
  syntax:
    content: public virtual bool CanReduce { get; }
    content.vb: Public Overridable ReadOnly Property CanReduce As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: True if the node can be reduced, otherwise false.
- uid: System.Linq.Expressions.Expression.NodeType
  id: NodeType
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: NodeType
  fullName: System.Linq.Expressions.Expression.NodeType
  type: Property
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
    startLine: 77
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Gets the node type of this @'System.Linq.Expressions.Expression'.
  syntax:
    content: public virtual ExpressionType NodeType { get; }
    content.vb: Public Overridable ReadOnly Property NodeType As ExpressionType
    parameters: []
    return:
      type: System.Linq.Expressions.ExpressionType
      description: One of the @'System.Linq.Expressions.ExpressionType' values.
- uid: System.Linq.Expressions.Expression.Type
  id: Type
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Type
  fullName: System.Linq.Expressions.Expression.Type
  type: Property
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
    startLine: 96
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Gets the static type of the expression that this @'System.Linq.Expressions.Expression' represents.
  syntax:
    content: public virtual Type Type { get; }
    content.vb: Public Overridable ReadOnly Property Type As Type
    parameters: []
    return:
      type: System.Type
      description: The @'System.Type' that represents the static type of the expression.
- uid: System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)
  id: Accept(System.Linq.Expressions.ExpressionVisitor)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Accept(ExpressionVisitor)
  fullName: System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
    startLine: 165
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Dispatches to the specific visit method for this node type. For example, @'System.Linq.Expressions.MethodCallExpression' calls the @'System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)'.
  syntax:
    content: protected virtual Expression Accept(ExpressionVisitor visitor)
    content.vb: Protected Overridable Function Accept(visitor As ExpressionVisitor) As Expression
    parameters:
    - id: visitor
      type: System.Linq.Expressions.ExpressionVisitor
      description: The visitor to visit this node with.
    return:
      type: System.Linq.Expressions.Expression
      description: The result of visiting this node.
- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Add(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: &o1
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1565
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an arithmetic addition operation that does not have overflow checking.
  syntax:
    content: public static BinaryExpression Add(Expression left, Expression right)
    content.vb: Public Shared Function Add(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Add' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.InvalidOperationException
    description: The addition operator is not defined for *left*.Type and *right*.Type.
- uid: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Add(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: &o2
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 126
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an arithmetic addition operation that does not have overflow checking. The implementing method can be specified.
  syntax:
    content: public static BinaryExpression Add(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function Add(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Add' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right' and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.'
  - type: System.InvalidOperationException
    description: '*method* is null and the addition operator is not defined for *left*.Type and *right*.Type.'
- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: AddAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1602
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an addition assignment operation that does not have overflow checking.
  syntax:
    content: public static BinaryExpression AddAssign(Expression left, Expression right)
    content.vb: Public Shared Function AddAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.AddAssign' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: AddAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 128
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an addition assignment operation that does not have overflow checking.
  syntax:
    content: public static BinaryExpression AddAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function AddAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.AddAssign' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: AddAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 129
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an addition assignment operation that does not have overflow checking.
  syntax:
    content: public static BinaryExpression AddAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function AddAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' to set the @'System.Linq.Expressions.BinaryExpression.Conversion' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.AddAssign' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', @'System.Linq.Expressions.BinaryExpression.Method', and @'System.Linq.Expressions.BinaryExpression.Conversion' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: AddAssignChecked(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1689
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an addition assignment operation that has overflow checking.
  syntax:
    content: public static BinaryExpression AddAssignChecked(Expression left, Expression right)
    content.vb: Public Shared Function AddAssignChecked(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.AddAssignChecked' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: AddAssignChecked(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 131
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an addition assignment operation that has overflow checking.
  syntax:
    content: public static BinaryExpression AddAssignChecked(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function AddAssignChecked(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.AddAssignChecked' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: AddAssignChecked(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 132
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an addition assignment operation that has overflow checking.
  syntax:
    content: public static BinaryExpression AddAssignChecked(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function AddAssignChecked(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' to set the @'System.Linq.Expressions.BinaryExpression.Conversion' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.AddAssignChecked' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', @'System.Linq.Expressions.BinaryExpression.Method', and @'System.Linq.Expressions.BinaryExpression.Conversion' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: AddChecked(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1749
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an arithmetic addition operation that has overflow checking.
  syntax:
    content: public static BinaryExpression AddChecked(Expression left, Expression right)
    content.vb: Public Shared Function AddChecked(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.AddChecked' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.InvalidOperationException
    description: The addition operator is not defined for *left*.Type and *right*.Type.
- uid: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: AddChecked(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 134
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an arithmetic addition operation that has overflow checking. The implementing method can be specified.
  syntax:
    content: public static BinaryExpression AddChecked(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function AddChecked(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.AddChecked' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right' and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.'
  - type: System.InvalidOperationException
    description: '*method* is null and the addition operator is not defined for *left*.Type and *right*.Type.'
- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: And(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2574
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a bitwise AND operation.
  syntax:
    content: public static BinaryExpression And(Expression left, Expression right)
    content.vb: Public Shared Function And(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.And' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.InvalidOperationException
    description: The bitwise AND operator is not defined for *left*.Type and *right*.Type.
- uid: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: And(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 136
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a bitwise AND operation. The implementing method can be specified.
  syntax:
    content: public static BinaryExpression And(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function And(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.And' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.'
  - type: System.InvalidOperationException
    description: '*method* is null and the bitwise AND operator is not defined for *left*.Type and *right*.Type.'
- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: AndAlso(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1353
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a conditional AND operation that evaluates the second operand only if the first operand evaluates to true.
  syntax:
    content: public static BinaryExpression AndAlso(Expression left, Expression right)
    content.vb: Public Shared Function AndAlso(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.AndAlso' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.InvalidOperationException
    description: The bitwise AND operator is not defined for *left*.Type and *right*.Type.-or-*left*.Type and *right*.Type are not the same Boolean type.
- uid: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: AndAlso(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 138
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a conditional AND operation that evaluates the second operand only if the first operand is resolved to true. The implementing method can be specified.
  syntax:
    content: public static BinaryExpression AndAlso(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function AndAlso(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.AndAlso' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.'
  - type: System.InvalidOperationException
    description: '*method* is null and the bitwise AND operator is not defined for *left*.Type and *right*.Type.-or-*method* is null and *left*.Type and *right*.Type are not the same Boolean type.'
- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: AndAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2611
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a bitwise AND assignment operation.
  syntax:
    content: public static BinaryExpression AndAssign(Expression left, Expression right)
    content.vb: Public Shared Function AndAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.AndAssign' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: AndAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 140
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a bitwise AND assignment operation.
  syntax:
    content: public static BinaryExpression AndAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function AndAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.AndAssign' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: AndAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 141
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a bitwise AND assignment operation.
  syntax:
    content: public static BinaryExpression AndAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function AndAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' to set the @'System.Linq.Expressions.BinaryExpression.Conversion' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.AndAssign' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', @'System.Linq.Expressions.BinaryExpression.Method', and @'System.Linq.Expressions.BinaryExpression.Conversion' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ArrayAccess(Expression, Collections.Generic.IEnumerable<Expression>)
  name.vb: ArrayAccess(Expression, Collections.Generic.IEnumerable(Of Expression))
  fullName: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  fullName.vb: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 142
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates an @'System.Linq.Expressions.IndexExpression' to access a multidimensional array.
  syntax:
    content: public static IndexExpression ArrayAccess(Expression array, Collections.Generic.IEnumerable<Expression> indexes)
    content.vb: Public Shared Function ArrayAccess(array As Expression, indexes As Collections.Generic.IEnumerable(Of Expression)) As IndexExpression
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: An expression that represents the multidimensional array.
    - id: indexes
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An @'System.Collections.Generic.IEnumerable`1' containing expressions used to index the array.
    return:
      type: System.Linq.Expressions.IndexExpression
      description: The created @'System.Linq.Expressions.IndexExpression'.
- uid: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  id: ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ArrayAccess(Expression, Expression[])
  name.vb: ArrayAccess(Expression, Expression())
  fullName: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])
  fullName.vb: System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression())
  type: Method
  source:
    remote: &o15
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/IndexExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/IndexExpression.cs
    startLine: 167
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates an @'System.Linq.Expressions.IndexExpression' to access an array.
  syntax:
    content: public static IndexExpression ArrayAccess(Expression array, params Expression[] indexes)
    content.vb: Public Shared Function ArrayAccess(array As Expression, ParamArray indexes As Expression()) As IndexExpression
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: An expression representing the array to index.
    - id: indexes
      type: System.Linq.Expressions.Expression[]
      description: An array that contains expressions used to index the array.
    return:
      type: System.Linq.Expressions.IndexExpression
      description: The created @'System.Linq.Expressions.IndexExpression'.
- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ArrayIndex(Expression, Collections.Generic.IEnumerable<Expression>)
  name.vb: ArrayIndex(Expression, Collections.Generic.IEnumerable(Of Expression))
  fullName: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  fullName.vb: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 144
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MethodCallExpression' that represents applying an array index operator to an array of rank more than one.
  syntax:
    content: public static MethodCallExpression ArrayIndex(Expression array, Collections.Generic.IEnumerable<Expression> indexes)
    content.vb: Public Shared Function ArrayIndex(array As Expression, indexes As Collections.Generic.IEnumerable(Of Expression)) As MethodCallExpression
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.MethodCallExpression.Object' property equal to.
    - id: indexes
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.Expression' objects to use to populate the @'System.Linq.Expressions.MethodCallExpression.Arguments' collection.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A @'System.Linq.Expressions.MethodCallExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Call' and the @'System.Linq.Expressions.MethodCallExpression.Object' and @'System.Linq.Expressions.MethodCallExpression.Arguments' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*array* or *indexes* is null.'
  - type: System.ArgumentException
    description: '*array*.Type does not represent an array type.-or-The rank of *array*.Type does not match the number of elements in *indexes*.-or-The @''System.Linq.Expressions.Expression.Type'' property of one or more elements of *indexes* does not represent the @''System.Int32'' type.'
- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ArrayIndex(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2955
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents applying an array index operator to an array of rank one.
  syntax:
    content: public static BinaryExpression ArrayIndex(Expression array, Expression index)
    content.vb: Public Shared Function ArrayIndex(array As Expression, index As Expression) As BinaryExpression
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: A @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: index
      type: System.Linq.Expressions.Expression
      description: A @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.ArrayIndex' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*array* or *index* is null.'
  - type: System.ArgumentException
    description: '*array*.Type does not represent an array type.-or-*array*.Type represents an array type whose rank is not 1.-or-*index*.Type does not represent the @''System.Int32'' type.'
- uid: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  id: ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ArrayIndex(Expression, Expression[])
  name.vb: ArrayIndex(Expression, Expression())
  fullName: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])
  fullName.vb: System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression())
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/MethodCallExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/MethodCallExpression.cs
    startLine: 1253
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MethodCallExpression' that represents applying an array index operator to a multidimensional array.
  syntax:
    content: public static MethodCallExpression ArrayIndex(Expression array, params Expression[] indexes)
    content.vb: Public Shared Function ArrayIndex(array As Expression, ParamArray indexes As Expression()) As MethodCallExpression
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: An array of @'System.Linq.Expressions.Expression' instances - indexes for the array index operation.
    - id: indexes
      type: System.Linq.Expressions.Expression[]
      description: An array of @'System.Linq.Expressions.Expression' objects to use to populate the @'System.Linq.Expressions.MethodCallExpression.Arguments' collection.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A @'System.Linq.Expressions.MethodCallExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Call' and the @'System.Linq.Expressions.MethodCallExpression.Object' and @'System.Linq.Expressions.MethodCallExpression.Arguments' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*array* or *indexes* is null.'
  - type: System.ArgumentException
    description: '*array*.Type does not represent an array type.-or-The rank of *array*.Type does not match the number of elements in *indexes*.-or-The @''System.Linq.Expressions.Expression.Type'' property of one or more elements of *indexes* does not represent the @''System.Int32'' type.'
- uid: System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)
  id: ArrayLength(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ArrayLength(Expression)
  fullName: System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o3
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 852
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents an expression for obtaining the length of a one-dimensional array.
  syntax:
    content: public static UnaryExpression ArrayLength(Expression array)
    content.vb: Public Shared Function ArrayLength(array As Expression) As UnaryExpression
    parameters:
    - id: array
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.UnaryExpression.Operand' property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.ArrayLength' and the @'System.Linq.Expressions.UnaryExpression.Operand' property equal to *array*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*array* is null.'
  - type: System.ArgumentException
    description: '*array*.Type does not represent an array type.'
- uid: System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Assign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 624
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an assignment operation.
  syntax:
    content: public static BinaryExpression Assign(Expression left, Expression right)
    content.vb: Public Shared Function Assign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Assign' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)
  id: Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Bind(Reflection.MemberInfo, Expression)
  fullName: System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 149
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MemberAssignment' that represents the initialization of a field or property.
  syntax:
    content: public static MemberAssignment Bind(Reflection.MemberInfo member, Expression expression)
    content.vb: Public Shared Function Bind(member As Reflection.MemberInfo, expression As Expression) As MemberAssignment
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: A @'System.Reflection.MemberInfo' to set the @'System.Linq.Expressions.MemberBinding.Member' property equal to.
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.MemberAssignment.Expression' property equal to.
    return:
      type: System.Linq.Expressions.MemberAssignment
      description: A @'System.Linq.Expressions.MemberAssignment' that has @'System.Linq.Expressions.MemberBinding.BindingType' equal to @'System.Linq.Expressions.MemberBindingType.Assignment' and the @'System.Linq.Expressions.MemberBinding.Member' and @'System.Linq.Expressions.MemberAssignment.Expression' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*member* or *expression* is null.'
  - type: System.ArgumentException
    description: '*member* does not represent a field or property.-or-The property represented by *member* does not have a set accessor.-or-*expression*.Type is not assignable to the type of the field or property that *member* represents.'
- uid: System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  id: Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Bind(Reflection.MethodInfo, Expression)
  fullName: System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 150
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MemberAssignment' that represents the initialization of a member by using a property accessor method.
  syntax:
    content: public static MemberAssignment Bind(Reflection.MethodInfo propertyAccessor, Expression expression)
    content.vb: Public Shared Function Bind(propertyAccessor As Reflection.MethodInfo, expression As Expression) As MemberAssignment
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' that represents a property accessor method.
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.MemberAssignment.Expression' property equal to.
    return:
      type: System.Linq.Expressions.MemberAssignment
      description: A @'System.Linq.Expressions.MemberAssignment' that has the @'System.Linq.Expressions.MemberBinding.BindingType' property equal to @'System.Linq.Expressions.MemberBindingType.Assignment', the @'System.Linq.Expressions.MemberBinding.Member' property set to the @'System.Reflection.PropertyInfo' that represents the property accessed in *propertyAccessor*, and the @'System.Linq.Expressions.MemberAssignment.Expression' property set to *expression*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*propertyAccessor* or *expression* is null.'
  - type: System.ArgumentException
    description: '*propertyAccessor* does not represent a property accessor method.-or-The property accessed by *propertyAccessor* does not have a set accessor.-or-*expression*.Type is not assignable to the type of the field or property that *member* represents.'
- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Block(Collections.Generic.IEnumerable<Expression>)
  name.vb: Block(Collections.Generic.IEnumerable(Of Expression))
  fullName: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 151
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BlockExpression' that contains the given expressions and has no variables.
  syntax:
    content: public static BlockExpression Block(Collections.Generic.IEnumerable<Expression> expressions)
    content.vb: Public Shared Function Block(expressions As Collections.Generic.IEnumerable(Of Expression)) As BlockExpression
    parameters:
    - id: expressions
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: The expressions in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created @'System.Linq.Expressions.BlockExpression'.
- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Block(Collections.Generic.IEnumerable<ParameterExpression>, Collections.Generic.IEnumerable<Expression>)
  name.vb: Block(Collections.Generic.IEnumerable(Of ParameterExpression), Collections.Generic.IEnumerable(Of Expression))
  fullName: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 152
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BlockExpression' that contains the given variables and expressions.
  syntax:
    content: public static BlockExpression Block(Collections.Generic.IEnumerable<ParameterExpression> variables, Collections.Generic.IEnumerable<Expression> expressions)
    content.vb: Public Shared Function Block(variables As Collections.Generic.IEnumerable(Of ParameterExpression), expressions As Collections.Generic.IEnumerable(Of Expression)) As BlockExpression
    parameters:
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: The variables in the block.
    - id: expressions
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: The expressions in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created @'System.Linq.Expressions.BlockExpression'.
- uid: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  id: Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Block(Collections.Generic.IEnumerable<ParameterExpression>, Expression[])
  name.vb: Block(Collections.Generic.IEnumerable(Of ParameterExpression), Expression())
  fullName: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Linq.Expressions.Expression[])
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Linq.Expressions.Expression())
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 153
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BlockExpression' that contains the given variables and expressions.
  syntax:
    content: public static BlockExpression Block(Collections.Generic.IEnumerable<ParameterExpression> variables, params Expression[] expressions)
    content.vb: Public Shared Function Block(variables As Collections.Generic.IEnumerable(Of ParameterExpression), ParamArray expressions As Expression()) As BlockExpression
    parameters:
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: The variables in the block.
    - id: expressions
      type: System.Linq.Expressions.Expression[]
      description: The expressions in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created @'System.Linq.Expressions.BlockExpression'.
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Block(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: &o4
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/BlockExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BlockExpression.cs
    startLine: 730
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BlockExpression' that contains two expressions and has no variables.
  syntax:
    content: public static BlockExpression Block(Expression arg0, Expression arg1)
    content.vb: Public Shared Function Block(arg0 As Expression, arg1 As Expression) As BlockExpression
    parameters:
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first expression in the block.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second expression in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created @'System.Linq.Expressions.BlockExpression'.
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Block(Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o4
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BlockExpression.cs
    startLine: 744
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BlockExpression' that contains three expressions and has no variables.
  syntax:
    content: public static BlockExpression Block(Expression arg0, Expression arg1, Expression arg2)
    content.vb: Public Shared Function Block(arg0 As Expression, arg1 As Expression, arg2 As Expression) As BlockExpression
    parameters:
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first expression in the block.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second expression in the block.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The third expression in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created @'System.Linq.Expressions.BlockExpression'.
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Block(Expression, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o4
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BlockExpression.cs
    startLine: 760
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BlockExpression' that contains four expressions and has no variables.
  syntax:
    content: public static BlockExpression Block(Expression arg0, Expression arg1, Expression arg2, Expression arg3)
    content.vb: Public Shared Function Block(arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As BlockExpression
    parameters:
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first expression in the block.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second expression in the block.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The third expression in the block.
    - id: arg3
      type: System.Linq.Expressions.Expression
      description: The fourth expression in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created @'System.Linq.Expressions.BlockExpression'.
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Block(Expression, Expression, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o4
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BlockExpression.cs
    startLine: 778
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BlockExpression' that contains five expressions and has no variables.
  syntax:
    content: public static BlockExpression Block(Expression arg0, Expression arg1, Expression arg2, Expression arg3, Expression arg4)
    content.vb: Public Shared Function Block(arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression, arg4 As Expression) As BlockExpression
    parameters:
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The first expression in the block.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The second expression in the block.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The third expression in the block.
    - id: arg3
      type: System.Linq.Expressions.Expression
      description: The fourth expression in the block.
    - id: arg4
      type: System.Linq.Expressions.Expression
      description: The fifth expression in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created @'System.Linq.Expressions.BlockExpression'.
- uid: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])
  id: Block(System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Block(Expression[])
  name.vb: Block(Expression())
  fullName: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression())
  type: Method
  source:
    remote: *o4
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BlockExpression.cs
    startLine: 794
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BlockExpression' that contains the given expressions and has no variables.
  syntax:
    content: public static BlockExpression Block(params Expression[] expressions)
    content.vb: Public Shared Function Block(ParamArray expressions As Expression()) As BlockExpression
    parameters:
    - id: expressions
      type: System.Linq.Expressions.Expression[]
      description: The expressions in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created @'System.Linq.Expressions.BlockExpression'.
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Block(Type, Collections.Generic.IEnumerable<Expression>)
  name.vb: Block(Type, Collections.Generic.IEnumerable(Of Expression))
  fullName: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 159
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BlockExpression' that contains the given expressions, has no variables and has specific result type.
  syntax:
    content: public static BlockExpression Block(Type type, Collections.Generic.IEnumerable<Expression> expressions)
    content.vb: Public Shared Function Block(type As Type, expressions As Collections.Generic.IEnumerable(Of Expression)) As BlockExpression
    parameters:
    - id: type
      type: System.Type
      description: The result type of the block.
    - id: expressions
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: The expressions in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created @'System.Linq.Expressions.BlockExpression'.
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Block(Type, Collections.Generic.IEnumerable<ParameterExpression>, Collections.Generic.IEnumerable<Expression>)
  name.vb: Block(Type, Collections.Generic.IEnumerable(Of ParameterExpression), Collections.Generic.IEnumerable(Of Expression))
  fullName: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 160
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BlockExpression' that contains the given variables and expressions.
  syntax:
    content: public static BlockExpression Block(Type type, Collections.Generic.IEnumerable<ParameterExpression> variables, Collections.Generic.IEnumerable<Expression> expressions)
    content.vb: Public Shared Function Block(type As Type, variables As Collections.Generic.IEnumerable(Of ParameterExpression), expressions As Collections.Generic.IEnumerable(Of Expression)) As BlockExpression
    parameters:
    - id: type
      type: System.Type
      description: The result type of the block.
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: The variables in the block.
    - id: expressions
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: The expressions in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created @'System.Linq.Expressions.BlockExpression'.
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  id: Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Block(Type, Collections.Generic.IEnumerable<ParameterExpression>, Expression[])
  name.vb: Block(Type, Collections.Generic.IEnumerable(Of ParameterExpression), Expression())
  fullName: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>, System.Linq.Expressions.Expression[])
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression), System.Linq.Expressions.Expression())
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 161
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BlockExpression' that contains the given variables and expressions.
  syntax:
    content: public static BlockExpression Block(Type type, Collections.Generic.IEnumerable<ParameterExpression> variables, params Expression[] expressions)
    content.vb: Public Shared Function Block(type As Type, variables As Collections.Generic.IEnumerable(Of ParameterExpression), ParamArray expressions As Expression()) As BlockExpression
    parameters:
    - id: type
      type: System.Type
      description: The result type of the block.
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: The variables in the block.
    - id: expressions
      type: System.Linq.Expressions.Expression[]
      description: The expressions in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created @'System.Linq.Expressions.BlockExpression'.
- uid: System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])
  id: Block(System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Block(Type, Expression[])
  name.vb: Block(Type, Expression())
  fullName: System.Linq.Expressions.Expression.Block(System.Type, System.Linq.Expressions.Expression[])
  fullName.vb: System.Linq.Expressions.Expression.Block(System.Type, System.Linq.Expressions.Expression())
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 162
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BlockExpression' that contains the given expressions, has no variables and has specific result type.
  syntax:
    content: public static BlockExpression Block(Type type, params Expression[] expressions)
    content.vb: Public Shared Function Block(type As Type, ParamArray expressions As Expression()) As BlockExpression
    parameters:
    - id: type
      type: System.Type
      description: The result type of the block.
    - id: expressions
      type: System.Linq.Expressions.Expression[]
      description: The expressions in the block.
    return:
      type: System.Linq.Expressions.BlockExpression
      description: The created @'System.Linq.Expressions.BlockExpression'.
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)
  id: Break(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Break(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote: &o5
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/GotoExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/GotoExpression.cs
    startLine: 130
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.GotoExpression' representing a break statement.
  syntax:
    content: public static GotoExpression Break(LabelTarget target)
    content.vb: Public Shared Function Break(target As LabelTarget) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The @'System.Linq.Expressions.LabelTarget' that the @'System.Linq.Expressions.GotoExpression' will jump to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A @'System.Linq.Expressions.GotoExpression' with @'System.Linq.Expressions.GotoExpression.Kind' equal to Break, the @'System.Linq.Expressions.GotoExpression.Target' property set to *target*, and a null value to be passed to the target label upon jumping.
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  id: Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Break(LabelTarget, Expression)
  fullName: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o5
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/GotoExpression.cs
    startLine: 145
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.GotoExpression' representing a break statement. The value passed to the label upon jumping can be specified.
  syntax:
    content: public static GotoExpression Break(LabelTarget target, Expression value)
    content.vb: Public Shared Function Break(target As LabelTarget, value As Expression) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The @'System.Linq.Expressions.LabelTarget' that the @'System.Linq.Expressions.GotoExpression' will jump to.
    - id: value
      type: System.Linq.Expressions.Expression
      description: The value that will be passed to the associated label upon jumping.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A @'System.Linq.Expressions.GotoExpression' with @'System.Linq.Expressions.GotoExpression.Kind' equal to Break, the @'System.Linq.Expressions.GotoExpression.Target' property set to *target*, and *value* to be passed to the target label upon jumping.
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  id: Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Break(LabelTarget, Expression, Type)
  fullName: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 165
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.GotoExpression' representing a break statement with the specified type. The value passed to the label upon jumping can be specified.
  syntax:
    content: public static GotoExpression Break(LabelTarget target, Expression value, Type type)
    content.vb: Public Shared Function Break(target As LabelTarget, value As Expression, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The @'System.Linq.Expressions.LabelTarget' that the @'System.Linq.Expressions.GotoExpression' will jump to.
    - id: value
      type: System.Linq.Expressions.Expression
      description: The value that will be passed to the associated label upon jumping.
    - id: type
      type: System.Type
      description: An @'System.Type' to set the @'System.Linq.Expressions.Expression.Type' property equal to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A @'System.Linq.Expressions.GotoExpression' with @'System.Linq.Expressions.GotoExpression.Kind' equal to Break, the @'System.Linq.Expressions.GotoExpression.Target' property set to *target*, the @'System.Linq.Expressions.Expression.Type' property set to *type*, and *value* to be passed to the target label upon jumping.
- uid: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)
  id: Break(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Break(LabelTarget, Type)
  fullName: System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget, System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 166
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.GotoExpression' representing a break statement with the specified type.
  syntax:
    content: public static GotoExpression Break(LabelTarget target, Type type)
    content.vb: Public Shared Function Break(target As LabelTarget, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The @'System.Linq.Expressions.LabelTarget' that the @'System.Linq.Expressions.GotoExpression' will jump to.
    - id: type
      type: System.Type
      description: An @'System.Type' to set the @'System.Linq.Expressions.Expression.Type' property equal to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A @'System.Linq.Expressions.GotoExpression' with @'System.Linq.Expressions.GotoExpression.Kind' equal to Break, the @'System.Linq.Expressions.GotoExpression.Target' property set to *target*, and the @'System.Linq.Expressions.Expression.Type' property set to *type*.
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Call(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 167
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MethodCallExpression' that represents a call to a method that takes no arguments.
  syntax:
    content: public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method)
    content.vb: Public Shared Function Call(instance As Expression, method As Reflection.MethodInfo) As MethodCallExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' that specifies the instance for an instance method call (pass null for a static (Shared in Visual Basic) method).
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.MethodCallExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A @'System.Linq.Expressions.MethodCallExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Call' and the @'System.Linq.Expressions.MethodCallExpression.Object' and @'System.Linq.Expressions.MethodCallExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*method* is null.-or-*instance* is null and *method* represents an instance method.'
  - type: System.ArgumentException
    description: '*instance*.Type is not assignable to the declaring type of the method represented by *method*.'
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Call(Expression, Reflection.MethodInfo, Collections.Generic.IEnumerable<Expression>)
  name.vb: Call(Expression, Reflection.MethodInfo, Collections.Generic.IEnumerable(Of Expression))
  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  fullName.vb: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 168
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MethodCallExpression' that represents a call to a method that takes arguments.
  syntax:
    content: public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method, Collections.Generic.IEnumerable<Expression> arguments)
    content.vb: Public Shared Function Call(instance As Expression, method As Reflection.MethodInfo, arguments As Collections.Generic.IEnumerable(Of Expression)) As MethodCallExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.MethodCallExpression.Object' property equal to (pass null for a static (Shared in Visual Basic) method).
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.MethodCallExpression.Method' property equal to.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.Expression' objects to use to populate the @'System.Linq.Expressions.MethodCallExpression.Arguments' collection.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A @'System.Linq.Expressions.MethodCallExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Call' and the @'System.Linq.Expressions.MethodCallExpression.Object', @'System.Linq.Expressions.MethodCallExpression.Method', and @'System.Linq.Expressions.MethodCallExpression.Arguments' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*method* is null.-or-*instance* is null and *method* represents an instance method.'
  - type: System.ArgumentException
    description: '*instance*.Type is not assignable to the declaring type of the method represented by *method*.-or-The number of elements in *arguments* does not equal the number of parameters for the method represented by *method*.-or-One or more of the elements of *arguments* is not assignable to the corresponding parameter for the method represented by *method*.'
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Call(Expression, Reflection.MethodInfo, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 169
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MethodCallExpression' that represents a call to a method that takes two arguments.
  syntax:
    content: public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method, Expression arg0, Expression arg1)
    content.vb: Public Shared Function Call(instance As Expression, method As Reflection.MethodInfo, arg0 As Expression, arg1 As Expression) As MethodCallExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).
    - id: method
      type: System.Reflection.MethodInfo
      description: The @'System.Reflection.MethodInfo' that represents the target method.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The @'System.Linq.Expressions.Expression' that represents the first argument.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The @'System.Linq.Expressions.Expression' that represents the second argument.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A @'System.Linq.Expressions.MethodCallExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Call' and the @'System.Linq.Expressions.MethodCallExpression.Object' and @'System.Linq.Expressions.MethodCallExpression.Method' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Call(Expression, Reflection.MethodInfo, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 170
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MethodCallExpression' that represents a call to a method that takes three arguments.
  syntax:
    content: public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method, Expression arg0, Expression arg1, Expression arg2)
    content.vb: Public Shared Function Call(instance As Expression, method As Reflection.MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression) As MethodCallExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).
    - id: method
      type: System.Reflection.MethodInfo
      description: The @'System.Reflection.MethodInfo' that represents the target method.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The @'System.Linq.Expressions.Expression' that represents the first argument.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The @'System.Linq.Expressions.Expression' that represents the second argument.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The @'System.Linq.Expressions.Expression' that represents the third argument.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A @'System.Linq.Expressions.MethodCallExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Call' and the @'System.Linq.Expressions.MethodCallExpression.Object' and @'System.Linq.Expressions.MethodCallExpression.Method' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  id: Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Call(Expression, Reflection.MethodInfo, Expression[])
  name.vb: Call(Expression, Reflection.MethodInfo, Expression())
  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])
  fullName.vb: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression())
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 171
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MethodCallExpression' that represents a call to a method that takes arguments.
  syntax:
    content: public static MethodCallExpression Call(Expression instance, Reflection.MethodInfo method, params Expression[] arguments)
    content.vb: Public Shared Function Call(instance As Expression, method As Reflection.MethodInfo, ParamArray arguments As Expression()) As MethodCallExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' that specifies the instance for an instance method call (pass null for a static (Shared in Visual Basic) method).
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.MethodCallExpression.Method' property equal to.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of @'System.Linq.Expressions.Expression' objects to use to populate the @'System.Linq.Expressions.MethodCallExpression.Arguments' collection.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A @'System.Linq.Expressions.MethodCallExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Call' and the @'System.Linq.Expressions.MethodCallExpression.Object', @'System.Linq.Expressions.MethodCallExpression.Method', and @'System.Linq.Expressions.MethodCallExpression.Arguments' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*method* is null.-or-*instance* is null and *method* represents an instance method.-or-*arguments* is not null and one or more of its elements is null.'
  - type: System.ArgumentException
    description: '*instance*.Type is not assignable to the declaring type of the method represented by *method*.-or-The number of elements in *arguments* does not equal the number of parameters for the method represented by *method*.-or-One or more of the elements of *arguments* is not assignable to the corresponding parameter for the method represented by *method*.'
- uid: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])
  id: Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Call(Expression, String, Type[], Expression[])
  name.vb: Call(Expression, String, Type(), Expression())
  fullName: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.String, System.Type[], System.Linq.Expressions.Expression[])
  fullName.vb: System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression, System.String, System.Type(), System.Linq.Expressions.Expression())
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 172
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MethodCallExpression' that represents a call to a method by calling the appropriate factory method.
  syntax:
    content: public static MethodCallExpression Call(Expression instance, string methodName, Type[] typeArguments, params Expression[] arguments)
    content.vb: Public Shared Function Call(instance As Expression, methodName As String, typeArguments As Type(), ParamArray arguments As Expression()) As MethodCallExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' whose @'System.Linq.Expressions.Expression.Type' property value will be searched for a specific method.
    - id: methodName
      type: System.String
      description: The name of the method.
    - id: typeArguments
      type: System.Type[]
      description: An array of @'System.Type' objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of @'System.Linq.Expressions.Expression' objects that represents the arguments to the method.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A @'System.Linq.Expressions.MethodCallExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Call', the @'System.Linq.Expressions.MethodCallExpression.Object' property equal to *instance*, @'System.Linq.Expressions.MethodCallExpression.Method' set to the @'System.Reflection.MethodInfo' that represents the specified instance method, and @'System.Linq.Expressions.MethodCallExpression.Arguments' set to the specified arguments.
  exceptions:
  - type: System.ArgumentNullException
    description: '*instance* or *methodName* is null.'
  - type: System.InvalidOperationException
    description: No method whose name is *methodName*, whose type parameters match *typeArguments*, and whose parameter types match *arguments* is found in *instance*.Type or its base types.-or-More than one method whose name is *methodName*, whose type parameters match *typeArguments*, and whose parameter types match *arguments* is found in *instance*.Type or its base types.
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Call(Reflection.MethodInfo, Collections.Generic.IEnumerable<Expression>)
  name.vb: Call(Reflection.MethodInfo, Collections.Generic.IEnumerable(Of Expression))
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  fullName.vb: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 173
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MethodCallExpression' that represents a call to a static (Shared in Visual Basic) method.
  syntax:
    content: public static MethodCallExpression Call(Reflection.MethodInfo method, Collections.Generic.IEnumerable<Expression> arguments)
    content.vb: Public Shared Function Call(method As Reflection.MethodInfo, arguments As Collections.Generic.IEnumerable(Of Expression)) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: The @'System.Reflection.MethodInfo' that represents the target method.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: A collection of @'System.Linq.Expressions.Expression' that represents the call arguments.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A @'System.Linq.Expressions.MethodCallExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Call' and the @'System.Linq.Expressions.MethodCallExpression.Object' and @'System.Linq.Expressions.MethodCallExpression.Method' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Call(Reflection.MethodInfo, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 174
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MethodCallExpression' that represents a call to a static (Shared in Visual Basic) method that takes one argument.
  syntax:
    content: public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0)
    content.vb: Public Shared Function Call(method As Reflection.MethodInfo, arg0 As Expression) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.MethodCallExpression.Method' property equal to.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The @'System.Linq.Expressions.Expression' that represents the first argument.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A @'System.Linq.Expressions.MethodCallExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Call' and the @'System.Linq.Expressions.MethodCallExpression.Object' and @'System.Linq.Expressions.MethodCallExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*method* is null.'
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Call(Reflection.MethodInfo, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 175
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MethodCallExpression' that represents a call to a static method that takes two arguments.
  syntax:
    content: public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0, Expression arg1)
    content.vb: Public Shared Function Call(method As Reflection.MethodInfo, arg0 As Expression, arg1 As Expression) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.MethodCallExpression.Method' property equal to.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The @'System.Linq.Expressions.Expression' that represents the first argument.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The @'System.Linq.Expressions.Expression' that represents the second argument.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A @'System.Linq.Expressions.MethodCallExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Call' and the @'System.Linq.Expressions.MethodCallExpression.Object' and @'System.Linq.Expressions.MethodCallExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*method* is null.'
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Call(Reflection.MethodInfo, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 176
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MethodCallExpression' that represents a call to a static method that takes three arguments.
  syntax:
    content: public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0, Expression arg1, Expression arg2)
    content.vb: Public Shared Function Call(method As Reflection.MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.MethodCallExpression.Method' property equal to.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The @'System.Linq.Expressions.Expression' that represents the first argument.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The @'System.Linq.Expressions.Expression' that represents the second argument.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The @'System.Linq.Expressions.Expression' that represents the third argument.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A @'System.Linq.Expressions.MethodCallExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Call' and the @'System.Linq.Expressions.MethodCallExpression.Object' and @'System.Linq.Expressions.MethodCallExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*method* is null.'
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Call(Reflection.MethodInfo, Expression, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 177
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MethodCallExpression' that represents a call to a static method that takes four arguments.
  syntax:
    content: public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0, Expression arg1, Expression arg2, Expression arg3)
    content.vb: Public Shared Function Call(method As Reflection.MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.MethodCallExpression.Method' property equal to.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The @'System.Linq.Expressions.Expression' that represents the first argument.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The @'System.Linq.Expressions.Expression' that represents the second argument.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The @'System.Linq.Expressions.Expression' that represents the third argument.
    - id: arg3
      type: System.Linq.Expressions.Expression
      description: The @'System.Linq.Expressions.Expression' that represents the fourth argument.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A @'System.Linq.Expressions.MethodCallExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Call' and the @'System.Linq.Expressions.MethodCallExpression.Object' and @'System.Linq.Expressions.MethodCallExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*method* is null.'
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Call(Reflection.MethodInfo, Expression, Expression, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 178
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MethodCallExpression' that represents a call to a static method that takes five arguments.
  syntax:
    content: public static MethodCallExpression Call(Reflection.MethodInfo method, Expression arg0, Expression arg1, Expression arg2, Expression arg3, Expression arg4)
    content.vb: Public Shared Function Call(method As Reflection.MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression, arg4 As Expression) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.MethodCallExpression.Method' property equal to.
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: The @'System.Linq.Expressions.Expression' that represents the first argument.
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: The @'System.Linq.Expressions.Expression' that represents the second argument.
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: The @'System.Linq.Expressions.Expression' that represents the third argument.
    - id: arg3
      type: System.Linq.Expressions.Expression
      description: The @'System.Linq.Expressions.Expression' that represents the fourth argument.
    - id: arg4
      type: System.Linq.Expressions.Expression
      description: The @'System.Linq.Expressions.Expression' that represents the fifth argument.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A @'System.Linq.Expressions.MethodCallExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Call' and the @'System.Linq.Expressions.MethodCallExpression.Object' and @'System.Linq.Expressions.MethodCallExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*method* is null.'
- uid: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  id: Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Call(Reflection.MethodInfo, Expression[])
  name.vb: Call(Reflection.MethodInfo, Expression())
  fullName: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])
  fullName.vb: System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo, System.Linq.Expressions.Expression())
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 179
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MethodCallExpression' that represents a call to a static (Shared in Visual Basic) method that has arguments.
  syntax:
    content: public static MethodCallExpression Call(Reflection.MethodInfo method, params Expression[] arguments)
    content.vb: Public Shared Function Call(method As Reflection.MethodInfo, ParamArray arguments As Expression()) As MethodCallExpression
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' that represents a static (Shared in Visual Basic) method to set the @'System.Linq.Expressions.MethodCallExpression.Method' property equal to.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of @'System.Linq.Expressions.Expression' objects to use to populate the @'System.Linq.Expressions.MethodCallExpression.Arguments' collection.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A @'System.Linq.Expressions.MethodCallExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Call' and the @'System.Linq.Expressions.MethodCallExpression.Method' and @'System.Linq.Expressions.MethodCallExpression.Arguments' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*method* is null.'
  - type: System.ArgumentException
    description: The number of elements in *arguments* does not equal the number of parameters for the method represented by *method*.-or-One or more of the elements of *arguments* is not assignable to the corresponding parameter for the method represented by *method*.
- uid: System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])
  id: Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Call(Type, String, Type[], Expression[])
  name.vb: Call(Type, String, Type(), Expression())
  fullName: System.Linq.Expressions.Expression.Call(System.Type, System.String, System.Type[], System.Linq.Expressions.Expression[])
  fullName.vb: System.Linq.Expressions.Expression.Call(System.Type, System.String, System.Type(), System.Linq.Expressions.Expression())
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 180
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MethodCallExpression' that represents a call to a static (Shared in Visual Basic) method by calling the appropriate factory method.
  syntax:
    content: public static MethodCallExpression Call(Type type, string methodName, Type[] typeArguments, params Expression[] arguments)
    content.vb: Public Shared Function Call(type As Type, methodName As String, typeArguments As Type(), ParamArray arguments As Expression()) As MethodCallExpression
    parameters:
    - id: type
      type: System.Type
      description: The @'System.Type' that specifies the type that contains the specified static (Shared in Visual Basic) method.
    - id: methodName
      type: System.String
      description: The name of the method.
    - id: typeArguments
      type: System.Type[]
      description: An array of @'System.Type' objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of @'System.Linq.Expressions.Expression' objects that represent the arguments to the method.
    return:
      type: System.Linq.Expressions.MethodCallExpression
      description: A @'System.Linq.Expressions.MethodCallExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Call', the @'System.Linq.Expressions.MethodCallExpression.Method' property set to the @'System.Reflection.MethodInfo' that represents the specified static (Shared in Visual Basic) method, and the @'System.Linq.Expressions.MethodCallExpression.Arguments' property set to the specified arguments.
  exceptions:
  - type: System.ArgumentNullException
    description: '*type* or *methodName* is null.'
  - type: System.InvalidOperationException
    description: No method whose name is *methodName*, whose type parameters match *typeArguments*, and whose parameter types match *arguments* is found in *type* or its base types.-or-More than one method whose name is *methodName*, whose type parameters match *typeArguments*, and whose parameter types match *arguments* is found in *type* or its base types.
- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)
  id: Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Catch(ParameterExpression, Expression)
  fullName: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: &o6
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/CatchBlock.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/CatchBlock.cs
    startLine: 113
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.CatchBlock' representing a catch statement with a reference to the caught @'System.Exception' object for use in the handler body.
  syntax:
    content: public static CatchBlock Catch(ParameterExpression variable, Expression body)
    content.vb: Public Shared Function Catch(variable As ParameterExpression, body As Expression) As CatchBlock
    parameters:
    - id: variable
      type: System.Linq.Expressions.ParameterExpression
      description: A @'System.Linq.Expressions.ParameterExpression' representing a reference to the @'System.Exception' object caught by this handler.
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the catch statement.
    return:
      type: System.Linq.Expressions.CatchBlock
      description: The created @'System.Linq.Expressions.CatchBlock'.
- uid: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Catch(ParameterExpression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o6
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/CatchBlock.cs
    startLine: 140
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.CatchBlock' representing a catch statement with an @'System.Exception' filter and a reference to the caught @'System.Exception' object.
  syntax:
    content: public static CatchBlock Catch(ParameterExpression variable, Expression body, Expression filter)
    content.vb: Public Shared Function Catch(variable As ParameterExpression, body As Expression, filter As Expression) As CatchBlock
    parameters:
    - id: variable
      type: System.Linq.Expressions.ParameterExpression
      description: A @'System.Linq.Expressions.ParameterExpression' representing a reference to the @'System.Exception' object caught by this handler.
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the catch statement.
    - id: filter
      type: System.Linq.Expressions.Expression
      description: The body of the @'System.Exception' filter.
    return:
      type: System.Linq.Expressions.CatchBlock
      description: The created @'System.Linq.Expressions.CatchBlock'.
- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)
  id: Catch(System.Type,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Catch(Type, Expression)
  fullName: System.Linq.Expressions.Expression.Catch(System.Type, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 183
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.CatchBlock' representing a catch statement.
  syntax:
    content: public static CatchBlock Catch(Type type, Expression body)
    content.vb: Public Shared Function Catch(type As Type, body As Expression) As CatchBlock
    parameters:
    - id: type
      type: System.Type
      description: The @'System.Linq.Expressions.Expression.Type' of @'System.Exception' this @'System.Linq.Expressions.CatchBlock' will handle.
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the catch statement.
    return:
      type: System.Linq.Expressions.CatchBlock
      description: The created @'System.Linq.Expressions.CatchBlock'.
- uid: System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Catch(Type, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Catch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 184
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.CatchBlock' representing a catch statement with an @'System.Exception' filter but no reference to the caught @'System.Exception' object.
  syntax:
    content: public static CatchBlock Catch(Type type, Expression body, Expression filter)
    content.vb: Public Shared Function Catch(type As Type, body As Expression, filter As Expression) As CatchBlock
    parameters:
    - id: type
      type: System.Type
      description: The @'System.Linq.Expressions.Expression.Type' of @'System.Exception' this @'System.Linq.Expressions.CatchBlock' will handle.
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the catch statement.
    - id: filter
      type: System.Linq.Expressions.Expression
      description: The body of the @'System.Exception' filter.
    return:
      type: System.Linq.Expressions.CatchBlock
      description: The created @'System.Linq.Expressions.CatchBlock'.
- uid: System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  id: ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ClearDebugInfo(SymbolDocumentInfo)
  fullName: System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)
  type: Method
  source:
    remote: &o7
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/DebugInfoExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/DebugInfoExpression.cs
    startLine: 244
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.DebugInfoExpression' for clearing a sequence point.
  syntax:
    content: public static DebugInfoExpression ClearDebugInfo(SymbolDocumentInfo document)
    content.vb: Public Shared Function ClearDebugInfo(document As SymbolDocumentInfo) As DebugInfoExpression
    parameters:
    - id: document
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: The @'System.Linq.Expressions.SymbolDocumentInfo' that represents the source file.
    return:
      type: System.Linq.Expressions.DebugInfoExpression
      description: An instance of @'System.Linq.Expressions.DebugInfoExpression' for clearning a sequence point.
- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Coalesce(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1464
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a coalescing operation.
  syntax:
    content: public static BinaryExpression Coalesce(Expression left, Expression right)
    content.vb: Public Shared Function Coalesce(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Coalesce' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.InvalidOperationException
    description: The @'System.Linq.Expressions.Expression.Type' property of *left* does not represent a reference type or a nullable value type.
  - type: System.ArgumentException
    description: '*left*.Type and *right*.Type are not convertible to each other.'
- uid: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)
  id: Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Coalesce(Expression, Expression, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1478
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a coalescing operation, given a conversion function.
  syntax:
    content: public static BinaryExpression Coalesce(Expression left, Expression right, LambdaExpression conversion)
    content.vb: Public Shared Function Coalesce(left As Expression, right As Expression, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' to set the @'System.Linq.Expressions.BinaryExpression.Conversion' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Coalesce' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right' and @'System.Linq.Expressions.BinaryExpression.Conversion' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.ArgumentException
    description: '*left*.Type and *right*.Type are not convertible to each other.-or-*conversion* is not null and *conversion*.Type is a delegate type that does not take exactly one argument.'
  - type: System.InvalidOperationException
    description: The @'System.Linq.Expressions.Expression.Type' property of *left* does not represent a reference type or a nullable value type.-or-The @'System.Linq.Expressions.Expression.Type' property of *left* represents a type that is not assignable to the parameter type of the delegate type *conversion*.Type.-or-The @'System.Linq.Expressions.Expression.Type' property of *right* is not equal to the return type of the delegate type *conversion*.Type.
- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Condition(Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: &o8
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/ConditionalExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/ConditionalExpression.cs
    startLine: 159
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.ConditionalExpression' that represents a conditional statement.
  syntax:
    content: public static ConditionalExpression Condition(Expression test, Expression ifTrue, Expression ifFalse)
    content.vb: Public Shared Function Condition(test As Expression, ifTrue As Expression, ifFalse As Expression) As ConditionalExpression
    parameters:
    - id: test
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.ConditionalExpression.Test' property equal to.
    - id: ifTrue
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.ConditionalExpression.IfTrue' property equal to.
    - id: ifFalse
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.ConditionalExpression.IfFalse' property equal to.
    return:
      type: System.Linq.Expressions.ConditionalExpression
      description: A @'System.Linq.Expressions.ConditionalExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Conditional' and the @'System.Linq.Expressions.ConditionalExpression.Test', @'System.Linq.Expressions.ConditionalExpression.IfTrue', and @'System.Linq.Expressions.ConditionalExpression.IfFalse' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*test* or *ifTrue* or *ifFalse* is null.'
  - type: System.ArgumentException
    description: '*test*.Type is not @''System.Boolean''.-or-*ifTrue*.Type is not equal to *ifFalse*.Type.'
- uid: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)
  id: Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Condition(Expression, Expression, Expression, Type)
  fullName: System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 189
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.ConditionalExpression' that represents a conditional statement.
  syntax:
    content: public static ConditionalExpression Condition(Expression test, Expression ifTrue, Expression ifFalse, Type type)
    content.vb: Public Shared Function Condition(test As Expression, ifTrue As Expression, ifFalse As Expression, type As Type) As ConditionalExpression
    parameters:
    - id: test
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.ConditionalExpression.Test' property equal to.
    - id: ifTrue
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.ConditionalExpression.IfTrue' property equal to.
    - id: ifFalse
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.ConditionalExpression.IfFalse' property equal to.
    - id: type
      type: System.Type
      description: A @'System.Linq.Expressions.Expression.Type' to set the @'System.Linq.Expressions.Expression.Type' property equal to.
    return:
      type: System.Linq.Expressions.ConditionalExpression
      description: A @'System.Linq.Expressions.ConditionalExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Conditional' and the @'System.Linq.Expressions.ConditionalExpression.Test', @'System.Linq.Expressions.ConditionalExpression.IfTrue', and @'System.Linq.Expressions.ConditionalExpression.IfFalse' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.Constant(System.Object)
  id: Constant(System.Object)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Constant(Object)
  fullName: System.Linq.Expressions.Expression.Constant(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/ConstantExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/ConstantExpression.cs
    startLine: 105
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.ConstantExpression' that has the @'System.Linq.Expressions.ConstantExpression.Value' property set to the specified value.
  syntax:
    content: public static ConstantExpression Constant(object value)
    content.vb: Public Shared Function Constant(value As Object) As ConstantExpression
    parameters:
    - id: value
      type: System.Object
      description: An @'System.Object' to set the @'System.Linq.Expressions.ConstantExpression.Value' property equal to.
    return:
      type: System.Linq.Expressions.ConstantExpression
      description: A @'System.Linq.Expressions.ConstantExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Constant' and the @'System.Linq.Expressions.ConstantExpression.Value' property set to the specified value.
- uid: System.Linq.Expressions.Expression.Constant(System.Object,System.Type)
  id: Constant(System.Object,System.Type)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Constant(Object, Type)
  fullName: System.Linq.Expressions.Expression.Constant(System.Object, System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 191
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.ConstantExpression' that has the @'System.Linq.Expressions.ConstantExpression.Value' and @'System.Linq.Expressions.Expression.Type' properties set to the specified values.
  syntax:
    content: public static ConstantExpression Constant(object value, Type type)
    content.vb: Public Shared Function Constant(value As Object, type As Type) As ConstantExpression
    parameters:
    - id: value
      type: System.Object
      description: An @'System.Object' to set the @'System.Linq.Expressions.ConstantExpression.Value' property equal to.
    - id: type
      type: System.Type
      description: A @'System.Type' to set the @'System.Linq.Expressions.Expression.Type' property equal to.
    return:
      type: System.Linq.Expressions.ConstantExpression
      description: A @'System.Linq.Expressions.ConstantExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Constant' and the @'System.Linq.Expressions.ConstantExpression.Value' and @'System.Linq.Expressions.Expression.Type' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*type* is null.'
  - type: System.ArgumentException
    description: '*value* is not null and *type* is not assignable from the dynamic type of *value*.'
- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)
  id: Continue(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Continue(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote: *o5
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/GotoExpression.cs
    startLine: 192
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.GotoExpression' representing a continue statement.
  syntax:
    content: public static GotoExpression Continue(LabelTarget target)
    content.vb: Public Shared Function Continue(target As LabelTarget) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The @'System.Linq.Expressions.LabelTarget' that the @'System.Linq.Expressions.GotoExpression' will jump to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A @'System.Linq.Expressions.GotoExpression' with @'System.Linq.Expressions.GotoExpression.Kind' equal to Continue, the @'System.Linq.Expressions.GotoExpression.Target' property set to *target*, and a null value to be passed to the target label upon jumping.
- uid: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)
  id: Continue(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Continue(LabelTarget, Type)
  fullName: System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget, System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 193
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.GotoExpression' representing a continue statement with the specified type.
  syntax:
    content: public static GotoExpression Continue(LabelTarget target, Type type)
    content.vb: Public Shared Function Continue(target As LabelTarget, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The @'System.Linq.Expressions.LabelTarget' that the @'System.Linq.Expressions.GotoExpression' will jump to.
    - id: type
      type: System.Type
      description: An @'System.Type' to set the @'System.Linq.Expressions.Expression.Type' property equal to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A @'System.Linq.Expressions.GotoExpression' with @'System.Linq.Expressions.GotoExpression.Kind' equal to Continue, the @'System.Linq.Expressions.GotoExpression.Target' property set to *target*, the @'System.Linq.Expressions.Expression.Type' property set to *type*, and a null value to be passed to the target label upon jumping.
- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)
  id: Convert(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Convert(Expression, Type)
  fullName: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 194
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents a type conversion operation.
  syntax:
    content: public static UnaryExpression Convert(Expression expression, Type type)
    content.vb: Public Shared Function Convert(expression As Expression, type As Type) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.UnaryExpression.Operand' property equal to.
    - id: type
      type: System.Type
      description: A @'System.Type' to set the @'System.Linq.Expressions.Expression.Type' property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Convert' and the @'System.Linq.Expressions.UnaryExpression.Operand' and @'System.Linq.Expressions.Expression.Type' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*expression* or *type* is null.'
  - type: System.InvalidOperationException
    description: No conversion operator is defined between *expression*.Type and *type*.
- uid: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  id: Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Convert(Expression, Type, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 195
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents a conversion operation for which the implementing method is specified.
  syntax:
    content: public static UnaryExpression Convert(Expression expression, Type type, Reflection.MethodInfo method)
    content.vb: Public Shared Function Convert(expression As Expression, type As Type, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.UnaryExpression.Operand' property equal to.
    - id: type
      type: System.Type
      description: A @'System.Type' to set the @'System.Linq.Expressions.Expression.Type' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.UnaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Convert' and the @'System.Linq.Expressions.UnaryExpression.Operand', @'System.Linq.Expressions.Expression.Type', and @'System.Linq.Expressions.UnaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*expression* or *type* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.'
  - type: System.InvalidOperationException
    description: No conversion operator is defined between *expression*.Type and *type*.-or-*expression*.Type is not assignable to the argument type of the method represented by *method*.-or-The return type of the method represented by *method* is not assignable to *type*.-or-*expression*.Type or *type* is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by *method*.
  - type: System.Reflection.AmbiguousMatchException
    description: More than one method that matches the *method* description was found.
- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)
  id: ConvertChecked(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ConvertChecked(Expression, Type)
  fullName: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 196
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents a conversion operation that throws an exception if the target type is overflowed.
  syntax:
    content: public static UnaryExpression ConvertChecked(Expression expression, Type type)
    content.vb: Public Shared Function ConvertChecked(expression As Expression, type As Type) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.UnaryExpression.Operand' property equal to.
    - id: type
      type: System.Type
      description: A @'System.Type' to set the @'System.Linq.Expressions.Expression.Type' property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.ConvertChecked' and the @'System.Linq.Expressions.UnaryExpression.Operand' and @'System.Linq.Expressions.Expression.Type' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*expression* or *type* is null.'
  - type: System.InvalidOperationException
    description: No conversion operator is defined between *expression*.Type and *type*.
- uid: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  id: ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ConvertChecked(Expression, Type, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 197
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.
  syntax:
    content: public static UnaryExpression ConvertChecked(Expression expression, Type type, Reflection.MethodInfo method)
    content.vb: Public Shared Function ConvertChecked(expression As Expression, type As Type, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.UnaryExpression.Operand' property equal to.
    - id: type
      type: System.Type
      description: A @'System.Type' to set the @'System.Linq.Expressions.Expression.Type' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.UnaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.ConvertChecked' and the @'System.Linq.Expressions.UnaryExpression.Operand', @'System.Linq.Expressions.Expression.Type', and @'System.Linq.Expressions.UnaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*expression* or *type* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.'
  - type: System.InvalidOperationException
    description: No conversion operator is defined between *expression*.Type and *type*.-or-*expression*.Type is not assignable to the argument type of the method represented by *method*.-or-The return type of the method represented by *method* is not assignable to *type*.-or-*expression*.Type or *type* is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by *method*.
  - type: System.Reflection.AmbiguousMatchException
    description: More than one method that matches the *method* description was found.
- uid: System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)
  id: DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)
  fullName: System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo, System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote: *o7
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/DebugInfoExpression.cs
    startLine: 227
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.DebugInfoExpression' with the specified span.
  syntax:
    content: public static DebugInfoExpression DebugInfo(SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn)
    content.vb: Public Shared Function DebugInfo(document As SymbolDocumentInfo, startLine As Integer, startColumn As Integer, endLine As Integer, endColumn As Integer) As DebugInfoExpression
    parameters:
    - id: document
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: The @'System.Linq.Expressions.SymbolDocumentInfo' that represents the source file.
    - id: startLine
      type: System.Int32
      description: The start line of this @'System.Linq.Expressions.DebugInfoExpression'. Must be greater than 0.
    - id: startColumn
      type: System.Int32
      description: The start column of this @'System.Linq.Expressions.DebugInfoExpression'. Must be greater than 0.
    - id: endLine
      type: System.Int32
      description: The end line of this @'System.Linq.Expressions.DebugInfoExpression'. Must be greater or equal than the start line.
    - id: endColumn
      type: System.Int32
      description: The end column of this @'System.Linq.Expressions.DebugInfoExpression'. If the end line is the same as the start line, it must be greater or equal than the start column. In any case, must be greater than 0.
    return:
      type: System.Linq.Expressions.DebugInfoExpression
      description: An instance of @'System.Linq.Expressions.DebugInfoExpression'.
- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)
  id: Decrement(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Decrement(Expression)
  fullName: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o3
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 962
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents the decrementing of the expression by 1.
  syntax:
    content: public static UnaryExpression Decrement(Expression expression)
    content.vb: Public Shared Function Decrement(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to decrement.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that represents the decremented expression.
- uid: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Decrement(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 200
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents the decrementing of the expression by 1.
  syntax:
    content: public static UnaryExpression Decrement(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function Decrement(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to decrement.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that represents the decremented expression.
- uid: System.Linq.Expressions.Expression.Default(System.Type)
  id: Default(System.Type)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Default(Type)
  fullName: System.Linq.Expressions.Expression.Default(System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 201
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.DefaultExpression' that has the @'System.Linq.Expressions.Expression.Type' property set to the specified type.
  syntax:
    content: public static DefaultExpression Default(Type type)
    content.vb: Public Shared Function Default(type As Type) As DefaultExpression
    parameters:
    - id: type
      type: System.Type
      description: A @'System.Type' to set the @'System.Linq.Expressions.Expression.Type' property equal to.
    return:
      type: System.Linq.Expressions.DefaultExpression
      description: A @'System.Linq.Expressions.DefaultExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Default' and the @'System.Linq.Expressions.Expression.Type' property set to the specified type.
- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Divide(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1978
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an arithmetic division operation.
  syntax:
    content: public static BinaryExpression Divide(Expression left, Expression right)
    content.vb: Public Shared Function Divide(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Divide' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.InvalidOperationException
    description: The division operator is not defined for *left*.Type and *right*.Type.
- uid: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Divide(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 203
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an arithmetic division operation. The implementing method can be specified.
  syntax:
    content: public static BinaryExpression Divide(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function Divide(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Divide' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.'
  - type: System.InvalidOperationException
    description: '*method* is null and the division operator is not defined for *left*.Type and *right*.Type.'
- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: DivideAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2015
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a division assignment operation that does not have overflow checking.
  syntax:
    content: public static BinaryExpression DivideAssign(Expression left, Expression right)
    content.vb: Public Shared Function DivideAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.DivideAssign' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: DivideAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 205
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a division assignment operation that does not have overflow checking.
  syntax:
    content: public static BinaryExpression DivideAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function DivideAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.DivideAssign' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: DivideAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 206
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a division assignment operation that does not have overflow checking.
  syntax:
    content: public static BinaryExpression DivideAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function DivideAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' to set the @'System.Linq.Expressions.BinaryExpression.Conversion' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.DivideAssign' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', @'System.Linq.Expressions.BinaryExpression.Method', and @'System.Linq.Expressions.BinaryExpression.Conversion' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ElementInit(Reflection.MethodInfo, Collections.Generic.IEnumerable<Expression>)
  name.vb: ElementInit(Reflection.MethodInfo, Collections.Generic.IEnumerable(Of Expression))
  fullName: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  fullName.vb: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 207
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates an @'System.Linq.Expressions.ElementInit', given an @'System.Collections.Generic.IEnumerable`1' as the second argument.
  syntax:
    content: public static ElementInit ElementInit(Reflection.MethodInfo addMethod, Collections.Generic.IEnumerable<Expression> arguments)
    content.vb: Public Shared Function ElementInit(addMethod As Reflection.MethodInfo, arguments As Collections.Generic.IEnumerable(Of Expression)) As ElementInit
    parameters:
    - id: addMethod
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.ElementInit.AddMethod' property equal to.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.Expression' objects to set the @'System.Linq.Expressions.ElementInit.Arguments' property equal to.
    return:
      type: System.Linq.Expressions.ElementInit
      description: An @'System.Linq.Expressions.ElementInit' that has the @'System.Linq.Expressions.ElementInit.AddMethod' and @'System.Linq.Expressions.ElementInit.Arguments' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*addMethod* or *arguments* is null.'
  - type: System.ArgumentException
    description: The method that *addMethod* represents is not named "Add" (case insensitive).-or-The method that *addMethod* represents is not an instance method.-or-*arguments* does not contain the same number of elements as the number of parameters for the method that *addMethod* represents.-or-The @'System.Linq.Expressions.Expression.Type' property of one or more elements of *arguments* is not assignable to the type of the corresponding parameter of the method that *addMethod* represents.
- uid: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  id: ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ElementInit(Reflection.MethodInfo, Expression[])
  name.vb: ElementInit(Reflection.MethodInfo, Expression())
  fullName: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])
  fullName.vb: System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo, System.Linq.Expressions.Expression())
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 208
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates an @'System.Linq.Expressions.ElementInit', given an array of values as the second argument.
  syntax:
    content: public static ElementInit ElementInit(Reflection.MethodInfo addMethod, params Expression[] arguments)
    content.vb: Public Shared Function ElementInit(addMethod As Reflection.MethodInfo, ParamArray arguments As Expression()) As ElementInit
    parameters:
    - id: addMethod
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.ElementInit.AddMethod' property equal to.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of @'System.Linq.Expressions.Expression' objects to set the @'System.Linq.Expressions.ElementInit.Arguments' property equal to.
    return:
      type: System.Linq.Expressions.ElementInit
      description: An @'System.Linq.Expressions.ElementInit' that has the @'System.Linq.Expressions.ElementInit.AddMethod' and @'System.Linq.Expressions.ElementInit.Arguments' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*addMethod* or *arguments* is null.'
  - type: System.ArgumentException
    description: The method that addMethod represents is not named "Add" (case insensitive).-or-The method that addMethod represents is not an instance method.-or-arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.-or-The @'System.Linq.Expressions.Expression.Type' property of one or more elements of *arguments* is not assignable to the type of the corresponding parameter of the method that *addMethod* represents.
- uid: System.Linq.Expressions.Expression.Empty
  id: Empty
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Empty()
  fullName: System.Linq.Expressions.Expression.Empty()
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/DefaultExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/DefaultExpression.cs
    startLine: 58
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates an empty expression that has @'System.Void' type.
  syntax:
    content: public static DefaultExpression Empty()
    content.vb: Public Shared Function Empty As DefaultExpression
    return:
      type: System.Linq.Expressions.DefaultExpression
      description: A @'System.Linq.Expressions.DefaultExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Default' and the @'System.Linq.Expressions.Expression.Type' property set to @'System.Void'.
- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Equal(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1050
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an equality comparison.
  syntax:
    content: public static BinaryExpression Equal(Expression left, Expression right)
    content.vb: Public Shared Function Equal(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Equal' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.InvalidOperationException
    description: The equality operator is not defined for *left*.Type and *right*.Type.
- uid: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Equal(Expression, Expression, Boolean, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 211
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an equality comparison. The implementing method can be specified.
  syntax:
    content: public static BinaryExpression Equal(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method)
    content.vb: Public Shared Function Equal(left As Expression, right As Expression, liftToNull As Boolean, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: liftToNull
      type: System.Boolean
      description: true to set @'System.Linq.Expressions.BinaryExpression.IsLiftedToNull' to true; false to set @'System.Linq.Expressions.BinaryExpression.IsLiftedToNull' to false.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Equal' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', @'System.Linq.Expressions.BinaryExpression.IsLiftedToNull', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.'
  - type: System.InvalidOperationException
    description: '*method* is null and the equality operator is not defined for *left*.Type and *right*.Type.'
- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ExclusiveOr(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2765
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a bitwise XOR operation, using op_ExclusiveOr for user-defined types.
  syntax:
    content: public static BinaryExpression ExclusiveOr(Expression left, Expression right)
    content.vb: Public Shared Function ExclusiveOr(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.ExclusiveOr' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.InvalidOperationException
    description: The XOR operator is not defined for *left*.Type and *right*.Type.
- uid: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ExclusiveOr(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 213
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a bitwise XOR operation, using op_ExclusiveOr for user-defined types. The implementing method can be specified.
  syntax:
    content: public static BinaryExpression ExclusiveOr(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function ExclusiveOr(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.ExclusiveOr' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.'
  - type: System.InvalidOperationException
    description: '*method* is null and the XOR operator is not defined for *left*.Type and *right*.Type.'
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ExclusiveOrAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2801
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a bitwise XOR assignment operation, using op_ExclusiveOr for user-defined types.
  syntax:
    content: public static BinaryExpression ExclusiveOrAssign(Expression left, Expression right)
    content.vb: Public Shared Function ExclusiveOrAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.ExclusiveOrAssign' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ExclusiveOrAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 215
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a bitwise XOR assignment operation, using op_ExclusiveOr for user-defined types.
  syntax:
    content: public static BinaryExpression ExclusiveOrAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function ExclusiveOrAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.ExclusiveOrAssign' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ExclusiveOrAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 216
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a bitwise XOR assignment operation, using op_ExclusiveOr for user-defined types.
  syntax:
    content: public static BinaryExpression ExclusiveOrAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function ExclusiveOrAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' to set the @'System.Linq.Expressions.BinaryExpression.Conversion' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.ExclusiveOrAssign' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', @'System.Linq.Expressions.BinaryExpression.Method', and @'System.Linq.Expressions.BinaryExpression.Conversion' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)
  id: Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Field(Expression, Reflection.FieldInfo)
  fullName: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression, System.Reflection.FieldInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 217
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MemberExpression' that represents accessing a field.
  syntax:
    content: public static MemberExpression Field(Expression expression, Reflection.FieldInfo field)
    content.vb: Public Shared Function Field(expression As Expression, field As Reflection.FieldInfo) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.MemberExpression.Expression' property equal to. For static (Shared in Visual Basic), *expression* must be null.
    - id: field
      type: System.Reflection.FieldInfo
      description: The @'System.Reflection.FieldInfo' to set the @'System.Linq.Expressions.MemberExpression.Member' property equal to.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: A @'System.Linq.Expressions.MemberExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.MemberAccess' and the @'System.Linq.Expressions.MemberExpression.Expression' and @'System.Linq.Expressions.MemberExpression.Member' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*field* is null.-or-The field represented by *field* is not static (Shared in Visual Basic) and *expression* is null.'
  - type: System.ArgumentException
    description: '*expression*.Type is not assignable to the declaring type of the field represented by *field*.'
- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)
  id: Field(System.Linq.Expressions.Expression,System.String)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Field(Expression, String)
  fullName: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression, System.String)
  type: Method
  source:
    remote: &o14
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/MemberExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/MemberExpression.cs
    startLine: 173
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MemberExpression' that represents accessing a field given the name of the field.
  syntax:
    content: public static MemberExpression Field(Expression expression, string fieldName)
    content.vb: Public Shared Function Field(expression As Expression, fieldName As String) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' whose @'System.Linq.Expressions.Expression.Type' contains a field named *fieldName*. This can be null for static fields.
    - id: fieldName
      type: System.String
      description: The name of a field to be accessed.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: A @'System.Linq.Expressions.MemberExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.MemberAccess', the @'System.Linq.Expressions.MemberExpression.Expression' property set to *expression*, and the @'System.Linq.Expressions.MemberExpression.Member' property set to the @'System.Reflection.FieldInfo' that represents the field denoted by *fieldName*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*expression* or *fieldName* is null.'
  - type: System.ArgumentException
    description: No field named *fieldName* is defined in *expression*.Type or its base types.
- uid: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)
  id: Field(System.Linq.Expressions.Expression,System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Field(Expression, Type, String)
  fullName: System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression, System.Type, System.String)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 219
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MemberExpression' that represents accessing a field.
  syntax:
    content: public static MemberExpression Field(Expression expression, Type type, string fieldName)
    content.vb: Public Shared Function Field(expression As Expression, type As Type, fieldName As String) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: The containing object of the field. This can be null for static fields.
    - id: type
      type: System.Type
      description: The @'System.Linq.Expressions.Expression.Type' that contains the field.
    - id: fieldName
      type: System.String
      description: The field to be accessed.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: The created @'System.Linq.Expressions.MemberExpression'.
- uid: System.Linq.Expressions.Expression.GetActionType(System.Type[])
  id: GetActionType(System.Type[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: GetActionType(Type[])
  name.vb: GetActionType(Type())
  fullName: System.Linq.Expressions.Expression.GetActionType(System.Type[])
  fullName.vb: System.Linq.Expressions.Expression.GetActionType(System.Type())
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 220
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Type' object that represents a generic System.Action delegate type that has specific type arguments.
  syntax:
    content: public static Type GetActionType(params Type[] typeArgs)
    content.vb: Public Shared Function GetActionType(ParamArray typeArgs As Type()) As Type
    parameters:
    - id: typeArgs
      type: System.Type[]
      description: An array of up to sixteen @'System.Type' objects that specify the type arguments for the System.Action delegate type.
    return:
      type: System.Type
      description: The type of a System.Action delegate that has the specified type arguments.
  exceptions:
  - type: System.ArgumentException
    description: '*typeArgs* contains more than sixteen elements.'
  - type: System.ArgumentNullException
    description: '*typeArgs* is null.'
- uid: System.Linq.Expressions.Expression.GetDelegateType(System.Type[])
  id: GetDelegateType(System.Type[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: GetDelegateType(Type[])
  name.vb: GetDelegateType(Type())
  fullName: System.Linq.Expressions.Expression.GetDelegateType(System.Type[])
  fullName.vb: System.Linq.Expressions.Expression.GetDelegateType(System.Type())
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 221
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Gets a @'System.Linq.Expressions.Expression.Type' object that represents a generic System.Func or System.Action delegate type that has specific type arguments.
  syntax:
    content: public static Type GetDelegateType(params Type[] typeArgs)
    content.vb: Public Shared Function GetDelegateType(ParamArray typeArgs As Type()) As Type
    parameters:
    - id: typeArgs
      type: System.Type[]
      description: The type arguments of the delegate.
    return:
      type: System.Type
      description: The delegate type.
- uid: System.Linq.Expressions.Expression.GetFuncType(System.Type[])
  id: GetFuncType(System.Type[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: GetFuncType(Type[])
  name.vb: GetFuncType(Type())
  fullName: System.Linq.Expressions.Expression.GetFuncType(System.Type[])
  fullName.vb: System.Linq.Expressions.Expression.GetFuncType(System.Type())
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 222
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.Expression.Type' object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.
  syntax:
    content: public static Type GetFuncType(params Type[] typeArgs)
    content.vb: Public Shared Function GetFuncType(ParamArray typeArgs As Type()) As Type
    parameters:
    - id: typeArgs
      type: System.Type[]
      description: An array of one to seventeen @'System.Type' objects that specify the type arguments for the System.Func delegate type.
    return:
      type: System.Type
      description: The type of a System.Func delegate that has the specified type arguments.
  exceptions:
  - type: System.ArgumentException
    description: '*typeArgs* contains fewer than one or more than seventeen elements.'
  - type: System.ArgumentNullException
    description: '*typeArgs* is null.'
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)
  id: Goto(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Goto(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote: *o5
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/GotoExpression.cs
    startLine: 285
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.GotoExpression' representing a "go to" statement.
  syntax:
    content: public static GotoExpression Goto(LabelTarget target)
    content.vb: Public Shared Function Goto(target As LabelTarget) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The @'System.Linq.Expressions.LabelTarget' that the @'System.Linq.Expressions.GotoExpression' will jump to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A @'System.Linq.Expressions.GotoExpression' with @'System.Linq.Expressions.GotoExpression.Kind' equal to Goto, the @'System.Linq.Expressions.GotoExpression.Target' property set to the specified value, and a null value to be passed to the target label upon jumping.
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  id: Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Goto(LabelTarget, Expression)
  fullName: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o5
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/GotoExpression.cs
    startLine: 316
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.GotoExpression' representing a "go to" statement. The value passed to the label upon jumping can be specified.
  syntax:
    content: public static GotoExpression Goto(LabelTarget target, Expression value)
    content.vb: Public Shared Function Goto(target As LabelTarget, value As Expression) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The @'System.Linq.Expressions.LabelTarget' that the @'System.Linq.Expressions.GotoExpression' will jump to.
    - id: value
      type: System.Linq.Expressions.Expression
      description: The value that will be passed to the associated label upon jumping.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A @'System.Linq.Expressions.GotoExpression' with @'System.Linq.Expressions.GotoExpression.Kind' equal to Goto, the @'System.Linq.Expressions.GotoExpression.Target' property set to *target*, and *value* to be passed to the target label upon jumping.
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  id: Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Goto(LabelTarget, Expression, Type)
  fullName: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 225
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.GotoExpression' representing a "go to" statement with the specified type. The value passed to the label upon jumping can be specified.
  syntax:
    content: public static GotoExpression Goto(LabelTarget target, Expression value, Type type)
    content.vb: Public Shared Function Goto(target As LabelTarget, value As Expression, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The @'System.Linq.Expressions.LabelTarget' that the @'System.Linq.Expressions.GotoExpression' will jump to.
    - id: value
      type: System.Linq.Expressions.Expression
      description: The value that will be passed to the associated label upon jumping.
    - id: type
      type: System.Type
      description: An @'System.Type' to set the @'System.Linq.Expressions.Expression.Type' property equal to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A @'System.Linq.Expressions.GotoExpression' with @'System.Linq.Expressions.GotoExpression.Kind' equal to Goto, the @'System.Linq.Expressions.GotoExpression.Target' property set to *target*, the @'System.Linq.Expressions.Expression.Type' property set to *type*, and *value* to be passed to the target label upon jumping.
- uid: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)
  id: Goto(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Goto(LabelTarget, Type)
  fullName: System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget, System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 226
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.GotoExpression' representing a "go to" statement with the specified type.
  syntax:
    content: public static GotoExpression Goto(LabelTarget target, Type type)
    content.vb: Public Shared Function Goto(target As LabelTarget, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The @'System.Linq.Expressions.LabelTarget' that the @'System.Linq.Expressions.GotoExpression' will jump to.
    - id: type
      type: System.Type
      description: An @'System.Type' to set the @'System.Linq.Expressions.Expression.Type' property equal to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A @'System.Linq.Expressions.GotoExpression' with @'System.Linq.Expressions.GotoExpression.Kind' equal to Goto, the @'System.Linq.Expressions.GotoExpression.Target' property set to the specified value, the @'System.Linq.Expressions.Expression.Type' property set to *type*, and a null value to be passed to the target label upon jumping.
- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: GreaterThan(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1196
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a "greater than" numeric comparison.
  syntax:
    content: public static BinaryExpression GreaterThan(Expression left, Expression right)
    content.vb: Public Shared Function GreaterThan(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.GreaterThan' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.InvalidOperationException
    description: The "greater than" operator is not defined for *left*.Type and *right*.Type.
- uid: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: GreaterThan(Expression, Expression, Boolean, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 228
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a "greater than" numeric comparison. The implementing method can be specified.
  syntax:
    content: public static BinaryExpression GreaterThan(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method)
    content.vb: Public Shared Function GreaterThan(left As Expression, right As Expression, liftToNull As Boolean, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: liftToNull
      type: System.Boolean
      description: true to set @'System.Linq.Expressions.BinaryExpression.IsLiftedToNull' to true; false to set @'System.Linq.Expressions.BinaryExpression.IsLiftedToNull' to false.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.GreaterThan' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', @'System.Linq.Expressions.BinaryExpression.IsLiftedToNull', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.'
  - type: System.InvalidOperationException
    description: '*method* is null and the "greater than" operator is not defined for *left*.Type and *right*.Type.'
- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: GreaterThanOrEqual(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1264
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a "greater than or equal" numeric comparison.
  syntax:
    content: public static BinaryExpression GreaterThanOrEqual(Expression left, Expression right)
    content.vb: Public Shared Function GreaterThanOrEqual(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.GreaterThanOrEqual' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.InvalidOperationException
    description: The "greater than or equal" operator is not defined for *left*.Type and *right*.Type.
- uid: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: GreaterThanOrEqual(Expression, Expression, Boolean, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 230
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a "greater than or equal" numeric comparison.
  syntax:
    content: public static BinaryExpression GreaterThanOrEqual(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method)
    content.vb: Public Shared Function GreaterThanOrEqual(left As Expression, right As Expression, liftToNull As Boolean, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: liftToNull
      type: System.Boolean
      description: true to set @'System.Linq.Expressions.BinaryExpression.IsLiftedToNull' to true; false to set @'System.Linq.Expressions.BinaryExpression.IsLiftedToNull' to false.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.GreaterThanOrEqual' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', @'System.Linq.Expressions.BinaryExpression.IsLiftedToNull', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.'
  - type: System.InvalidOperationException
    description: '*method* is null and the "greater than or equal" operator is not defined for *left*.Type and *right*.Type.'
- uid: System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: IfThen(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o8
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/ConditionalExpression.cs
    startLine: 224
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.ConditionalExpression' that represents a conditional block with an if statement.
  syntax:
    content: public static ConditionalExpression IfThen(Expression test, Expression ifTrue)
    content.vb: Public Shared Function IfThen(test As Expression, ifTrue As Expression) As ConditionalExpression
    parameters:
    - id: test
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.ConditionalExpression.Test' property equal to.
    - id: ifTrue
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.ConditionalExpression.IfTrue' property equal to.
    return:
      type: System.Linq.Expressions.ConditionalExpression
      description: A @'System.Linq.Expressions.ConditionalExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Conditional' and the @'System.Linq.Expressions.ConditionalExpression.Test', @'System.Linq.Expressions.ConditionalExpression.IfTrue', properties set to the specified values. The @'System.Linq.Expressions.ConditionalExpression.IfFalse' property is set to default expression and the type of the resulting @'System.Linq.Expressions.ConditionalExpression' returned by this method is @'System.Void'.
- uid: System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: IfThenElse(Expression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o8
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/ConditionalExpression.cs
    startLine: 239
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.ConditionalExpression' that represents a conditional block with if and else statements.
  syntax:
    content: public static ConditionalExpression IfThenElse(Expression test, Expression ifTrue, Expression ifFalse)
    content.vb: Public Shared Function IfThenElse(test As Expression, ifTrue As Expression, ifFalse As Expression) As ConditionalExpression
    parameters:
    - id: test
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.ConditionalExpression.Test' property equal to.
    - id: ifTrue
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.ConditionalExpression.IfTrue' property equal to.
    - id: ifFalse
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.ConditionalExpression.IfFalse' property equal to.
    return:
      type: System.Linq.Expressions.ConditionalExpression
      description: A @'System.Linq.Expressions.ConditionalExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Conditional' and the @'System.Linq.Expressions.ConditionalExpression.Test', @'System.Linq.Expressions.ConditionalExpression.IfTrue', and @'System.Linq.Expressions.ConditionalExpression.IfFalse' properties set to the specified values. The type of the resulting @'System.Linq.Expressions.ConditionalExpression' returned by this method is @'System.Void'.
- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)
  id: Increment(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Increment(Expression)
  fullName: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o3
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 932
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents the incrementing of the expression value by 1.
  syntax:
    content: public static UnaryExpression Increment(Expression expression)
    content.vb: Public Shared Function Increment(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to increment.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that represents the incremented expression.
- uid: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Increment(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 234
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents the incrementing of the expression by 1.
  syntax:
    content: public static UnaryExpression Increment(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function Increment(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to increment.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that represents the incremented expression.
- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Invoke(Expression, Collections.Generic.IEnumerable<Expression>)
  name.vb: Invoke(Expression, Collections.Generic.IEnumerable(Of Expression))
  fullName: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  fullName.vb: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 235
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates an @'System.Linq.Expressions.InvocationExpression' that applies a delegate or lambda expression to a list of argument expressions.
  syntax:
    content: public static InvocationExpression Invoke(Expression expression, Collections.Generic.IEnumerable<Expression> arguments)
    content.vb: Public Shared Function Invoke(expression As Expression, arguments As Collections.Generic.IEnumerable(Of Expression)) As InvocationExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' that represents the delegate or lambda expression to be applied to.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.Expression' objects that represent the arguments that the delegate or lambda expression is applied to.
    return:
      type: System.Linq.Expressions.InvocationExpression
      description: An @'System.Linq.Expressions.InvocationExpression' that applies the specified delegate or lambda expression to the provided arguments.
  exceptions:
  - type: System.ArgumentNullException
    description: '*expression* is null.'
  - type: System.ArgumentException
    description: '*expression*.Type does not represent a delegate type or an @''System.Linq.Expressions.Expression`1''.-or-The @''System.Linq.Expressions.Expression.Type'' property of an element of *arguments* is not assignable to the type of the corresponding parameter of the delegate represented by *expression*.'
  - type: System.InvalidOperationException
    description: '*arguments* does not contain the same number of elements as the list of parameters for the delegate represented by *expression*.'
- uid: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  id: Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Invoke(Expression, Expression[])
  name.vb: Invoke(Expression, Expression())
  fullName: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])
  fullName.vb: System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression())
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/InvocationExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/InvocationExpression.cs
    startLine: 743
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates an @'System.Linq.Expressions.InvocationExpression' that applies a delegate or lambda expression to a list of argument expressions.
  syntax:
    content: public static InvocationExpression Invoke(Expression expression, params Expression[] arguments)
    content.vb: Public Shared Function Invoke(expression As Expression, ParamArray arguments As Expression()) As InvocationExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' that represents the delegate or lambda expression to be applied.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of @'System.Linq.Expressions.Expression' objects that represent the arguments that the delegate or lambda expression is applied to.
    return:
      type: System.Linq.Expressions.InvocationExpression
      description: An @'System.Linq.Expressions.InvocationExpression' that applies the specified delegate or lambda expression to the provided arguments.
  exceptions:
  - type: System.ArgumentNullException
    description: '*expression* is null.'
  - type: System.ArgumentException
    description: '*expression*.Type does not represent a delegate type or an @''System.Linq.Expressions.Expression`1''.-or-The @''System.Linq.Expressions.Expression.Type'' property of an element of *arguments* is not assignable to the type of the corresponding parameter of the delegate represented by *expression*.'
  - type: System.InvalidOperationException
    description: '*arguments* does not contain the same number of elements as the list of parameters for the delegate represented by *expression*.'
- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)
  id: IsFalse(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: IsFalse(Expression)
  fullName: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o3
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 637
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Returns whether the expression evaluates to false.
  syntax:
    content: public static UnaryExpression IsFalse(Expression expression)
    content.vb: Public Shared Function IsFalse(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to evaluate.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: An instance of @'System.Linq.Expressions.UnaryExpression'.
- uid: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: IsFalse(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 238
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Returns whether the expression evaluates to false.
  syntax:
    content: public static UnaryExpression IsFalse(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function IsFalse(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to evaluate.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: An instance of @'System.Linq.Expressions.UnaryExpression'.
- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)
  id: IsTrue(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: IsTrue(Expression)
  fullName: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o3
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 667
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Returns whether the expression evaluates to true.
  syntax:
    content: public static UnaryExpression IsTrue(Expression expression)
    content.vb: Public Shared Function IsTrue(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to evaluate.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: An instance of @'System.Linq.Expressions.UnaryExpression'.
- uid: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: IsTrue(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 240
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Returns whether the expression evaluates to true.
  syntax:
    content: public static UnaryExpression IsTrue(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function IsTrue(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to evaluate.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: An instance of @'System.Linq.Expressions.UnaryExpression'.
- uid: System.Linq.Expressions.Expression.Label
  id: Label
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Label()
  fullName: System.Linq.Expressions.Expression.Label()
  type: Method
  source:
    remote: &o10
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/LabelTarget.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/LabelTarget.cs
    startLine: 57
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.LabelTarget' representing a label with void type and no name.
  syntax:
    content: public static LabelTarget Label()
    content.vb: Public Shared Function Label As LabelTarget
    return:
      type: System.Linq.Expressions.LabelTarget
      description: The new @'System.Linq.Expressions.LabelTarget'.
- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)
  id: Label(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Label(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote: &o9
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/LabelExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/LabelExpression.cs
    startLine: 94
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.LabelExpression' representing a label without a default value.
  syntax:
    content: public static LabelExpression Label(LabelTarget target)
    content.vb: Public Shared Function Label(target As LabelTarget) As LabelExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The @'System.Linq.Expressions.LabelTarget' which this @'System.Linq.Expressions.LabelExpression' will be associated with.
    return:
      type: System.Linq.Expressions.LabelExpression
      description: A @'System.Linq.Expressions.LabelExpression' without a default value.
- uid: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  id: Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Label(LabelTarget, Expression)
  fullName: System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o9
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/LabelExpression.cs
    startLine: 105
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.LabelExpression' representing a label with the given default value.
  syntax:
    content: public static LabelExpression Label(LabelTarget target, Expression defaultValue)
    content.vb: Public Shared Function Label(target As LabelTarget, defaultValue As Expression) As LabelExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The @'System.Linq.Expressions.LabelTarget' which this @'System.Linq.Expressions.LabelExpression' will be associated with.
    - id: defaultValue
      type: System.Linq.Expressions.Expression
      description: The value of this @'System.Linq.Expressions.LabelExpression' when the label is reached through regular control flow.
    return:
      type: System.Linq.Expressions.LabelExpression
      description: A @'System.Linq.Expressions.LabelExpression' with the given default value.
- uid: System.Linq.Expressions.Expression.Label(System.String)
  id: Label(System.String)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Label(String)
  fullName: System.Linq.Expressions.Expression.Label(System.String)
  type: Method
  source:
    remote: *o10
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/LabelTarget.cs
    startLine: 67
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.LabelTarget' representing a label with void type and the given name.
  syntax:
    content: public static LabelTarget Label(string name)
    content.vb: Public Shared Function Label(name As String) As LabelTarget
    parameters:
    - id: name
      type: System.String
      description: The name of the label.
    return:
      type: System.Linq.Expressions.LabelTarget
      description: The new @'System.Linq.Expressions.LabelTarget'.
- uid: System.Linq.Expressions.Expression.Label(System.Type)
  id: Label(System.Type)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Label(Type)
  fullName: System.Linq.Expressions.Expression.Label(System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 245
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.LabelTarget' representing a label with the given type.
  syntax:
    content: public static LabelTarget Label(Type type)
    content.vb: Public Shared Function Label(type As Type) As LabelTarget
    parameters:
    - id: type
      type: System.Type
      description: The type of value that is passed when jumping to the label.
    return:
      type: System.Linq.Expressions.LabelTarget
      description: The new @'System.Linq.Expressions.LabelTarget'.
- uid: System.Linq.Expressions.Expression.Label(System.Type,System.String)
  id: Label(System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Label(Type, String)
  fullName: System.Linq.Expressions.Expression.Label(System.Type, System.String)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 246
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.LabelTarget' representing a label with the given type and name.
  syntax:
    content: public static LabelTarget Label(Type type, string name)
    content.vb: Public Shared Function Label(type As Type, name As String) As LabelTarget
    parameters:
    - id: type
      type: System.Type
      description: The type of value that is passed when jumping to the label.
    - id: name
      type: System.String
      description: The name of the label.
    return:
      type: System.Linq.Expressions.LabelTarget
      description: The new @'System.Linq.Expressions.LabelTarget'.
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Lambda(Expression, Boolean, Collections.Generic.IEnumerable<ParameterExpression>)
  name.vb: Lambda(Expression, Boolean, Collections.Generic.IEnumerable(Of ParameterExpression))
  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 247
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  syntax:
    content: public static LambdaExpression Lambda(Expression body, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(body As Expression, tailCall As Boolean, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.LambdaExpression.Body' property equal to.
    - id: tailCall
      type: System.Boolean
      description: A @'System.Boolean' that indicates if tail call optimization will be applied when compiling the created expression.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.ParameterExpression' objects to use to populate the @'System.Linq.Expressions.LambdaExpression.Parameters' collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' that has the @'System.Linq.Expressions.LambdaExpression.NodeType' property equal to Lambda and the @'System.Linq.Expressions.LambdaExpression.Body' and @'System.Linq.Expressions.LambdaExpression.Parameters' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  id: Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Lambda(Expression, Boolean, ParameterExpression[])
  name.vb: Lambda(Expression, Boolean, ParameterExpression())
  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[])
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression())
  type: Method
  source:
    remote: &o11
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/LambdaExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/LambdaExpression.cs
    startLine: 375
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  syntax:
    content: public static LambdaExpression Lambda(Expression body, bool tailCall, params ParameterExpression[] parameters)
    content.vb: Public Shared Function Lambda(body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As LambdaExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.LambdaExpression.Body' property equal to.
    - id: tailCall
      type: System.Boolean
      description: A @'System.Boolean' that indicates if tail call optimization will be applied when compiling the created expression.
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: An array that contains @'System.Linq.Expressions.ParameterExpression' objects to use to populate the @'System.Linq.Expressions.LambdaExpression.Parameters' collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' that has the @'System.Linq.Expressions.LambdaExpression.NodeType' property equal to Lambda and the @'System.Linq.Expressions.LambdaExpression.Body' and @'System.Linq.Expressions.LambdaExpression.Parameters' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Lambda(Expression, Collections.Generic.IEnumerable<ParameterExpression>)
  name.vb: Lambda(Expression, Collections.Generic.IEnumerable(Of ParameterExpression))
  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 249
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  syntax:
    content: public static LambdaExpression Lambda(Expression body, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(body As Expression, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.LambdaExpression.Body' property equal to.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.ParameterExpression' objects to use to populate the @'System.Linq.Expressions.LambdaExpression.Parameters' collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' that has the @'System.Linq.Expressions.LambdaExpression.NodeType' property equal to Lambda and the @'System.Linq.Expressions.LambdaExpression.Body' and @'System.Linq.Expressions.LambdaExpression.Parameters' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  id: Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Lambda(Expression, ParameterExpression[])
  name.vb: Lambda(Expression, ParameterExpression())
  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[])
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression())
  type: Method
  source:
    remote: *o11
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/LambdaExpression.cs
    startLine: 363
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.LambdaExpression' by first constructing a delegate type.
  syntax:
    content: public static LambdaExpression Lambda(Expression body, params ParameterExpression[] parameters)
    content.vb: Public Shared Function Lambda(body As Expression, ParamArray parameters As ParameterExpression()) As LambdaExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.LambdaExpression.Body' property equal to.
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: An array of @'System.Linq.Expressions.ParameterExpression' objects to use to populate the @'System.Linq.Expressions.LambdaExpression.Parameters' collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Lambda' and the @'System.Linq.Expressions.LambdaExpression.Body' and @'System.Linq.Expressions.LambdaExpression.Parameters' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*body* is null.-or-One or more elements of *parameters* are null.'
  - type: System.ArgumentException
    description: '*parameters* contains more than sixteen elements.'
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Lambda(Expression, String, Boolean, Collections.Generic.IEnumerable<ParameterExpression>)
  name.vb: Lambda(Expression, String, Boolean, Collections.Generic.IEnumerable(Of ParameterExpression))
  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 251
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  syntax:
    content: public static LambdaExpression Lambda(Expression body, string name, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(body As Expression, name As String, tailCall As Boolean, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.LambdaExpression.Body' property equal to.
    - id: name
      type: System.String
      description: The name for the lambda. Used for emitting debug information.
    - id: tailCall
      type: System.Boolean
      description: A @'System.Boolean' that indicates if tail call optimization will be applied when compiling the created expression.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.ParameterExpression' objects to use to populate the @'System.Linq.Expressions.LambdaExpression.Parameters' collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' that has the @'System.Linq.Expressions.LambdaExpression.NodeType' property equal to Lambda and the @'System.Linq.Expressions.LambdaExpression.Body' and @'System.Linq.Expressions.LambdaExpression.Parameters' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Lambda(Expression, String, Collections.Generic.IEnumerable<ParameterExpression>)
  name.vb: Lambda(Expression, String, Collections.Generic.IEnumerable(Of ParameterExpression))
  fullName: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 252
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  syntax:
    content: public static LambdaExpression Lambda(Expression body, string name, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(body As Expression, name As String, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.LambdaExpression.Body' property equal to.
    - id: name
      type: System.String
      description: The name for the lambda. Used for emitting debug information.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.ParameterExpression' objects to use to populate the @'System.Linq.Expressions.LambdaExpression.Parameters' collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' that has the @'System.Linq.Expressions.LambdaExpression.NodeType' property equal to Lambda and the @'System.Linq.Expressions.LambdaExpression.Body' and @'System.Linq.Expressions.LambdaExpression.Parameters' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Lambda(Type, Expression, Boolean, Collections.Generic.IEnumerable<ParameterExpression>)
  name.vb: Lambda(Type, Expression, Boolean, Collections.Generic.IEnumerable(Of ParameterExpression))
  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 253
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  syntax:
    content: public static LambdaExpression Lambda(Type delegateType, Expression body, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, tailCall As Boolean, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: delegateType
      type: System.Type
      description: A @'System.Linq.Expressions.Expression.Type' representing the delegate signature for the lambda.
    - id: body
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.LambdaExpression.Body' property equal to.
    - id: tailCall
      type: System.Boolean
      description: A @'System.Boolean' that indicates if tail call optimization will be applied when compiling the created expression.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.ParameterExpression' objects to use to populate the @'System.Linq.Expressions.LambdaExpression.Parameters' collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' that has the @'System.Linq.Expressions.LambdaExpression.NodeType' property equal to Lambda and the @'System.Linq.Expressions.LambdaExpression.Body' and @'System.Linq.Expressions.LambdaExpression.Parameters' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Lambda(Type, Expression, Boolean, ParameterExpression[])
  name.vb: Lambda(Type, Expression, Boolean, ParameterExpression())
  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[])
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression())
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 254
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  syntax:
    content: public static LambdaExpression Lambda(Type delegateType, Expression body, bool tailCall, params ParameterExpression[] parameters)
    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As LambdaExpression
    parameters:
    - id: delegateType
      type: System.Type
      description: A @'System.Linq.Expressions.Expression.Type' representing the delegate signature for the lambda.
    - id: body
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.LambdaExpression.Body' property equal to.
    - id: tailCall
      type: System.Boolean
      description: A @'System.Boolean' that indicates if tail call optimization will be applied when compiling the created expression.
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: An array that contains @'System.Linq.Expressions.ParameterExpression' objects to use to populate the @'System.Linq.Expressions.LambdaExpression.Parameters' collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' that has the @'System.Linq.Expressions.LambdaExpression.NodeType' property equal to Lambda and the @'System.Linq.Expressions.LambdaExpression.Body' and @'System.Linq.Expressions.LambdaExpression.Parameters' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Lambda(Type, Expression, Collections.Generic.IEnumerable<ParameterExpression>)
  name.vb: Lambda(Type, Expression, Collections.Generic.IEnumerable(Of ParameterExpression))
  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 255
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.LambdaExpression' by first constructing a delegate type. It can be used when the delegate type is not known at compile time.
  syntax:
    content: public static LambdaExpression Lambda(Type delegateType, Expression body, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: delegateType
      type: System.Type
      description: A @'System.Type' that represents a delegate signature for the lambda.
    - id: body
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.LambdaExpression.Body' property equal to.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.ParameterExpression' objects to use to populate the @'System.Linq.Expressions.LambdaExpression.Parameters' collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: An object that represents a lambda expression which has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Lambda' and the @'System.Linq.Expressions.LambdaExpression.Body' and @'System.Linq.Expressions.LambdaExpression.Parameters' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*delegateType* or *body* is null.-or-One or more elements in *parameters* are null.'
  - type: System.ArgumentException
    description: '*delegateType* does not represent a delegate type.-or-*body*.Type represents a type that is not assignable to the return type of the delegate type represented by *delegateType*.-or-*parameters* does not contain the same number of elements as the list of parameters for the delegate type represented by *delegateType*.-or-The @''System.Linq.Expressions.Expression.Type'' property of an element of *parameters* is not assignable from the type of the corresponding parameter type of the delegate type represented by *delegateType*.'
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Lambda(Type, Expression, ParameterExpression[])
  name.vb: Lambda(Type, Expression, ParameterExpression())
  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[])
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression())
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 256
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.LambdaExpression' by first constructing a delegate type. It can be used when the delegate type is not known at compile time.
  syntax:
    content: public static LambdaExpression Lambda(Type delegateType, Expression body, params ParameterExpression[] parameters)
    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, ParamArray parameters As ParameterExpression()) As LambdaExpression
    parameters:
    - id: delegateType
      type: System.Type
      description: A @'System.Type' that represents a delegate signature for the lambda.
    - id: body
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.LambdaExpression.Body' property equal to.
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: An array of @'System.Linq.Expressions.ParameterExpression' objects to use to populate the @'System.Linq.Expressions.LambdaExpression.Parameters' collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: An object that represents a lambda expression which has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Lambda' and the @'System.Linq.Expressions.LambdaExpression.Body' and @'System.Linq.Expressions.LambdaExpression.Parameters' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*delegateType* or *body* is null.-or-One or more elements in *parameters* are null.'
  - type: System.ArgumentException
    description: '*delegateType* does not represent a delegate type.-or-*body*.Type represents a type that is not assignable to the return type of the delegate type represented by *delegateType*.-or-*parameters* does not contain the same number of elements as the list of parameters for the delegate type represented by *delegateType*.-or-The @''System.Linq.Expressions.Expression.Type'' property of an element of *parameters* is not assignable from the type of the corresponding parameter type of the delegate type represented by *delegateType*.'
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Lambda(Type, Expression, String, Boolean, Collections.Generic.IEnumerable<ParameterExpression>)
  name.vb: Lambda(Type, Expression, String, Boolean, Collections.Generic.IEnumerable(Of ParameterExpression))
  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 257
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  syntax:
    content: public static LambdaExpression Lambda(Type delegateType, Expression body, string name, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, name As String, tailCall As Boolean, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: delegateType
      type: System.Type
      description: A @'System.Linq.Expressions.Expression.Type' representing the delegate signature for the lambda.
    - id: body
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.LambdaExpression.Body' property equal to.
    - id: name
      type: System.String
      description: The name for the lambda. Used for emitting debug information.
    - id: tailCall
      type: System.Boolean
      description: A @'System.Boolean' that indicates if tail call optimization will be applied when compiling the created expression.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.ParameterExpression' objects to use to populate the @'System.Linq.Expressions.LambdaExpression.Parameters' collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' that has the @'System.Linq.Expressions.LambdaExpression.NodeType' property equal to Lambda and the @'System.Linq.Expressions.LambdaExpression.Body' and @'System.Linq.Expressions.LambdaExpression.Parameters' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Lambda(Type, Expression, String, Collections.Generic.IEnumerable<ParameterExpression>)
  name.vb: Lambda(Type, Expression, String, Collections.Generic.IEnumerable(Of ParameterExpression))
  fullName: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  fullName.vb: System.Linq.Expressions.Expression.Lambda(System.Type, System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 258
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a LambdaExpression by first constructing a delegate type.
  syntax:
    content: public static LambdaExpression Lambda(Type delegateType, Expression body, string name, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(delegateType As Type, body As Expression, name As String, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As LambdaExpression
    parameters:
    - id: delegateType
      type: System.Type
      description: A @'System.Linq.Expressions.Expression.Type' representing the delegate signature for the lambda.
    - id: body
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.LambdaExpression.Body' property equal to.
    - id: name
      type: System.String
      description: The name for the lambda. Used for emitting debug information.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.ParameterExpression' objects to use to populate the @'System.Linq.Expressions.LambdaExpression.Parameters' collection.
    return:
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' that has the @'System.Linq.Expressions.LambdaExpression.NodeType' property equal to Lambda and the @'System.Linq.Expressions.LambdaExpression.Body' and @'System.Linq.Expressions.LambdaExpression.Parameters' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Lambda<TDelegate>(Expression, Boolean, Collections.Generic.IEnumerable<ParameterExpression>)
  name.vb: Lambda(Of TDelegate)(Expression, Boolean, Collections.Generic.IEnumerable(Of ParameterExpression))
  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 259
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates an @'System.Linq.Expressions.Expression`1' where the delegate type is known at compile time.
  syntax:
    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, tailCall As Boolean, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.LambdaExpression.Body' property equal to.
    - id: tailCall
      type: System.Boolean
      description: A @'System.Boolean' that indicates if tail call optimization will be applied when compiling the created expression.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.ParameterExpression' objects to use to populate the @'System.Linq.Expressions.LambdaExpression.Parameters' collection.
    typeParameters:
    - id: TDelegate
    return:
      type: System.Linq.Expressions.Expression{{TDelegate}}
      description: An @'System.Linq.Expressions.Expression`1' that has the @'System.Linq.Expressions.LambdaExpression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Lambda'and the @'System.Linq.Expressions.LambdaExpression.Body' and @'System.Linq.Expressions.LambdaExpression.Parameters' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  id: Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Lambda<TDelegate>(Expression, Boolean, ParameterExpression[])
  name.vb: Lambda(Of TDelegate)(Expression, Boolean, ParameterExpression())
  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression[])
  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.Boolean, System.Linq.Expressions.ParameterExpression())
  type: Method
  source:
    remote: *o11
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/LambdaExpression.cs
    startLine: 297
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates an @'System.Linq.Expressions.Expression`1' where the delegate type is known at compile time.
  syntax:
    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, bool tailCall, params ParameterExpression[] parameters)
    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As Expression(Of TDelegate)
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.LambdaExpression.Body' property equal to.
    - id: tailCall
      type: System.Boolean
      description: A @'System.Boolean' that indicates if tail call optimization will be applied when compiling the created expression.
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: An array that contains @'System.Linq.Expressions.ParameterExpression' objects to use to populate the @'System.Linq.Expressions.LambdaExpression.Parameters' collection.
    typeParameters:
    - id: TDelegate
    return:
      type: System.Linq.Expressions.Expression{{TDelegate}}
      description: An @'System.Linq.Expressions.Expression`1' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Lambda' and the @'System.Linq.Expressions.LambdaExpression.Body' and @'System.Linq.Expressions.LambdaExpression.Parameters' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Lambda<TDelegate>(Expression, Collections.Generic.IEnumerable<ParameterExpression>)
  name.vb: Lambda(Of TDelegate)(Expression, Collections.Generic.IEnumerable(Of ParameterExpression))
  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 261
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates an @'System.Linq.Expressions.Expression`1' where the delegate type is known at compile time.
  syntax:
    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.LambdaExpression.Body' property equal to.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.ParameterExpression' objects to use to populate the @'System.Linq.Expressions.LambdaExpression.Parameters' collection.
    typeParameters:
    - id: TDelegate
    return:
      type: System.Linq.Expressions.Expression{{TDelegate}}
      description: An @'System.Linq.Expressions.Expression`1' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Lambda' and the @'System.Linq.Expressions.LambdaExpression.Body' and @'System.Linq.Expressions.LambdaExpression.Parameters' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*body* is null.-or-One or more elements in *parameters* are null.'
  - type: System.ArgumentException
    description: '*TDelegate* is not a delegate type.-or-*body*.Type represents a type that is not assignable to the return type of *TDelegate*.-or-*parameters* does not contain the same number of elements as the list of parameters for *TDelegate*.-or-The @''System.Linq.Expressions.Expression.Type'' property of an element of *parameters* is not assignable from the type of the corresponding parameter type of *TDelegate*.'
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  id: Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Lambda<TDelegate>(Expression, ParameterExpression[])
  name.vb: Lambda(Of TDelegate)(Expression, ParameterExpression())
  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression[])
  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.Linq.Expressions.ParameterExpression())
  type: Method
  source:
    remote: *o11
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/LambdaExpression.cs
    startLine: 284
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates an @'System.Linq.Expressions.Expression`1' where the delegate type is known at compile time.
  syntax:
    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, params ParameterExpression[] parameters)
    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, ParamArray parameters As ParameterExpression()) As Expression(Of TDelegate)
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.LambdaExpression.Body' property equal to.
    - id: parameters
      type: System.Linq.Expressions.ParameterExpression[]
      description: An array of @'System.Linq.Expressions.ParameterExpression' objects to use to populate the @'System.Linq.Expressions.LambdaExpression.Parameters' collection.
    typeParameters:
    - id: TDelegate
    return:
      type: System.Linq.Expressions.Expression{{TDelegate}}
      description: An @'System.Linq.Expressions.Expression`1' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Lambda' and the @'System.Linq.Expressions.LambdaExpression.Body' and @'System.Linq.Expressions.LambdaExpression.Parameters' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*body* is null.-or-One or more elements in *parameters* are null.'
  - type: System.ArgumentException
    description: '*TDelegate* is not a delegate type.-or-*body*.Type represents a type that is not assignable to the return type of *TDelegate*.-or-*parameters* does not contain the same number of elements as the list of parameters for *TDelegate*.-or-The @''System.Linq.Expressions.Expression.Type'' property of an element of *parameters* is not assignable from the type of the corresponding parameter type of *TDelegate*.'
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Lambda<TDelegate>(Expression, String, Boolean, Collections.Generic.IEnumerable<ParameterExpression>)
  name.vb: Lambda(Of TDelegate)(Expression, String, Boolean, Collections.Generic.IEnumerable(Of ParameterExpression))
  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 263
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates an @'System.Linq.Expressions.Expression`1' where the delegate type is known at compile time.
  syntax:
    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, string name, bool tailCall, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, name As String, tailCall As Boolean, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.LambdaExpression.Body' property equal to.
    - id: name
      type: System.String
      description: The name of the lambda. Used for generating debugging info.
    - id: tailCall
      type: System.Boolean
      description: A @'System.Boolean' that indicates if tail call optimization will be applied when compiling the created expression.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.ParameterExpression' objects to use to populate the @'System.Linq.Expressions.LambdaExpression.Parameters' collection.
    typeParameters:
    - id: TDelegate
    return:
      type: System.Linq.Expressions.Expression{{TDelegate}}
      description: An @'System.Linq.Expressions.Expression`1' that has the @'System.Linq.Expressions.LambdaExpression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Lambda' and the @'System.Linq.Expressions.LambdaExpression.Body' and @'System.Linq.Expressions.LambdaExpression.Parameters' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Lambda<TDelegate>(Expression, String, Collections.Generic.IEnumerable<ParameterExpression>)
  name.vb: Lambda(Of TDelegate)(Expression, String, Collections.Generic.IEnumerable(Of ParameterExpression))
  fullName: System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  fullName.vb: System.Linq.Expressions.Expression.Lambda(Of TDelegate)(System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 264
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates an @'System.Linq.Expressions.Expression`1' where the delegate type is known at compile time.
  syntax:
    content: public static Expression<TDelegate> Lambda<TDelegate>(Expression body, string name, Collections.Generic.IEnumerable<ParameterExpression> parameters)
    content.vb: Public Shared Function Lambda(Of TDelegate)(body As Expression, name As String, parameters As Collections.Generic.IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.Expression`1.Body' property equal to.
    - id: name
      type: System.String
      description: The name of the lambda. Used for generating debugging information.
    - id: parameters
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.ParameterExpression' objects to use to populate the @'System.Linq.Expressions.Expression`1.Parameters' collection.
    typeParameters:
    - id: TDelegate
    return:
      type: System.Linq.Expressions.Expression{{TDelegate}}
      description: An @'System.Linq.Expressions.Expression`1' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Lambda' and the @'System.Linq.Expressions.LambdaExpression.Body' and @'System.Linq.Expressions.LambdaExpression.Parameters' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: LeftShift(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2378
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a bitwise left-shift operation.
  syntax:
    content: public static BinaryExpression LeftShift(Expression left, Expression right)
    content.vb: Public Shared Function LeftShift(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.LeftShift' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.InvalidOperationException
    description: The left-shift operator is not defined for *left*.Type and *right*.Type.
- uid: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: LeftShift(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 266
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a bitwise left-shift operation.
  syntax:
    content: public static BinaryExpression LeftShift(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function LeftShift(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.LeftShift' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.'
  - type: System.InvalidOperationException
    description: '*method* is null and the left-shift operator is not defined for *left*.Type and *right*.Type.'
- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: LeftShiftAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2416
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a bitwise left-shift assignment operation.
  syntax:
    content: public static BinaryExpression LeftShiftAssign(Expression left, Expression right)
    content.vb: Public Shared Function LeftShiftAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.LeftShiftAssign' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: LeftShiftAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 268
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a bitwise left-shift assignment operation.
  syntax:
    content: public static BinaryExpression LeftShiftAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function LeftShiftAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.LeftShiftAssign' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: LeftShiftAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 269
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a bitwise left-shift assignment operation.
  syntax:
    content: public static BinaryExpression LeftShiftAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function LeftShiftAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' to set the @'System.Linq.Expressions.BinaryExpression.Conversion' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.LeftShiftAssign' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', @'System.Linq.Expressions.BinaryExpression.Method', and @'System.Linq.Expressions.BinaryExpression.Conversion' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: LessThan(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1230
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a "less than" numeric comparison.
  syntax:
    content: public static BinaryExpression LessThan(Expression left, Expression right)
    content.vb: Public Shared Function LessThan(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.LessThan' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.InvalidOperationException
    description: The "less than" operator is not defined for *left*.Type and *right*.Type.
- uid: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: LessThan(Expression, Expression, Boolean, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 271
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a "less than" numeric comparison.
  syntax:
    content: public static BinaryExpression LessThan(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method)
    content.vb: Public Shared Function LessThan(left As Expression, right As Expression, liftToNull As Boolean, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: liftToNull
      type: System.Boolean
      description: true to set @'System.Linq.Expressions.BinaryExpression.IsLiftedToNull' to true; false to set @'System.Linq.Expressions.BinaryExpression.IsLiftedToNull' to false.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.LessThan' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', @'System.Linq.Expressions.BinaryExpression.IsLiftedToNull', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.'
  - type: System.InvalidOperationException
    description: '*method* is null and the "less than" operator is not defined for *left*.Type and *right*.Type.'
- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: LessThanOrEqual(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1298
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a " less than or equal" numeric comparison.
  syntax:
    content: public static BinaryExpression LessThanOrEqual(Expression left, Expression right)
    content.vb: Public Shared Function LessThanOrEqual(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.LessThanOrEqual' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.InvalidOperationException
    description: The "less than or equal" operator is not defined for *left*.Type and *right*.Type.
- uid: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: LessThanOrEqual(Expression, Expression, Boolean, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 273
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a "less than or equal" numeric comparison.
  syntax:
    content: public static BinaryExpression LessThanOrEqual(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method)
    content.vb: Public Shared Function LessThanOrEqual(left As Expression, right As Expression, liftToNull As Boolean, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: liftToNull
      type: System.Boolean
      description: true to set @'System.Linq.Expressions.BinaryExpression.IsLiftedToNull' to true; false to set @'System.Linq.Expressions.BinaryExpression.IsLiftedToNull' to false.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.LessThanOrEqual' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', @'System.Linq.Expressions.BinaryExpression.IsLiftedToNull', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.'
  - type: System.InvalidOperationException
    description: '*method* is null and the "less than or equal" operator is not defined for *left*.Type and *right*.Type.'
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  id: ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ListBind(Reflection.MemberInfo, Collections.Generic.IEnumerable<ElementInit>)
  name.vb: ListBind(Reflection.MemberInfo, Collections.Generic.IEnumerable(Of ElementInit))
  fullName: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>)
  fullName.vb: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ElementInit))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 274
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MemberListBinding' where the member is a field or property.
  syntax:
    content: public static MemberListBinding ListBind(Reflection.MemberInfo member, Collections.Generic.IEnumerable<ElementInit> initializers)
    content.vb: Public Shared Function ListBind(member As Reflection.MemberInfo, initializers As Collections.Generic.IEnumerable(Of ElementInit)) As MemberListBinding
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: A @'System.Reflection.MemberInfo' that represents a field or property to set the @'System.Linq.Expressions.MemberBinding.Member' property equal to.
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.ElementInit' objects to use to populate the @'System.Linq.Expressions.MemberListBinding.Initializers' collection.
    return:
      type: System.Linq.Expressions.MemberListBinding
      description: A @'System.Linq.Expressions.MemberListBinding' that has the @'System.Linq.Expressions.MemberBinding.BindingType' property equal to @'System.Linq.Expressions.MemberBindingType.ListBinding' and the @'System.Linq.Expressions.MemberBinding.Member' and @'System.Linq.Expressions.MemberListBinding.Initializers' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*member* is null. -or-One or more elements of *initializers* are null.'
  - type: System.ArgumentException
    description: '*member* does not represent a field or property.-or-The @''System.Reflection.FieldInfo.FieldType'' or @''System.Reflection.PropertyInfo.PropertyType'' of the field or property that *member* represents does not implement @''System.Collections.IEnumerable''.'
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])
  id: ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ListBind(Reflection.MemberInfo, ElementInit[])
  name.vb: ListBind(Reflection.MemberInfo, ElementInit())
  fullName: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Linq.Expressions.ElementInit[])
  fullName.vb: System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo, System.Linq.Expressions.ElementInit())
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 275
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MemberListBinding' where the member is a field or property.
  syntax:
    content: public static MemberListBinding ListBind(Reflection.MemberInfo member, params ElementInit[] initializers)
    content.vb: Public Shared Function ListBind(member As Reflection.MemberInfo, ParamArray initializers As ElementInit()) As MemberListBinding
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: A @'System.Reflection.MemberInfo' that represents a field or property to set the @'System.Linq.Expressions.MemberBinding.Member' property equal to.
    - id: initializers
      type: System.Linq.Expressions.ElementInit[]
      description: An array of @'System.Linq.Expressions.ElementInit' objects to use to populate the @'System.Linq.Expressions.MemberListBinding.Initializers' collection.
    return:
      type: System.Linq.Expressions.MemberListBinding
      description: A @'System.Linq.Expressions.MemberListBinding' that has the @'System.Linq.Expressions.MemberBinding.BindingType' property equal to @'System.Linq.Expressions.MemberBindingType.ListBinding' and the @'System.Linq.Expressions.MemberBinding.Member' and @'System.Linq.Expressions.MemberListBinding.Initializers' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*member* is null. -or-One or more elements of *initializers* are null.'
  - type: System.ArgumentException
    description: '*member* does not represent a field or property.-or-The @''System.Reflection.FieldInfo.FieldType'' or @''System.Reflection.PropertyInfo.PropertyType'' of the field or property that *member* represents does not implement @''System.Collections.IEnumerable''.'
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  id: ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ListBind(Reflection.MethodInfo, Collections.Generic.IEnumerable<ElementInit>)
  name.vb: ListBind(Reflection.MethodInfo, Collections.Generic.IEnumerable(Of ElementInit))
  fullName: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>)
  fullName.vb: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ElementInit))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 276
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MemberListBinding' based on a specified property accessor method.
  syntax:
    content: public static MemberListBinding ListBind(Reflection.MethodInfo propertyAccessor, Collections.Generic.IEnumerable<ElementInit> initializers)
    content.vb: Public Shared Function ListBind(propertyAccessor As Reflection.MethodInfo, initializers As Collections.Generic.IEnumerable(Of ElementInit)) As MemberListBinding
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' that represents a property accessor method.
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.ElementInit' objects to use to populate the @'System.Linq.Expressions.MemberListBinding.Initializers' collection.
    return:
      type: System.Linq.Expressions.MemberListBinding
      description: A @'System.Linq.Expressions.MemberListBinding' that has the @'System.Linq.Expressions.MemberBinding.BindingType' property equal to @'System.Linq.Expressions.MemberBindingType.ListBinding', the @'System.Linq.Expressions.MemberBinding.Member' property set to the @'System.Reflection.MemberInfo' that represents the property accessed in *propertyAccessor*, and @'System.Linq.Expressions.MemberListBinding.Initializers' populated with the elements of *initializers*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*propertyAccessor* is null. -or-One or more elements of *initializers* are null.'
  - type: System.ArgumentException
    description: '*propertyAccessor* does not represent a property accessor method.-or-The @''System.Reflection.PropertyInfo.PropertyType'' of the property that the method represented by *propertyAccessor* accesses does not implement @''System.Collections.IEnumerable''.'
- uid: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])
  id: ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ListBind(Reflection.MethodInfo, ElementInit[])
  name.vb: ListBind(Reflection.MethodInfo, ElementInit())
  fullName: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Linq.Expressions.ElementInit[])
  fullName.vb: System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo, System.Linq.Expressions.ElementInit())
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 277
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MemberListBinding' object based on a specified property accessor method.
  syntax:
    content: public static MemberListBinding ListBind(Reflection.MethodInfo propertyAccessor, params ElementInit[] initializers)
    content.vb: Public Shared Function ListBind(propertyAccessor As Reflection.MethodInfo, ParamArray initializers As ElementInit()) As MemberListBinding
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' that represents a property accessor method.
    - id: initializers
      type: System.Linq.Expressions.ElementInit[]
      description: An array of @'System.Linq.Expressions.ElementInit' objects to use to populate the @'System.Linq.Expressions.MemberListBinding.Initializers' collection.
    return:
      type: System.Linq.Expressions.MemberListBinding
      description: A @'System.Linq.Expressions.MemberListBinding' that has the @'System.Linq.Expressions.MemberBinding.BindingType' property equal to @'System.Linq.Expressions.MemberBindingType.ListBinding', the @'System.Linq.Expressions.MemberBinding.Member' property set to the @'System.Reflection.MemberInfo' that represents the property accessed in *propertyAccessor*, and @'System.Linq.Expressions.MemberListBinding.Initializers' populated with the elements of *initializers*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*propertyAccessor* is null. -or-One or more elements of *initializers* are null.'
  - type: System.ArgumentException
    description: '*propertyAccessor* does not represent a property accessor method.-or-The @''System.Reflection.PropertyInfo.PropertyType'' of the property that the method represented by *propertyAccessor* accesses does not implement @''System.Collections.IEnumerable''.'
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  id: ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ListInit(NewExpression, Collections.Generic.IEnumerable<ElementInit>)
  name.vb: ListInit(NewExpression, Collections.Generic.IEnumerable(Of ElementInit))
  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>)
  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ElementInit))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 278
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.ListInitExpression' that uses specified @'System.Linq.Expressions.ElementInit' objects to initialize a collection.
  syntax:
    content: public static ListInitExpression ListInit(NewExpression newExpression, Collections.Generic.IEnumerable<ElementInit> initializers)
    content.vb: Public Shared Function ListInit(newExpression As NewExpression, initializers As Collections.Generic.IEnumerable(Of ElementInit)) As ListInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A @'System.Linq.Expressions.NewExpression' to set the @'System.Linq.Expressions.ListInitExpression.NewExpression' property equal to.
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.ElementInit' objects to use to populate the @'System.Linq.Expressions.ListInitExpression.Initializers' collection.
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: A @'System.Linq.Expressions.ListInitExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.ListInit' and the @'System.Linq.Expressions.ListInitExpression.NewExpression' and @'System.Linq.Expressions.ListInitExpression.Initializers' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*newExpression* or *initializers* is null.-or-One or more elements of *initializers* are null.'
  - type: System.ArgumentException
    description: '*newExpression*.Type does not implement @''System.Collections.IEnumerable''.'
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ListInit(NewExpression, Collections.Generic.IEnumerable<Expression>)
  name.vb: ListInit(NewExpression, Collections.Generic.IEnumerable(Of Expression))
  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 279
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.ListInitExpression' that uses a method named "Add" to add elements to a collection.
  syntax:
    content: public static ListInitExpression ListInit(NewExpression newExpression, Collections.Generic.IEnumerable<Expression> initializers)
    content.vb: Public Shared Function ListInit(newExpression As NewExpression, initializers As Collections.Generic.IEnumerable(Of Expression)) As ListInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A @'System.Linq.Expressions.NewExpression' to set the @'System.Linq.Expressions.ListInitExpression.NewExpression' property equal to.
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.Expression' objects to use to populate the @'System.Linq.Expressions.ListInitExpression.Initializers' collection.
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: A @'System.Linq.Expressions.ListInitExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.ListInit' and the @'System.Linq.Expressions.ListInitExpression.NewExpression' property set to the specified value.
  exceptions:
  - type: System.ArgumentNullException
    description: '*newExpression* or *initializers* is null.-or-One or more elements of *initializers* are null.'
  - type: System.ArgumentException
    description: '*newExpression*.Type does not implement @''System.Collections.IEnumerable''.'
  - type: System.InvalidOperationException
    description: There is no instance method named "Add" (case insensitive) declared in *newExpression*.Type or its base type.-or-The add method on *newExpression*.Type or its base type does not take exactly one argument.-or-The type represented by the @'System.Linq.Expressions.Expression.Type' property of the first element of *initializers* is not assignable to the argument type of the add method on *newExpression*.Type or its base type.-or-More than one argument-compatible method named "Add" (case-insensitive) exists on *newExpression*.Type and/or its base type.
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])
  id: ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ListInit(NewExpression, ElementInit[])
  name.vb: ListInit(NewExpression, ElementInit())
  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.ElementInit[])
  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.ElementInit())
  type: Method
  source:
    remote: &o12
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/ListInitExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/ListInitExpression.cs
    startLine: 212
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.ListInitExpression' that uses specified @'System.Linq.Expressions.ElementInit' objects to initialize a collection.
  syntax:
    content: public static ListInitExpression ListInit(NewExpression newExpression, params ElementInit[] initializers)
    content.vb: Public Shared Function ListInit(newExpression As NewExpression, ParamArray initializers As ElementInit()) As ListInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A @'System.Linq.Expressions.NewExpression' to set the @'System.Linq.Expressions.ListInitExpression.NewExpression' property equal to.
    - id: initializers
      type: System.Linq.Expressions.ElementInit[]
      description: An array of @'System.Linq.Expressions.ElementInit' objects to use to populate the @'System.Linq.Expressions.ListInitExpression.Initializers' collection.
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: A @'System.Linq.Expressions.ListInitExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.ListInit' and the @'System.Linq.Expressions.ListInitExpression.NewExpression' and @'System.Linq.Expressions.ListInitExpression.Initializers' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*newExpression* or *initializers* is null.-or-One or more elements of *initializers* are null.'
  - type: System.ArgumentException
    description: '*newExpression*.Type does not implement @''System.Collections.IEnumerable''.'
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])
  id: ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ListInit(NewExpression, Expression[])
  name.vb: ListInit(NewExpression, Expression())
  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.Expression[])
  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.Expression())
  type: Method
  source:
    remote: *o12
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/ListInitExpression.cs
    startLine: 124
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.ListInitExpression' that uses a method named "Add" to add elements to a collection.
  syntax:
    content: public static ListInitExpression ListInit(NewExpression newExpression, params Expression[] initializers)
    content.vb: Public Shared Function ListInit(newExpression As NewExpression, ParamArray initializers As Expression()) As ListInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A @'System.Linq.Expressions.NewExpression' to set the @'System.Linq.Expressions.ListInitExpression.NewExpression' property equal to.
    - id: initializers
      type: System.Linq.Expressions.Expression[]
      description: An array of @'System.Linq.Expressions.Expression' objects to use to populate the @'System.Linq.Expressions.ListInitExpression.Initializers' collection.
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: A @'System.Linq.Expressions.ListInitExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.ListInit' and the @'System.Linq.Expressions.ListInitExpression.NewExpression' property set to the specified value.
  exceptions:
  - type: System.ArgumentNullException
    description: '*newExpression* or *initializers* is null.-or-One or more elements of *initializers* are null.'
  - type: System.ArgumentException
    description: '*newExpression*.Type does not implement @''System.Collections.IEnumerable''.'
  - type: System.InvalidOperationException
    description: There is no instance method named "Add" (case insensitive) declared in *newExpression*.Type or its base type.-or-The add method on *newExpression*.Type or its base type does not take exactly one argument.-or-The type represented by the @'System.Linq.Expressions.Expression.Type' property of the first element of *initializers* is not assignable to the argument type of the add method on *newExpression*.Type or its base type.-or-More than one argument-compatible method named "Add" (case-insensitive) exists on *newExpression*.Type and/or its base type.
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ListInit(NewExpression, Reflection.MethodInfo, Collections.Generic.IEnumerable<Expression>)
  name.vb: ListInit(NewExpression, Reflection.MethodInfo, Collections.Generic.IEnumerable(Of Expression))
  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 282
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.ListInitExpression' that uses a specified method to add elements to a collection.
  syntax:
    content: public static ListInitExpression ListInit(NewExpression newExpression, Reflection.MethodInfo addMethod, Collections.Generic.IEnumerable<Expression> initializers)
    content.vb: Public Shared Function ListInit(newExpression As NewExpression, addMethod As Reflection.MethodInfo, initializers As Collections.Generic.IEnumerable(Of Expression)) As ListInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A @'System.Linq.Expressions.NewExpression' to set the @'System.Linq.Expressions.ListInitExpression.NewExpression' property equal to.
    - id: addMethod
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' that represents an instance method named "Add" (case insensitive), that adds an element to a collection.
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.Expression' objects to use to populate the @'System.Linq.Expressions.ListInitExpression.Initializers' collection.
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: A @'System.Linq.Expressions.ListInitExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.ListInit' and the @'System.Linq.Expressions.ListInitExpression.NewExpression' property set to the specified value.
  exceptions:
  - type: System.ArgumentNullException
    description: '*newExpression* or *initializers* is null.-or-One or more elements of *initializers* are null.'
  - type: System.ArgumentException
    description: '*newExpression*.Type does not implement @''System.Collections.IEnumerable''.-or-*addMethod* is not null and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.-or-*addMethod* is not null and the type represented by the @''System.Linq.Expressions.Expression.Type'' property of one or more elements of *initializers* is not assignable to the argument type of the method that *addMethod* represents.'
  - type: System.InvalidOperationException
    description: '*addMethod* is null and no instance method named "Add" that takes one type-compatible argument exists on *newExpression*.Type or its base type.'
- uid: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  id: ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ListInit(NewExpression, Reflection.MethodInfo, Expression[])
  name.vb: ListInit(NewExpression, Reflection.MethodInfo, Expression())
  fullName: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression[])
  fullName.vb: System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression())
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 283
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.ListInitExpression' that uses a specified method to add elements to a collection.
  syntax:
    content: public static ListInitExpression ListInit(NewExpression newExpression, Reflection.MethodInfo addMethod, params Expression[] initializers)
    content.vb: Public Shared Function ListInit(newExpression As NewExpression, addMethod As Reflection.MethodInfo, ParamArray initializers As Expression()) As ListInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A @'System.Linq.Expressions.NewExpression' to set the @'System.Linq.Expressions.ListInitExpression.NewExpression' property equal to.
    - id: addMethod
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' that represents an instance method that takes one argument, that adds an element to a collection.
    - id: initializers
      type: System.Linq.Expressions.Expression[]
      description: An array of @'System.Linq.Expressions.Expression' objects to use to populate the @'System.Linq.Expressions.ListInitExpression.Initializers' collection.
    return:
      type: System.Linq.Expressions.ListInitExpression
      description: A @'System.Linq.Expressions.ListInitExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.ListInit' and the @'System.Linq.Expressions.ListInitExpression.NewExpression' property set to the specified value.
  exceptions:
  - type: System.ArgumentNullException
    description: '*newExpression* or *initializers* is null.-or-One or more elements of *initializers* are null.'
  - type: System.ArgumentException
    description: '*newExpression*.Type does not implement @''System.Collections.IEnumerable''.-or-*addMethod* is not null and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.-or-*addMethod* is not null and the type represented by the @''System.Linq.Expressions.Expression.Type'' property of one or more elements of *initializers* is not assignable to the argument type of the method that *addMethod* represents.'
  - type: System.InvalidOperationException
    description: '*addMethod* is null and no instance method named "Add" that takes one type-compatible argument exists on *newExpression*.Type or its base type.'
- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)
  id: Loop(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Loop(Expression)
  fullName: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: &o13
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/LoopExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/LoopExpression.cs
    startLine: 103
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.LoopExpression' with the given body.
  syntax:
    content: public static LoopExpression Loop(Expression body)
    content.vb: Public Shared Function Loop(body As Expression) As LoopExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the loop.
    return:
      type: System.Linq.Expressions.LoopExpression
      description: The created @'System.Linq.Expressions.LoopExpression'.
- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)
  id: Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Loop(Expression, LabelTarget)
  fullName: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression, System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote: *o13
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/LoopExpression.cs
    startLine: 114
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.LoopExpression' with the given body and break target.
  syntax:
    content: public static LoopExpression Loop(Expression body, LabelTarget break)
    content.vb: Public Shared Function Loop(body As Expression, break As LabelTarget) As LoopExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the loop.
    - id: break
      type: System.Linq.Expressions.LabelTarget
      description: The break target used by the loop body.
    return:
      type: System.Linq.Expressions.LoopExpression
      description: The created @'System.Linq.Expressions.LoopExpression'.
- uid: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)
  id: Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Loop(Expression, LabelTarget, LabelTarget)
  fullName: System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression, System.Linq.Expressions.LabelTarget, System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote: *o13
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/LoopExpression.cs
    startLine: 126
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.LoopExpression' with the given body.
  syntax:
    content: public static LoopExpression Loop(Expression body, LabelTarget break, LabelTarget continue)
    content.vb: Public Shared Function Loop(body As Expression, break As LabelTarget, continue As LabelTarget) As LoopExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the loop.
    - id: break
      type: System.Linq.Expressions.LabelTarget
      description: The break target used by the loop body.
    - id: continue
      type: System.Linq.Expressions.LabelTarget
      description: The continue target used by the loop body.
    return:
      type: System.Linq.Expressions.LoopExpression
      description: The created @'System.Linq.Expressions.LoopExpression'.
- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: MakeBinary(ExpressionType, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 922
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression', given the left and right operands, by calling an appropriate factory method.
  syntax:
    content: public static BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right)
    content.vb: Public Shared Function MakeBinary(binaryType As ExpressionType, left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: binaryType
      type: System.Linq.Expressions.ExpressionType
      description: The @'System.Linq.Expressions.ExpressionType' that specifies the type of binary operation.
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' that represents the left operand.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' that represents the right operand.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: The @'System.Linq.Expressions.BinaryExpression' that results from calling the appropriate factory method.
  exceptions:
  - type: System.ArgumentException
    description: '*binaryType* does not correspond to a binary expression node.'
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: MakeBinary(ExpressionType, Expression, Expression, Boolean, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 288
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression', given the left operand, right operand and implementing method, by calling the appropriate factory method.
  syntax:
    content: public static BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method)
    content.vb: Public Shared Function MakeBinary(binaryType As ExpressionType, left As Expression, right As Expression, liftToNull As Boolean, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: binaryType
      type: System.Linq.Expressions.ExpressionType
      description: The @'System.Linq.Expressions.ExpressionType' that specifies the type of binary operation.
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' that represents the left operand.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' that represents the right operand.
    - id: liftToNull
      type: System.Boolean
      description: true to set @'System.Linq.Expressions.BinaryExpression.IsLiftedToNull' to true; false to set @'System.Linq.Expressions.BinaryExpression.IsLiftedToNull' to false.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' that specifies the implementing method.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: The @'System.Linq.Expressions.BinaryExpression' that results from calling the appropriate factory method.
  exceptions:
  - type: System.ArgumentException
    description: '*binaryType* does not correspond to a binary expression node.'
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
- uid: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: MakeBinary(ExpressionType, Expression, Expression, Boolean, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 289
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression', given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.
  syntax:
    content: public static BinaryExpression MakeBinary(ExpressionType binaryType, Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function MakeBinary(binaryType As ExpressionType, left As Expression, right As Expression, liftToNull As Boolean, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: binaryType
      type: System.Linq.Expressions.ExpressionType
      description: The @'System.Linq.Expressions.ExpressionType' that specifies the type of binary operation.
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' that represents the left operand.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' that represents the right operand.
    - id: liftToNull
      type: System.Boolean
      description: true to set @'System.Linq.Expressions.BinaryExpression.IsLiftedToNull' to true; false to set @'System.Linq.Expressions.BinaryExpression.IsLiftedToNull' to false.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' that specifies the implementing method.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' that represents a type conversion function. This parameter is used only if *binaryType* is @'System.Linq.Expressions.ExpressionType.Coalesce' or compound assignment..
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: The @'System.Linq.Expressions.BinaryExpression' that results from calling the appropriate factory method.
  exceptions:
  - type: System.ArgumentException
    description: '*binaryType* does not correspond to a binary expression node.'
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
- uid: System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: MakeCatchBlock(Type, ParameterExpression, Expression, Expression)
  fullName: System.Linq.Expressions.Expression.MakeCatchBlock(System.Type, System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 290
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.CatchBlock' representing a catch statement with the specified elements.
  syntax:
    content: public static CatchBlock MakeCatchBlock(Type type, ParameterExpression variable, Expression body, Expression filter)
    content.vb: Public Shared Function MakeCatchBlock(type As Type, variable As ParameterExpression, body As Expression, filter As Expression) As CatchBlock
    parameters:
    - id: type
      type: System.Type
      description: The @'System.Linq.Expressions.Expression.Type' of @'System.Exception' this @'System.Linq.Expressions.CatchBlock' will handle.
    - id: variable
      type: System.Linq.Expressions.ParameterExpression
      description: A @'System.Linq.Expressions.ParameterExpression' representing a reference to the @'System.Exception' object caught by this handler.
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the catch statement.
    - id: filter
      type: System.Linq.Expressions.Expression
      description: The body of the @'System.Exception' filter.
    return:
      type: System.Linq.Expressions.CatchBlock
      description: The created @'System.Linq.Expressions.CatchBlock'.
- uid: System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  id: MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)
  fullName: System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind, System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 291
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.GotoExpression' representing a jump of the specified @'System.Linq.Expressions.GotoExpressionKind'. The value passed to the label upon jumping can also be specified.
  syntax:
    content: public static GotoExpression MakeGoto(GotoExpressionKind kind, LabelTarget target, Expression value, Type type)
    content.vb: Public Shared Function MakeGoto(kind As GotoExpressionKind, target As LabelTarget, value As Expression, type As Type) As GotoExpression
    parameters:
    - id: kind
      type: System.Linq.Expressions.GotoExpressionKind
      description: The @'System.Linq.Expressions.GotoExpressionKind' of the @'System.Linq.Expressions.GotoExpression'.
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The @'System.Linq.Expressions.LabelTarget' that the @'System.Linq.Expressions.GotoExpression' will jump to.
    - id: value
      type: System.Linq.Expressions.Expression
      description: The value that will be passed to the associated label upon jumping.
    - id: type
      type: System.Type
      description: An @'System.Type' to set the @'System.Linq.Expressions.Expression.Type' property equal to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A @'System.Linq.Expressions.GotoExpression' with @'System.Linq.Expressions.GotoExpression.Kind' equal to *kind*, the @'System.Linq.Expressions.GotoExpression.Target' property set to *target*, the @'System.Linq.Expressions.Expression.Type' property set to *type*, and *value* to be passed to the target label upon jumping.
- uid: System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: MakeIndex(Expression, Reflection.PropertyInfo, Collections.Generic.IEnumerable<Expression>)
  name.vb: MakeIndex(Expression, Reflection.PropertyInfo, Collections.Generic.IEnumerable(Of Expression))
  fullName: System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  fullName.vb: System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 292
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates an @'System.Linq.Expressions.IndexExpression' that represents accessing an indexed property in an object.
  syntax:
    content: public static IndexExpression MakeIndex(Expression instance, Reflection.PropertyInfo indexer, Collections.Generic.IEnumerable<Expression> arguments)
    content.vb: Public Shared Function MakeIndex(instance As Expression, indexer As Reflection.PropertyInfo, arguments As Collections.Generic.IEnumerable(Of Expression)) As IndexExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: The object to which the property belongs. It should be null if the property is static (shared in Visual Basic).
    - id: indexer
      type: System.Reflection.PropertyInfo
      description: An @'System.Linq.Expressions.Expression' representing the property to index.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An IEnumerable<Expression> (IEnumerable (Of Expression) in Visual Basic) that contains the arguments that will be used to index the property.
    return:
      type: System.Linq.Expressions.IndexExpression
      description: The created @'System.Linq.Expressions.IndexExpression'.
- uid: System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)
  id: MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: MakeMemberAccess(Expression, Reflection.MemberInfo)
  fullName: System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression, System.Reflection.MemberInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 293
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MemberExpression' that represents accessing either a field or a property.
  syntax:
    content: public static MemberExpression MakeMemberAccess(Expression expression, Reflection.MemberInfo member)
    content.vb: Public Shared Function MakeMemberAccess(expression As Expression, member As Reflection.MemberInfo) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' that represents the object that the member belongs to. This can be null for static members.
    - id: member
      type: System.Reflection.MemberInfo
      description: The @'System.Reflection.MemberInfo' that describes the field or property to be accessed.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: The @'System.Linq.Expressions.MemberExpression' that results from calling the appropriate factory method.
  exceptions:
  - type: System.ArgumentNullException
    description: '*member* is null.'
  - type: System.ArgumentException
    description: '*member* does not represent a field or property.'
- uid: System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})
  id: MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: MakeTry(Type, Expression, Expression, Expression, Collections.Generic.IEnumerable<CatchBlock>)
  name.vb: MakeTry(Type, Expression, Expression, Expression, Collections.Generic.IEnumerable(Of CatchBlock))
  fullName: System.Linq.Expressions.Expression.MakeTry(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock>)
  fullName.vb: System.Linq.Expressions.Expression.MakeTry(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.CatchBlock))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 294
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.TryExpression' representing a try block with the specified elements.
  syntax:
    content: public static TryExpression MakeTry(Type type, Expression body, Expression finally, Expression fault, Collections.Generic.IEnumerable<CatchBlock> handlers)
    content.vb: Public Shared Function MakeTry(type As Type, body As Expression, finally As Expression, fault As Expression, handlers As Collections.Generic.IEnumerable(Of CatchBlock)) As TryExpression
    parameters:
    - id: type
      type: System.Type
      description: The result type of the try expression. If null, bodh and all handlers must have identical type.
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the try block.
    - id: finally
      type: System.Linq.Expressions.Expression
      description: The body of the finally block. Pass null if the try block has no finally block associated with it.
    - id: fault
      type: System.Linq.Expressions.Expression
      description: The body of the fault block. Pass null if the try block has no fault block associated with it.
    - id: handlers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock}
      description: A collection of @'System.Linq.Expressions.CatchBlock's representing the catch statements to be associated with the try block.
    return:
      type: System.Linq.Expressions.TryExpression
      description: The created @'System.Linq.Expressions.TryExpression'.
- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)
  id: MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: MakeUnary(ExpressionType, Expression, Type)
  fullName: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 295
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression', given an operand, by calling the appropriate factory method.
  syntax:
    content: public static UnaryExpression MakeUnary(ExpressionType unaryType, Expression operand, Type type)
    content.vb: Public Shared Function MakeUnary(unaryType As ExpressionType, operand As Expression, type As Type) As UnaryExpression
    parameters:
    - id: unaryType
      type: System.Linq.Expressions.ExpressionType
      description: The @'System.Linq.Expressions.ExpressionType' that specifies the type of unary operation.
    - id: operand
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' that represents the operand.
    - id: type
      type: System.Type
      description: The @'System.Type' that specifies the type to be converted to (pass null if not applicable).
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: The @'System.Linq.Expressions.UnaryExpression' that results from calling the appropriate factory method.
  exceptions:
  - type: System.ArgumentNullException
    description: '*operand* is null.'
  - type: System.ArgumentException
    description: '*unaryType* does not correspond to a unary expression node.'
- uid: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  id: MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: MakeUnary(ExpressionType, Expression, Type, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 296
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression', given an operand and implementing method, by calling the appropriate factory method.
  syntax:
    content: public static UnaryExpression MakeUnary(ExpressionType unaryType, Expression operand, Type type, Reflection.MethodInfo method)
    content.vb: Public Shared Function MakeUnary(unaryType As ExpressionType, operand As Expression, type As Type, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: unaryType
      type: System.Linq.Expressions.ExpressionType
      description: The @'System.Linq.Expressions.ExpressionType' that specifies the type of unary operation.
    - id: operand
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' that represents the operand.
    - id: type
      type: System.Type
      description: The @'System.Type' that specifies the type to be converted to (pass null if not applicable).
    - id: method
      type: System.Reflection.MethodInfo
      description: The @'System.Reflection.MethodInfo' that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: The @'System.Linq.Expressions.UnaryExpression' that results from calling the appropriate factory method.
  exceptions:
  - type: System.ArgumentNullException
    description: '*operand* is null.'
  - type: System.ArgumentException
    description: '*unaryType* does not correspond to a unary expression node.'
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  id: MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: MemberBind(Reflection.MemberInfo, Collections.Generic.IEnumerable<MemberBinding>)
  name.vb: MemberBind(Reflection.MemberInfo, Collections.Generic.IEnumerable(Of MemberBinding))
  fullName: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>)
  fullName.vb: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.MemberBinding))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 297
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MemberMemberBinding' that represents the recursive initialization of members of a field or property.
  syntax:
    content: public static MemberMemberBinding MemberBind(Reflection.MemberInfo member, Collections.Generic.IEnumerable<MemberBinding> bindings)
    content.vb: Public Shared Function MemberBind(member As Reflection.MemberInfo, bindings As Collections.Generic.IEnumerable(Of MemberBinding)) As MemberMemberBinding
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: The @'System.Reflection.MemberInfo' to set the @'System.Linq.Expressions.MemberBinding.Member' property equal to.
    - id: bindings
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.MemberBinding' objects to use to populate the @'System.Linq.Expressions.MemberMemberBinding.Bindings' collection.
    return:
      type: System.Linq.Expressions.MemberMemberBinding
      description: A @'System.Linq.Expressions.MemberMemberBinding' that has the @'System.Linq.Expressions.MemberBinding.BindingType' property equal to @'System.Linq.Expressions.MemberBindingType.MemberBinding' and the @'System.Linq.Expressions.MemberBinding.Member' and @'System.Linq.Expressions.MemberMemberBinding.Bindings' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*member* or *bindings* is null.'
  - type: System.ArgumentException
    description: '*member* does not represent a field or property.-or-The @''System.Linq.Expressions.MemberBinding.Member'' property of an element of *bindings* does not represent a member of the type of the field or property that *member* represents.'
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])
  id: MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: MemberBind(Reflection.MemberInfo, MemberBinding[])
  name.vb: MemberBind(Reflection.MemberInfo, MemberBinding())
  fullName: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Linq.Expressions.MemberBinding[])
  fullName.vb: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo, System.Linq.Expressions.MemberBinding())
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 298
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MemberMemberBinding' that represents the recursive initialization of members of a field or property.
  syntax:
    content: public static MemberMemberBinding MemberBind(Reflection.MemberInfo member, params MemberBinding[] bindings)
    content.vb: Public Shared Function MemberBind(member As Reflection.MemberInfo, ParamArray bindings As MemberBinding()) As MemberMemberBinding
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: The @'System.Reflection.MemberInfo' to set the @'System.Linq.Expressions.MemberBinding.Member' property equal to.
    - id: bindings
      type: System.Linq.Expressions.MemberBinding[]
      description: An array of @'System.Linq.Expressions.MemberBinding' objects to use to populate the @'System.Linq.Expressions.MemberMemberBinding.Bindings' collection.
    return:
      type: System.Linq.Expressions.MemberMemberBinding
      description: A @'System.Linq.Expressions.MemberMemberBinding' that has the @'System.Linq.Expressions.MemberBinding.BindingType' property equal to @'System.Linq.Expressions.MemberBindingType.MemberBinding' and the @'System.Linq.Expressions.MemberBinding.Member' and @'System.Linq.Expressions.MemberMemberBinding.Bindings' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*member* or *bindings* is null.'
  - type: System.ArgumentException
    description: '*member* does not represent a field or property.-or-The @''System.Linq.Expressions.MemberBinding.Member'' property of an element of *bindings* does not represent a member of the type of the field or property that *member* represents.'
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  id: MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: MemberBind(Reflection.MethodInfo, Collections.Generic.IEnumerable<MemberBinding>)
  name.vb: MemberBind(Reflection.MethodInfo, Collections.Generic.IEnumerable(Of MemberBinding))
  fullName: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>)
  fullName.vb: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.MemberBinding))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 299
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MemberMemberBinding' that represents the recursive initialization of members of a member that is accessed by using a property accessor method.
  syntax:
    content: public static MemberMemberBinding MemberBind(Reflection.MethodInfo propertyAccessor, Collections.Generic.IEnumerable<MemberBinding> bindings)
    content.vb: Public Shared Function MemberBind(propertyAccessor As Reflection.MethodInfo, bindings As Collections.Generic.IEnumerable(Of MemberBinding)) As MemberMemberBinding
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
      description: The @'System.Reflection.MethodInfo' that represents a property accessor method.
    - id: bindings
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.MemberBinding' objects to use to populate the @'System.Linq.Expressions.MemberMemberBinding.Bindings' collection.
    return:
      type: System.Linq.Expressions.MemberMemberBinding
      description: A @'System.Linq.Expressions.MemberMemberBinding' that has the @'System.Linq.Expressions.MemberBinding.BindingType' property equal to @'System.Linq.Expressions.MemberBindingType.MemberBinding', the @'System.Linq.Expressions.MemberBinding.Member' property set to the @'System.Reflection.PropertyInfo' that represents the property accessed in *propertyAccessor*, and @'System.Linq.Expressions.MemberMemberBinding.Bindings' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*propertyAccessor* or *bindings* is null.'
  - type: System.ArgumentException
    description: '*propertyAccessor* does not represent a property accessor method.-or-The @''System.Linq.Expressions.MemberBinding.Member'' property of an element of *bindings* does not represent a member of the type of the property accessed by the method that *propertyAccessor* represents.'
- uid: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])
  id: MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: MemberBind(Reflection.MethodInfo, MemberBinding[])
  name.vb: MemberBind(Reflection.MethodInfo, MemberBinding())
  fullName: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Linq.Expressions.MemberBinding[])
  fullName.vb: System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo, System.Linq.Expressions.MemberBinding())
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 300
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MemberMemberBinding' that represents the recursive initialization of members of a member that is accessed by using a property accessor method.
  syntax:
    content: public static MemberMemberBinding MemberBind(Reflection.MethodInfo propertyAccessor, params MemberBinding[] bindings)
    content.vb: Public Shared Function MemberBind(propertyAccessor As Reflection.MethodInfo, ParamArray bindings As MemberBinding()) As MemberMemberBinding
    parameters:
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
      description: The @'System.Reflection.MethodInfo' that represents a property accessor method.
    - id: bindings
      type: System.Linq.Expressions.MemberBinding[]
      description: An array of @'System.Linq.Expressions.MemberBinding' objects to use to populate the @'System.Linq.Expressions.MemberMemberBinding.Bindings' collection.
    return:
      type: System.Linq.Expressions.MemberMemberBinding
      description: A @'System.Linq.Expressions.MemberMemberBinding' that has the @'System.Linq.Expressions.MemberBinding.BindingType' property equal to @'System.Linq.Expressions.MemberBindingType.MemberBinding', the @'System.Linq.Expressions.MemberBinding.Member' property set to the @'System.Reflection.PropertyInfo' that represents the property accessed in *propertyAccessor*, and @'System.Linq.Expressions.MemberMemberBinding.Bindings' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*propertyAccessor* or *bindings* is null.'
  - type: System.ArgumentException
    description: '*propertyAccessor* does not represent a property accessor method.-or-The @''System.Linq.Expressions.MemberBinding.Member'' property of an element of *bindings* does not represent a member of the type of the property accessed by the method that *propertyAccessor* represents.'
- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  id: MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: MemberInit(NewExpression, Collections.Generic.IEnumerable<MemberBinding>)
  name.vb: MemberInit(NewExpression, Collections.Generic.IEnumerable(Of MemberBinding))
  fullName: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>)
  fullName.vb: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.MemberBinding))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 301
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Represents an expression that creates a new object and initializes a property of the object.
  syntax:
    content: public static MemberInitExpression MemberInit(NewExpression newExpression, Collections.Generic.IEnumerable<MemberBinding> bindings)
    content.vb: Public Shared Function MemberInit(newExpression As NewExpression, bindings As Collections.Generic.IEnumerable(Of MemberBinding)) As MemberInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A @'System.Linq.Expressions.NewExpression' to set the @'System.Linq.Expressions.MemberInitExpression.NewExpression' property equal to.
    - id: bindings
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.MemberBinding' objects to use to populate the @'System.Linq.Expressions.MemberInitExpression.Bindings' collection.
    return:
      type: System.Linq.Expressions.MemberInitExpression
      description: A @'System.Linq.Expressions.MemberInitExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.MemberInit' and the @'System.Linq.Expressions.MemberInitExpression.NewExpression' and @'System.Linq.Expressions.MemberInitExpression.Bindings' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*newExpression* or *bindings* is null.'
  - type: System.ArgumentException
    description: The @'System.Linq.Expressions.MemberBinding.Member' property of an element of *bindings* does not represent a member of the type that *newExpression*.Type represents.
- uid: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])
  id: MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: MemberInit(NewExpression, MemberBinding[])
  name.vb: MemberInit(NewExpression, MemberBinding())
  fullName: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.MemberBinding[])
  fullName.vb: System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression, System.Linq.Expressions.MemberBinding())
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/MemberInitExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/MemberInitExpression.cs
    startLine: 162
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MemberInitExpression'.
  syntax:
    content: public static MemberInitExpression MemberInit(NewExpression newExpression, params MemberBinding[] bindings)
    content.vb: Public Shared Function MemberInit(newExpression As NewExpression, ParamArray bindings As MemberBinding()) As MemberInitExpression
    parameters:
    - id: newExpression
      type: System.Linq.Expressions.NewExpression
      description: A @'System.Linq.Expressions.NewExpression' to set the @'System.Linq.Expressions.MemberInitExpression.NewExpression' property equal to.
    - id: bindings
      type: System.Linq.Expressions.MemberBinding[]
      description: An array of @'System.Linq.Expressions.MemberBinding' objects to use to populate the @'System.Linq.Expressions.MemberInitExpression.Bindings' collection.
    return:
      type: System.Linq.Expressions.MemberInitExpression
      description: A @'System.Linq.Expressions.MemberInitExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.MemberInit' and the @'System.Linq.Expressions.MemberInitExpression.NewExpression' and @'System.Linq.Expressions.MemberInitExpression.Bindings' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*newExpression* or *bindings* is null.'
  - type: System.ArgumentException
    description: The @'System.Linq.Expressions.MemberBinding.Member' property of an element of *bindings* does not represent a member of the type that *newExpression*.Type represents.
- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Modulo(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2074
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an arithmetic remainder operation.
  syntax:
    content: public static BinaryExpression Modulo(Expression left, Expression right)
    content.vb: Public Shared Function Modulo(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Modulo' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.InvalidOperationException
    description: The modulus operator is not defined for *left*.Type and *right*.Type.
- uid: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Modulo(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 304
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an arithmetic remainder operation.
  syntax:
    content: public static BinaryExpression Modulo(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function Modulo(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Modulo' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.'
  - type: System.InvalidOperationException
    description: '*method* is null and the modulus operator is not defined for *left*.Type and *right*.Type.'
- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ModuloAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2111
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a remainder assignment operation.
  syntax:
    content: public static BinaryExpression ModuloAssign(Expression left, Expression right)
    content.vb: Public Shared Function ModuloAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.ModuloAssign' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ModuloAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 306
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a remainder assignment operation.
  syntax:
    content: public static BinaryExpression ModuloAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function ModuloAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.ModuloAssign' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ModuloAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 307
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a remainder assignment operation.
  syntax:
    content: public static BinaryExpression ModuloAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function ModuloAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' to set the @'System.Linq.Expressions.BinaryExpression.Conversion' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.ModuloAssign' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', @'System.Linq.Expressions.BinaryExpression.Method', and @'System.Linq.Expressions.BinaryExpression.Conversion' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Multiply(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2170
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an arithmetic multiplication operation that does not have overflow checking.
  syntax:
    content: public static BinaryExpression Multiply(Expression left, Expression right)
    content.vb: Public Shared Function Multiply(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Multiply' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.InvalidOperationException
    description: The multiplication operator is not defined for *left*.Type and *right*.Type.
- uid: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Multiply(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 309
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an arithmetic multiplication operation that does not have overflow checking.
  syntax:
    content: public static BinaryExpression Multiply(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function Multiply(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Multiply' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.'
  - type: System.InvalidOperationException
    description: '*method* is null and the multiplication operator is not defined for *left*.Type and *right*.Type.'
- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: MultiplyAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2207
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a multiplication assignment operation that does not have overflow checking.
  syntax:
    content: public static BinaryExpression MultiplyAssign(Expression left, Expression right)
    content.vb: Public Shared Function MultiplyAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.MultiplyAssign' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: MultiplyAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 311
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a multiplication assignment operation that does not have overflow checking.
  syntax:
    content: public static BinaryExpression MultiplyAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function MultiplyAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.MultiplyAssign' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: MultiplyAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 312
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a multiplication assignment operation that does not have overflow checking.
  syntax:
    content: public static BinaryExpression MultiplyAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function MultiplyAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' to set the @'System.Linq.Expressions.BinaryExpression.Conversion' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.MultiplyAssign' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', @'System.Linq.Expressions.BinaryExpression.Method', and @'System.Linq.Expressions.BinaryExpression.Conversion' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: MultiplyAssignChecked(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2266
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a multiplication assignment operation that has overflow checking.
  syntax:
    content: public static BinaryExpression MultiplyAssignChecked(Expression left, Expression right)
    content.vb: Public Shared Function MultiplyAssignChecked(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.MultiplyAssignChecked' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: MultiplyAssignChecked(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 314
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a multiplication assignment operation that has overflow checking.
  syntax:
    content: public static BinaryExpression MultiplyAssignChecked(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function MultiplyAssignChecked(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.MultiplyAssignChecked' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: MultiplyAssignChecked(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 315
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a multiplication assignment operation that has overflow checking.
  syntax:
    content: public static BinaryExpression MultiplyAssignChecked(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function MultiplyAssignChecked(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' to set the @'System.Linq.Expressions.BinaryExpression.Conversion' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.MultiplyAssignChecked' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', @'System.Linq.Expressions.BinaryExpression.Method', and @'System.Linq.Expressions.BinaryExpression.Conversion' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: MultiplyChecked(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2325
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an arithmetic multiplication operation that has overflow checking.
  syntax:
    content: public static BinaryExpression MultiplyChecked(Expression left, Expression right)
    content.vb: Public Shared Function MultiplyChecked(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.MultiplyChecked' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.InvalidOperationException
    description: The multiplication operator is not defined for *left*.Type and *right*.Type.
- uid: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: MultiplyChecked(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 317
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an arithmetic multiplication operation that has overflow checking.
  syntax:
    content: public static BinaryExpression MultiplyChecked(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function MultiplyChecked(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.MultiplyChecked' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.'
  - type: System.InvalidOperationException
    description: '*method* is null and the multiplication operator is not defined for *left*.Type and *right*.Type.'
- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)
  id: Negate(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Negate(Expression)
  fullName: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o3
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 494
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents an arithmetic negation operation.
  syntax:
    content: public static UnaryExpression Negate(Expression expression)
    content.vb: Public Shared Function Negate(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.UnaryExpression.Operand' property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Negate' and the @'System.Linq.Expressions.UnaryExpression.Operand' property set to the specified value.
  exceptions:
  - type: System.ArgumentNullException
    description: '*expression* is null.'
  - type: System.InvalidOperationException
    description: The unary minus operator is not defined for *expression*.Type.
- uid: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Negate(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 319
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents an arithmetic negation operation.
  syntax:
    content: public static UnaryExpression Negate(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function Negate(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.UnaryExpression.Operand' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.UnaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Negate' and the @'System.Linq.Expressions.UnaryExpression.Operand' and @'System.Linq.Expressions.UnaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*expression* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.'
  - type: System.InvalidOperationException
    description: '*method* is null and the unary minus operator is not defined for *expression*.Type.-or-*expression*.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by *method*.'
- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)
  id: NegateChecked(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: NegateChecked(Expression)
  fullName: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o3
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 563
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents an arithmetic negation operation that has overflow checking.
  syntax:
    content: public static UnaryExpression NegateChecked(Expression expression)
    content.vb: Public Shared Function NegateChecked(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.UnaryExpression.Operand' property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.NegateChecked' and the @'System.Linq.Expressions.UnaryExpression.Operand' property set to the specified value.
  exceptions:
  - type: System.ArgumentNullException
    description: '*expression* is null.'
  - type: System.InvalidOperationException
    description: The unary minus operator is not defined for *expression*.Type.
- uid: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: NegateChecked(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 321
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents an arithmetic negation operation that has overflow checking. The implementing method can be specified.
  syntax:
    content: public static UnaryExpression NegateChecked(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function NegateChecked(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.UnaryExpression.Operand' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.UnaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.NegateChecked' and the @'System.Linq.Expressions.UnaryExpression.Operand' and @'System.Linq.Expressions.UnaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*expression* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.'
  - type: System.InvalidOperationException
    description: '*method* is null and the unary minus operator is not defined for *expression*.Type.-or-*expression*.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by *method*.'
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)
  id: New(System.Reflection.ConstructorInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: New(Reflection.ConstructorInfo)
  fullName: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 322
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.NewExpression' that represents calling the specified constructor that takes no arguments.
  syntax:
    content: public static NewExpression New(Reflection.ConstructorInfo constructor)
    content.vb: Public Shared Function New(constructor As Reflection.ConstructorInfo) As NewExpression
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
      description: The @'System.Reflection.ConstructorInfo' to set the @'System.Linq.Expressions.NewExpression.Constructor' property equal to.
    return:
      type: System.Linq.Expressions.NewExpression
      description: A @'System.Linq.Expressions.NewExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.New' and the @'System.Linq.Expressions.NewExpression.Constructor' property set to the specified value.
  exceptions:
  - type: System.ArgumentNullException
    description: '*constructor* is null.'
  - type: System.ArgumentException
    description: The constructor that *constructor* represents has at least one parameter.
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: New(Reflection.ConstructorInfo, Collections.Generic.IEnumerable<Expression>)
  name.vb: New(Reflection.ConstructorInfo, Collections.Generic.IEnumerable(Of Expression))
  fullName: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  fullName.vb: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 323
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.NewExpression' that represents calling the specified constructor with the specified arguments.
  syntax:
    content: public static NewExpression New(Reflection.ConstructorInfo constructor, Collections.Generic.IEnumerable<Expression> arguments)
    content.vb: Public Shared Function New(constructor As Reflection.ConstructorInfo, arguments As Collections.Generic.IEnumerable(Of Expression)) As NewExpression
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
      description: The @'System.Reflection.ConstructorInfo' to set the @'System.Linq.Expressions.NewExpression.Constructor' property equal to.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.Expression' objects to use to populate the @'System.Linq.Expressions.NewExpression.Arguments' collection.
    return:
      type: System.Linq.Expressions.NewExpression
      description: A @'System.Linq.Expressions.NewExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.New' and the @'System.Linq.Expressions.NewExpression.Constructor' and @'System.Linq.Expressions.NewExpression.Arguments' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*constructor* is null.-or-An element of *arguments* is null.'
  - type: System.ArgumentException
    description: The *arguments* parameter does not contain the same number of elements as the number of parameters for the constructor that *constructor* represents.-or-The @'System.Linq.Expressions.Expression.Type' property of an element of *arguments* is not assignable to the type of the corresponding parameter of the constructor that *constructor* represents.
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})
  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: New(Reflection.ConstructorInfo, Collections.Generic.IEnumerable<Expression>, Collections.Generic.IEnumerable<Reflection.MemberInfo>)
  name.vb: New(Reflection.ConstructorInfo, Collections.Generic.IEnumerable(Of Expression), Collections.Generic.IEnumerable(Of Reflection.MemberInfo))
  fullName: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>, System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>)
  fullName.vb: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression), System.Collections.Generic.IEnumerable(Of System.Reflection.MemberInfo))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 324
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.NewExpression' that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified.
  syntax:
    content: public static NewExpression New(Reflection.ConstructorInfo constructor, Collections.Generic.IEnumerable<Expression> arguments, Collections.Generic.IEnumerable<Reflection.MemberInfo> members)
    content.vb: Public Shared Function New(constructor As Reflection.ConstructorInfo, arguments As Collections.Generic.IEnumerable(Of Expression), members As Collections.Generic.IEnumerable(Of Reflection.MemberInfo)) As NewExpression
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
      description: The @'System.Reflection.ConstructorInfo' to set the @'System.Linq.Expressions.NewExpression.Constructor' property equal to.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.Expression' objects to use to populate the @'System.Linq.Expressions.NewExpression.Arguments' collection.
    - id: members
      type: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Reflection.MemberInfo' objects to use to populate the @'System.Linq.Expressions.NewExpression.Members' collection.
    return:
      type: System.Linq.Expressions.NewExpression
      description: A @'System.Linq.Expressions.NewExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.New' and the @'System.Linq.Expressions.NewExpression.Constructor', @'System.Linq.Expressions.NewExpression.Arguments' and @'System.Linq.Expressions.NewExpression.Members' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*constructor* is null.-or-An element of *arguments* is null.-or-An element of *members* is null.'
  - type: System.ArgumentException
    description: The *arguments* parameter does not contain the same number of elements as the number of parameters for the constructor that *constructor* represents.-or-The @'System.Linq.Expressions.Expression.Type' property of an element of *arguments* is not assignable to the type of the corresponding parameter of the constructor that *constructor* represents.-or-The *members* parameter does not have the same number of elements as *arguments*.-or-An element of *arguments* has a @'System.Linq.Expressions.Expression.Type' property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of *members*.
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])
  id: New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: New(Reflection.ConstructorInfo, Collections.Generic.IEnumerable<Expression>, Reflection.MemberInfo[])
  name.vb: New(Reflection.ConstructorInfo, Collections.Generic.IEnumerable(Of Expression), Reflection.MemberInfo())
  fullName: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>, System.Reflection.MemberInfo[])
  fullName.vb: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression), System.Reflection.MemberInfo())
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 325
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.NewExpression' that represents calling the specified constructor with the specified arguments. The members that access the constructor initialized fields are specified as an array.
  syntax:
    content: public static NewExpression New(Reflection.ConstructorInfo constructor, Collections.Generic.IEnumerable<Expression> arguments, params Reflection.MemberInfo[] members)
    content.vb: Public Shared Function New(constructor As Reflection.ConstructorInfo, arguments As Collections.Generic.IEnumerable(Of Expression), ParamArray members As Reflection.MemberInfo()) As NewExpression
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
      description: The @'System.Reflection.ConstructorInfo' to set the @'System.Linq.Expressions.NewExpression.Constructor' property equal to.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.Expression' objects to use to populate the @'System.Linq.Expressions.NewExpression.Arguments' collection.
    - id: members
      type: System.Reflection.MemberInfo[]
      description: An array of @'System.Reflection.MemberInfo' objects to use to populate the @'System.Linq.Expressions.NewExpression.Members' collection.
    return:
      type: System.Linq.Expressions.NewExpression
      description: A @'System.Linq.Expressions.NewExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.New' and the @'System.Linq.Expressions.NewExpression.Constructor', @'System.Linq.Expressions.NewExpression.Arguments' and @'System.Linq.Expressions.NewExpression.Members' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*constructor* is null.-or-An element of *arguments* is null.-or-An element of *members* is null.'
  - type: System.ArgumentException
    description: The *arguments* parameter does not contain the same number of elements as the number of parameters for the constructor that *constructor* represents.-or-The @'System.Linq.Expressions.Expression.Type' property of an element of *arguments* is not assignable to the type of the corresponding parameter of the constructor that *constructor* represents.-or-The *members* parameter does not have the same number of elements as *arguments*.-or-An element of *arguments* has a @'System.Linq.Expressions.Expression.Type' property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of *members*.
- uid: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])
  id: New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: New(Reflection.ConstructorInfo, Expression[])
  name.vb: New(Reflection.ConstructorInfo, Expression())
  fullName: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Linq.Expressions.Expression[])
  fullName.vb: System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo, System.Linq.Expressions.Expression())
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 326
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.NewExpression' that represents calling the specified constructor with the specified arguments.
  syntax:
    content: public static NewExpression New(Reflection.ConstructorInfo constructor, params Expression[] arguments)
    content.vb: Public Shared Function New(constructor As Reflection.ConstructorInfo, ParamArray arguments As Expression()) As NewExpression
    parameters:
    - id: constructor
      type: System.Reflection.ConstructorInfo
      description: The @'System.Reflection.ConstructorInfo' to set the @'System.Linq.Expressions.NewExpression.Constructor' property equal to.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of @'System.Linq.Expressions.Expression' objects to use to populate the @'System.Linq.Expressions.NewExpression.Arguments' collection.
    return:
      type: System.Linq.Expressions.NewExpression
      description: A @'System.Linq.Expressions.NewExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.New' and the @'System.Linq.Expressions.NewExpression.Constructor' and @'System.Linq.Expressions.NewExpression.Arguments' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*constructor* is null.-or-An element of *arguments* is null.'
  - type: System.ArgumentException
    description: The length of *arguments* does match the number of parameters for the constructor that *constructor* represents.-or-The @'System.Linq.Expressions.Expression.Type' property of an element of *arguments* is not assignable to the type of the corresponding parameter of the constructor that *constructor* represents.
- uid: System.Linq.Expressions.Expression.New(System.Type)
  id: New(System.Type)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: New(Type)
  fullName: System.Linq.Expressions.Expression.New(System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 327
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.NewExpression' that represents calling the parameterless constructor of the specified type.
  syntax:
    content: public static NewExpression New(Type type)
    content.vb: Public Shared Function New(type As Type) As NewExpression
    parameters:
    - id: type
      type: System.Type
      description: A @'System.Type' that has a constructor that takes no arguments.
    return:
      type: System.Linq.Expressions.NewExpression
      description: A @'System.Linq.Expressions.NewExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.New' and the @'System.Linq.Expressions.NewExpression.Constructor' property set to the @'System.Reflection.ConstructorInfo' that represents the constructor without parameters for the specified type.
  exceptions:
  - type: System.ArgumentNullException
    description: '*type* is null.'
  - type: System.ArgumentException
    description: The type that *type* represents does not have a constructor without parameters.
- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: NewArrayBounds(Type, Collections.Generic.IEnumerable<Expression>)
  name.vb: NewArrayBounds(Type, Collections.Generic.IEnumerable(Of Expression))
  fullName: System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  fullName.vb: System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 328
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.NewArrayExpression' that represents creating an array that has a specified rank.
  syntax:
    content: public static NewArrayExpression NewArrayBounds(Type type, Collections.Generic.IEnumerable<Expression> bounds)
    content.vb: Public Shared Function NewArrayBounds(type As Type, bounds As Collections.Generic.IEnumerable(Of Expression)) As NewArrayExpression
    parameters:
    - id: type
      type: System.Type
      description: A @'System.Type' that represents the element type of the array.
    - id: bounds
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.Expression' objects to use to populate the @'System.Linq.Expressions.NewArrayExpression.Expressions' collection.
    return:
      type: System.Linq.Expressions.NewArrayExpression
      description: A @'System.Linq.Expressions.NewArrayExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.NewArrayBounds' and the @'System.Linq.Expressions.NewArrayExpression.Expressions' property set to the specified value.
  exceptions:
  - type: System.ArgumentNullException
    description: '*type* or *bounds* is null.-or-An element of *bounds* is null.'
  - type: System.ArgumentException
    description: The @'System.Linq.Expressions.Expression.Type' property of an element of *bounds* does not represent an integral type.
- uid: System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])
  id: NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: NewArrayBounds(Type, Expression[])
  name.vb: NewArrayBounds(Type, Expression())
  fullName: System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Linq.Expressions.Expression[])
  fullName.vb: System.Linq.Expressions.Expression.NewArrayBounds(System.Type, System.Linq.Expressions.Expression())
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 329
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.NewArrayExpression' that represents creating an array that has a specified rank.
  syntax:
    content: public static NewArrayExpression NewArrayBounds(Type type, params Expression[] bounds)
    content.vb: Public Shared Function NewArrayBounds(type As Type, ParamArray bounds As Expression()) As NewArrayExpression
    parameters:
    - id: type
      type: System.Type
      description: A @'System.Type' that represents the element type of the array.
    - id: bounds
      type: System.Linq.Expressions.Expression[]
      description: An array of @'System.Linq.Expressions.Expression' objects to use to populate the @'System.Linq.Expressions.NewArrayExpression.Expressions' collection.
    return:
      type: System.Linq.Expressions.NewArrayExpression
      description: A @'System.Linq.Expressions.NewArrayExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.NewArrayBounds' and the @'System.Linq.Expressions.NewArrayExpression.Expressions' property set to the specified value.
  exceptions:
  - type: System.ArgumentNullException
    description: '*type* or *bounds* is null.-or-An element of *bounds* is null.'
  - type: System.ArgumentException
    description: The @'System.Linq.Expressions.Expression.Type' property of an element of *bounds* does not represent an integral type.
- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: NewArrayInit(Type, Collections.Generic.IEnumerable<Expression>)
  name.vb: NewArrayInit(Type, Collections.Generic.IEnumerable(Of Expression))
  fullName: System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  fullName.vb: System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 330
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.NewArrayExpression' that represents creating a one-dimensional array and initializing it from a list of elements.
  syntax:
    content: public static NewArrayExpression NewArrayInit(Type type, Collections.Generic.IEnumerable<Expression> initializers)
    content.vb: Public Shared Function NewArrayInit(type As Type, initializers As Collections.Generic.IEnumerable(Of Expression)) As NewArrayExpression
    parameters:
    - id: type
      type: System.Type
      description: A @'System.Type' that represents the element type of the array.
    - id: initializers
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An @'System.Collections.Generic.IEnumerable`1' that contains @'System.Linq.Expressions.Expression' objects to use to populate the @'System.Linq.Expressions.NewArrayExpression.Expressions' collection.
    return:
      type: System.Linq.Expressions.NewArrayExpression
      description: A @'System.Linq.Expressions.NewArrayExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.NewArrayInit' and the @'System.Linq.Expressions.NewArrayExpression.Expressions' property set to the specified value.
  exceptions:
  - type: System.ArgumentNullException
    description: '*type* or *initializers* is null.-or-An element of *initializers* is null.'
  - type: System.InvalidOperationException
    description: The @'System.Linq.Expressions.Expression.Type' property of an element of *initializers* represents a type that is not assignable to the type that *type* represents.
- uid: System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])
  id: NewArrayInit(System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: NewArrayInit(Type, Expression[])
  name.vb: NewArrayInit(Type, Expression())
  fullName: System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Linq.Expressions.Expression[])
  fullName.vb: System.Linq.Expressions.Expression.NewArrayInit(System.Type, System.Linq.Expressions.Expression())
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 331
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.NewArrayExpression' that represents creating a one-dimensional array and initializing it from a list of elements.
  syntax:
    content: public static NewArrayExpression NewArrayInit(Type type, params Expression[] initializers)
    content.vb: Public Shared Function NewArrayInit(type As Type, ParamArray initializers As Expression()) As NewArrayExpression
    parameters:
    - id: type
      type: System.Type
      description: A @'System.Type' that represents the element type of the array.
    - id: initializers
      type: System.Linq.Expressions.Expression[]
      description: An array of @'System.Linq.Expressions.Expression' objects to use to populate the @'System.Linq.Expressions.NewArrayExpression.Expressions' collection.
    return:
      type: System.Linq.Expressions.NewArrayExpression
      description: A @'System.Linq.Expressions.NewArrayExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.NewArrayInit' and the @'System.Linq.Expressions.NewArrayExpression.Expressions' property set to the specified value.
  exceptions:
  - type: System.ArgumentNullException
    description: '*type* or *initializers* is null.-or-An element of *initializers* is null.'
  - type: System.InvalidOperationException
    description: The @'System.Linq.Expressions.Expression.Type' property of an element of *initializers* represents a type that is not assignable to the type *type*.
- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)
  id: Not(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Not(Expression)
  fullName: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o3
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 598
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents a bitwise complement operation.
  syntax:
    content: public static UnaryExpression Not(Expression expression)
    content.vb: Public Shared Function Not(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.UnaryExpression.Operand' property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Not' and the @'System.Linq.Expressions.UnaryExpression.Operand' property set to the specified value.
  exceptions:
  - type: System.ArgumentNullException
    description: '*expression* is null.'
  - type: System.InvalidOperationException
    description: The unary not operator is not defined for *expression*.Type.
- uid: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Not(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 333
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents a bitwise complement operation. The implementing method can be specified.
  syntax:
    content: public static UnaryExpression Not(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function Not(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.UnaryExpression.Operand' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.UnaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Not' and the @'System.Linq.Expressions.UnaryExpression.Operand' and @'System.Linq.Expressions.UnaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*expression* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.'
  - type: System.InvalidOperationException
    description: '*method* is null and the unary not operator is not defined for *expression*.Type.-or-*expression*.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by *method*.'
- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: NotEqual(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1102
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an inequality comparison.
  syntax:
    content: public static BinaryExpression NotEqual(Expression left, Expression right)
    content.vb: Public Shared Function NotEqual(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.NotEqual' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.InvalidOperationException
    description: The inequality operator is not defined for *left*.Type and *right*.Type.
- uid: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  id: NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: NotEqual(Expression, Expression, Boolean, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 335
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an inequality comparison.
  syntax:
    content: public static BinaryExpression NotEqual(Expression left, Expression right, bool liftToNull, Reflection.MethodInfo method)
    content.vb: Public Shared Function NotEqual(left As Expression, right As Expression, liftToNull As Boolean, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: liftToNull
      type: System.Boolean
      description: true to set @'System.Linq.Expressions.BinaryExpression.IsLiftedToNull' to true; false to set @'System.Linq.Expressions.BinaryExpression.IsLiftedToNull' to false.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.NotEqual' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', @'System.Linq.Expressions.BinaryExpression.IsLiftedToNull', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.'
  - type: System.InvalidOperationException
    description: '*method* is null and the inequality operator is not defined for *left*.Type and *right*.Type.'
- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)
  id: OnesComplement(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: OnesComplement(Expression)
  fullName: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o3
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 697
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Returns the expression representing the ones complement.
  syntax:
    content: public static UnaryExpression OnesComplement(Expression expression)
    content.vb: Public Shared Function OnesComplement(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression'.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: An instance of @'System.Linq.Expressions.UnaryExpression'.
- uid: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: OnesComplement(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 337
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Returns the expression representing the ones complement.
  syntax:
    content: public static UnaryExpression OnesComplement(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function OnesComplement(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression'.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: An instance of @'System.Linq.Expressions.UnaryExpression'.
- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Or(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2670
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a bitwise OR operation.
  syntax:
    content: public static BinaryExpression Or(Expression left, Expression right)
    content.vb: Public Shared Function Or(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Or' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.InvalidOperationException
    description: The bitwise OR operator is not defined for *left*.Type and *right*.Type.
- uid: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Or(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 339
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a bitwise OR operation.
  syntax:
    content: public static BinaryExpression Or(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function Or(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Or' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.'
  - type: System.InvalidOperationException
    description: '*method* is null and the bitwise OR operator is not defined for *left*.Type and *right*.Type.'
- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: OrAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2707
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a bitwise OR assignment operation.
  syntax:
    content: public static BinaryExpression OrAssign(Expression left, Expression right)
    content.vb: Public Shared Function OrAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.OrAssign' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: OrAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 341
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a bitwise OR assignment operation.
  syntax:
    content: public static BinaryExpression OrAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function OrAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.OrAssign' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: OrAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 342
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a bitwise OR assignment operation.
  syntax:
    content: public static BinaryExpression OrAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function OrAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' to set the @'System.Linq.Expressions.BinaryExpression.Conversion' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.OrAssign' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', @'System.Linq.Expressions.BinaryExpression.Method', and @'System.Linq.Expressions.BinaryExpression.Conversion' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: OrElse(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1407
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a conditional OR operation that evaluates the second operand only if the first operand evaluates to false.
  syntax:
    content: public static BinaryExpression OrElse(Expression left, Expression right)
    content.vb: Public Shared Function OrElse(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.OrElse' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.InvalidOperationException
    description: The bitwise OR operator is not defined for *left*.Type and *right*.Type.-or-*left*.Type and *right*.Type are not the same Boolean type.
- uid: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: OrElse(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 344
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a conditional OR operation that evaluates the second operand only if the first operand evaluates to false.
  syntax:
    content: public static BinaryExpression OrElse(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function OrElse(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.OrElse' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.'
  - type: System.InvalidOperationException
    description: '*method* is null and the bitwise OR operator is not defined for *left*.Type and *right*.Type.-or-*method* is null and *left*.Type and *right*.Type are not the same Boolean type.'
- uid: System.Linq.Expressions.Expression.Parameter(System.Type)
  id: Parameter(System.Type)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Parameter(Type)
  fullName: System.Linq.Expressions.Expression.Parameter(System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 345
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.ParameterExpression' node that can be used to identify a parameter or a variable in an expression tree.
  syntax:
    content: public static ParameterExpression Parameter(Type type)
    content.vb: Public Shared Function Parameter(type As Type) As ParameterExpression
    parameters:
    - id: type
      type: System.Type
      description: The type of the parameter or variable.
    return:
      type: System.Linq.Expressions.ParameterExpression
      description: A @'System.Linq.Expressions.ParameterExpression' node with the specified name and type.
- uid: System.Linq.Expressions.Expression.Parameter(System.Type,System.String)
  id: Parameter(System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Parameter(Type, String)
  fullName: System.Linq.Expressions.Expression.Parameter(System.Type, System.String)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 346
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.ParameterExpression' node that can be used to identify a parameter or a variable in an expression tree.
  syntax:
    content: public static ParameterExpression Parameter(Type type, string name)
    content.vb: Public Shared Function Parameter(type As Type, name As String) As ParameterExpression
    parameters:
    - id: type
      type: System.Type
      description: The type of the parameter or variable.
    - id: name
      type: System.String
      description: The name of the parameter or variable, used for debugging or printing purpose only.
    return:
      type: System.Linq.Expressions.ParameterExpression
      description: A @'System.Linq.Expressions.ParameterExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Parameter' and the @'System.Linq.Expressions.Expression.Type' and @'System.Linq.Expressions.ParameterExpression.Name' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*type* is null.'
- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)
  id: PostDecrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: PostDecrementAssign(Expression)
  fullName: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o3
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 1062
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.
  syntax:
    content: public static UnaryExpression PostDecrementAssign(Expression expression)
    content.vb: Public Shared Function PostDecrementAssign(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to apply the operations on.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that represents the resultant expression.
- uid: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: PostDecrementAssign(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 348
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.
  syntax:
    content: public static UnaryExpression PostDecrementAssign(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function PostDecrementAssign(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to apply the operations on.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that represents the resultant expression.
- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)
  id: PostIncrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: PostIncrementAssign(Expression)
  fullName: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o3
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 1039
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.
  syntax:
    content: public static UnaryExpression PostIncrementAssign(Expression expression)
    content.vb: Public Shared Function PostIncrementAssign(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to apply the operations on.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that represents the resultant expression.
- uid: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: PostIncrementAssign(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 350
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.
  syntax:
    content: public static UnaryExpression PostIncrementAssign(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function PostIncrementAssign(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to apply the operations on.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that represents the resultant expression.
- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Power(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2859
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents raising a number to a power.
  syntax:
    content: public static BinaryExpression Power(Expression left, Expression right)
    content.vb: Public Shared Function Power(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Power' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.InvalidOperationException
    description: The exponentiation operator is not defined for *left*.Type and *right*.Type.-or-*left*.Type and/or *right*.Type are not @'System.Double'.
- uid: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Power(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 352
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents raising a number to a power.
  syntax:
    content: public static BinaryExpression Power(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function Power(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Power' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.'
  - type: System.InvalidOperationException
    description: '*method* is null and the exponentiation operator is not defined for *left*.Type and *right*.Type.-or-*method* is null and *left*.Type and/or *right*.Type are not @''System.Double''.'
- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: PowerAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2897
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents raising an expression to a power and assigning the result back to the expression.
  syntax:
    content: public static BinaryExpression PowerAssign(Expression left, Expression right)
    content.vb: Public Shared Function PowerAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.PowerAssign' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: PowerAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 354
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents raising an expression to a power and assigning the result back to the expression.
  syntax:
    content: public static BinaryExpression PowerAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function PowerAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.PowerAssign' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: PowerAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 355
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents raising an expression to a power and assigning the result back to the expression.
  syntax:
    content: public static BinaryExpression PowerAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function PowerAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' to set the @'System.Linq.Expressions.BinaryExpression.Conversion' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.PowerAssign' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', @'System.Linq.Expressions.BinaryExpression.Method', and @'System.Linq.Expressions.BinaryExpression.Conversion' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)
  id: PreDecrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: PreDecrementAssign(Expression)
  fullName: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o3
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 1016
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that decrements the expression by 1 and assigns the result back to the expression.
  syntax:
    content: public static UnaryExpression PreDecrementAssign(Expression expression)
    content.vb: Public Shared Function PreDecrementAssign(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to apply the operations on.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that represents the resultant expression.
- uid: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: PreDecrementAssign(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 357
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that decrements the expression by 1 and assigns the result back to the expression.
  syntax:
    content: public static UnaryExpression PreDecrementAssign(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function PreDecrementAssign(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to apply the operations on.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that represents the resultant expression.
- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)
  id: PreIncrementAssign(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: PreIncrementAssign(Expression)
  fullName: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o3
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 993
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that increments the expression by 1 and assigns the result back to the expression.
  syntax:
    content: public static UnaryExpression PreIncrementAssign(Expression expression)
    content.vb: Public Shared Function PreIncrementAssign(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to apply the operations on.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that represents the resultant expression.
- uid: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: PreIncrementAssign(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 359
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that increments the expression by 1 and assigns the result back to the expression.
  syntax:
    content: public static UnaryExpression PreIncrementAssign(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function PreIncrementAssign(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to apply the operations on.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' that represents the implementing method.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that represents the resultant expression.
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Property(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 360
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MemberExpression' that represents accessing a property by using a property accessor method.
  syntax:
    content: public static MemberExpression Property(Expression expression, Reflection.MethodInfo propertyAccessor)
    content.vb: Public Shared Function Property(expression As Expression, propertyAccessor As Reflection.MethodInfo) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.MemberExpression.Expression' property equal to. This can be null for static properties.
    - id: propertyAccessor
      type: System.Reflection.MethodInfo
      description: The @'System.Reflection.MethodInfo' that represents a property accessor method.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: A @'System.Linq.Expressions.MemberExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.MemberAccess', the @'System.Linq.Expressions.MemberExpression.Expression' property set to *expression* and the @'System.Linq.Expressions.MemberExpression.Member' property set to the @'System.Reflection.PropertyInfo' that represents the property accessed in *propertyAccessor*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*propertyAccessor* is null.-or-The method that *propertyAccessor* represents is not static (Shared in Visual Basic) and *expression* is null.'
  - type: System.ArgumentException
    description: '*expression*.Type is not assignable to the declaring type of the method represented by *propertyAccessor*.-or-The method that *propertyAccessor* represents is not a property accessor method.'
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)
  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Property(Expression, Reflection.PropertyInfo)
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 361
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MemberExpression' that represents accessing a property.
  syntax:
    content: public static MemberExpression Property(Expression expression, Reflection.PropertyInfo property)
    content.vb: Public Shared Function Property(expression As Expression, property As Reflection.PropertyInfo) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.MemberExpression.Expression' property equal to. This can be null for static properties.
    - id: property
      type: System.Reflection.PropertyInfo
      description: The @'System.Reflection.PropertyInfo' to set the @'System.Linq.Expressions.MemberExpression.Member' property equal to.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: A @'System.Linq.Expressions.MemberExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.MemberAccess' and the @'System.Linq.Expressions.MemberExpression.Expression' and @'System.Linq.Expressions.MemberExpression.Member' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*property* is null.-or-The property that *property* represents is not static (Shared in Visual Basic) and *expression* is null.'
  - type: System.ArgumentException
    description: '*expression*.Type is not assignable to the declaring type of the property that *property* represents.'
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Property(Expression, Reflection.PropertyInfo, Collections.Generic.IEnumerable<Expression>)
  name.vb: Property(Expression, Reflection.PropertyInfo, Collections.Generic.IEnumerable(Of Expression))
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  fullName.vb: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 362
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates an @'System.Linq.Expressions.IndexExpression' representing the access to an indexed property.
  syntax:
    content: public static IndexExpression Property(Expression instance, Reflection.PropertyInfo indexer, Collections.Generic.IEnumerable<Expression> arguments)
    content.vb: Public Shared Function Property(instance As Expression, indexer As Reflection.PropertyInfo, arguments As Collections.Generic.IEnumerable(Of Expression)) As IndexExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: The object to which the property belongs. If the property is static/shared, it must be null.
    - id: indexer
      type: System.Reflection.PropertyInfo
      description: The @'System.Reflection.PropertyInfo' that represents the property to index.
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: An @'System.Collections.Generic.IEnumerable`1' of @'System.Linq.Expressions.Expression' objects that are used to index the property.
    return:
      type: System.Linq.Expressions.IndexExpression
      description: The created @'System.Linq.Expressions.IndexExpression'.
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])
  id: Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Property(Expression, Reflection.PropertyInfo, Expression[])
  name.vb: Property(Expression, Reflection.PropertyInfo, Expression())
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Linq.Expressions.Expression[])
  fullName.vb: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Linq.Expressions.Expression())
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 363
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates an @'System.Linq.Expressions.IndexExpression' representing the access to an indexed property.
  syntax:
    content: public static IndexExpression Property(Expression instance, Reflection.PropertyInfo indexer, params Expression[] arguments)
    content.vb: Public Shared Function Property(instance As Expression, indexer As Reflection.PropertyInfo, ParamArray arguments As Expression()) As IndexExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: The object to which the property belongs. If the property is static/shared, it must be null.
    - id: indexer
      type: System.Reflection.PropertyInfo
      description: The @'System.Reflection.PropertyInfo' that represents the property to index.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of @'System.Linq.Expressions.Expression' objects that are used to index the property.
    return:
      type: System.Linq.Expressions.IndexExpression
      description: The created @'System.Linq.Expressions.IndexExpression'.
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)
  id: Property(System.Linq.Expressions.Expression,System.String)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Property(Expression, String)
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.String)
  type: Method
  source:
    remote: *o14
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/MemberExpression.cs
    startLine: 226
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MemberExpression' that represents accessing a property.
  syntax:
    content: public static MemberExpression Property(Expression expression, string propertyName)
    content.vb: Public Shared Function Property(expression As Expression, propertyName As String) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' whose @'System.Linq.Expressions.Expression.Type' contains a property named *propertyName*. This can be null for static properties.
    - id: propertyName
      type: System.String
      description: The name of a property to be accessed.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: A @'System.Linq.Expressions.MemberExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.MemberAccess', the @'System.Linq.Expressions.MemberExpression.Expression' property set to *expression*, and the @'System.Linq.Expressions.MemberExpression.Member' property set to the @'System.Reflection.PropertyInfo' that represents the property denoted by *propertyName*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*expression* or *propertyName* is null.'
  - type: System.ArgumentException
    description: No property named *propertyName* is defined in *expression*.Type or its base types.
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])
  id: Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Property(Expression, String, Expression[])
  name.vb: Property(Expression, String, Expression())
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.String, System.Linq.Expressions.Expression[])
  fullName.vb: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.String, System.Linq.Expressions.Expression())
  type: Method
  source:
    remote: *o15
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/IndexExpression.cs
    startLine: 218
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates an @'System.Linq.Expressions.IndexExpression' representing the access to an indexed property.
  syntax:
    content: public static IndexExpression Property(Expression instance, string propertyName, params Expression[] arguments)
    content.vb: Public Shared Function Property(instance As Expression, propertyName As String, ParamArray arguments As Expression()) As IndexExpression
    parameters:
    - id: instance
      type: System.Linq.Expressions.Expression
      description: The object to which the property belongs. If the property is static/shared, it must be null.
    - id: propertyName
      type: System.String
      description: The name of the indexer.
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: An array of @'System.Linq.Expressions.Expression' objects that are used to index the property.
    return:
      type: System.Linq.Expressions.IndexExpression
      description: The created @'System.Linq.Expressions.IndexExpression'.
- uid: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)
  id: Property(System.Linq.Expressions.Expression,System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Property(Expression, Type, String)
  fullName: System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression, System.Type, System.String)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 366
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MemberExpression' accessing a property.
  syntax:
    content: public static MemberExpression Property(Expression expression, Type type, string propertyName)
    content.vb: Public Shared Function Property(expression As Expression, type As Type, propertyName As String) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: The containing object of the property. This can be null for static properties.
    - id: type
      type: System.Type
      description: The @'System.Linq.Expressions.Expression.Type' that contains the property.
    - id: propertyName
      type: System.String
      description: The property to be accessed.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: The created @'System.Linq.Expressions.MemberExpression'.
- uid: System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)
  id: PropertyOrField(System.Linq.Expressions.Expression,System.String)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: PropertyOrField(Expression, String)
  fullName: System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression, System.String)
  type: Method
  source:
    remote: *o14
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/MemberExpression.cs
    startLine: 359
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.MemberExpression' that represents accessing a property or field.
  syntax:
    content: public static MemberExpression PropertyOrField(Expression expression, string propertyOrFieldName)
    content.vb: Public Shared Function PropertyOrField(expression As Expression, propertyOrFieldName As String) As MemberExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' whose @'System.Linq.Expressions.Expression.Type' contains a property or field named *propertyOrFieldName*. This can be null for static members.
    - id: propertyOrFieldName
      type: System.String
      description: The name of a property or field to be accessed.
    return:
      type: System.Linq.Expressions.MemberExpression
      description: A @'System.Linq.Expressions.MemberExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.MemberAccess', the @'System.Linq.Expressions.MemberExpression.Expression' property set to *expression*, and the @'System.Linq.Expressions.MemberExpression.Member' property set to the @'System.Reflection.PropertyInfo' or @'System.Reflection.FieldInfo' that represents the property or field denoted by *propertyOrFieldName*.
  exceptions:
  - type: System.ArgumentNullException
    description: '*expression* or *propertyOrFieldName* is null.'
  - type: System.ArgumentException
    description: No property or field named *propertyOrFieldName* is defined in *expression*.Type or its base types.
- uid: System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)
  id: Quote(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Quote(Expression)
  fullName: System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o3
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 871
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents an expression that has a constant value of type @'System.Linq.Expressions.Expression'.
  syntax:
    content: public static UnaryExpression Quote(Expression expression)
    content.vb: Public Shared Function Quote(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.UnaryExpression.Operand' property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Quote' and the @'System.Linq.Expressions.UnaryExpression.Operand' property set to the specified value.
  exceptions:
  - type: System.ArgumentNullException
    description: '*expression* is null.'
- uid: System.Linq.Expressions.Expression.Reduce
  id: Reduce
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Reduce()
  fullName: System.Linq.Expressions.Expression.Reduce()
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
    startLine: 127
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.
  syntax:
    content: public virtual Expression Reduce()
    content.vb: Public Overridable Function Reduce As Expression
    return:
      type: System.Linq.Expressions.Expression
      description: The reduced expression.
- uid: System.Linq.Expressions.Expression.ReduceAndCheck
  id: ReduceAndCheck
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ReduceAndCheck()
  fullName: System.Linq.Expressions.Expression.ReduceAndCheck()
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
    startLine: 180
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Reduces this node to a simpler expression. If CanReduce returns true, this should return a valid expression. This method can return another node which itself must be reduced.
  syntax:
    content: public Expression ReduceAndCheck()
    content.vb: Public Function ReduceAndCheck As Expression
    return:
      type: System.Linq.Expressions.Expression
      description: The reduced expression.
- uid: System.Linq.Expressions.Expression.ReduceExtensions
  id: ReduceExtensions
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ReduceExtensions()
  fullName: System.Linq.Expressions.Expression.ReduceExtensions()
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
    startLine: 198
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.
  syntax:
    content: public Expression ReduceExtensions()
    content.vb: Public Function ReduceExtensions As Expression
    return:
      type: System.Linq.Expressions.Expression
      description: The reduced expression.
- uid: System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ReferenceEqual(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1084
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a reference equality comparison.
  syntax:
    content: public static BinaryExpression ReferenceEqual(Expression left, Expression right)
    content.vb: Public Shared Function ReferenceEqual(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Equal' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ReferenceNotEqual(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1136
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a reference inequality comparison.
  syntax:
    content: public static BinaryExpression ReferenceNotEqual(Expression left, Expression right)
    content.vb: Public Shared Function ReferenceNotEqual(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.NotEqual' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.Rethrow
  id: Rethrow
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Rethrow()
  fullName: System.Linq.Expressions.Expression.Rethrow()
  type: Method
  source:
    remote: *o3
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 883
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents a rethrowing of an exception.
  syntax:
    content: public static UnaryExpression Rethrow()
    content.vb: Public Shared Function Rethrow As UnaryExpression
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that represents a rethrowing of an exception.
- uid: System.Linq.Expressions.Expression.Rethrow(System.Type)
  id: Rethrow(System.Type)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Rethrow(Type)
  fullName: System.Linq.Expressions.Expression.Rethrow(System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 375
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents a rethrowing of an exception with a given type.
  syntax:
    content: public static UnaryExpression Rethrow(Type type)
    content.vb: Public Shared Function Rethrow(type As Type) As UnaryExpression
    parameters:
    - id: type
      type: System.Type
      description: The new @'System.Type' of the expression.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that represents a rethrowing of an exception.
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)
  id: Return(System.Linq.Expressions.LabelTarget)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Return(LabelTarget)
  fullName: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)
  type: Method
  source:
    remote: *o5
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/GotoExpression.cs
    startLine: 222
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.GotoExpression' representing a return statement.
  syntax:
    content: public static GotoExpression Return(LabelTarget target)
    content.vb: Public Shared Function Return(target As LabelTarget) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The @'System.Linq.Expressions.LabelTarget' that the @'System.Linq.Expressions.GotoExpression' will jump to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A @'System.Linq.Expressions.GotoExpression' with @'System.Linq.Expressions.GotoExpression.Kind' equal to Return, the @'System.Linq.Expressions.GotoExpression.Target' property set to *target*, and a null value to be passed to the target label upon jumping.
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  id: Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Return(LabelTarget, Expression)
  fullName: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o5
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/GotoExpression.cs
    startLine: 253
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.GotoExpression' representing a return statement. The value passed to the label upon jumping can be specified.
  syntax:
    content: public static GotoExpression Return(LabelTarget target, Expression value)
    content.vb: Public Shared Function Return(target As LabelTarget, value As Expression) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The @'System.Linq.Expressions.LabelTarget' that the @'System.Linq.Expressions.GotoExpression' will jump to.
    - id: value
      type: System.Linq.Expressions.Expression
      description: The value that will be passed to the associated label upon jumping.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A @'System.Linq.Expressions.GotoExpression' with @'System.Linq.Expressions.GotoExpression.Kind' equal to Continue, the @'System.Linq.Expressions.GotoExpression.Target' property set to *target*, and *value* to be passed to the target label upon jumping.
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  id: Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Return(LabelTarget, Expression, Type)
  fullName: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 378
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.GotoExpression' representing a return statement with the specified type. The value passed to the label upon jumping can be specified.
  syntax:
    content: public static GotoExpression Return(LabelTarget target, Expression value, Type type)
    content.vb: Public Shared Function Return(target As LabelTarget, value As Expression, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The @'System.Linq.Expressions.LabelTarget' that the @'System.Linq.Expressions.GotoExpression' will jump to.
    - id: value
      type: System.Linq.Expressions.Expression
      description: The value that will be passed to the associated label upon jumping.
    - id: type
      type: System.Type
      description: An @'System.Type' to set the @'System.Linq.Expressions.Expression.Type' property equal to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A @'System.Linq.Expressions.GotoExpression' with @'System.Linq.Expressions.GotoExpression.Kind' equal to Continue, the @'System.Linq.Expressions.GotoExpression.Target' property set to *target*, the @'System.Linq.Expressions.Expression.Type' property set to *type*, and *value* to be passed to the target label upon jumping.
- uid: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)
  id: Return(System.Linq.Expressions.LabelTarget,System.Type)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Return(LabelTarget, Type)
  fullName: System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget, System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 379
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.GotoExpression' representing a return statement with the specified type.
  syntax:
    content: public static GotoExpression Return(LabelTarget target, Type type)
    content.vb: Public Shared Function Return(target As LabelTarget, type As Type) As GotoExpression
    parameters:
    - id: target
      type: System.Linq.Expressions.LabelTarget
      description: The @'System.Linq.Expressions.LabelTarget' that the @'System.Linq.Expressions.GotoExpression' will jump to.
    - id: type
      type: System.Type
      description: An @'System.Type' to set the @'System.Linq.Expressions.Expression.Type' property equal to.
    return:
      type: System.Linq.Expressions.GotoExpression
      description: A @'System.Linq.Expressions.GotoExpression' with @'System.Linq.Expressions.GotoExpression.Kind' equal to Return, the @'System.Linq.Expressions.GotoExpression.Target' property set to *target*, the @'System.Linq.Expressions.Expression.Type' property set to *type*, and a null value to be passed to the target label upon jumping.
- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: RightShift(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2476
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a bitwise right-shift operation.
  syntax:
    content: public static BinaryExpression RightShift(Expression left, Expression right)
    content.vb: Public Shared Function RightShift(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.RightShift' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.InvalidOperationException
    description: The right-shift operator is not defined for *left*.Type and *right*.Type.
- uid: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: RightShift(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 381
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a bitwise right-shift operation.
  syntax:
    content: public static BinaryExpression RightShift(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function RightShift(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.RightShift' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.'
  - type: System.InvalidOperationException
    description: '*method* is null and the right-shift operator is not defined for *left*.Type and *right*.Type.'
- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: RightShiftAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 2514
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a bitwise right-shift assignment operation.
  syntax:
    content: public static BinaryExpression RightShiftAssign(Expression left, Expression right)
    content.vb: Public Shared Function RightShiftAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.RightShiftAssign' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: RightShiftAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 383
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a bitwise right-shift assignment operation.
  syntax:
    content: public static BinaryExpression RightShiftAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function RightShiftAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.RightShiftAssign' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: RightShiftAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 384
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a bitwise right-shift assignment operation.
  syntax:
    content: public static BinaryExpression RightShiftAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function RightShiftAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' to set the @'System.Linq.Expressions.BinaryExpression.Conversion' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.RightShiftAssign' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', @'System.Linq.Expressions.BinaryExpression.Method', and @'System.Linq.Expressions.BinaryExpression.Conversion' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  id: RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: RuntimeVariables(Collections.Generic.IEnumerable<ParameterExpression>)
  name.vb: RuntimeVariables(Collections.Generic.IEnumerable(Of ParameterExpression))
  fullName: System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>)
  fullName.vb: System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 385
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates an instance of @'System.Linq.Expressions.RuntimeVariablesExpression'.
  syntax:
    content: public static RuntimeVariablesExpression RuntimeVariables(Collections.Generic.IEnumerable<ParameterExpression> variables)
    content.vb: Public Shared Function RuntimeVariables(variables As Collections.Generic.IEnumerable(Of ParameterExpression)) As RuntimeVariablesExpression
    parameters:
    - id: variables
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
      description: A collection of @'System.Linq.Expressions.ParameterExpression' objects to use to populate the @'System.Linq.Expressions.RuntimeVariablesExpression.Variables' collection.
    return:
      type: System.Linq.Expressions.RuntimeVariablesExpression
      description: An instance of @'System.Linq.Expressions.RuntimeVariablesExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.RuntimeVariables' and the @'System.Linq.Expressions.RuntimeVariablesExpression.Variables' property set to the specified value.
- uid: System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  id: RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: RuntimeVariables(ParameterExpression[])
  name.vb: RuntimeVariables(ParameterExpression())
  fullName: System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])
  fullName.vb: System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression())
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/RuntimeVariablesExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/RuntimeVariablesExpression.cs
    startLine: 86
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates an instance of @'System.Linq.Expressions.RuntimeVariablesExpression'.
  syntax:
    content: public static RuntimeVariablesExpression RuntimeVariables(params ParameterExpression[] variables)
    content.vb: Public Shared Function RuntimeVariables(ParamArray variables As ParameterExpression()) As RuntimeVariablesExpression
    parameters:
    - id: variables
      type: System.Linq.Expressions.ParameterExpression[]
      description: An array of @'System.Linq.Expressions.ParameterExpression' objects to use to populate the @'System.Linq.Expressions.RuntimeVariablesExpression.Variables' collection.
    return:
      type: System.Linq.Expressions.RuntimeVariablesExpression
      description: An instance of @'System.Linq.Expressions.RuntimeVariablesExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.RuntimeVariables' and the @'System.Linq.Expressions.RuntimeVariablesExpression.Variables' property set to the specified value.
- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Subtract(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1786
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an arithmetic subtraction operation that does not have overflow checking.
  syntax:
    content: public static BinaryExpression Subtract(Expression left, Expression right)
    content.vb: Public Shared Function Subtract(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Subtract' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.InvalidOperationException
    description: The subtraction operator is not defined for *left*.Type and *right*.Type.
- uid: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Subtract(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 388
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an arithmetic subtraction operation that does not have overflow checking.
  syntax:
    content: public static BinaryExpression Subtract(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function Subtract(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.Subtract' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.'
  - type: System.InvalidOperationException
    description: '*method* is null and the subtraction operator is not defined for *left*.Type and *right*.Type.'
- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: SubtractAssign(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1823
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a subtraction assignment operation that does not have overflow checking.
  syntax:
    content: public static BinaryExpression SubtractAssign(Expression left, Expression right)
    content.vb: Public Shared Function SubtractAssign(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.SubtractAssign' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: SubtractAssign(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 390
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a subtraction assignment operation that does not have overflow checking.
  syntax:
    content: public static BinaryExpression SubtractAssign(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function SubtractAssign(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.SubtractAssign' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: SubtractAssign(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 391
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a subtraction assignment operation that does not have overflow checking.
  syntax:
    content: public static BinaryExpression SubtractAssign(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function SubtractAssign(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' to set the @'System.Linq.Expressions.BinaryExpression.Conversion' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.SubtractAssign' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', @'System.Linq.Expressions.BinaryExpression.Method', and @'System.Linq.Expressions.BinaryExpression.Conversion' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: SubtractAssignChecked(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1882
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a subtraction assignment operation that has overflow checking.
  syntax:
    content: public static BinaryExpression SubtractAssignChecked(Expression left, Expression right)
    content.vb: Public Shared Function SubtractAssignChecked(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.SubtractAssignChecked' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: SubtractAssignChecked(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 393
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a subtraction assignment operation that has overflow checking.
  syntax:
    content: public static BinaryExpression SubtractAssignChecked(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function SubtractAssignChecked(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.SubtractAssignChecked' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  id: SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: SubtractAssignChecked(Expression, Expression, Reflection.MethodInfo, LambdaExpression)
  fullName: System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 394
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents a subtraction assignment operation that has overflow checking.
  syntax:
    content: public static BinaryExpression SubtractAssignChecked(Expression left, Expression right, Reflection.MethodInfo method, LambdaExpression conversion)
    content.vb: Public Shared Function SubtractAssignChecked(left As Expression, right As Expression, method As Reflection.MethodInfo, conversion As LambdaExpression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    - id: conversion
      type: System.Linq.Expressions.LambdaExpression
      description: A @'System.Linq.Expressions.LambdaExpression' to set the @'System.Linq.Expressions.BinaryExpression.Conversion' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.SubtractAssignChecked' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', @'System.Linq.Expressions.BinaryExpression.Method', and @'System.Linq.Expressions.BinaryExpression.Conversion' properties set to the specified values.
- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: SubtractChecked(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o1
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/BinaryExpression.cs
    startLine: 1941
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an arithmetic subtraction operation that has overflow checking.
  syntax:
    content: public static BinaryExpression SubtractChecked(Expression left, Expression right)
    content.vb: Public Shared Function SubtractChecked(left As Expression, right As Expression) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.SubtractChecked' and the @'System.Linq.Expressions.BinaryExpression.Left' and @'System.Linq.Expressions.BinaryExpression.Right' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.InvalidOperationException
    description: The subtraction operator is not defined for *left*.Type and *right*.Type.
- uid: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: SubtractChecked(Expression, Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 396
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.BinaryExpression' that represents an arithmetic subtraction operation that has overflow checking.
  syntax:
    content: public static BinaryExpression SubtractChecked(Expression left, Expression right, Reflection.MethodInfo method)
    content.vb: Public Shared Function SubtractChecked(left As Expression, right As Expression, method As Reflection.MethodInfo) As BinaryExpression
    parameters:
    - id: left
      type: System.Linq.Expressions.Expression
      description: A @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Left' property equal to.
    - id: right
      type: System.Linq.Expressions.Expression
      description: A @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.BinaryExpression.Right' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.BinaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.BinaryExpression
      description: A @'System.Linq.Expressions.BinaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.SubtractChecked' and the @'System.Linq.Expressions.BinaryExpression.Left', @'System.Linq.Expressions.BinaryExpression.Right', and @'System.Linq.Expressions.BinaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*left* or *right* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.'
  - type: System.InvalidOperationException
    description: '*method* is null and the subtraction operator is not defined for *left*.Type and *right*.Type.'
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Switch(Expression, Expression, SwitchCase[])
  name.vb: Switch(Expression, Expression, SwitchCase())
  fullName: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase[])
  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase())
  type: Method
  source:
    remote: &o16
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchExpression.cs
    startLine: 144
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.SwitchExpression' that represents a switch statement that has a default case.
  syntax:
    content: public static SwitchExpression Switch(Expression switchValue, Expression defaultBody, params SwitchCase[] cases)
    content.vb: Public Shared Function Switch(switchValue As Expression, defaultBody As Expression, ParamArray cases As SwitchCase()) As SwitchExpression
    parameters:
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: The value to be tested against each case.
    - id: defaultBody
      type: System.Linq.Expressions.Expression
      description: The result of the switch if *switchValue* does not match any of the cases.
    - id: cases
      type: System.Linq.Expressions.SwitchCase[]
      description: The set of cases for this switch expression.
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: The created @'System.Linq.Expressions.SwitchExpression'.
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Switch(Expression, Expression, Reflection.MethodInfo, Collections.Generic.IEnumerable<SwitchCase>)
  name.vb: Switch(Expression, Expression, Reflection.MethodInfo, Collections.Generic.IEnumerable(Of SwitchCase))
  fullName: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>)
  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.SwitchCase))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 398
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.SwitchExpression' that represents a switch statement that has a default case.
  syntax:
    content: public static SwitchExpression Switch(Expression switchValue, Expression defaultBody, Reflection.MethodInfo comparison, Collections.Generic.IEnumerable<SwitchCase> cases)
    content.vb: Public Shared Function Switch(switchValue As Expression, defaultBody As Expression, comparison As Reflection.MethodInfo, cases As Collections.Generic.IEnumerable(Of SwitchCase)) As SwitchExpression
    parameters:
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: The value to be tested against each case.
    - id: defaultBody
      type: System.Linq.Expressions.Expression
      description: The result of the switch if *switchValue* does not match any of the cases.
    - id: comparison
      type: System.Reflection.MethodInfo
      description: The equality comparison method to use.
    - id: cases
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}
      description: The set of cases for this switch expression.
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: The created @'System.Linq.Expressions.SwitchExpression'.
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Switch(Expression, Expression, Reflection.MethodInfo, SwitchCase[])
  name.vb: Switch(Expression, Expression, Reflection.MethodInfo, SwitchCase())
  fullName: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase[])
  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase())
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 399
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.SwitchExpression' that represents a switch statement that has a default case.
  syntax:
    content: public static SwitchExpression Switch(Expression switchValue, Expression defaultBody, Reflection.MethodInfo comparison, params SwitchCase[] cases)
    content.vb: Public Shared Function Switch(switchValue As Expression, defaultBody As Expression, comparison As Reflection.MethodInfo, ParamArray cases As SwitchCase()) As SwitchExpression
    parameters:
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: The value to be tested against each case.
    - id: defaultBody
      type: System.Linq.Expressions.Expression
      description: The result of the switch if *switchValue* does not match any of the cases.
    - id: comparison
      type: System.Reflection.MethodInfo
      description: The equality comparison method to use.
    - id: cases
      type: System.Linq.Expressions.SwitchCase[]
      description: The set of cases for this switch expression.
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: The created @'System.Linq.Expressions.SwitchExpression'.
- uid: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  id: Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Switch(Expression, SwitchCase[])
  name.vb: Switch(Expression, SwitchCase())
  fullName: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase[])
  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression, System.Linq.Expressions.SwitchCase())
  type: Method
  source:
    remote: *o16
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchExpression.cs
    startLine: 132
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.SwitchExpression' that represents a switch statement without a default case.
  syntax:
    content: public static SwitchExpression Switch(Expression switchValue, params SwitchCase[] cases)
    content.vb: Public Shared Function Switch(switchValue As Expression, ParamArray cases As SwitchCase()) As SwitchExpression
    parameters:
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: The value to be tested against each case.
    - id: cases
      type: System.Linq.Expressions.SwitchCase[]
      description: The set of cases for this switch expression.
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: The created @'System.Linq.Expressions.SwitchExpression'.
- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  id: Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Switch(Type, Expression, Expression, Reflection.MethodInfo, Collections.Generic.IEnumerable<SwitchCase>)
  name.vb: Switch(Type, Expression, Expression, Reflection.MethodInfo, Collections.Generic.IEnumerable(Of SwitchCase))
  fullName: System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>)
  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.SwitchCase))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 401
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.SwitchExpression' that represents a switch statement that has a default case.
  syntax:
    content: public static SwitchExpression Switch(Type type, Expression switchValue, Expression defaultBody, Reflection.MethodInfo comparison, Collections.Generic.IEnumerable<SwitchCase> cases)
    content.vb: Public Shared Function Switch(type As Type, switchValue As Expression, defaultBody As Expression, comparison As Reflection.MethodInfo, cases As Collections.Generic.IEnumerable(Of SwitchCase)) As SwitchExpression
    parameters:
    - id: type
      type: System.Type
      description: The result type of the switch.
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: The value to be tested against each case.
    - id: defaultBody
      type: System.Linq.Expressions.Expression
      description: The result of the switch if *switchValue* does not match any of the cases.
    - id: comparison
      type: System.Reflection.MethodInfo
      description: The equality comparison method to use.
    - id: cases
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}
      description: The set of cases for this switch expression.
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: The created @'System.Linq.Expressions.SwitchExpression'.
- uid: System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  id: Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Switch(Type, Expression, Expression, Reflection.MethodInfo, SwitchCase[])
  name.vb: Switch(Type, Expression, Expression, Reflection.MethodInfo, SwitchCase())
  fullName: System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase[])
  fullName.vb: System.Linq.Expressions.Expression.Switch(System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.SwitchCase())
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 402
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.SwitchExpression' that represents a switch statement that has a default case..
  syntax:
    content: public static SwitchExpression Switch(Type type, Expression switchValue, Expression defaultBody, Reflection.MethodInfo comparison, params SwitchCase[] cases)
    content.vb: Public Shared Function Switch(type As Type, switchValue As Expression, defaultBody As Expression, comparison As Reflection.MethodInfo, ParamArray cases As SwitchCase()) As SwitchExpression
    parameters:
    - id: type
      type: System.Type
      description: The result type of the switch.
    - id: switchValue
      type: System.Linq.Expressions.Expression
      description: The value to be tested against each case.
    - id: defaultBody
      type: System.Linq.Expressions.Expression
      description: The result of the switch if *switchValue* does not match any of the cases.
    - id: comparison
      type: System.Reflection.MethodInfo
      description: The equality comparison method to use.
    - id: cases
      type: System.Linq.Expressions.SwitchCase[]
      description: The set of cases for this switch expression.
    return:
      type: System.Linq.Expressions.SwitchExpression
      description: The created @'System.Linq.Expressions.SwitchExpression'.
- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: SwitchCase(Expression, Collections.Generic.IEnumerable<Expression>)
  name.vb: SwitchCase(Expression, Collections.Generic.IEnumerable(Of Expression))
  fullName: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  fullName.vb: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 403
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.SwitchCase' object to be used in a @'System.Linq.Expressions.SwitchExpression' object.
  syntax:
    content: public static SwitchCase SwitchCase(Expression body, Collections.Generic.IEnumerable<Expression> testValues)
    content.vb: Public Shared Function SwitchCase(body As Expression, testValues As Collections.Generic.IEnumerable(Of Expression)) As SwitchCase
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the case.
    - id: testValues
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: The test values of the case.
    return:
      type: System.Linq.Expressions.SwitchCase
      description: The created @'System.Linq.Expressions.SwitchCase'.
- uid: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  id: SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: SwitchCase(Expression, Expression[])
  name.vb: SwitchCase(Expression, Expression())
  fullName: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression[])
  fullName.vb: System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression())
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchCase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/SwitchCase.cs
    startLine: 77
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.SwitchCase' for use in a @'System.Linq.Expressions.SwitchExpression'.
  syntax:
    content: public static SwitchCase SwitchCase(Expression body, params Expression[] testValues)
    content.vb: Public Shared Function SwitchCase(body As Expression, ParamArray testValues As Expression()) As SwitchCase
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the case.
    - id: testValues
      type: System.Linq.Expressions.Expression[]
      description: The test values of the case.
    return:
      type: System.Linq.Expressions.SwitchCase
      description: The created @'System.Linq.Expressions.SwitchCase'.
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String)
  id: SymbolDocument(System.String)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: SymbolDocument(String)
  fullName: System.Linq.Expressions.Expression.SymbolDocument(System.String)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/SymbolDocumentInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/SymbolDocumentInfo.cs
    startLine: 110
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates an instance of @'System.Linq.Expressions.SymbolDocumentInfo'.
  syntax:
    content: public static SymbolDocumentInfo SymbolDocument(string fileName)
    content.vb: Public Shared Function SymbolDocument(fileName As String) As SymbolDocumentInfo
    parameters:
    - id: fileName
      type: System.String
      description: A @'System.String' to set the @'System.Linq.Expressions.SymbolDocumentInfo.FileName' equal to.
    return:
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: A @'System.Linq.Expressions.SymbolDocumentInfo' that has the @'System.Linq.Expressions.SymbolDocumentInfo.FileName' property set to the specified value.
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)
  id: SymbolDocument(System.String,System.Guid)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: SymbolDocument(String, Guid)
  fullName: System.Linq.Expressions.Expression.SymbolDocument(System.String, System.Guid)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 406
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates an instance of @'System.Linq.Expressions.SymbolDocumentInfo'.
  syntax:
    content: public static SymbolDocumentInfo SymbolDocument(string fileName, Guid language)
    content.vb: Public Shared Function SymbolDocument(fileName As String, language As Guid) As SymbolDocumentInfo
    parameters:
    - id: fileName
      type: System.String
      description: A @'System.String' to set the @'System.Linq.Expressions.SymbolDocumentInfo.FileName' equal to.
    - id: language
      type: System.Guid
      description: A @'System.Guid' to set the @'System.Linq.Expressions.SymbolDocumentInfo.Language' equal to.
    return:
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: A @'System.Linq.Expressions.SymbolDocumentInfo' that has the @'System.Linq.Expressions.SymbolDocumentInfo.FileName' and @'System.Linq.Expressions.SymbolDocumentInfo.Language' properties set to the specified value.
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)
  id: SymbolDocument(System.String,System.Guid,System.Guid)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: SymbolDocument(String, Guid, Guid)
  fullName: System.Linq.Expressions.Expression.SymbolDocument(System.String, System.Guid, System.Guid)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 407
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates an instance of @'System.Linq.Expressions.SymbolDocumentInfo'.
  syntax:
    content: public static SymbolDocumentInfo SymbolDocument(string fileName, Guid language, Guid languageVendor)
    content.vb: Public Shared Function SymbolDocument(fileName As String, language As Guid, languageVendor As Guid) As SymbolDocumentInfo
    parameters:
    - id: fileName
      type: System.String
      description: A @'System.String' to set the @'System.Linq.Expressions.SymbolDocumentInfo.FileName' equal to.
    - id: language
      type: System.Guid
      description: A @'System.Guid' to set the @'System.Linq.Expressions.SymbolDocumentInfo.Language' equal to.
    - id: languageVendor
      type: System.Guid
      description: A @'System.Guid' to set the @'System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor' equal to.
    return:
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: A @'System.Linq.Expressions.SymbolDocumentInfo' that has the @'System.Linq.Expressions.SymbolDocumentInfo.FileName' and @'System.Linq.Expressions.SymbolDocumentInfo.Language' and @'System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor' properties set to the specified value.
- uid: System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)
  id: SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: SymbolDocument(String, Guid, Guid, Guid)
  fullName: System.Linq.Expressions.Expression.SymbolDocument(System.String, System.Guid, System.Guid, System.Guid)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 408
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates an instance of @'System.Linq.Expressions.SymbolDocumentInfo'.
  syntax:
    content: public static SymbolDocumentInfo SymbolDocument(string fileName, Guid language, Guid languageVendor, Guid documentType)
    content.vb: Public Shared Function SymbolDocument(fileName As String, language As Guid, languageVendor As Guid, documentType As Guid) As SymbolDocumentInfo
    parameters:
    - id: fileName
      type: System.String
      description: A @'System.String' to set the @'System.Linq.Expressions.SymbolDocumentInfo.FileName' equal to.
    - id: language
      type: System.Guid
      description: A @'System.Guid' to set the @'System.Linq.Expressions.SymbolDocumentInfo.Language' equal to.
    - id: languageVendor
      type: System.Guid
      description: A @'System.Guid' to set the @'System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor' equal to.
    - id: documentType
      type: System.Guid
      description: A @'System.Guid' to set the @'System.Linq.Expressions.SymbolDocumentInfo.DocumentType' equal to.
    return:
      type: System.Linq.Expressions.SymbolDocumentInfo
      description: A @'System.Linq.Expressions.SymbolDocumentInfo' that has the @'System.Linq.Expressions.SymbolDocumentInfo.FileName' and @'System.Linq.Expressions.SymbolDocumentInfo.Language' and @'System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor' and @'System.Linq.Expressions.SymbolDocumentInfo.DocumentType' properties set to the specified value.
- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)
  id: Throw(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Throw(Expression)
  fullName: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o3
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 903
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents a throwing of an exception.
  syntax:
    content: public static UnaryExpression Throw(Expression value)
    content.vb: Public Shared Function Throw(value As Expression) As UnaryExpression
    parameters:
    - id: value
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression'.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that represents the exception.
- uid: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)
  id: Throw(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Throw(Expression, Type)
  fullName: System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 410
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents a throwing of an exception with a given type.
  syntax:
    content: public static UnaryExpression Throw(Expression value, Type type)
    content.vb: Public Shared Function Throw(value As Expression, type As Type) As UnaryExpression
    parameters:
    - id: value
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression'.
    - id: type
      type: System.Type
      description: The new @'System.Type' of the expression.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that represents the exception.
- uid: System.Linq.Expressions.Expression.ToString
  id: ToString
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: ToString()
  fullName: System.Linq.Expressions.Expression.ToString()
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
    startLine: 213
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Returns a textual representation of the @'System.Linq.Expressions.Expression'.
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: A textual representation of the @'System.Linq.Expressions.Expression'.
- uid: System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  id: TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: TryCatch(Expression, CatchBlock[])
  name.vb: TryCatch(Expression, CatchBlock())
  fullName: System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock[])
  fullName.vb: System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock())
  type: Method
  source:
    remote: &o17
      path: src/System.Linq.Expressions/src/System/Linq/Expressions/TryExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/TryExpression.cs
    startLine: 147
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.TryExpression' representing a try block with any number of catch statements and neither a fault nor finally block.
  syntax:
    content: public static TryExpression TryCatch(Expression body, params CatchBlock[] handlers)
    content.vb: Public Shared Function TryCatch(body As Expression, ParamArray handlers As CatchBlock()) As TryExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the try block.
    - id: handlers
      type: System.Linq.Expressions.CatchBlock[]
      description: The array of zero or more @'System.Linq.Expressions.CatchBlock' expressions representing the catch statements to be associated with the try block.
    return:
      type: System.Linq.Expressions.TryExpression
      description: The created @'System.Linq.Expressions.TryExpression'.
- uid: System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  id: TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: TryCatchFinally(Expression, Expression, CatchBlock[])
  name.vb: TryCatchFinally(Expression, Expression, CatchBlock())
  fullName: System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock[])
  fullName.vb: System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.CatchBlock())
  type: Method
  source:
    remote: *o17
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/TryExpression.cs
    startLine: 159
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.TryExpression' representing a try block with any number of catch statements and a finally block.
  syntax:
    content: public static TryExpression TryCatchFinally(Expression body, Expression finally, params CatchBlock[] handlers)
    content.vb: Public Shared Function TryCatchFinally(body As Expression, finally As Expression, ParamArray handlers As CatchBlock()) As TryExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the try block.
    - id: finally
      type: System.Linq.Expressions.Expression
      description: The body of the finally block.
    - id: handlers
      type: System.Linq.Expressions.CatchBlock[]
      description: The array of zero or more @'System.Linq.Expressions.CatchBlock' expressions representing the catch statements to be associated with the try block.
    return:
      type: System.Linq.Expressions.TryExpression
      description: The created @'System.Linq.Expressions.TryExpression'.
- uid: System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: TryFault(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o17
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/TryExpression.cs
    startLine: 125
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.TryExpression' representing a try block with a fault block and no catch statements.
  syntax:
    content: public static TryExpression TryFault(Expression body, Expression fault)
    content.vb: Public Shared Function TryFault(body As Expression, fault As Expression) As TryExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the try block.
    - id: fault
      type: System.Linq.Expressions.Expression
      description: The body of the fault block.
    return:
      type: System.Linq.Expressions.TryExpression
      description: The created @'System.Linq.Expressions.TryExpression'.
- uid: System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: TryFinally(Expression, Expression)
  fullName: System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o17
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/TryExpression.cs
    startLine: 136
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.TryExpression' representing a try block with a finally block and no catch statements.
  syntax:
    content: public static TryExpression TryFinally(Expression body, Expression finally)
    content.vb: Public Shared Function TryFinally(body As Expression, finally As Expression) As TryExpression
    parameters:
    - id: body
      type: System.Linq.Expressions.Expression
      description: The body of the try block.
    - id: finally
      type: System.Linq.Expressions.Expression
      description: The body of the finally block.
    return:
      type: System.Linq.Expressions.TryExpression
      description: The created @'System.Linq.Expressions.TryExpression'.
- uid: System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)
  id: TryGetActionType(System.Type[],System.Type@)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: TryGetActionType(Type[], out Type)
  name.vb: TryGetActionType(Type(), ByRef Type)
  fullName: System.Linq.Expressions.Expression.TryGetActionType(System.Type[], out System.Type)
  fullName.vb: System.Linq.Expressions.Expression.TryGetActionType(System.Type(), ByRef System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 416
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.Expression.Type' object that represents a generic System.Action delegate type that has specific type arguments.
  syntax:
    content: public static bool TryGetActionType(Type[] typeArgs, out Type actionType)
    content.vb: Public Shared Function TryGetActionType(typeArgs As Type(), ByRef actionType As Type) As Boolean
    parameters:
    - id: typeArgs
      type: System.Type[]
      description: An array of Type objects that specify the type arguments for the System.Action delegate type.
    - id: actionType
      type: System.Type
      description: When this method returns, contains the generic System.Action delegate type that has specific type arguments. Contains null if there is no generic System.Action delegate that matches the *typeArgs*.This parameter is passed uninitialized.
    return:
      type: System.Boolean
      description: true if generic System.Action delegate type was created for specific *typeArgs*; false otherwise.
- uid: System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)
  id: TryGetFuncType(System.Type[],System.Type@)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: TryGetFuncType(Type[], out Type)
  name.vb: TryGetFuncType(Type(), ByRef Type)
  fullName: System.Linq.Expressions.Expression.TryGetFuncType(System.Type[], out System.Type)
  fullName.vb: System.Linq.Expressions.Expression.TryGetFuncType(System.Type(), ByRef System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 417
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.Expression.Type' object that represents a generic System.Func delegate type that has specific type arguments. The last type argument specifies the return type of the created delegate.
  syntax:
    content: public static bool TryGetFuncType(Type[] typeArgs, out Type funcType)
    content.vb: Public Shared Function TryGetFuncType(typeArgs As Type(), ByRef funcType As Type) As Boolean
    parameters:
    - id: typeArgs
      type: System.Type[]
      description: An array of Type objects that specify the type arguments for the System.Func delegate type.
    - id: funcType
      type: System.Type
      description: When this method returns, contains the generic System.Func delegate type that has specific type arguments. Contains null if there is no generic System.Func delegate that matches the *typeArgs*.This parameter is passed uninitialized.
    return:
      type: System.Boolean
      description: true if generic System.Func delegate type was created for specific *typeArgs*; false otherwise.
- uid: System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)
  id: TypeAs(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: TypeAs(Expression, Type)
  fullName: System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 418
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents an explicit reference or boxing conversion where null is supplied if the conversion fails.
  syntax:
    content: public static UnaryExpression TypeAs(Expression expression, Type type)
    content.vb: Public Shared Function TypeAs(expression As Expression, type As Type) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.UnaryExpression.Operand' property equal to.
    - id: type
      type: System.Type
      description: A @'System.Type' to set the @'System.Linq.Expressions.Expression.Type' property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.TypeAs' and the @'System.Linq.Expressions.UnaryExpression.Operand' and @'System.Linq.Expressions.Expression.Type' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*expression* or *type* is null.'
- uid: System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)
  id: TypeEqual(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: TypeEqual(Expression, Type)
  fullName: System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 419
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.TypeBinaryExpression' that compares run-time type identity.
  syntax:
    content: public static TypeBinaryExpression TypeEqual(Expression expression, Type type)
    content.vb: Public Shared Function TypeEqual(expression As Expression, type As Type) As TypeBinaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.Expression' property equal to.
    - id: type
      type: System.Type
      description: A @'System.Linq.Expressions.Expression.Type' to set the @'System.Linq.Expressions.TypeBinaryExpression.TypeOperand' property equal to.
    return:
      type: System.Linq.Expressions.TypeBinaryExpression
      description: A @'System.Linq.Expressions.TypeBinaryExpression' for which the @'System.Linq.Expressions.Expression.NodeType' property is equal to @'System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)' and for which the @'System.Linq.Expressions.Expression' and @'System.Linq.Expressions.TypeBinaryExpression.TypeOperand' properties are set to the specified values.
- uid: System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)
  id: TypeIs(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: TypeIs(Expression, Type)
  fullName: System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 420
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.TypeBinaryExpression'.
  syntax:
    content: public static TypeBinaryExpression TypeIs(Expression expression, Type type)
    content.vb: Public Shared Function TypeIs(expression As Expression, type As Type) As TypeBinaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.TypeBinaryExpression.Expression' property equal to.
    - id: type
      type: System.Type
      description: A @'System.Linq.Expressions.Expression.Type' to set the @'System.Linq.Expressions.TypeBinaryExpression.TypeOperand' property equal to.
    return:
      type: System.Linq.Expressions.TypeBinaryExpression
      description: A @'System.Linq.Expressions.TypeBinaryExpression' for which the @'System.Linq.Expressions.Expression.NodeType' property is equal to @'System.Linq.Expressions.ExpressionType.TypeIs' and for which the @'System.Linq.Expressions.TypeBinaryExpression.Expression' and @'System.Linq.Expressions.TypeBinaryExpression.TypeOperand' properties are set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*expression* or *type* is null.'
- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)
  id: UnaryPlus(System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: UnaryPlus(Expression)
  fullName: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote: *o3
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/UnaryExpression.cs
    startLine: 529
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents a unary plus operation.
  syntax:
    content: public static UnaryExpression UnaryPlus(Expression expression)
    content.vb: Public Shared Function UnaryPlus(expression As Expression) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.UnaryExpression.Operand' property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.UnaryPlus' and the @'System.Linq.Expressions.UnaryExpression.Operand' property set to the specified value.
  exceptions:
  - type: System.ArgumentNullException
    description: '*expression* is null.'
  - type: System.InvalidOperationException
    description: The unary plus operator is not defined for *expression*.Type.
- uid: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  id: UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: UnaryPlus(Expression, Reflection.MethodInfo)
  fullName: System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression, System.Reflection.MethodInfo)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 422
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents a unary plus operation.
  syntax:
    content: public static UnaryExpression UnaryPlus(Expression expression, Reflection.MethodInfo method)
    content.vb: Public Shared Function UnaryPlus(expression As Expression, method As Reflection.MethodInfo) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to set the @'System.Linq.Expressions.UnaryExpression.Operand' property equal to.
    - id: method
      type: System.Reflection.MethodInfo
      description: A @'System.Reflection.MethodInfo' to set the @'System.Linq.Expressions.UnaryExpression.Method' property equal to.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: A @'System.Linq.Expressions.UnaryExpression' that has the @'System.Linq.Expressions.Expression.NodeType' property equal to @'System.Linq.Expressions.ExpressionType.UnaryPlus' and the @'System.Linq.Expressions.UnaryExpression.Operand' and @'System.Linq.Expressions.UnaryExpression.Method' properties set to the specified values.
  exceptions:
  - type: System.ArgumentNullException
    description: '*expression* is null.'
  - type: System.ArgumentException
    description: '*method* is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly one argument.'
  - type: System.InvalidOperationException
    description: '*method* is null and the unary plus operator is not defined for *expression*.Type.-or-*expression*.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by *method*.'
- uid: System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)
  id: Unbox(System.Linq.Expressions.Expression,System.Type)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Unbox(Expression, Type)
  fullName: System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression, System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 423
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.UnaryExpression' that represents an explicit unboxing.
  syntax:
    content: public static UnaryExpression Unbox(Expression expression, Type type)
    content.vb: Public Shared Function Unbox(expression As Expression, type As Type) As UnaryExpression
    parameters:
    - id: expression
      type: System.Linq.Expressions.Expression
      description: An @'System.Linq.Expressions.Expression' to unbox.
    - id: type
      type: System.Type
      description: The new @'System.Type' of the expression.
    return:
      type: System.Linq.Expressions.UnaryExpression
      description: An instance of @'System.Linq.Expressions.UnaryExpression'.
- uid: System.Linq.Expressions.Expression.Variable(System.Type)
  id: Variable(System.Type)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Variable(Type)
  fullName: System.Linq.Expressions.Expression.Variable(System.Type)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 424
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.ParameterExpression' node that can be used to identify a parameter or a variable in an expression tree.
  syntax:
    content: public static ParameterExpression Variable(Type type)
    content.vb: Public Shared Function Variable(type As Type) As ParameterExpression
    parameters:
    - id: type
      type: System.Type
      description: The type of the parameter or variable.
    return:
      type: System.Linq.Expressions.ParameterExpression
      description: A @'System.Linq.Expressions.ParameterExpression' node with the specified name and type
- uid: System.Linq.Expressions.Expression.Variable(System.Type,System.String)
  id: Variable(System.Type,System.String)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: Variable(Type, String)
  fullName: System.Linq.Expressions.Expression.Variable(System.Type, System.String)
  type: Method
  source:
    remote: *o2
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 425
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Creates a @'System.Linq.Expressions.ParameterExpression' node that can be used to identify a parameter or a variable in an expression tree.
  syntax:
    content: public static ParameterExpression Variable(Type type, string name)
    content.vb: Public Shared Function Variable(type As Type, name As String) As ParameterExpression
    parameters:
    - id: type
      type: System.Type
      description: The type of the parameter or variable.
    - id: name
      type: System.String
      description: The name of the parameter or variable. This name is used for debugging or printing purpose only.
    return:
      type: System.Linq.Expressions.ParameterExpression
      description: A @'System.Linq.Expressions.ParameterExpression' node with the specified name and type.
- uid: System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  id: VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  parent: System.Linq.Expressions.Expression
  href: System.Linq.Expressions.Expression.yml
  name: VisitChildren(ExpressionVisitor)
  fullName: System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)
  type: Method
  source:
    remote: *o0
    path: src/System.Linq.Expressions/src/System/Linq/Expressions/Expression.cs
    startLine: 145
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: Reduces the node and then calls the visitor delegate on the reduced expression. The method throws an exception if the node is not reducible.
  syntax:
    content: protected virtual Expression VisitChildren(ExpressionVisitor visitor)
    content.vb: Protected Overridable Function VisitChildren(visitor As ExpressionVisitor) As Expression
    parameters:
    - id: visitor
      type: System.Linq.Expressions.ExpressionVisitor
      description: An instance of @'System.Func`2'.
    return:
      type: System.Linq.Expressions.Expression
      description: The expression being visited, or an expression which should replace it in the tree.
references:
- uid: System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  href: System.Boolean.yml
  name: Boolean
  fullName: System.Boolean
- uid: System.Linq.Expressions.ExpressionType
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.ExpressionType.yml
  name: ExpressionType
  fullName: System.Linq.Expressions.ExpressionType
- uid: System.Type
  parent: System
  isExternal: false
  href: System.Type.yml
  name: Type
  fullName: System.Type
- uid: System.Linq.Expressions.ExpressionVisitor
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.ExpressionVisitor.yml
  name: ExpressionVisitor
  fullName: System.Linq.Expressions.ExpressionVisitor
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.Expression.yml
  name: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Linq.Expressions.BinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.BinaryExpression.yml
  name: BinaryExpression
  fullName: System.Linq.Expressions.BinaryExpression
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.MethodInfo.yml
  name: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Linq.Expressions.LambdaExpression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.LambdaExpression.yml
  name: LambdaExpression
  fullName: System.Linq.Expressions.LambdaExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  definition: System.Collections.Generic.IEnumerable`1
  href: System.Linq.Expressions.Expression.yml
  name: Collections.Generic.IEnumerable<Expression>
  name.vb: Collections.Generic.IEnumerable(Of Expression)
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
    href: System.Linq.Expressions.Expression.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
    href: System.Linq.Expressions.Expression.yml
  - name: )
    fullName: )
- uid: System.Linq.Expressions.IndexExpression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.IndexExpression.yml
  name: IndexExpression
  fullName: System.Linq.Expressions.IndexExpression
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  href: System.Collections.Generic.IEnumerable`1.yml
  name: Collections.Generic.IEnumerable<>
  name.vb: Collections.Generic.IEnumerable(Of )
  fullName: System.Collections.Generic.IEnumerable<>
  fullName.vb: System.Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    href: System.Collections.Generic.IEnumerable`1.yml
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Linq.Expressions.Expression[]
  isExternal: false
  href: System.Linq.Expressions.Expression.yml
  name: Expression[]
  name.vb: Expression()
  fullName: System.Linq.Expressions.Expression[]
  fullName.vb: System.Linq.Expressions.Expression()
  spec.csharp:
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
    href: System.Linq.Expressions.Expression.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
    href: System.Linq.Expressions.Expression.yml
  - name: ()
    fullName: ()
- uid: System.Linq.Expressions.MethodCallExpression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.MethodCallExpression.yml
  name: MethodCallExpression
  fullName: System.Linq.Expressions.MethodCallExpression
- uid: System.Linq.Expressions.UnaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.UnaryExpression.yml
  name: UnaryExpression
  fullName: System.Linq.Expressions.UnaryExpression
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.MemberInfo.yml
  name: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Linq.Expressions.MemberAssignment
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.MemberAssignment.yml
  name: MemberAssignment
  fullName: System.Linq.Expressions.MemberAssignment
- uid: System.Linq.Expressions.BlockExpression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.BlockExpression.yml
  name: BlockExpression
  fullName: System.Linq.Expressions.BlockExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression}
  definition: System.Collections.Generic.IEnumerable`1
  href: System.Linq.Expressions.ParameterExpression.yml
  name: Collections.Generic.IEnumerable<ParameterExpression>
  name.vb: Collections.Generic.IEnumerable(Of ParameterExpression)
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ParameterExpression>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ParameterExpression)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
    href: System.Linq.Expressions.ParameterExpression.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
    href: System.Linq.Expressions.ParameterExpression.yml
  - name: )
    fullName: )
- uid: System.Linq.Expressions.LabelTarget
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.LabelTarget.yml
  name: LabelTarget
  fullName: System.Linq.Expressions.LabelTarget
- uid: System.Linq.Expressions.GotoExpression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.GotoExpression.yml
  name: GotoExpression
  fullName: System.Linq.Expressions.GotoExpression
- uid: System.String
  parent: System
  isExternal: false
  href: System.String.yml
  name: String
  fullName: System.String
- uid: System.Type[]
  isExternal: false
  href: System.Type.yml
  name: Type[]
  name.vb: Type()
  fullName: System.Type[]
  fullName.vb: System.Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
    href: System.Type.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
    href: System.Type.yml
  - name: ()
    fullName: ()
- uid: System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.ParameterExpression.yml
  name: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression
- uid: System.Linq.Expressions.CatchBlock
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.CatchBlock.yml
  name: CatchBlock
  fullName: System.Linq.Expressions.CatchBlock
- uid: System.Linq.Expressions.SymbolDocumentInfo
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.SymbolDocumentInfo.yml
  name: SymbolDocumentInfo
  fullName: System.Linq.Expressions.SymbolDocumentInfo
- uid: System.Linq.Expressions.DebugInfoExpression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.DebugInfoExpression.yml
  name: DebugInfoExpression
  fullName: System.Linq.Expressions.DebugInfoExpression
- uid: System.Linq.Expressions.ConditionalExpression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.ConditionalExpression.yml
  name: ConditionalExpression
  fullName: System.Linq.Expressions.ConditionalExpression
- uid: System.Linq.Expressions.ConstantExpression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.ConstantExpression.yml
  name: ConstantExpression
  fullName: System.Linq.Expressions.ConstantExpression
- uid: System.Int32
  parent: System
  isExternal: false
  href: System.Int32.yml
  name: Int32
  fullName: System.Int32
- uid: System.Linq.Expressions.DefaultExpression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.DefaultExpression.yml
  name: DefaultExpression
  fullName: System.Linq.Expressions.DefaultExpression
- uid: System.Linq.Expressions.ElementInit
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.ElementInit.yml
  name: ElementInit
  fullName: System.Linq.Expressions.ElementInit
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.FieldInfo.yml
  name: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Linq.Expressions.MemberExpression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.MemberExpression.yml
  name: MemberExpression
  fullName: System.Linq.Expressions.MemberExpression
- uid: System.Linq.Expressions.InvocationExpression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.InvocationExpression.yml
  name: InvocationExpression
  fullName: System.Linq.Expressions.InvocationExpression
- uid: System.Linq.Expressions.LabelExpression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.LabelExpression.yml
  name: LabelExpression
  fullName: System.Linq.Expressions.LabelExpression
- uid: System.Linq.Expressions.ParameterExpression[]
  isExternal: false
  href: System.Linq.Expressions.ParameterExpression.yml
  name: ParameterExpression[]
  name.vb: ParameterExpression()
  fullName: System.Linq.Expressions.ParameterExpression[]
  fullName.vb: System.Linq.Expressions.ParameterExpression()
  spec.csharp:
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
    href: System.Linq.Expressions.ParameterExpression.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.ParameterExpression
    name: ParameterExpression
    fullName: System.Linq.Expressions.ParameterExpression
    href: System.Linq.Expressions.ParameterExpression.yml
  - name: ()
    fullName: ()
- uid: System.Linq.Expressions.Expression{{TDelegate}}
  parent: System.Linq.Expressions
  definition: System.Linq.Expressions.Expression`1
  href: System.Linq.Expressions.Expression`1.yml
  name: Expression<TDelegate>
  name.vb: Expression(Of TDelegate)
  fullName: System.Linq.Expressions.Expression<TDelegate>
  fullName.vb: System.Linq.Expressions.Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    fullName: System.Linq.Expressions.Expression
    href: System.Linq.Expressions.Expression`1.yml
  - name: <
    fullName: <
  - name: TDelegate
    fullName: TDelegate
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    fullName: System.Linq.Expressions.Expression
    href: System.Linq.Expressions.Expression`1.yml
  - name: '(Of '
    fullName: '(Of '
  - name: TDelegate
    fullName: TDelegate
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.Expression`1.yml
  name: Expressions.Expression<>
  name.vb: Expressions.Expression(Of )
  fullName: System.Linq.Expressions.Expression<>
  fullName.vb: System.Linq.Expressions.Expression(Of )
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    href: System.Linq.Expressions.Expression`1.yml
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    href: System.Linq.Expressions.Expression`1.yml
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit}
  definition: System.Collections.Generic.IEnumerable`1
  href: System.Linq.Expressions.ElementInit.yml
  name: Collections.Generic.IEnumerable<ElementInit>
  name.vb: Collections.Generic.IEnumerable(Of ElementInit)
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.ElementInit>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.ElementInit)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    fullName: System.Linq.Expressions.ElementInit
    href: System.Linq.Expressions.ElementInit.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    fullName: System.Linq.Expressions.ElementInit
    href: System.Linq.Expressions.ElementInit.yml
  - name: )
    fullName: )
- uid: System.Linq.Expressions.MemberListBinding
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.MemberListBinding.yml
  name: MemberListBinding
  fullName: System.Linq.Expressions.MemberListBinding
- uid: System.Linq.Expressions.ElementInit[]
  isExternal: false
  href: System.Linq.Expressions.ElementInit.yml
  name: ElementInit[]
  name.vb: ElementInit()
  fullName: System.Linq.Expressions.ElementInit[]
  fullName.vb: System.Linq.Expressions.ElementInit()
  spec.csharp:
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    fullName: System.Linq.Expressions.ElementInit
    href: System.Linq.Expressions.ElementInit.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.ElementInit
    name: ElementInit
    fullName: System.Linq.Expressions.ElementInit
    href: System.Linq.Expressions.ElementInit.yml
  - name: ()
    fullName: ()
- uid: System.Linq.Expressions.NewExpression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.NewExpression.yml
  name: NewExpression
  fullName: System.Linq.Expressions.NewExpression
- uid: System.Linq.Expressions.ListInitExpression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.ListInitExpression.yml
  name: ListInitExpression
  fullName: System.Linq.Expressions.ListInitExpression
- uid: System.Linq.Expressions.LoopExpression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.LoopExpression.yml
  name: LoopExpression
  fullName: System.Linq.Expressions.LoopExpression
- uid: System.Linq.Expressions.GotoExpressionKind
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.GotoExpressionKind.yml
  name: GotoExpressionKind
  fullName: System.Linq.Expressions.GotoExpressionKind
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: false
  href: System.Reflection.PropertyInfo.yml
  name: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock}
  definition: System.Collections.Generic.IEnumerable`1
  href: System.Linq.Expressions.CatchBlock.yml
  name: Collections.Generic.IEnumerable<CatchBlock>
  name.vb: Collections.Generic.IEnumerable(Of CatchBlock)
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.CatchBlock>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.CatchBlock)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
    href: System.Linq.Expressions.CatchBlock.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
    href: System.Linq.Expressions.CatchBlock.yml
  - name: )
    fullName: )
- uid: System.Linq.Expressions.TryExpression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.TryExpression.yml
  name: TryExpression
  fullName: System.Linq.Expressions.TryExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding}
  definition: System.Collections.Generic.IEnumerable`1
  href: System.Linq.Expressions.MemberBinding.yml
  name: Collections.Generic.IEnumerable<MemberBinding>
  name.vb: Collections.Generic.IEnumerable(Of MemberBinding)
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.MemberBinding>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.MemberBinding)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
    href: System.Linq.Expressions.MemberBinding.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
    href: System.Linq.Expressions.MemberBinding.yml
  - name: )
    fullName: )
- uid: System.Linq.Expressions.MemberMemberBinding
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.MemberMemberBinding.yml
  name: MemberMemberBinding
  fullName: System.Linq.Expressions.MemberMemberBinding
- uid: System.Linq.Expressions.MemberBinding[]
  isExternal: false
  href: System.Linq.Expressions.MemberBinding.yml
  name: MemberBinding[]
  name.vb: MemberBinding()
  fullName: System.Linq.Expressions.MemberBinding[]
  fullName.vb: System.Linq.Expressions.MemberBinding()
  spec.csharp:
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
    href: System.Linq.Expressions.MemberBinding.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.MemberBinding
    name: MemberBinding
    fullName: System.Linq.Expressions.MemberBinding
    href: System.Linq.Expressions.MemberBinding.yml
  - name: ()
    fullName: ()
- uid: System.Linq.Expressions.MemberInitExpression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.MemberInitExpression.yml
  name: MemberInitExpression
  fullName: System.Linq.Expressions.MemberInitExpression
- uid: System.Reflection.ConstructorInfo
  isExternal: false
  href: System.Reflection.ConstructorInfo.yml
  name: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}
  definition: System.Collections.Generic.IEnumerable`1
  href: System.Reflection.MemberInfo.yml
  name: Collections.Generic.IEnumerable<MemberInfo>
  name.vb: Collections.Generic.IEnumerable(Of MemberInfo)
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.MemberInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    fullName: System.Reflection.MemberInfo
    href: System.Reflection.MemberInfo.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    fullName: System.Reflection.MemberInfo
    href: System.Reflection.MemberInfo.yml
  - name: )
    fullName: )
- uid: System.Reflection.MemberInfo[]
  isExternal: true
  name: MemberInfo[]
  name.vb: MemberInfo()
  fullName: System.Reflection.MemberInfo[]
  fullName.vb: System.Reflection.MemberInfo()
  spec.csharp:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    fullName: System.Reflection.MemberInfo
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Linq.Expressions.NewArrayExpression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.NewArrayExpression.yml
  name: NewArrayExpression
  fullName: System.Linq.Expressions.NewArrayExpression
- uid: System.Linq.Expressions.RuntimeVariablesExpression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.RuntimeVariablesExpression.yml
  name: RuntimeVariablesExpression
  fullName: System.Linq.Expressions.RuntimeVariablesExpression
- uid: System.Linq.Expressions.SwitchCase[]
  isExternal: false
  href: System.Linq.Expressions.SwitchCase.yml
  name: SwitchCase[]
  name.vb: SwitchCase()
  fullName: System.Linq.Expressions.SwitchCase[]
  fullName.vb: System.Linq.Expressions.SwitchCase()
  spec.csharp:
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
    href: System.Linq.Expressions.SwitchCase.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
    href: System.Linq.Expressions.SwitchCase.yml
  - name: ()
    fullName: ()
- uid: System.Linq.Expressions.SwitchExpression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.SwitchExpression.yml
  name: SwitchExpression
  fullName: System.Linq.Expressions.SwitchExpression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase}
  definition: System.Collections.Generic.IEnumerable`1
  href: System.Linq.Expressions.SwitchCase.yml
  name: Collections.Generic.IEnumerable<SwitchCase>
  name.vb: Collections.Generic.IEnumerable(Of SwitchCase)
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.SwitchCase>
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.SwitchCase)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
    href: System.Linq.Expressions.SwitchCase.yml
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.SwitchCase
    name: SwitchCase
    fullName: System.Linq.Expressions.SwitchCase
    href: System.Linq.Expressions.SwitchCase.yml
  - name: )
    fullName: )
- uid: System.Linq.Expressions.SwitchCase
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.SwitchCase.yml
  name: SwitchCase
  fullName: System.Linq.Expressions.SwitchCase
- uid: System.Guid
  parent: System
  isExternal: false
  href: System.Guid.yml
  name: Guid
  fullName: System.Guid
- uid: System.Linq.Expressions.CatchBlock[]
  isExternal: false
  href: System.Linq.Expressions.CatchBlock.yml
  name: CatchBlock[]
  name.vb: CatchBlock()
  fullName: System.Linq.Expressions.CatchBlock[]
  fullName.vb: System.Linq.Expressions.CatchBlock()
  spec.csharp:
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
    href: System.Linq.Expressions.CatchBlock.yml
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.CatchBlock
    name: CatchBlock
    fullName: System.Linq.Expressions.CatchBlock
    href: System.Linq.Expressions.CatchBlock.yml
  - name: ()
    fullName: ()
- uid: System.Linq.Expressions.TypeBinaryExpression
  parent: System.Linq.Expressions
  isExternal: false
  href: System.Linq.Expressions.TypeBinaryExpression.yml
  name: TypeBinaryExpression
  fullName: System.Linq.Expressions.TypeBinaryExpression
- uid: System.ArgumentNullException
  isExternal: false
  href: System.ArgumentNullException.yml
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  summary: The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  href: System.InvalidOperationException.yml
  name: InvalidOperationException
  fullName: System.InvalidOperationException
  summary: The exception that is thrown when a method call is invalid for the object's current state.
- uid: System.ArgumentException
  parent: System
  isExternal: false
  href: System.ArgumentException.yml
  name: ArgumentException
  fullName: System.ArgumentException
  summary: The exception that is thrown when one of the arguments provided to a method is not valid.
- uid: System.Reflection.AmbiguousMatchException
  isExternal: false
  href: System.Reflection.AmbiguousMatchException.yml
  name: AmbiguousMatchException
  fullName: System.Reflection.AmbiguousMatchException
  summary: The exception that is thrown when binding to a member results in more than one member matching the binding criteria. This class cannot be inherited.
