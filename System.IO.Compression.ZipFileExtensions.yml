items:
- uid: System.IO.Compression.ZipFileExtensions
  id: ZipFileExtensions
  parent: System.IO.Compression
  children:
  - System.IO.Compression.ZipFileExtensions.CreateEntryFromFile(System.IO.Compression.ZipArchive,System.String,System.String)
  - System.IO.Compression.ZipFileExtensions.CreateEntryFromFile(System.IO.Compression.ZipArchive,System.String,System.String,System.IO.Compression.CompressionLevel)
  - System.IO.Compression.ZipFileExtensions.ExtractToDirectory(System.IO.Compression.ZipArchive,System.String)
  - System.IO.Compression.ZipFileExtensions.ExtractToFile(System.IO.Compression.ZipArchiveEntry,System.String)
  - System.IO.Compression.ZipFileExtensions.ExtractToFile(System.IO.Compression.ZipArchiveEntry,System.String,System.Boolean)
  href: System.IO.Compression.ZipFileExtensions.yml
  name: ZipFileExtensions
  fullName: System.IO.Compression.ZipFileExtensions
  type: Class
  source:
    remote:
      path: src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFileExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFileExtensions.cs
    startLine: 8
  assemblies:
  - System.IO.Compression.ZipFile
  namespace: System.IO.Compression
  summary: Provides extension methods for the @'System.IO.Compression.ZipArchive' and @'System.IO.Compression.ZipArchiveEntry' classes.
  syntax:
    content: public class ZipFileExtensions
    content.vb: Public Class ZipFileExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
- uid: System.IO.Compression.ZipFileExtensions.CreateEntryFromFile(System.IO.Compression.ZipArchive,System.String,System.String)
  id: CreateEntryFromFile(System.IO.Compression.ZipArchive,System.String,System.String)
  parent: System.IO.Compression.ZipFileExtensions
  href: System.IO.Compression.ZipFileExtensions.yml
  name: CreateEntryFromFile(ZipArchive, String, String)
  fullName: System.IO.Compression.ZipFileExtensions.CreateEntryFromFile(System.IO.Compression.ZipArchive, System.String, System.String)
  type: Method
  source:
    remote: &o0
      path: src/System.IO.Compression.ZipFile/ref/System.IO.Compression.ZipFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.IO.Compression.ZipFile/ref/System.IO.Compression.ZipFile.cs
    startLine: 23
  assemblies:
  - System.IO.Compression.ZipFile
  namespace: System.IO.Compression
  summary: Archives a file by compressing it and adding it to the zip archive.
  syntax:
    content: public static ZipArchiveEntry CreateEntryFromFile(ZipArchive destination, string sourceFileName, string entryName)
    content.vb: Public Shared Function CreateEntryFromFile(destination As ZipArchive, sourceFileName As String, entryName As String) As ZipArchiveEntry
    parameters:
    - id: destination
      type: System.IO.Compression.ZipArchive
      description: The zip archive to add the file to.
    - id: sourceFileName
      type: System.String
      description: The path to the file to be archived. You can specify either a relative or an absolute path. A relative path is interpreted as relative to the current working directory.
    - id: entryName
      type: System.String
      description: The name of the entry to create in the zip archive.
    return:
      type: System.IO.Compression.ZipArchiveEntry
      description: A wrapper for the new entry in the zip archive.
  exceptions:
  - type: System.ArgumentException
    description: '*sourceFileName* is @''System.String.Empty'', contains only white space, or contains at least one invalid character.-or-*entryName* is @''System.String.Empty''.'
  - type: System.ArgumentNullException
    description: '*sourceFileName* or *entryName* is null.'
  - type: System.IO.PathTooLongException
    description: In *sourceFileName*, the specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.
  - type: System.IO.DirectoryNotFoundException
    description: '*sourceFileName* is invalid (for example, it is on an unmapped drive).'
  - type: System.IO.IOException
    description: The file specified by *sourceFileName* cannot be opened.
  - type: System.UnauthorizedAccessException
    description: '*sourceFileName* specifies a directory.-or-The caller does not have the required permission to access the file specified by *sourceFileName*.'
  - type: System.IO.FileNotFoundException
    description: The file specified by *sourceFileName* is not found.
  - type: System.NotSupportedException
    description: The *sourceFileName* parameter is in an invalid format.-or-The zip archive does not support writing.
  - type: System.ObjectDisposedException
    description: The zip archive has been disposed.
- uid: System.IO.Compression.ZipFileExtensions.CreateEntryFromFile(System.IO.Compression.ZipArchive,System.String,System.String,System.IO.Compression.CompressionLevel)
  id: CreateEntryFromFile(System.IO.Compression.ZipArchive,System.String,System.String,System.IO.Compression.CompressionLevel)
  parent: System.IO.Compression.ZipFileExtensions
  href: System.IO.Compression.ZipFileExtensions.yml
  name: CreateEntryFromFile(ZipArchive, String, String, CompressionLevel)
  fullName: System.IO.Compression.ZipFileExtensions.CreateEntryFromFile(System.IO.Compression.ZipArchive, System.String, System.String, System.IO.Compression.CompressionLevel)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.Compression.ZipFile/ref/System.IO.Compression.ZipFile.cs
    startLine: 24
  assemblies:
  - System.IO.Compression.ZipFile
  namespace: System.IO.Compression
  summary: Archives a file by compressing it using the specified compression level and adding it to the zip archive.
  syntax:
    content: public static ZipArchiveEntry CreateEntryFromFile(ZipArchive destination, string sourceFileName, string entryName, CompressionLevel compressionLevel)
    content.vb: Public Shared Function CreateEntryFromFile(destination As ZipArchive, sourceFileName As String, entryName As String, compressionLevel As CompressionLevel) As ZipArchiveEntry
    parameters:
    - id: destination
      type: System.IO.Compression.ZipArchive
      description: The zip archive to add the file to.
    - id: sourceFileName
      type: System.String
      description: The path to the file to be archived. You can specify either a relative or an absolute path. A relative path is interpreted as relative to the current working directory.
    - id: entryName
      type: System.String
      description: The name of the entry to create in the zip archive.
    - id: compressionLevel
      type: System.IO.Compression.CompressionLevel
      description: One of the enumeration values that indicates whether to emphasize speed or compression effectiveness when creating the entry.
    return:
      type: System.IO.Compression.ZipArchiveEntry
      description: A wrapper for the new entry in the zip archive.
  exceptions:
  - type: System.ArgumentException
    description: '*sourceFileName* is @''System.String.Empty'', contains only white space, or contains at least one invalid character.-or-*entryName* is @''System.String.Empty''.'
  - type: System.ArgumentNullException
    description: '*sourceFileName* or *entryName* is null.'
  - type: System.IO.DirectoryNotFoundException
    description: '*sourceFileName* is invalid (for example, it is on an unmapped drive).'
  - type: System.IO.PathTooLongException
    description: In *sourceFileName*, the specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.
  - type: System.IO.IOException
    description: The file specified by *sourceFileName* cannot be opened.
  - type: System.UnauthorizedAccessException
    description: '*sourceFileName* specifies a directory.-or-The caller does not have the required permission to access the file specified by *sourceFileName*.'
  - type: System.IO.FileNotFoundException
    description: The file specified by *sourceFileName* is not found.
  - type: System.NotSupportedException
    description: The *sourceFileName* parameter is in an invalid format.-or-The zip archive does not support writing.
  - type: System.ObjectDisposedException
    description: The zip archive has been disposed.
- uid: System.IO.Compression.ZipFileExtensions.ExtractToDirectory(System.IO.Compression.ZipArchive,System.String)
  id: ExtractToDirectory(System.IO.Compression.ZipArchive,System.String)
  parent: System.IO.Compression.ZipFileExtensions
  href: System.IO.Compression.ZipFileExtensions.yml
  name: ExtractToDirectory(ZipArchive, String)
  fullName: System.IO.Compression.ZipFileExtensions.ExtractToDirectory(System.IO.Compression.ZipArchive, System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.Compression.ZipFile/ref/System.IO.Compression.ZipFile.cs
    startLine: 25
  assemblies:
  - System.IO.Compression.ZipFile
  namespace: System.IO.Compression
  summary: Extracts all the files in the zip archive to a directory on the file system.
  syntax:
    content: public static void ExtractToDirectory(ZipArchive source, string destinationDirectoryName)
    content.vb: Public Shared Sub ExtractToDirectory(source As ZipArchive, destinationDirectoryName As String)
    parameters:
    - id: source
      type: System.IO.Compression.ZipArchive
      description: The zip archive to extract files from.
    - id: destinationDirectoryName
      type: System.String
      description: The path to the directory to place the extracted files in. You can specify either a relative or an absolute path. A relative path is interpreted as relative to the current working directory.
  exceptions:
  - type: System.ArgumentException
    description: '*destinationDirectoryName* is @''System.String.Empty'', contains only white space, or contains at least one invalid character.'
  - type: System.ArgumentNullException
    description: '*destinationDirectoryName* is null.'
  - type: System.IO.PathTooLongException
    description: The specified path exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.
  - type: System.IO.DirectoryNotFoundException
    description: The specified path is invalid (for example, it is on an unmapped drive).
  - type: System.IO.IOException
    description: The directory specified by *destinationDirectoryName* already exists.-or-The name of an entry in the archive is @'System.String.Empty', contains only white space, or contains at least one invalid character.-or-Extracting an entry from the archive would create a file that is outside the directory specified by *destinationDirectoryName*. (For example, this might happen if the entry name contains parent directory accessors.) -or-Two or more entries in the archive have the same name.
  - type: System.UnauthorizedAccessException
    description: The caller does not have the required permission to write to the destination directory.
  - type: System.NotSupportedException
    description: '*destinationDirectoryName* contains an invalid format.'
  - type: System.IO.InvalidDataException
    description: An archive entry cannot be found or is corrupt.-or-An archive entry was compressed by using a compression method that is not supported.
- uid: System.IO.Compression.ZipFileExtensions.ExtractToFile(System.IO.Compression.ZipArchiveEntry,System.String)
  id: ExtractToFile(System.IO.Compression.ZipArchiveEntry,System.String)
  parent: System.IO.Compression.ZipFileExtensions
  href: System.IO.Compression.ZipFileExtensions.yml
  name: ExtractToFile(ZipArchiveEntry, String)
  fullName: System.IO.Compression.ZipFileExtensions.ExtractToFile(System.IO.Compression.ZipArchiveEntry, System.String)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.Compression.ZipFile/ref/System.IO.Compression.ZipFile.cs
    startLine: 26
  assemblies:
  - System.IO.Compression.ZipFile
  namespace: System.IO.Compression
  summary: Extracts an entry in the zip archive to a file.
  syntax:
    content: public static void ExtractToFile(ZipArchiveEntry source, string destinationFileName)
    content.vb: Public Shared Sub ExtractToFile(source As ZipArchiveEntry, destinationFileName As String)
    parameters:
    - id: source
      type: System.IO.Compression.ZipArchiveEntry
      description: The zip archive entry to extract a file from.
    - id: destinationFileName
      type: System.String
      description: The path of the file to create from the contents of the entry. You can  specify either a relative or an absolute path. A relative path is interpreted as relative to the current working directory.
  exceptions:
  - type: System.ArgumentException
    description: '*destinationFileName* is a zero-length string, contains only white space, or contains one or more invalid characters as defined by @''System.IO.Path.InvalidPathChars''.-or-*destinationFileName* specifies a directory.'
  - type: System.ArgumentNullException
    description: '*destinationFileName* is null.'
  - type: System.IO.PathTooLongException
    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.
  - type: System.IO.DirectoryNotFoundException
    description: The specified path is invalid (for example, it is on an unmapped drive).
  - type: System.IO.IOException
    description: '*destinationFileName* already exists.-or- An I/O error occurred.-or-The entry is currently open for writing.-or-The entry has been deleted from the archive.'
  - type: System.UnauthorizedAccessException
    description: The caller does not have the required permission to create the new file.
  - type: System.IO.InvalidDataException
    description: The entry is missing from the archive, or is corrupt and cannot be read.-or-The entry has been compressed by using a compression method that is not supported.
  - type: System.ObjectDisposedException
    description: The zip archive that this entry belongs to has been disposed.
  - type: System.NotSupportedException
    description: '*destinationFileName* is in an invalid format. -or-The zip archive for this entry was opened in @''System.IO.Compression.ZipArchiveMode.Create'' mode, which does not permit the retrieval of entries.'
- uid: System.IO.Compression.ZipFileExtensions.ExtractToFile(System.IO.Compression.ZipArchiveEntry,System.String,System.Boolean)
  id: ExtractToFile(System.IO.Compression.ZipArchiveEntry,System.String,System.Boolean)
  parent: System.IO.Compression.ZipFileExtensions
  href: System.IO.Compression.ZipFileExtensions.yml
  name: ExtractToFile(ZipArchiveEntry, String, Boolean)
  fullName: System.IO.Compression.ZipFileExtensions.ExtractToFile(System.IO.Compression.ZipArchiveEntry, System.String, System.Boolean)
  type: Method
  source:
    remote: *o0
    path: src/System.IO.Compression.ZipFile/ref/System.IO.Compression.ZipFile.cs
    startLine: 27
  assemblies:
  - System.IO.Compression.ZipFile
  namespace: System.IO.Compression
  summary: Extracts an entry in the zip archive to a file, and optionally overwrites an existing file that has the same name.
  syntax:
    content: public static void ExtractToFile(ZipArchiveEntry source, string destinationFileName, bool overwrite)
    content.vb: Public Shared Sub ExtractToFile(source As ZipArchiveEntry, destinationFileName As String, overwrite As Boolean)
    parameters:
    - id: source
      type: System.IO.Compression.ZipArchiveEntry
      description: The zip archive entry to extract a file from.
    - id: destinationFileName
      type: System.String
      description: The path of the file to create from the contents of the entry. You can specify either a relative or an absolute path. A relative path is interpreted as relative to the current working directory.
    - id: overwrite
      type: System.Boolean
      description: true to overwrite an existing file that has the same name as the destination file; otherwise, false.
  exceptions:
  - type: System.ArgumentException
    description: '*destinationFileName* is a zero-length string, contains only white space, or contains one or more invalid characters as defined by @''System.IO.Path.InvalidPathChars''.-or-*destinationFileName* specifies a directory.'
  - type: System.ArgumentNullException
    description: '*destinationFileName* is null.'
  - type: System.IO.PathTooLongException
    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.
  - type: System.IO.DirectoryNotFoundException
    description: The specified path is invalid (for example, it is on an unmapped drive).
  - type: System.IO.IOException
    description: '*destinationFileName* already exists and *overwrite* is false.-or- An I/O error occurred.-or-The entry is currently open for writing.-or-The entry has been deleted from the archive.'
  - type: System.UnauthorizedAccessException
    description: The caller does not have the required permission to create the new file.
  - type: System.IO.InvalidDataException
    description: The entry is missing from the archive or is corrupt and cannot be read.-or-The entry has been compressed by using a compression method that is not supported.
  - type: System.ObjectDisposedException
    description: The zip archive that this entry belongs to has been disposed.
  - type: System.NotSupportedException
    description: '*destinationFileName* is in an invalid format. -or-The zip archive for this entry was opened in @''System.IO.Compression.ZipArchiveMode.Create'' mode, which does not permit the retrieval of entries.'
references:
- uid: System.IO.Compression
  isExternal: false
  name: System.IO.Compression
  fullName: System.IO.Compression
- uid: System.Object
  parent: System
  isExternal: false
  href: System.Object.yml
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IO.Compression.ZipArchive
  parent: System.IO.Compression
  isExternal: false
  href: System.IO.Compression.ZipArchive.yml
  name: ZipArchive
  fullName: System.IO.Compression.ZipArchive
- uid: System.String
  parent: System
  isExternal: false
  href: System.String.yml
  name: String
  fullName: System.String
- uid: System.IO.Compression.ZipArchiveEntry
  parent: System.IO.Compression
  isExternal: false
  href: System.IO.Compression.ZipArchiveEntry.yml
  name: ZipArchiveEntry
  fullName: System.IO.Compression.ZipArchiveEntry
- uid: System.IO.Compression.CompressionLevel
  parent: System.IO.Compression
  isExternal: false
  href: System.IO.Compression.CompressionLevel.yml
  name: CompressionLevel
  fullName: System.IO.Compression.CompressionLevel
- uid: System.Boolean
  parent: System
  isExternal: false
  href: System.Boolean.yml
  name: Boolean
  fullName: System.Boolean
- uid: System.ArgumentException
  parent: System
  isExternal: false
  href: System.ArgumentException.yml
  name: ArgumentException
  fullName: System.ArgumentException
  summary: The exception that is thrown when one of the arguments provided to a method is not valid.
- uid: System.ArgumentNullException
  isExternal: false
  href: System.ArgumentNullException.yml
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  summary: The exception that is thrown when a null reference (Nothing in Visual Basic) is passed to a method that does not accept it as a valid argument.
- uid: System.IO.PathTooLongException
  isExternal: false
  href: System.IO.PathTooLongException.yml
  name: PathTooLongException
  fullName: System.IO.PathTooLongException
  summary: The exception that is thrown when a path or file name is longer than the system-defined maximum length.
- uid: System.IO.DirectoryNotFoundException
  isExternal: false
  href: System.IO.DirectoryNotFoundException.yml
  name: DirectoryNotFoundException
  fullName: System.IO.DirectoryNotFoundException
  summary: The exception that is thrown when part of a file or directory cannot be found.
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  href: System.IO.IOException.yml
  name: IOException
  fullName: System.IO.IOException
  summary: The exception that is thrown when an I/O error occurs.
- uid: System.UnauthorizedAccessException
  parent: System
  isExternal: false
  href: System.UnauthorizedAccessException.yml
  name: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
  summary: The exception that is thrown when the operating system denies access because of an I/O error or a specific type of security error.
- uid: System.IO.FileNotFoundException
  isExternal: false
  href: System.IO.FileNotFoundException.yml
  name: FileNotFoundException
  fullName: System.IO.FileNotFoundException
  summary: The exception that is thrown when an attempt to access a file that does not exist on disk fails.
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  href: System.NotSupportedException.yml
  name: NotSupportedException
  fullName: System.NotSupportedException
  summary: The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality.
- uid: System.ObjectDisposedException
  isExternal: false
  href: System.ObjectDisposedException.yml
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
  summary: The exception that is thrown when an operation is performed on a disposed object.
- uid: System.IO.InvalidDataException
  isExternal: false
  href: System.IO.InvalidDataException.yml
  name: InvalidDataException
  fullName: System.IO.InvalidDataException
  summary: The exception that is thrown when a data stream is in an invalid format.
